[
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: heaps] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 0,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: arrays] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 1,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: trees] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 2,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: graphs] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 3,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: sorting] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 4,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: queue] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 5,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: linked lists] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 6,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: easy]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 0
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: medium]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 1
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which algorithm finds the shortest path in weighted graphs?\nA. BFS\nB. DFS\nC. Dijkstra\nD. Kruskal\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "What is the time complexity of inserting an element into a heap?\nA. O(1)\nB. O(n)\nC. O(log n)\nD. O(n log n)\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure allows insertion from both ends?\nA. Stack\nB. Deque\nC. Queue\nD. Tree\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure is used in recursion?\nA. Queue\nB. Linked List\nC. Stack\nD. Graph\n\nAnswer: C",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which data structure works on FIFO principle?\nA. Stack\nB. Queue\nC. Array\nD. Graph\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm is stable?\nA. Quick Sort\nB. Merge Sort\nC. Heap Sort\nD. Selection Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which traversal gives sorted output in BST?\nA. Preorder\nB. Inorder\nC. Postorder\nD. Level order\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  },
  {
    "input_text": "[TOPIC: stack] [DIFFICULTY: hard]",
    "target_text": "Which sorting algorithm has the best average-case performance?\nA. Bubble Sort\nB. Merge Sort\nC. Selection Sort\nD. Insertion Sort\n\nAnswer: B",
    "topic_label": 7,
    "difficulty_label": 2
  }
]