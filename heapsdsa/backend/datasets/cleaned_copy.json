[
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: To check if a graph is bipartite using an adjacency matrix, we perform BFS or DFS which runs in O(V^2) time due to the dense matrix representation.",
        "target_text": "Question: What would the time complexity to check if an undirected graph with V vertices and E edges is Bipartite or not given its adjacency matrix?\nChoices:\na) O(E^2)\nb) O(V^2)\nc) O(E)\nd) O(V)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Dynamic Programming uses memoization to store intermediate results of subproblems, which helps avoid redundant computations and improve efficiency.",
        "target_text": "Question: Which of the following uses memorization?\nChoices:\na) Greedy approach\nb) Divide and conquer approach\nc) Dynamic programming approach\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a balanced BST, reporting all elements in a range [a, b] requires a traversal to the range (O(log n)) and printing k elements, resulting in \u03b8(log n + k) time.",
        "target_text": "Question: In a balanced binary search tree with n elements, what is the worst-case time complexity of reporting all elements in the range [a,b]? Assume that the number of reported elements is k.\nChoices:\na) \u03b8(log n)\nb) \u03b8(log n + k)\nc) \u03b8(k log n)\nd) \u03b8(n log k)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Van Emde Boas tree supports operations like finding the minimum and maximum in constant O(1) time due to its structure and recursive splitting of the universe.",
        "target_text": "Question: What is the time complexity for finding a maximum and minimum integer in Van Emde Boas data structure?\nChoices:\na) O(log M!)\nb) O(M!)\nc) O(1)\nd) O(log log M)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Finding all maximal palindromes in a string can be done in linear time O(n) using Manacher's algorithm.",
        "target_text": "Question: What is a time complexity for finding all the maximal palindrome in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) O(log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Building a ternary heap (heap with 3 children per node) using a bottom-up heapify approach takes linear time O(n), similar to binary heaps.",
        "target_text": "Question: What is the time complexity for creating a ternary heap using swapping?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Interpolation search is efficient on uniformly distributed, sorted data. It achieves a time complexity of \u03b8(log log n) in the best case when distribution is ideal.",
        "target_text": "Question: If the data collection is in sorted form and equally distributed then the run time complexity of interpolation search is __________\nChoices:\na) \u03b8(n)\nb) \u03b8(1)\nc) \u03b8(log n)\nd) \u03b8(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting at the beginning of a triply linked list (similar to a doubly linked list but with an extra pointer) still takes O(1) time when the pointer to the head is known.",
        "target_text": "Question: Which among the following is the time complexity for inserting at the beginning of a triply linked list?\nChoices:\na) O(n)\nb) O(1)\nc) O(log n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Rope data structures enable efficient string manipulation. Splitting a string in a rope (balanced binary tree) can be done in O(log n) time.",
        "target_text": "Question: What is the time complexity for splitting the string into two new strings in the rope data structure?\nChoices:\na) O(n^2)\nb) O(n!)\nc) O(log n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Finding x-pattern occurrences of length n can be done in \u03b8(n + x) time using pattern matching algorithms like KMP or Aho-Corasick.",
        "target_text": "Question: What is a time complexity for x pattern occurrence of length n?\nChoices:\na) O(log n!)\nb) \u03b8(n!)\nc) O(n^2)\nd) \u03b8(n + x)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Skip lists offer logarithmic time complexities similar to balanced binary search trees for insert, delete, and search operations.",
        "target_text": "Question: To which data structure are skip lists similar in terms of time complexities in worst and best cases?\nChoices:\na) balanced binary search trees\nb) binary search trees\nc) binary trees\nd) linked lists\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an adjacency matrix, each vertex is checked against all others, resulting in O(V^2) time to compute or count edges.",
        "target_text": "Question: The time complexity to calculate the number of edges in a graph whose information is stored in form of an adjacency matrix is __________\nChoices:\na) O(V)\nb) O(E^2)\nc) O(E)\nd) O(V^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Quick Sort uses the Divide and Conquer paradigm, where the array is partitioned recursively based on pivots.",
        "target_text": "Question: Quick sort algorithm is an example of __________.\nChoices:\na) Greedy approach\nb) Improved binary search\nc) Dynamic Programming\nd) Divide and conquer\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, deleting a node is O(1) if a pointer to the node and its previous node is already available. This is the best-case time complexity.",
        "target_text": "Question: What is the best case time complexity of deleting a node in a Singly Linked list?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the worst case, deleting an element from an unsorted data structure may require scanning all elements, resulting in O(n) time.",
        "target_text": "Question: What is the worst case time complexity of delete operation (n is the number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a hash table using chaining with doubly linked lists, insertion is done at the head or tail in O(1) time, and search operations can also be optimized to O(1) under ideal hashing.",
        "target_text": "Question: What is the time complexity of search function in a hash table using a doubly linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A skew heap uses recursion to perform merges. A recursive implementation can fail if the stack depth exceeds limits, especially in degenerate cases. Hence, stack space becomes a limitation.",
        "target_text": "Question: Why would a recursive implementation fail in skew heaps?\nChoices:\na) skew heaps are self adjusting\nb) efficiency gets reduced\nc) lack of stack space\nd) time complexity\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black Trees provide logarithmic time complexity for insert, delete, and search operations, including finding predecessor and successor.",
        "target_text": "Question: What are the operations that could be performed in O(log n) time complexity by red-black tree?\nChoices:\na) insertion, deletion, finding predecessor, successor\nb) only insertion\nc) only finding predecessor, successor\nd) for sorting\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Free memory blocks in memory management systems are typically maintained in a circular linked list and organized by increasing address to support merging of adjacent blocks.",
        "target_text": "Question: How are free blocks linked together mostly and in what addressing order?\nChoices:\na) circular linked list and increasing addressing order\nb) linked list and decreasing addressing order\nc) linked list and in no addressing order\nd) none of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Performing \u03b8(N) delete, O(log N) insert and find, and \u03b8(N) decrease-key operations on a sorted doubly linked list gives an overall complexity of O(N log N).",
        "target_text": "Question: N items are stored in a sorted doubly linked list. For a delete operation, a pointer is provided to the record to be deleted. For a decrease-key operation, a pointer is provided to the record on which the operation is to be performed. An algorithm performs the following operations on the list in this order: \u03b8(N) delete, O(log N) insert, O(log N) find, and \u03b8(N) decrease-key. What is the time complexity of all these operations put together?\nChoices:\na) O(log^2 N)\nb) O(N)\nc) O(N log N)\nd) \u03b8(N^2 log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Circular linked lists are often used in CPU scheduling, such as round-robin schedulers, to allocate time slices to multiple processes in a loop.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) Recursive function calls\nb) Undo operation in a text editor\nc) Implement Hash Tables\nd) Allocating CPU to resources\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The naive nearest neighbor search in an unsorted list of N items requires scanning all points, resulting in O(N) time in the worst case.",
        "target_text": "Question: What is the worst case time complexity of finding the nearest neighbour?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(N^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Maintaining dynamic sets of weighted trees using advanced data structures (like union-find with union by rank and path compression) can be achieved in O(log n) time.",
        "target_text": "Question: What is the time complexity for maintaining a dynamic set of weighted trees?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(log n)\nd) O(n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, the last node's 'next' pointer points back to the head instead of NULL, ensuring the list loops continuously.",
        "target_text": "Question: What differentiates a circular linked list from a normal linked list?\nChoices:\na) You cannot have the 'next' pointer point to null in a circular linked list\nb) It is faster to traverse the circular linked list\nc) In a circular linked list, each node points to the previous node instead of the next node\nd) Head node is known in circular linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In an unrolled linked list, insertion may require shifting elements in the array part or splitting nodes, which could take linear time O(n) in the worst case.",
        "target_text": "Question: Which among the following is the time complexity for inserting an element in an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap (where each node has 3 children), decreasing a key's priority involves bubbling up, taking O(log n / log 3) time.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a priority queue implemented using a linear array, insertion based on key requires scanning for the correct position, leading to O(n) time complexity.",
        "target_text": "Question: What is the time complexity to insert a node based on key in a priority queue?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Pairing heaps are self-adjusting heaps. Their time complexity analysis was inspired by that of splay trees, which also use amortized analysis.",
        "target_text": "Question: Pairing heaps time complexity was inspired by that of?\nChoices:\na) splay tree\nb) treap\nc) red-black tree\nd) avl tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In chaining with a list head, inserting at the beginning of the linked list takes constant time O(1) under ideal hashing assumptions.",
        "target_text": "Question: What is the time complexity of insert function in a hash table using list head?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Van Emde Boas trees offer fast operations for search, insert, and delete in O(log log M) time, where M is the universe size.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) O(M!)\nb) O(log M!)\nc) O(log log M)\nd) O(M^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing provides O(1) time complexity on average for search operations, assuming a good hash function and low collision rate.",
        "target_text": "Question: Which searching technique takes O(1) time complexity for searching the data?\nChoices:\na) Binary Search\nb) Linear Search\nc) AVL Tree Search\nd) Hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: In the worst case (e.g., sorted input), Quick Sort's partitioning may lead to unbalanced recursion, giving time complexity O(n^2/2).",
        "target_text": "Question: In worst case Quick Sort has order __________.\nChoices:\na) O(n log n)\nb) O(n^2/2)\nc) O(log n)\nd) O(n^2/4)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In dynamic tree structures like auxiliary trees (used in link-cut trees), update operations (e.g., link, cut) can have amortized time complexity of O(log log n), depending on implementation.",
        "target_text": "Question: What is the time complexity for the update cost on auxiliary trees?\nChoices:\na) O(log log n)\nb) (k-1) O(log n)\nc) k^2 O(log n)\nd) (k+1) O(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a Directed Acyclic Word Graph (DAWG), checking if S1 is a substring of S2 takes O(|S1|) time as it depends only on the length of the pattern string.",
        "target_text": "Question: What is the time complexity to check if a string (length S1) is a substring of another string (length S2) stored in a Directed Acyclic Word Graph, given S2 > S1?\nChoices:\na) O(S1)\nb) O(S2)\nc) O(S1 + S2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting n elements into a sorted linked list one by one requires traversal for each insert, resulting in a total time of \u03b8(n^2) in the worst case.",
        "target_text": "Question: What is the worst case time complexity of inserting n elements into an empty linked list, if the linked list needs to be maintained in sorted order?\nChoices:\na) \u03b8(n)\nb) \u03b8(n log n)\nc) \u03b8(n^2)\nd) \u03b8(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting prefix notation to infix using a stack-based approach processes each token once, resulting in O(n) time where n is the number of symbols.",
        "target_text": "Question: The time complexity of converting a prefix notation to infix notation is __________\nChoices:\na) O(n) where n is the length of the equation\nb) O(n) where n is number of operands\nc) O(1)\nd) O(log n) where n is length of the equation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Tower of Hanoi problem has exponential time complexity O(2\u207f), making it one of the slowest recursive algorithms with the highest runtime.",
        "target_text": "Question: Program with highest run-time complexity is __________\nChoices:\na) Tower of Hanoi\nb) Fibonacci Series\nc) Prime Number Series\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Van Emde Boas trees support operations like insert, delete, and search in O(log log M) time, where M is the universe size.",
        "target_text": "Question: What is the time complexity for inserting a key or integer in Van Emde Boas data structure?\nChoices:\na) O(log M!)\nb) O(M!)\nc) O(M^2)\nd) O(log log M)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting an element at the front of a linked list when the head is known is a constant-time operation, as no traversal is needed.",
        "target_text": "Question: What would be the asymptotic time complexity to insert an element at the front of the linked list (head is known)?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The \u03b8 (\u0398) notation in asymptotic analysis represents the tight bound, usually associated with the average case but also applies when upper and lower bounds match.",
        "target_text": "Question: The \u03b8 notation in asymptotic evaluation represents __________\nChoices:\na) Base case\nb) Average case\nc) Worst case\nd) NULL case\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Floyd-Warshall algorithm is a dynamic programming-based algorithm used to find the shortest paths between all pairs of vertices in O(V^3) time.",
        "target_text": "Question: Floyd Warshall Algorithm used to solve the shortest path problem has a time complexity of __________\nChoices:\na) O(V^2)\nb) O(V^3)\nc) O(E*V)\nd) O(E^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black trees are preferred over AVL trees in scenarios with frequent insertions and deletions because they require fewer rotations and offer faster amortized performance.",
        "target_text": "Question: When would it be optimal to prefer Red-black trees over AVL trees?\nChoices:\na) when there are more insertions or deletions\nb) when more search is needed\nc) when tree must be balanced\nd) when log(nodes) time complexity is needed\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a hash table using chaining with doubly linked lists, deletion is efficient and performed in constant time O(1) if a pointer to the node is provided.",
        "target_text": "Question: What is the time complexity of delete function in the hash table using a doubly linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Evaluating a postfix expression (Reverse Polish Notation) using a stack processes each token once, leading to linear time complexity O(n).",
        "target_text": "Question: What is the time complexity of evaluation of postfix expression algorithm?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N^2)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Floyd-Warshall algorithm applies dynamic programming to solve the all-pairs shortest path problem in a weighted graph.",
        "target_text": "Question: The Floyd-Warshall algorithm for all-pair shortest paths computation is based on:\nChoices:\na) Greedy paradigm.\nb) Divide-and-Conquer paradigm.\nc) Dynamic Programming paradigm.\nd) None of the above.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In naive merging of two sorted arrays (or lists), each element must be compared and placed into a new array, resulting in a worst-case time complexity of O(N).",
        "target_text": "Question: The worst case analysis for a naive merge is given as?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), the worst case occurs when the tree becomes skewed, leading to O(n) complexity. The average case for balanced BSTs is O(log n).",
        "target_text": "Question: What are the worst case and average case complexities of a binary search tree?\nChoices:\na) O(n), O(n)\nb) O(log n), O(log n)\nc) O(log n), O(n)\nd) O(n), O(log n)\nAnswer: d"
    }
]