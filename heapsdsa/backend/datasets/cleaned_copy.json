[
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Infix expressions use standard operator precedence and parentheses. To convert an infix expression to postfix (Reverse Polish Notation), operators are placed after their operands according to precedence and associativity. This avoids the need for parentheses.",
        "target_text": "Question: What is the corresponding postfix expression for the given infix expression?\nChoices:\na) ab*cdef/^*g-h+\nb) abcdef^/*g*h*+\nc) abcd*^ed/g*-h*+\nd) abc*de^fg/*-*h+\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A plane graph is a graph drawn on a plane without any edge crossings. Euler's formula states that for any connected plane graph, V - E + R = 2. If a plane graph has multiple connected components, the formula generalizes to V - E + R = C + 1, where C is the number of components.",
        "target_text": "Question: Given a plane graph, G having 2 connected components, 6 vertices, 7 edges and 4 regions, what will be the number of connected components?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The given C++ program performs a depth-first traversal (DFS) on a graph represented by an adjacency matrix. Starting from vertex 0, it recursively visits all unvisited neighbors. The output corresponds to the order in which the DFS visits the vertices based on the adjacency matrix.",
        "target_text": "Question: What would be the output of the following C++ program if the given input is\n0 0 0 1 1\n0 0 0 0 1\n0 0 0 1 0\n1 0 1 0 0\n1 1 0 0 0\n \n#include <bits/stdc++.h>\nusing namespace std;\nbool visited[5];\nint G[5][5];\n \nvoid fun(int i)\n{\n cout<<i<<\" \";\n visited[i]=true;\n for(int j=0;j<5;j++)\n  if(!visited[j]&&G[i][j]==1)\n   fun(j);\n}\n \nint main()\n{   \n for(int i=0;i<5;i++)\n  for(int j=0;j<5;j++)\n   cin>>G[i][j];\n \n for(int i=0;i<5;i++)\n  visited[i]=0;\n \n fun(0);\n  return 0;\n}\nChoices:\na) 0 2 3 1 4\nb) 0 3 2 4 1\nc) 0 2 3 4 1\nd) 0 3 2 1 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In an infix expression, operators are placed between operands. This is the common human-readable format for arithmetic expressions. The recursive pattern of producing left expression -> operator -> right expression characterizes infix notation.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The Rope data structure is a binary tree used to efficiently store and manipulate very long strings. In programming, a Rope is also known as a Cord. It allows for efficient concatenation and substring operations.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) Cord\nb) String\nc) Array\nd) Linked List\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Two balanced binary search trees with m and n elements can be merged into one balanced BST in O(m+n) time. The process typically involves converting both trees to sorted arrays, merging them, and reconstructing a balanced BST from the merged array.",
        "target_text": "Question: Two balanced binary trees are given with m and n elements respectively. They can be merged into a balanced binary search tree in __________ time.\nChoices:\na) O(m+n)\nb) O(mn)\nc) O(m)\nd) O(mlog n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of binary trees that can be formed with a given set of nodes and a specific traversal sequence depends on the properties of binary trees and Catalan numbers. For 3 nodes with a fixed postorder traversal (e.g., N, M, L), only a limited number of trees can match that sequence.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a tree in which every node has either 0 or 2 children. In such a tree, if the number of internal nodes is I, then the number of leaves (L) is always L = I + 1. This is a fundamental property derived from the structure of full binary trees.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of leaves L are?\nChoices:\na) L = 2*I\nb) L = I + 1\nc) L = I - 1\nd) L = 2*I - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, accessing the k-th element from the beginning can be done in O(1) time if a pointer to the head is maintained and traversed. However, finding the k-th element from the end generally requires a full traversal of the list or use of two pointers, making the time complexity O(n).",
        "target_text": "Question: What are the time complexities of finding 8th element from beginning and 8th element from end in a singly linked list? Let n be the number of nodes in linked list, you may assume that n > 8.\nChoices:\na) O(n) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(1) and O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B-trees and B+ trees are used in databases and file systems to maintain sorted data and allow searches, insertions, and deletions in logarithmic time. B+ trees usually have a greater fanout than B-trees and support simpler deletion. However, B+ trees do not necessarily have greater depth than B-trees, making that statement False.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) Compared to B-tree, B+ -tree has larger fanout\nb) Deletion in B-tree is more complicated than in B+ -tree\nc) B+ -tree has greater depth than corresponding B-tree\nd) Both B-tree and B+ -tree have same search and insertion efficiencies\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-trees are a form of balanced binary search trees that simplify the balancing operations of red-black trees. The tree structure is designed to consider only two shapes when performing rotations: skew and split, which simplifies rebalancing. Thus, only 2 structural shapes need to be handled.",
        "target_text": "Question: How many different shapes does maintenance of AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A suffix tree is a specialized data structure that allows efficient operations on substrings of a string, such as pattern matching, longest repeated substring, or finding substrings in linear time. This makes it ideal for fast string operations.",
        "target_text": "Question: Which tree allows fast implementation of string operation?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Separate chaining is a method used in hashing to handle collisions by maintaining a linked list of all elements that hash to the same index. Although effective in managing collisions, this technique requires additional memory due to the use of pointers and linked lists.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining using linked lists?\nChoices:\na) It requires many pointers\nb) It requires linked lists\nc) It uses array\nd) It does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An edge cluster in graph theory typically refers to a grouping of edges that are densely connected or form a small subgraph. If an edge cluster is defined as a minimal group, it usually starts with a single edge connecting two vertices.",
        "target_text": "Question: How many edges are present in Edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A Cartesian tree is a binary tree derived from a sequence of values where the in-order traversal yields the original sequence and each node follows heap property. It is not height-balanced, and if the input values are distinct, the Cartesian tree is uniquely determined.",
        "target_text": "Question: Which of the below statements are True?\ni. Cartesian tree is not a height balanced tree\nii. Cartesian tree of a sequence of unique numbers can be uniquely generated\nChoices:\na) both statements are True\nb) only i. is True\nc) only ii. is True\nd) both are False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In Java, the Stack class from `java.util` throws an `EmptyStackException` if a pop operation is attempted on an empty stack. This exception is a subclass of `RuntimeException` and is thrown at runtime.",
        "target_text": "Question: What happens when you pop from an empty stack while implementing using the Stack ADT in Java?\nChoices:\na) Undefined error\nb) Compiler displays a warning\nc) EmptyStackException is thrown\nd) NoStackException is thrown\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-3 tree is a balanced search tree in which every internal node has either two or three children. The height of a 2-3 tree with n elements lies between log base 3 of (n+1) and log base 2 of (n+1), ensuring logarithmic search time.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log3(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sparse array is a data structure that efficiently stores and processes arrays with a large number of zero or default values. Instead of allocating space for every element, it stores only non-zero values and their positions, making it memory-efficient compared to a naive array.",
        "target_text": "Question: What is the difference between a normal (naive) array and a sparse array?\nChoices:\na) Sparse array can hold more elements than a normal array\nb) Sparse array is memory efficient\nc) Sparse array is dynamic\nd) A naive array is more efficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: To print the right view of a binary tree, level order traversal using a queue is used. The rightmost node at each level is printed. In the provided C++ code, the queue must be properly initialized with the root node. If not, the traversal won't begin.",
        "target_text": "Question: What is wrong in the below code of printing Right View of a binary tree using the Queue data structure?\n#include <iostream>\n#include <queue>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\nvoid printRightView(Node* root) {\n    if (root == nullptr) return;\n    queue<Node*> q;\n    q.push(root);\n    while (!q.empty()) {\n        int n = q.size();\n        for (int i = 0; i < n; i++) {\n            Node* x = q.front();\n            q.pop();\n            if (i == n - 1) {\n                cout << x->data << \" \";\n            }\n            if (x->left) {\n                q.push(x->left);\n            }\n            if (x->right) {\n                q.push(x->right);\n            }\n        }\n    }\n}\nChoices:\na) We have not initialized anything in the Queue\nb) Queue will never be empty.\nc) left and right nodes of the tree are null.\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a balanced binary search tree, summing all elements between two values L and H requires traversing only relevant branches. The tightest time bound depends on the number of such elements (m) and the tree's properties, leading to a time complexity involving logarithmic and linear components.",
        "target_text": "Question: Suppose we have a balanced binary search tree T holding n numbers. We are given two numbers L and H and wish to sum up all the numbers in T that lie between L and H. Suppose there are m such numbers in T. If the tightest upper bound on the time to compute the sum is O(n^a log^b n + m*log^d n), the value of a + 10b + 100c + 1000d is __________.\nChoices:\na) 60\nb) 110\nc) 210\nd) 50\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The trace of a matrix is defined as the sum of its diagonal elements from the top-left to the bottom-right. This is commonly calculated by iterating over the matrix where row and column indices are equal (i == j).",
        "target_text": "Question: What does the following piece of code do?\nfor(int i = 0; i < row; i++)\n{  \n    for(int j = 0; j < column; j++)\n    {\n        if(i == j)\n            sum = sum + (array[i][j]);\n    }\n}\nSystem.out.println(sum);\nChoices:\na) Normal of a matrix\nb) Trace of a matrix\nc) Square of a matrix\nd) Transpose of a matrix\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In separate chaining hashing, collisions are resolved using linked lists. The load factor is defined as the number of elements divided by the number of buckets. A load factor of 1 is typically optimal, meaning the number of elements is equal to the number of buckets.",
        "target_text": "Question: What should be the load factor for separate chaining hashing?\nChoices:\na) 0.5\nb) 1\nc) 1.5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Rotating an array by k positions involves moving the elements such that each element shifts by k places. For example, rotating [1, 2, 3, 4, 5] by 2 positions to the left results in [3, 4, 5, 1, 2].",
        "target_text": "Question: What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?\nChoices:\na) 2, 1, 3, 4, 5\nb) 3, 4, 5, 1, 2\nc) 4, 5, 1, 2, 3\nd) 1, 2, 3, 5, 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Universal hashing is a method where the hash function is chosen at random from a family of functions. This randomization provides good average-case performance and protects against worst-case scenarios caused by poor hash function choices.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) hashing by division\nb) hashing by multiplication\nc) universal hashing\nd) open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A doubly linked list allows traversal in both forward and backward directions using two pointers per node. While more flexible, it requires extra space and pointer handling, making it more complex to implement than a singly linked list.",
        "target_text": "Question: Which of the following is False about a doubly linked list?\nChoices:\na) We can navigate in both the directions\nb) It requires more space than a singly linked list\nc) The insertion and deletion of a node take a bit longer\nd) Implementing a doubly linked list is easier than singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a Directed Acyclic Graph (DAG), the shortest paths from a single source can be computed efficiently using topological sorting. Once the vertices are sorted, the shortest paths can be calculated in linear time with respect to the number of vertices and edges.",
        "target_text": "Question: Which of the following algorithms can be used to efficiently calculate single source shortest paths in a Directed Acyclic Graph?\nChoices:\na) Dijkstra\nb) Bellman-Ford\nc) Topological Sort\nd) Strongly Connected Component\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Many recursive algorithms can be rewritten in a non-recursive way using an explicit stack. This is common when converting recursive implementations to iterative versions for better memory control or performance.",
        "target_text": "Question: What data structure would you most likely see in non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked List\nc) Tree\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In the linked list implementation of a queue, the `rear` pointer is updated when a new node is inserted. The `front` pointer remains unchanged unless the queue is empty before insertion.",
        "target_text": "Question: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A circular queue is a linear data structure in which the last position is connected back to the first to make a circle. It is also known as a ring buffer and is used in buffering and scheduling.",
        "target_text": "Question: Circular Queue is also known as __________\nChoices:\na) Ring Buffer\nb) Square Buffer\nc) Rectangle Buffer\nd) Curve Buffer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a Last-In-First-Out (LIFO) data structure, meaning the last element pushed onto the stack is the first one to be popped off. So if A, B, C, and D are pushed in that order, the removal order will be D, C, B, A.",
        "target_text": "Question: If the elements 'A', 'B', 'C' and 'D' are placed in a stack and are deleted one at a time, what is the order of removal?\nChoices:\na) ABCD\nb) DCBA\nc) DCAB\nd) ABDC\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: When merging multiple sorted files, the number of comparisons depends on the total number of elements and the strategy used. Optimal merging of 4 files with 15, 3, 9, and 8 elements minimizes comparisons to 15 when using an efficient strategy like Huffman coding or binary merging trees.",
        "target_text": "Question: The total number of comparisons required to merge 4 sorted files containing 15, 3, 9 and 8 records into a single sorted file is __________.\nChoices:\na) 66\nb) 39\nc) 15\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In a binary search tree (BST), the left child has a value less than its parent, but in general binary trees this condition may not hold. Thus, the statement only applies to BSTs, not to all trees.",
        "target_text": "Question: Left child of parent node has value lesser than the parent node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap, the largest key is always located at the root node because each parent must be greater than or equal to its children. This structure supports efficient maximum retrieval in constant time.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) Leaf node\nb) First node of left sub tree\nc) Root node\nd) First node of right sub tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Top Tree data structure is used to dynamically maintain information in trees. It relies on the divide and conquer paradigm by breaking trees into clusters and solving problems in a recursive fashion.",
        "target_text": "Question: Which algorithm is used in the top tree data structure?\nChoices:\na) Divide and Conquer\nb) Greedy\nc) Backtracking\nd) Branch\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a binary tree in which every node has either 0 or 2 children. In such trees, the number of total nodes is given by the formula 2n - 1, where n is the number of leaves.",
        "target_text": "Question: A full binary tree with n leaves contains __________.\nChoices:\na) n nodes\nb) log n2 nodes\nc) 2n - 1 nodes\nd) 2n nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In algorithms that use stacks (e.g., expression evaluation, syntax checking), it is expected that the stack is empty at the end if all operations are properly matched. If the stack is not empty, it indicates an error such as unbalanced parentheses.",
        "target_text": "Question: An error is reported when the stack is not empty at the end.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An Inverter Graph is a type of Directed Acyclic Graph (DAG), used in applications like digital logic and dataflow modeling where the graph represents dependencies that must not form cycles.",
        "target_text": "Question: An Inverter Graph is a type of __________\nChoices:\na) Multigraph\nb) Cyclic Graph\nc) Directed Acyclic Graph\nd) Directed Acyclic Word Graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists are dynamic data structures ideal for situations where data sizes change frequently. They allow for efficient insertion and deletion operations, making them well-suited for structures that frequently grow and shrink.",
        "target_text": "Question: Linked lists are best suited __________\nA. for relatively permanent collections of data.\nB. for the size of the structure and the data in the structure are constantly changing.\nC. data structure\nD. for none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In linked list implementation of a queue, available nodes are often managed using a separate free list called the AVAIL list. When inserting a new node, one is taken from this AVAIL list and linked into the queue.",
        "target_text": "Question: In case of insertion into a linked queue, a node borrowed from the __________ list is inserted in the queue.\nChoices:\na) AVAIL\nb) FRONT\nc) REAR\nd) NULL\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A pseudograph is a graph that allows both multiple edges between nodes and loops (edges that connect a vertex to itself). In an adjacency matrix, loops are indicated by non-zero entries along the diagonal.",
        "target_text": "Question: Given Adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0} {0,1}}\nii) {{0,1} {1,0}}\niii) {{0,0,1} {0,1,0} {1,0,0}}\nChoices:\na) only i)\nb) ii) and iii)\nc) i) and iii)\nd) i), ii), and iii)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a decision tree that sorts n elements, the height of the tree corresponds to the minimum number of comparisons needed in the worst case. Since at least n - 1 comparisons are required, the height is in \u03a9(n).",
        "target_text": "Question: Any decision tree that sorts n elements has height\nChoices:\na) \u03a9(n)\nb) \u03a9(log n)\nc) \u03a9(n log n)\nd) \u03a9(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a hypergraph, an edge (called a hyperedge) can connect any number of vertices. The degree of a vertex is the number of hyperedges it belongs to. The degree sequence is the list of vertex degrees sorted in non-increasing order.",
        "target_text": "Question: What is the degree sequence of the given HyperGraph, in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3,2,1,1,1,1\nb) 3,2,2,2,1,1\nc) 3,2,2,2,2,1\nd) 3,2,2,1,1,1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Topological sorting of a Directed Acyclic Graph (DAG) involves ordering its vertices such that for every directed edge u -> v, u appears before v. It can be done in linear time using Depth First Search (DFS) or Kahn's algorithm.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) cubic\nb) quadratic\nc) linear\nd) logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of distinct binary search trees (BSTs) that can be formed with n distinct keys is given by the nth Catalan number. For 4 keys, the number is C(4) = 14.",
        "target_text": "Question: How many distinct binary search trees can be created out of 4 distinct keys?\nChoices:\na) 4\nb) 14\nc) 24\nd) 42\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A priority queue is a special type of queue where each element has a priority. Elements with higher priority are dequeued before those with lower priority. Priority queues can be implemented as ascending or descending order queues depending on whether the highest or lowest value has the highest priority.",
        "target_text": "Question: Which of the following is the type of priority queue?\nChoices:\na) Ascending Order Priority Queue\nb) Descending order Priority Queue\nc) Deque\nd) Both A and B.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree is a binary search tree (BST) if an in-order traversal of the tree results in a sorted (non-decreasing) sequence of values. This property helps distinguish BSTs from other binary trees.",
        "target_text": "Question: One can determine whether a binary tree is a binary search tree by traversing it in __________.\nChoices:\na) Pre-order\nb) In-order\nc) Post-order\nd) Any of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: DNA sequence alignment is commonly solved using dynamic programming algorithms like Needleman-Wunsch or Smith-Waterman, not traditional string-matching algorithms like Rabin-Karp or KMP, which are better suited for exact matching rather than similarity-based alignment.",
        "target_text": "Question: In DNA sequence alignment, which string-matching algorithm is commonly used to identify similarities between two DNA sequences efficiently?\nChoices:\na) Rabin-Karp algorithm\nb) Knuth-Morris-Pratt algorithm\nc) Z function\nd) None of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays allow fast random access due to contiguous memory allocation and have better cache locality. Linked lists allow faster insertion and deletion but lack random access and generally have higher access time due to pointer traversal.",
        "target_text": "Question: Which of the following points is/are not True about linked list data structure when it is compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in linked list\nc) Random access is not allowed in a typical implementation of linked lists\nd) Access of elements in linked list takes less time than compared to arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A skip list is a data structure that allows fast search within an ordered sequence of elements. It uses multiple layers of linked lists to achieve average-case logarithmic time complexity for search, insertion, and deletion operations.",
        "target_text": "Question: What is a skip list?\nChoices:\na) A linked list with size value in nodes\nb) A linked list that allows faster search within an ordered sequence\nc) A linked list that allows slower search within an ordered sequence\nd) A tree which is in the form of linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are data structures used to store multiple elements of the same type in contiguous memory. They support indexing, which makes access efficient, and are preferred when working with homogeneous data.",
        "target_text": "Question: What are the advantages of arrays?\nChoices:\na) Objects of mixed data types can be stored\nb) Elements in an array cannot be sorted\nc) Index of first element of an array is 1\nd) Easier to store elements of same data type\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In the array representation of a complete binary tree (1-indexed), the children of a node at index w are located at indices 2w and 2w + 1. This layout allows efficient traversal without using pointers.",
        "target_text": "Question: What are the children for node 'w' of a complete-binary tree in an array representation?\nChoices:\na) 2w and 2w+1\nb) 2+w and 2-w\nc) w+1/2 and w/2\nd) w-1/2 and w+1/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), the maximum element is always found by traversing the rightmost path starting from the root, since all right children have greater values.",
        "target_text": "Question: How will you find the maximum element in a binary search tree?\nChoices:\na) \npublic void max(Tree root)\n{\n while(root.left() != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nb)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nc)\npublic void max(Tree root)\n{\n while(root.right() != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nd)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Two graphs are isomorphic if there exists a one-to-one correspondence between their vertex sets that preserves edge connectivity. If their incidence matrices (vertex-edge representation) are structurally the same under some permutation, they are isomorphic.",
        "target_text": "Question: The graphs G1 and G2 with their incidence matrices given are isomorphic.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black trees and AVL trees are both self-balancing binary search trees. Red-Black trees are less rigidly balanced but require fewer rotations. AVL trees store balance factors in each node, which can increase space and time complexity for updates.",
        "target_text": "Question: Why prefer red-black trees over AVL trees?\nChoices:\na) Because red-black is more rigidly balanced\nb) AVL tree stores balance factor in every node which costs space\nc) AVL tree fails at scale\nd) Red-black is more efficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: If the weights of all edges in a graph are multiplied by a positive constant, the relative order of path weights remains the same. Therefore, the shortest path remains unchanged; only the total cost scales accordingly.",
        "target_text": "Question: Is the following statement valid about shortest paths? Given a graph, suppose we have calculated shortest path from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains same, only the total weight of path changes.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A graph can be drawn in many ways, with different visual representations based on layout, orientation, and position of nodes and edges. However, the structure (connectivity) remains the same. Hence, a graph does not have a unique drawing representation.",
        "target_text": "Question: All graphs have unique representation on paper.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In the complete graph with 100 vertices and edge weights equal to the absolute difference of vertex indices, the minimum spanning tree (MST) can be formed by connecting consecutive nodes: (v1, v2), (v2, v3), ..., (v99, v100). The sum of these 99 edges is the weight of the MST.",
        "target_text": "Question: Consider a graph G = (V, E), where V = {v1, v2, ..., v100}, E = {(vi, vj) | 1 <= i < j <= 100} and the weight of edge (vi, vj) is |i - j|. The weight of the minimum spanning tree of G is __________.\nChoices:\na) 99\nb) 100\nc) 98\nd) 101\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash table is a data structure that allows efficient insertion, deletion, and search of data. It maps keys to values using a hash function and is commonly used in associative arrays and databases.",
        "target_text": "Question: Which of the following operations are done in a hash table?\nChoices:\na) Insert only\nb) Search only\nc) Insert and search\nd) Replace\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Auxiliary space refers to extra space or temporary space used by an algorithm. In the given code, a temporary array of size `d` is used to rotate the elements, so the auxiliary space complexity is O(d).",
        "target_text": "Question: What will be the auxiliary space complexity of the following code?\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int arr[] = {1,2,3,4,5,6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int d = 4;\n    int temp[10];\n    for (int i = 0; i < d; i++)\n        temp[i] = arr[i];\n    int j = 0;\n    for (int i = d; i < n; i++, j++)\n        arr[j] = arr[i];\n    int k = 0;\n    for (int i = n - d; i < n; i++, k++)\n        arr[i] = temp[k];\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n    return 0;\n}\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, the `BitSet` class from the `java.util` package can be used to represent a bit array, where individual bits can be set, cleared, and queried efficiently.",
        "target_text": "Question: Which class in Java can be used to represent bit array?\nChoices:\na) BitSet\nb) BitVector\nc) BitArray\nd) BitStream\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In formal language theory, each parse tree corresponds to a leftmost and a rightmost derivation. Therefore, the number of parse trees equals the number of leftmost and rightmost derivation trees.",
        "target_text": "Question: Which of the following is correct with respect to a parse tree for a given grammar?\nChoices:\na) n parse tree = n leftmost derivation tree = n rightmost derivation tree\nb) n parse tree = n leftmost derivation tree\nc) n parse tree = n rightmost derivation tree\nd) n parse tree = n non-terminals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A d-heap is a generalization of a binary heap where each node can have d children. Operations like insert, delete, and create can be performed efficiently. However, finding an arbitrary element (not the min/max) is not directly supported.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: A palindrome is a string that reads the same backward as forward. Examples include 'madam' and 'racecar'. This property can be checked by comparing the string with its reversed version.",
        "target_text": "Question: What is a palindromic string?\nChoices:\na) The string of length 0\nb) The string having a special character.\nc) The string having an uppercase letter\nd) The string whose reversed string is equal to the original string.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A triply linked list is a variation of a linked list where each node contains three pointers--previous, next, and top. Proper initialization of these pointers and head/tail references is crucial for maintaining structure during insertion.",
        "target_text": "Question: Consider the following algorithm to insert an element in a triply linked list.\ninitializing previous, next and top pointers to null\npointing the head and tail to the node created\npointing previous, next and top pointers to the node created\ninitializing the head and tail to null\ninitializing previous, next and top pointers to null\ninitializing the head and tail to null\npointing previous, next and top pointers to the node\nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Dijkstra and Bellman-Ford algorithms both compute the shortest path in weighted graphs with positive weights. Although the actual path may differ, the total weight of the shortest path from a source to a destination remains the same.",
        "target_text": "Question: Is the following statement valid?\nGiven a graph where all edges have positive weights, the shortest paths produced by Dijkstra and Bellman-Ford algorithms may be different, but the path weight would always be the same.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a doubly linked list, each node has two pointers--`prev` and `next`. When inserting a node, four pointers are typically updated: the new node's two pointers and one each from its neighboring nodes. Thus, the number of affected pointers is 4.",
        "target_text": "Question: In a doubly linked list, the number of pointers affected for an insertion operation will be:\nChoices:\na) 5\nb) 0\nc) 1\nd) None of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The provided code inserts a new node at the end of a singly linked list by traversing from the head to the last node and updating the last node's `next` pointer to point to the new node.",
        "target_text": "Question: What is the functionality of the following code?\npublic void function(Node node)\n{\n if(size == 0)\n  head = node;\n else\n {\n  Node temp, cur;\n  for(cur = head; (temp = cur.getNext()) != null; cur = temp);\n  cur.setNext(node);\n }\n size++;\n}\nChoices:\na) Inserting a node at the beginning of the list\nb) Deleting a node at the beginning of the list\nc) Inserting a node at the end of the list\nd) Deleting a node at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees are a type of self-adjusting binary search tree where recently accessed elements are moved to the root. This provides better performance for sequences of non-uniform access and simplifies implementation compared to more strictly balanced trees.",
        "target_text": "Question: Why prefer splay trees?\nChoices:\na) Easier to program\nb) Space efficiency\nc) Easier to program and faster access to recently accessed items\nd) Quick searching\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a K-ary tree, the height is defined as the number of edges from the root to the deepest leaf. If the tree has only the root node, the height is 0 since there are no edges.",
        "target_text": "Question: What is the height of a K-ary tree having only a root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Transposing a matrix involves swapping elements across its diagonal, i.e., converting row elements to column elements and vice versa. The given code snippet does this by swapping A[i][j] with A[j][i] for all i < j.",
        "target_text": "Question: Let A be a matrix of size n x n. Consider the following program. What is the expected output?\nvoid fun(int A[][N])\n{\n    for (int i = 0; i < N; i++)\n        for (int j = i + 1; j < N; j++)\n            swap(A[i][j], A[j][i]);\n}\nChoices:\na) Matrix A\nb) Diagonal of matrix A\nc) Transpose of matrix A\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used in digital signature systems, not to encrypt or decrypt the signature directly, but to generate a fixed-size hash of the message that is encrypted with a private key. This allows verification using the corresponding public key.",
        "target_text": "Question: Hashing can be used to encrypt and decrypt digital signatures.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In expressions, operator precedence and associativity determine the order of evaluation. Operators like ^ (exponentiation) have higher precedence than *, +, and -; associativity determines how operators of the same precedence are grouped. Postfix conversion uses this to generate correct operator placement.",
        "target_text": "Question: Assume that the operators +, -, * are left associative and ^ is right associative. The order of precedence (from highest to lowest) is ^, *, +, -. The postfix expression for the infix expression a + b * c - d ^ e ^ f is?\nChoices:\na) a b c * + d e f ^ ^ -\nb) a b c * + d e ^ f ^ -\nc) a b + c * d - e ^ f ^\nd) - + a * b c ^ ^ d e f\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B-tree, the number of disk accesses required for a search operation depends on the height of the tree. The height h is logarithmic in the number of keys n with respect to the minimum degree t, giving a complexity of \u03b8(log\u209c n).",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) \u03b8(logn h * t)\nb) \u03b8(logt n * h)\nc) \u03b8(logh n)\nd) \u03b8(logt n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An AA-tree is a form of balanced binary search tree that simulates red-black tree behavior by using levels instead of colors. Recursive coding is a programming preference, not a structural rule of AA-trees, which is why that option is incorrect.",
        "target_text": "Question: Of the following rules that are followed by an AA-tree, which of the following is incorrect?\n1- Only right children can be red\n2- Procedures are coded recursively\n3- Instead of storing colors, the level of a node is stored\n4- There should not be any left children\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In a binary min-heap, the parent node must always be less than or equal to its child nodes. If a line in the construction violates this heap property (e.g., a parent is greater than a child), that line is considered incorrect.",
        "target_text": "Question: For construction of a binary heap with the property that the parent node has value less than child node, which line is incorrect? (Lines indexed from 1)\nChoices:\na) Line - 3\nb) Line - 5\nc) Line - 6\nd) Line - 7\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A treap is a binary search tree (based on keys) that also maintains heap property based on priority. The root node always has the highest priority because it must be greater than its children with respect to heap ordering.",
        "target_text": "Question: Which node has the lowest priority in a treap?\nChoices:\na) Root node\nb) Leaf node\nc) Null node\nd) Centre node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operator precedence determines the order in which operators are evaluated in expressions. Among the given options, the bitwise NOT '~' and XOR '^' have higher precedence than arithmetic operators like '+' and '*'.",
        "target_text": "Question: Which of these operators have the highest order of precedence?\nChoices:\na) '(' and ')'\nb) '*' and '/'\nc) '~' and '^'\nd) '+' and '-'\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array is a sorted array of all suffixes of a string. If constructed using comparison-based sorting algorithms like merge sort, it will take O(n^2 log n) time due to repeated comparisons of strings of length up to n.",
        "target_text": "Question: If a comparison-based sorting algorithm is used to construct the suffix array, what will be the time required to construct the suffix array?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n^2 log n)\nd) O(n^2) + O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When simulating a stack using a priority queue, to ensure LIFO behavior, elements inserted later must have higher priority. This is achieved by assigning strictly decreasing keys to newer elements so that they are removed first using DELETEMIN.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K), where K is an integer key chosen by the implementation. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys chosen are in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In a linked list-based stack implementation, the pop operation removes the top element by accessing the first node and moving the reference to the next node. This maintains correct LIFO behavior and avoids skipping nodes.",
        "target_text": "Question: Given below is the Node class to perform basic list operations and a Stack class with a no-arg constructor.\nSelect from the options the appropriate pop() operation that can be included in the Stack class. Also, 'first' is the top-of-the-stack.\n<Multiple pop() implementations provided>\nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-d tree (or kd-tree in 2 dimensions) is an extension of a binary search tree where each level alternates the key used for comparison (e.g., x and y coordinates). Insertion follows similar logic as a binary search tree.",
        "target_text": "Question: Insertion into a 2-d tree is a trivial extension of insertion into a binary search tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix expressions (also known as Polish notation) are evaluated from right to left. The expression +-9 2 7 is interpreted as: subtract 2 from 7, then add -9 to the result: -9 + (2 - 7) = -9 + (-5) = -14.",
        "target_text": "Question: Using the evaluation of prefix algorithm, evaluate +-9 2 7.\nChoices:\na) 10\nb) 4\nc) 17\nd) 14\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists differ from arrays in that they allow dynamic resizing and efficient insertions/deletions, but they lack random access. Arrays, on the other hand, offer better cache performance and allow direct element access by index.",
        "target_text": "Question: Which of the following points is/are True about Linked List data structure when it is compared with array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance.\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) The size of array has to be pre-decided, linked lists can change their size any time.', 'E\\nAll of the above\nAnswer: E\nAll of the above"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In binomial heaps or Fibonacci heaps, merging two trees of order k results in a single tree of order k+1, which has a height increased by one due to the new root-child relationship.",
        "target_text": "Question: What is the order of the resultant heap after merging two trees of order k?\nChoices:\na) 2*k\nb) k+1\nc) k*k\nd) k+logk\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash function satisfies the simple uniform hashing condition if each key is equally likely to be hashed to any of the slots. The function h(k) = floor(km), where m is a constant and 0 < m < 1, is an example that attempts to spread keys uniformly.",
        "target_text": "Question: Which hash function satisfies the condition of simple uniform hashing?\nChoices:\na) h(k) = lowerbound(km)\nb) h(k) = upperbound(mk)\nc) h(k) = lowerbound(k)\nd) h(k) = upperbound(k)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When parsing expressions using a stack to match brackets or parentheses, failure to find a matching closing or opening bracket indicates an imbalance, which is treated as an error in the parser or compiler.",
        "target_text": "Question: When the corresponding end bracket/braces/parentheses is not found, what happens?\nChoices:\na) The stack is popped\nb) Ignore the parentheses\nc) An error is reported\nd) It is treated as an exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A good hashing function distributes keys uniformly across the hash table, avoiding clustering caused by predictable patterns. Therefore, a good hash should be independent of any patterns in the data.",
        "target_text": "Question: A good hash approach is to derive the hash value that is expected to be dependent on any patterns that might exist in the data.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The provided C++ code reverses the first `k` elements in an array if `k <= n`. It swaps the values symmetrically within the first `k` elements. For the input {1, 2, 3, 4, 5} and k = 3, it produces {3, 2, 1, 4, 5}.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) 3 2 1 4 5\nb) 5 4 3 2 1\nc) 1 2 5 4 3\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An AVL tree is a self-balancing binary search tree where the height is logarithmic in the number of nodes. The maximum height for `p` nodes is O(log p), ensuring fast search, insertion, and deletion.",
        "target_text": "Question: What is the maximum height of an AVL tree with p nodes?\nChoices:\na) p\nb) log(p)\nc) log(p)/2\nd) p/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In a normal array, all elements including nulls are counted in the size. In contrast, a sparse array efficiently stores only non-null or non-zero elements. So, the size is 6 in the normal case and 2 in the sparse representation.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10};\nWhat would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an undirected graph, an adjacency list uses O(V + E) space, where V is the number of vertices and E is the number of edges. This is more space-efficient than adjacency matrices for sparse graphs.",
        "target_text": "Question: Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is __________\nChoices:\na) O(E)\nb) O(V*V)\nc) O(E + V)\nd) O(V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: To check if an expression has balanced parentheses, a stack is used. Each time an opening symbol is encountered, it is pushed to the stack. A closing symbol pops the top element. If the stack is empty at the end, the expression is balanced.",
        "target_text": "Question: The data structure required to check whether an expression contains a balanced parenthesis is?\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A heap is a complete binary tree that satisfies the heap property. In a max-heap, the parent node is greater than or equal to its children. In a min-heap, the parent is less than or equal to its children.",
        "target_text": "Question: Heap exhibits the property of a binary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix (or Reverse Polish Notation) expressions do not require parentheses and can be evaluated from left to right using a stack, making them easier and faster for computers to process than infix expressions.",
        "target_text": "Question: It is easier for a computer to process a postfix expression than an infix expression.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A XOR linked list is a memory-efficient version of a doubly linked list where each node stores the XOR of the memory addresses of the previous and next nodes. This allows traversal in both directions using XOR operations.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) Every node stores the XOR of addresses of previous and next nodes\nb) Actual memory address of the next node\nc) Every node stores the XOR of addresses of previous and next two nodes\nd) Every node stores XOR of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In binary tree rotations, a right rotation repositions nodes to maintain balance. The given pseudocode updates pointers to rotate a node to the right, making its left child the new root of the subtree.",
        "target_text": "Question: What output does the below pseudo code produce?\nTree_node function(Tree_node x)\n{\n    Tree_node y = x.left;\n    x.left = y.right;\n    y.right = x;\n    return y;\n}\nChoices:\na) Right rotation of subtree\nb) Left rotation of subtree\nc) Zig-zag operation\nd) Zig-zig operation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation (Polish notation) places the operator before its operands. For the expression a | b & c, the AND operation is evaluated first, followed by OR, resulting in | a & b c -> |a&bc.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) a|&bc\nb) &|abc\nc) |a&bc\nd) ab&|c\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: When performing XOR on pointers (such as in XOR linked lists), proper type casting is required to ensure memory addresses are manipulated correctly. Missing a cast results in type mismatch errors.",
        "target_text": "Question: What's wrong with this code which returns XOR of two node addresses?\nChoices:\na) Nothing wrong. Everything is fine\nb) Type casting at return is missing\nc) Parameters are wrong\nd) Total logic is wrong\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The van Emde Boas (vEB) tree is a tree-based data structure that supports fast predecessor/successor queries. It was invented by Peter van Emde Boas.",
        "target_text": "Question: Who invented the vEB tree, also known as the van Emde Boas Tree?\nChoices:\na) Peter Van Emde Boas\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A weak heap is a variant of the binary heap that is used in the weak heap sort algorithm. It is also known as a relaxed heap due to its weaker structural constraints compared to binary heaps.",
        "target_text": "Question: What is the other name of a weak heap?\nChoices:\na) Min-heap\nb) Max-heap\nc) Relaxed-heap\nd) Leonardo heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Matrix multiplication satisfies associative and distributive properties but is not commutative. That is, A * B \u2260 B * A in general. Therefore, the commutative property does not hold for matrix multiplication.",
        "target_text": "Question: Which of the following property does not hold for matrix multiplication?\nChoices:\na) Associative\nb) Distributive\nc) Commutative\nd) Additive Inverse\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Common types of queues include ordinary queue (FIFO), circular queue (wrap-around structure), and priority queue (based on priority). A 'single-ended queue' is not a standard type of queue.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) Priority queue\nb) Circular queue\nc) Single-ended queue\nd) Ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In column-major order, the elements of a matrix are stored column by column in memory. For a 3*3 matrix with elements arranged as:\na b c\nd e f\ng h i\nThe order of elements in memory will be: a, d, g, b, e, h, c, f, i -> adgbehcfi.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A max-heap maintains the property that each parent node is greater than or equal to its children. Inserting 1 and then 7 into a heap that has level-order [10, 8, 5, 3, 2] results in a new structure that reorders to preserve the heap property.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. The level-order traversal of the heap after the insertion of the elements is:\nChoices:\na) 10, 8, 7, 3, 2, 1, 5\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A descending priority queue gives higher priority to larger elements. It can be efficiently implemented using a max-heap, where the largest element is always at the root and removed first.",
        "target_text": "Question: A descending priority queue can be implemented using __________\nChoices:\na) Max heap\nb) Min heap\nc) Min-max heap\nd) Trie\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In double hashing, two hash functions h1(k) and h2(k) are used to calculate probe sequences. A typical implementation is: h1(k) = k mod m, and h2(k) = 1 + (k mod m'), where m and m' are constants chosen to reduce clustering.",
        "target_text": "Question: What are the values of h1(k) and h2(k) in the hash function?\nChoices:\na) \nh1(k) = m mod k\n    h2(k) = 1 + (m' mod k)\nb)\nh1(k) = 1 + (m mod k)\n    h2(k) = m' mod k\nc)\nh1(k) = 1 + (k mod m)\n    h2(k) = k mod m\nd)\nh1(k) = k mod m\n    h2(k) = 1 + (k mod m')\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A max-heap ensures that the maximum element is at the root. To build a max-heap from an array, the heapify procedure swaps elements to restore the heap property. The number of swaps required depends on how far elements are from satisfying the property.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is:\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Direct addressing is a technique where data is stored at an index equal to its key. Since it allows direct access without traversal, the search time complexity is O(1).",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In postfix (Reverse Polish) notation, operators follow their operands. For infix expressions like (A + B) * (C * D - E) * F / G, proper conversion uses operator precedence and associativity rules to generate the postfix form.",
        "target_text": "Question: The postfix form of the expression (A + B) * (C * D - E) * F / G is:\nChoices:\na) AB+ CD*E - FG /**\nb) AB + CD* E - F **G /\nc) AB + CD* E - *F *G /\nd) AB + CDE * - * F *G /\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing with open addressing, the probe sequence determines which slots to inspect. The sequence often depends on the key (k) and constants (e.g., in quadratic probing), but ultimately the key determines the pattern of probing.",
        "target_text": "Question: On what value does the probe sequence depend?\nChoices:\na) c1\nb) k\nc) c2\nd) m\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a min-heap, the minimum element is always at the root, so FindMin() takes O(1) time. Deleting the minimum involves replacing the root with the last element and re-heapifying, which takes O(log n).",
        "target_text": "Question: The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in a min-heap take __________\nChoices:\na) Logarithmic and linear time respectively\nb) Constant and linear time respectively\nc) Constant and quadratic time respectively\nd) Constant and logarithmic time respectively\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In C, dynamic memory allocation is performed using `malloc()`. When creating a new node for a linked list, the correct syntax involves using `sizeof(NODE)` and casting the return value to a pointer of the appropriate type.",
        "target_text": "Question: Consider the following definition in C programming language:\nstruct node\n{\n    int data;\n    struct node * next;\n};\ntypedef struct node NODE;\nNODE *ptr;\nWhich of the following C code is used to create a new node?\nChoices:\na) ptr = (NODE*)malloc(sizeof(NODE));\nb) ptr = (NODE*)malloc(NODE);\nc) ptr = (NODE*)malloc(sizeof(NODE*));\nd) ptr = (NODE)malloc(sizeof(NODE));\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: If only push and pop operations are allowed, simulating an enqueue operation in an array-based queue (via two stacks) involves moving elements from one stack to another and back. Each move takes time, and multiple moves are required to insert an element.",
        "target_text": "Question: You are on a planet where computational power is slow. You have an array of size 10. You want to enqueue an element using only push and pop operations (each takes 1 second). What is the total time required to perform the enqueue operation?\nChoices:\na) 20\nb) 40\nc) 42\nd) 43\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are fixed-size data structures. One of their main disadvantages is that memory may be wasted if the number of inserted elements is significantly smaller than the allocated size.",
        "target_text": "Question: What are the disadvantages of arrays?\nChoices:\na) Data structures like queue or stack cannot be implemented\nb) There are chances of wastage of memory space if elements inserted in an array are fewer than the allocated size\nc) Index value of an array can be negative\nd) Elements are sequentially accessed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Based on the birthday paradox, in a hash table of size 20, inserting 10 keys leads to a collision probability exceeding 0.5. This concept illustrates how quickly collisions can occur even in modestly filled hash tables.",
        "target_text": "Question: Consider a hash function that distributes keys uniformly. The hash table size is 20. After hashing how many keys will the probability that any new key collides with an existing one exceed 0.5?\nChoices:\na) 5\nb) 6\nc) 7\nd) 10\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The minimum number of jumps to reach the end of an array depends on the value at each index. If certain sections are blocked by 0 and no forward path exists, it's impossible to reach the end.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) Not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A top tree is a type of data structure used in dynamic trees. If a tree has only a single vertex, there are no edges to break or cluster, hence no valid top trees can be formed.",
        "target_text": "Question: How many top trees are there in a tree with a single vertex?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The provided code is an implementation of the Floyd-Warshall algorithm, which computes the shortest paths between all pairs of vertices in a weighted graph. The algorithm updates a distance matrix based on the transitive property of shortest paths.",
        "target_text": "Question: What would be the value of the distance matrix after the execution of the given code?\n#include <bits/stdc++.h>\n#define INF 1000000\nint graph[V][V] = { {0, 7, INF, 4},\n                    {INF, 0, 13, INF},\n                    {INF, INF, 0, 12},\n                    {INF, INF, INF, 0} };\n \nint distance[V][V], i, j, k;\n \nfor (i = 0; i < V; i++)\n    for (j = 0; j < V; j++)\n        distance[i][j] = graph[i][j];\n \nfor (k = 0; k < V; k++)\n    for (i = 0; i < V; i++)\n        for (j = 0; j < V; j++)\n            if (distance[i][k] + distance[k][j] < distance[i][j])\n                distance[i][j] = distance[i][k] + distance[k][j];\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary heap, the number of nodes at height h in an n-element heap can be calculated using the formula ceil(n / 2^(h+1)). This is derived from the complete binary tree structure of the heap.",
        "target_text": "Question: The number of nodes of height h in any n-element heap is __________.\nChoices:\na) h\nb) 2h\nc) ceil(n/2h)\nd) ceil(n/2^(h+1))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A Directed Acyclic Word Graph (DAWG) is a data structure used in string algorithms. It is particularly useful in applications like pattern recognition and string matching due to its compact representation of substrings.",
        "target_text": "Question: In which of the following does a Directed Acyclic Word Graph find its application?\nChoices:\na) String Matching\nb) Number Sorting\nc) Manipulations on numbers\nd) Pattern Printing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A triply linked list extends a doubly linked list by including a third pointer. This extra pointer, often named `top`, can be used for specialized navigational or hierarchical operations, and it is typically positioned logically as an additional link from the node.",
        "target_text": "Question: Where does a triply linked list contain an extra pointer in comparison to a doubly linked list?\nChoices:\na) Top of the node\nb) Bottom of the node\nc) Before the node\nd) After the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In tree terminology, the height of a node is defined as the number of edges on the longest path from the node to a leaf. The height of a root node in any tree (including ternary trees) is 0 if the node has no children.",
        "target_text": "Question: What is the height of the root node of a ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: MinHash is a probabilistic technique for efficiently estimating the similarity between datasets. It is commonly used in applications like association rule learning, document similarity, and clustering.",
        "target_text": "Question: Is MinHash used as a tool for association rule learning?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tree traversals define the order in which nodes are visited. Level-order traversal, also known as breadth-first traversal, visits nodes level by level from left to right, typically implemented using a queue.",
        "target_text": "Question: Which traversal's pseudo code is written here?\nChoices:\na) Level order\nb) Pre-order\nc) Post-order\nd) In-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Auxiliary trees are temporary or helper trees used during tree operations. The 'join' operation combines two auxiliary trees into one while preserving the properties of the tree structure.",
        "target_text": "Question: Which operation is used to combine two auxiliary trees?\nChoices:\na) Join\nb) Combinatorial\nc) Add\nd) Concatenation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each element (node) points to the next node using a pointer. This allows dynamic memory allocation and flexible insertion/deletion operations.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of a pointer is called __________.\nChoices:\na) Linked list\nb) Node list\nc) Primitive list\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Free lists manage available memory blocks. Allocation strategies like best fit, first fit, and worst fit differ in how memory is chosen. Among these, first fit is generally considered the simplest to implement.",
        "target_text": "Question: What are different ways of implementing free lists and which is simple among them?\nChoices:\na) best fit, first fit, worst fit, simple-first fit\nb) best fit, first fit, worst fit, simple-best fit\nc) best fit, first fit, worst fit, simple-worst fit\nd) best fit simple-best fit\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When two stacks share a single array growing from opposite ends, the condition for stack overflow occurs when their tops are about to collide. That is, when top1 == top2 - 1.",
        "target_text": "Question: A single array A[1..MAXSIZE] is used to implement two stacks growing from opposite ends. If top1 and top2 point to the top elements of each stack and top1 < top2, what is the condition for 'stack full'?\nChoices:\na) (top1 = MAXSIZE/2) and (top2 = MAXSIZE/2+1)\nb) top1 + top2 + 1 = MAXSIZE\nc) (top1 = MAXSIZE/2) or (top2 = MAXSIZE)\nd) top1 = top2 - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree is a hierarchical structure in which each node can have at most two children--commonly referred to as the left and right child. This is a defining property of binary trees.",
        "target_text": "Question: What is the maximum number of children that a binary tree node can have?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Fibonacci heaps offer better amortized time complexity for decrease-key and delete operations than other heap types. Although more complex to implement, they are theoretically faster in certain scenarios, such as Dijkstra's algorithm with many decrease-key operations.",
        "target_text": "Question: Out of the following given options, which is the fastest algorithm?\nChoices:\na) Fibonacci heap\nb) Pairing heap\nc) d-ary heap\nd) Binary heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An expression tree is a type of binary tree used to represent expressions. Operands are stored in leaves, and operators are stored in internal nodes. The structure obeys the binary tree property.",
        "target_text": "Question: An expression tree is a kind of?\nChoices:\na) Binary search tree\nb) Fibonacci tree\nc) Binary tree\nd) Treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In C++, the `delete` operator releases memory allocated by `new`, but it doesn't delete the pointer itself. After the delete operation, the pointer still exists and should be set to `nullptr` to avoid dangling pointer issues.",
        "target_text": "Question: Given that the line `delete newPtr;` just executed, what can you conclude?\nChoices:\na) The memory referenced by newPtr is released only if it is needed by the system.\nb) The pointer newPtr is of type void *.\nc) The pointer newPtr only exists if there was an error freeing the memory.\nd) The pointer newPtr still exists.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack can be implemented using two queues. One queue is used to store the elements and the second helps simulate the Last-In-First-Out (LIFO) behavior by rearranging the elements during pop or push operations.",
        "target_text": "Question: To implement a stack using queues (with only enqueue and dequeue operations), how many queues will you need?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: To convert a postfix expression to prefix, reverse the postfix, swap operators/operands accordingly, and apply precedence rules. For AB+CD-* the prefix form is *+AB-CD.",
        "target_text": "Question: The prefix expression of the postfix expression AB+CD-* is __________\nChoices:\na) (A+B)*(C-D)\nb) +AB*-CD\nc) A+*BCD-\nd) *+AB-CD\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Balancing symbols such as parentheses, braces, or brackets is a common problem in compilers and expression parsing. A stack is the ideal data structure for this task due to its LIFO behavior, allowing correct matching of opening and closing symbols.",
        "target_text": "Question: Which is the most appropriate data structure for applying the balancing of symbols algorithm?\nChoices:\na) Stack\nb) Queue\nc) Tree\nd) Graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A bipartite graph with `n` vertices can have at most floor(n^2/4) edges. This maximum is achieved when the vertex set is divided equally into two parts. For 10 vertices, the maximum is (5 * 5) = 25 edges.",
        "target_text": "Question: What is the maximum number of edges in a bipartite graph having 10 vertices?\nChoices:\na) 24\nb) 21\nc) 25\nd) 16\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array is a sorted array of all suffixes of a string. Compared to suffix trees, suffix arrays are more space efficient as they use linear space and simpler structures, making them preferable for large-scale string processing.",
        "target_text": "Question: Suffix array is space efficient compared to the suffix tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A graph is bipartite if its vertices can be divided into two disjoint sets such that no edge connects vertices within the same set. While all paths are bipartite, not all cyclic graphs are--especially those with an odd number of vertices in the cycle.",
        "target_text": "Question: All paths and cyclic graphs are bipartite graphs.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Dynamic arrays grow and shrink automatically based on their usage. To avoid wasting space, if the size of the array drops below a certain threshold (commonly 30% of the allocated size), the array is deallocated or shrunk.",
        "target_text": "Question: The size of the dynamic array is deallocated if the array size is less than __________% of the backend physical size.\nChoices:\na) 30\nb) 40\nc) 10\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binomial heap, the decrease-key operation adjusts the value of a node and may require restructuring the heap to maintain the heap property. This process takes O(log n) time because the heap is organized as a collection of binomial trees.",
        "target_text": "Question: Time taken in decreasing the node value in a binomial heap is:\nChoices:\na) O(n)\nb) O(1)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The evaluation of prefix expressions (Polish notation) is guided by operator precedence and associativity. This determines the correct order in which operands and operators are processed during computation.",
        "target_text": "Question: What determines the order of evaluation of a prefix expression?\nChoices:\na) Precedence and associativity\nb) Precedence only\nc) Associativity only\nd) Depends on the parser\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Converting an infix expression to postfix (Reverse Polish Notation) involves using a stack to manage operators based on their precedence and associativity, ensuring correct evaluation order.",
        "target_text": "Question: One can convert an infix expression to a postfix expression using a __________.\nChoices:\na) Stack\nb) Queue\nc) Deque\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing is a collision resolution technique in hashing. It is widely used in applications such as database indexing, cache management, and compiler symbol tables where fast lookups and space efficiency are needed.",
        "target_text": "Question: What are the applications of linear probing?\nChoices:\na) Databases\nb) Caching\nc) Compiler Design\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A complete binary tree of depth `d` has (2^d - 1) nodes and (2^{d+1} - 1) pointers in total. The number of unused (null) pointers corresponds to the number of leaves, which in a complete tree is (2^d). For depth 5, that is 32 leaves, each having 2 null children pointers, so 16 unused pointers.",
        "target_text": "Question: The number of unused pointers in a complete binary tree of depth 5 is:\nChoices:\na) 4\nb) 8\nc) 16\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack follows the Last-In-First-Out (LIFO) principle, where the last item added is the first to be removed. A real-world analogy is a stack of chairs or plates, where the topmost item is accessed first.",
        "target_text": "Question: Which of the following real-world scenarios would you associate with a stack data structure?\nChoices:\na) Piling up of chairs one above the other\nb) People standing in a line to be serviced at a counter\nc) Offer services based on the priority of the customer\nd) Tatkal Ticket Booking in IRCTC\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Universal hashing refers to a class of hash functions that minimize the probability of collision by choosing a function at random from a family of hash functions. It offers better average performance than traditional methods like division or multiplication.",
        "target_text": "Question: Which hashing scheme provides good performance?\nChoices:\na) Open addressing\nb) Universal hashing\nc) Hashing by division\nd) Hashing by multiplication\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix expressions (also called Reverse Polish Notation) are evaluated using a stack. In the expression `ab + cd / -`, substitute values (a=5, b=4, c=9, d=3) -> (5+4) - (9/3) = 9 - 3 = 6.",
        "target_text": "Question: Evaluate the postfix expression ab + cd / - where a=5, b=4, c=9, d=3.\nChoices:\na) 23\nb) 15\nc) 6\nd) 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: This question seems to reference a scenario with a queue modified by a parameter `k`, but no operation is specified. However, assuming it refers to a special queue operation (like priority or limited position enqueue), a choice can still be evaluated based on custom logic provided with `k`.",
        "target_text": "Question: Consider the following operation along with Enqueue and Dequeue operations on queues, where k is a global parameter.\nChoices:\na) A\nb) B\nc) C\nd) D\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix expressions (Polish Notation) place operators before their operands. The expression `++a*bc*+defg` has this format, making it a prefix expression.",
        "target_text": "Question: ++a*bc*+defg is a?\nChoices:\na) Postfix expression\nb) Infix expression\nc) Prefix expression\nd) Invalid expression\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Deleting a linked list involves traversing it and deallocating memory for each node. This can be done in-place without needing additional memory, making the space complexity O(1).",
        "target_text": "Question: What is the space complexity for deleting a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) Either O(1) or O(n)\nd) O(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In nearest neighbor search using kd-trees, three primary concepts are crucial: (1) pruning using bounding boxes, (2) recursive traversal, and (3) backtracking to search the opposite subtree if necessary. These techniques optimize search in multidimensional spaces.",
        "target_text": "Question: How many prime concepts are available in nearest neighbor search in a kd tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a 2-dimensional kd-tree, the root node is typically chosen based on the value of the first dimension. Often, to break ties or for simplicity, the first node inserted (or an arbitrary odd-positioned node) is used as the root.",
        "target_text": "Question: In a two-dimensional search tree, the root is arbitrarily chosen to be?\nChoices:\na) Even\nb) Odd\nc) Depends on subtrees\nd) 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists support dynamic memory usage and allow insertions and deletions at any position. This is a major advantage over arrays, which require shifting elements.",
        "target_text": "Question: In general, linked lists allow:\nChoices:\na) Insertions and removals anywhere.\nb) Insertions and removals only at one end.\nc) Insertions at the back and removals from the front.\nd) None of the above.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary min-heap, the maximum element resides in the leaf nodes. For a complete binary tree with 1023 elements, 512 nodes are leaves. Finding the maximum among them requires 511 comparisons.",
        "target_text": "Question: Consider the array representation of a binary min-heap containing 1023 elements. The minimum number of comparisons required to find the maximum in the heap is:\nChoices:\na) 510\nb) 511\nc) 512\nd) 255\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In disjoint set union (union-find), rank is used to limit the depth of trees. A node with rank r must have at least 2^r descendants. This ensures logarithmic time performance with union by rank.",
        "target_text": "Question: When executing a sequence of Unions, a node of rank r must have at least 2^r descendants.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting infix to prefix notation requires applying operator precedence and associativity in reverse. Given a complex expression, proper reordering of operators and operands produces the correct prefix (Polish) notation.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) -+a*/^bcdef\nb) -+a*/bc^def\nc) -+a*b/c^def\nd) -a+*/bc^def\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an undirected simple graph with (n) vertices, each pair of distinct vertices can have at most one edge, resulting in (n(n-1)/2) edges. In a directed graph, each pair can have two directed edges (one in each direction), leading to (n(n-1)) possible non-zero entries in the adjacency matrix.",
        "target_text": "Question: What is the maximum number of possible non-zero values in an adjacency matrix of a simple graph with n vertices?\nChoices:\na) (n*(n-1))/2\nb) (n*(n+1))/2\nc) n*(n-1)\nd) n*(n+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To convert a binary tree into its mirror image, you recursively swap the left and right subtrees. This is typically performed during a pre-order traversal, where the current node is processed before its children.",
        "target_text": "Question: A binary tree can be converted into its mirror image by traversing it in __________.\nChoices:\na) In-order\nb) Pre-order\nc) Post-order\nd) Any order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Level-order traversal is a breadth-first traversal of a tree. It visits nodes level by level and is implemented using a queue to process nodes in FIFO order.",
        "target_text": "Question: Level order traversal of a tree is formed with the help of:\nChoices:\na) Breadth-first search\nb) Depth-first search\nc) Dijkstra's algorithm\nd) Prim's algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Parallel arrays store related data across multiple arrays using a shared index. While useful in languages that don't support records, they can be inefficient for insertion and deletion due to the need to maintain synchronization across arrays.",
        "target_text": "Question: Which of the following is a disadvantage of parallel arrays over traditional arrays?\nChoices:\na) When a language does not support records, parallel arrays can be used\nb) Increased locality of reference\nc) Ideal cache behaviour\nd) Insertion and deletion becomes tedious\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The height of a tree node is the number of edges on the longest path to a leaf. In a K-ary tree, the height of the root depends on the total number of levels. For some tree definitions, if the tree has multiple levels and the root is at level 0, then its height may be 3.",
        "target_text": "Question: What is the height of the root node of a K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The given recursive function prints the data of a linked list node, then skips the next node (if it exists), and calls itself recursively. After returning from recursion, it prints the same node again. This produces a symmetric output from first, third, fifth, then in reverse.",
        "target_text": "Question: What is the output of the following function if start is pointing to the first node of the linked list 1->2->3->4->5->6?\n#include <iostream>\nusing namespace std;\nstruct Node {\n    int data;\n    Node* next;\n    Node() { data = 0; next = nullptr; } \n};\nvoid fun(Node* start) {\n    if (start == nullptr)\n        return;\n    cout << start->data << \"  \";\n    \n    if (start->next != nullptr)\n        fun(start->next->next);\n    cout << start->data << \"  \";\n}\nChoices:\na) 1 4 6 6 4 1\nb) 1 3 5 1 3 5\nc) 1 2 3 5\nd) 1 3 5 5 3 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a minimum spanning tree (MST), the number of edges is always (V - 1). If the weight of each edge in the graph is increased by a constant, the structure of the MST remains the same, and the total weight increases by (V - 1) * constant.",
        "target_text": "Question: Let G be a connected undirected graph with 100 vertices and 300 edges. The weight of a minimum spanning tree of G is 500. When the weight of each edge of G is increased by five, the weight of a minimum spanning tree becomes __________.\nChoices:\na) 1000\nb) 995\nc) 2000\nd) 1995\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In bracket matching algorithms, opening brackets are pushed onto the stack. When a closing bracket is encountered, the top of the stack is popped to check for a match. This maintains balanced structure.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) Push it onto the stack\nb) Pop the stack\nc) Throw an error\nd) Treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A suffix tree is a compressed trie of all suffixes of a given string. It is highly useful in text editors and search engines for string matching, substring search, and pattern recognition.",
        "target_text": "Question: Can a suffix tree be used in string problems occurring in a text editor?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In binary trees, deleting a node while preserving structure involves replacing the node to be deleted with the deepest (rightmost) node and then deleting that deepest node. This avoids violating the binary tree properties.",
        "target_text": "Question: The following lines talk about deleting a node in a binary tree (the tree property must not be violated after deletion):\ni) From root, search for the node to be deleted\nii)\niii) Delete the node at\nWhat must be statement ii) and fill up statement iii)?\nChoices:\na) ii) Find random node, replace with node to be deleted. iii) Delete the node\nb) ii) Find node to be deleted. iii) Delete the node at found location\nc) ii) Find deepest node, replace with node to be deleted. iii) Delete a node\nd) ii) Find deepest node, replace with node to be deleted. iii) Delete the deepest node\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Google has evaluated hashing techniques like MinHash and SimHash in large-scale environments. These algorithms are used for estimating similarity between documents and are applied in web indexing and duplicate detection.",
        "target_text": "Question: Did Google conduct a large evaluation for comparing the performance of two techniques: MinHash and SimHash?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Even if all edge weights in a graph are unique, multiple paths can have different weights, but uniqueness of edge weights does not guarantee that the shortest path between any two nodes is unique.",
        "target_text": "Question: Is the following statement valid?\nGiven a weighted graph where weights of all edges are unique, there is always a unique shortest path from a source to destination.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An inversion in an array is a pair of indices (i, j) such that i < j and arr[i] > arr[j]. A sorted array has zero such inversions, indicating it is already ordered.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) Cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Recursion uses a call stack to keep track of function calls. Each recursive call is pushed onto the stack, increasing memory usage. Iteration, in contrast, does not rely on the call stack for execution.",
        "target_text": "Question: Recursion uses more memory space than iteration because __________.\nChoices:\na) It uses stack instead of queue.\nb) Every recursive call has to be stored.\nc) Both A & B are True.\nd) None of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An almost complete binary tree of depth 'd' is one where all levels are fully filled except possibly the last, and all leaves appear as far left as possible. It includes both the conditions described in options A and B.",
        "target_text": "Question: A binary tree of depth 'd' is an almost complete binary tree if:\nChoices:\na) Each leaf in the tree is either at level 'd' or at level 'd-1'\nb) For any node 'n' in the tree with a right descendant at level 'd', all the left descendants of 'n' that are leaves, are also at level 'd'\nc) Both (A) & (B)\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Merging two sorted arrays of sizes m and n involves iterating over both arrays once, making comparisons and appending the smaller element. This takes linear time: \u03b8(m + n).",
        "target_text": "Question: Time required to merge two sorted lists of size m and n is __________.\nChoices:\na) \u03b8(m | n)\nb) \u03b8(m + n)\nc) \u03b8(m log n)\nd) \u03b8(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A connected graph is Eulerian if all its vertices have even degrees. In the given options, only the combination 2, 4, 5 includes at least one vertex with odd degree, making it invalid for Eulerian. However, option a) 1,2,3 is also invalid. This may indicate an error in the expected answer. In general, to be Eulerian, all degrees must be even.",
        "target_text": "Question: For which of the following combinations of the degrees of vertices would the connected graph be Eulerian?\nChoices:\na) 1, 2, 3\nb) 2, 3, 4\nc) 2, 4, 5\nd) 1, 3, 5\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A complete undirected graph with 4 vertices has 6 edges. To form a minimum spanning tree (MST), we need (V-1) = 3 edges with the smallest weights. Choosing edges with weights 1, 2, and 4 gives the maximum possible MST weight: 7.",
        "target_text": "Question: Let G be a complete undirected graph on 4 vertices, having 6 edges with weights 1, 2, 3, 4, 5, and 6. What is the maximum possible weight that a minimum weight spanning tree of G can have?\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A self-organizing list is a type of linked list that reorders elements based on access patterns to reduce average lookup time. It's used in symbol tables to improve compiler performance during variable/function lookup.",
        "target_text": "Question: Symbol tables during compilation of a program are efficiently implemented using __________\nChoices:\na) A singly linked list\nb) A doubly linked list\nc) A self-organizing list\nd) An array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In postfix notation, operators follow operands. When multiple operators have different precedence and associativity, the evaluation order must respect these rules. Operator a has the highest precedence and b, c are right-associative.",
        "target_text": "Question: Consider the postfix expression 4 5 6 a b 7 8 a c, where a, b, and c are operators. Operator a has higher precedence than b and c. Operators b and c are right associative. What is the equivalent infix expression?\nChoices:\na) 4 a 5 6 b 7 8 a c\nb) 4 a 5 c 6 b 7 a 8\nc) 4 b 5 a 6 c 7 a 8\nd) 4 a 5 b 6 c 7 a 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The given function modifies the `head` pointer passed to it, which may not be desirable if the original head needs to be preserved. A better approach is to use a separate traversal pointer.",
        "target_text": "Question: Consider the following function to traverse a linked list:\n// C++ version\nvoid traverse(Node *head) {\n    while (head != NULL) {\n        printf(\"%d  \", head->data);\n        head = head->next;\n    }\n}\nChoices:\na) The function may crash when the linked list is empty', \"B\\nThe function doesn't print the last node when the linked list is not empty\", 'C\\nThe function is implemented incorrectly because it changes head\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash tree, also known as a Merkle tree, is a tree in which every leaf node is a hash of a data block and every non-leaf node is a hash of its children. It's widely used in blockchain and data verification.",
        "target_text": "Question: A hash tree is also known as __________\nChoices:\na) Merkle tree\nb) T-tree\nc) Hash table\nd) Bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: The described process constructs a Cartesian tree and uses a priority queue to extract nodes in increasing order of value. This simulates a priority-based traversal of the tree, effectively sorting the input sequence.",
        "target_text": "Question: What happens if we apply the below operations on an input sequence?\ni. Construct a Cartesian tree for input sequence\nii. Put the root element of above tree in a priority queue\niii. If priority queue is not empty then\niv. Search and delete minimum value in priority queue\nv. Add that to output\nvi. Add Cartesian tree children of above node to priority queue\nChoices:\na) Constructs a Cartesian tree\nb) Sorts the input sequence\nc) Does nothing\nd) Produces some random output\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A memory-efficient doubly linked list uses XOR linking, where each node contains a single pointer that stores the XOR of addresses of the previous and next nodes. This reduces memory usage by eliminating an extra pointer field.",
        "target_text": "Question: How do you calculate the pointer difference in a memory-efficient doubly linked list?\nChoices:\na) head XOR tail\nb) Pointer to previous node XOR pointer to next node\nc) Pointer to previous node - pointer to next node\nd) Pointer to next node - pointer to previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Postfix (Reverse Polish Notation) expressions are evaluated using a stack. When an operator is encountered, the top two operands are popped, the operation is performed, and the result is pushed back onto the stack.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) Push it directly onto the stack\nb) Pop 2 operands, evaluate them and push the result onto the stack\nc) Pop the entire stack\nd) Ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A weight-balanced tree ensures that the weight (or size) of the left and right subtrees of any node n is at least a certain fraction 'a' of the weight of the node itself. This helps in maintaining balanced access times.",
        "target_text": "Question: What is the condition for a tree to be weight balanced, where 'a' is a factor and 'n' is a node?\nChoices:\na) weight[n.left] >= a * weight[n] and weight[n.right] >= a * weight[n]\nb) weight[n.left] >= a * weight[n.right] and weight[n.right] >= a * weight[n]\nc) weight[n.left] >= a * weight[n.left] and weight[n.right] >= a * weight[n]\nd) weight[n] is a non-zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are fixed-size data structures. While they allow fast random access, they can suffer from drawbacks such as fixed size and inefficient insertion/deletion. However, accessing elements at specified positions is a major advantage.",
        "target_text": "Question: Which of the following is not a disadvantage of using arrays?\nChoices:\na) Fixed size\nb) There are chances of wastage of memory space if elements inserted are fewer than allocated size\nc) Insertion based on position\nd) Accessing elements at specified positions\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A treap is a randomized binary search tree that also satisfies the heap property using a priority value assigned randomly to each node. It is also known as a Cartesian tree with priorities.",
        "target_text": "Question: A treap is a Cartesian tree with __________\nChoices:\na) Additional value, which is a priority value to the key generated randomly\nb) Additional value, which is a priority value to the key generated sequentially\nc) Additional heap rule\nd) Additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: The provided recursive function for a queue pops each element, makes a recursive call, and then re-inserts the popped element. This reverses the order of the queue.",
        "target_text": "Question: Suppose you are given an implementation of a queue of integers.\nConsider the following function:\nvoid f(queue<int> &Q) {\n    int i;\n    if (!Q.empty()) {\n        i = Q.front();\n        Q.pop();\n        f(Q);\n        Q.push(i);\n    }\n}\nChoices:\na) Leaves the queue Q unchanged\nb) Reverses the order of the elements in the queue Q\nc) Deletes the element at the front of the queue Q and inserts it at the rear keeping the other elements in the same order\nd) Empties the queue Q\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary tree, internal nodes are those with at least one child. The number of leaf nodes can be derived using the relation: L = N + 1, where L is leaf nodes and N is internal nodes with two children. Here, 5 nodes have one child, and 10 have two children, giving 11 leaf nodes.",
        "target_text": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is:\nChoices:\na) 10\nb) 11\nc) 12\nd) 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The given C++ code recursively reverses an array in-place using a two-pointer approach. It swaps the elements from the beginning and end, and recursively works toward the center.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h>\nusing namespace std;\nvoid func(int arr[], int left, int right) {\n    if (left >= right)\n        return;\n    int temp = arr[left];\n    arr[left] = arr[right];\n    arr[right] = temp;\n    func(arr, left + 1, right - 1);\n}\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i < size; i++)\n        cout << arr[i] << \" \";\n}\nint main() {\n    int arr[] = {1, 2, 3, 4};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    func(arr, 0, n - 1);\n    printArray(arr, n);\n    return 0;\n}\nChoices:\na) 1 2 3 4\nb) 4 3 2 1\nc) 1 4 2 3\nd) 4 1 2 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The given function is a recursive implementation of the factorial. For input 4, it computes 4 * 3 * 2 * 1 = 24.",
        "target_text": "Question: What value does function mystery return when called with a value of 4?\nint mystery (int number) {\n    if (number <= 1)\n        return 1;\n    else\n        return number * mystery(number - 1);\n}\nChoices:\na) 0\nb) 1\nc) 4\nd) 24\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Reversing an array requires swapping elements from both ends toward the center. For an array with n elements, floor(n/2) swaps are needed. If n is odd, this simplifies to (n-1)/2.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1) / 2\nb) n / 2\nc) (n / 2) - 1\nd) (n + 1) / 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Quick sort is a divide-and-conquer algorithm that partitions the array around a pivot element such that elements less than or equal to the pivot come before it, and elements greater come after it. This process is repeated recursively.",
        "target_text": "Question: The sorting technique where the array to be sorted is partitioned again and again in such a way that all elements less than or equal to the partitioning element appear before it and those which are greater appear after it is called __________.\nChoices:\na) Merge sort\nb) Quick sort \\n (A) Merge sort \\n (B) Quick sort\nc) Selection sort\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a balanced binary tree, the height is minimized, ensuring logarithmic time complexity for search operations. Lookup in such a tree is efficient, with worst-case time O(log n).",
        "target_text": "Question: A balanced binary tree with n items allows the lookup of an item in __________ worst-case time.\nChoices:\na) O(log n)\nb) O(n log 2)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing is a collision resolution technique in open addressing where a key is placed at the next available location in the array. The formula is: H(x) = (key + F(i)) mod table size.",
        "target_text": "Question: What is the hash function used in linear probing?\nChoices:\na) H(x) = key mod table size\nb) H(x) = (key + F(i^2)) mod table size\nc) H(x) = (key + F(i)) mod table size\nd) H(x) = X mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack can be used to reverse a string by pushing characters one by one and then popping them. This LIFO (Last-In-First-Out) behavior ensures the characters are printed in reverse order.",
        "target_text": "Question: Consider the following pseudocode that uses a stack:\n# Declare a stack of characters\nword = \"example\"\nchar_stack = []\nfor c in word:\n    char_stack.append(c)\nwhile char_stack:\n    c = char_stack.pop()\n    print(c, end='')\nChoices:\na) geeksquizgeeksquiz\nb) ziuqskeeg\nc) geeksquiz\nd) ziuqskeegziuqskeeg\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Finding both the minimum and maximum elements in an array of n elements can be optimized using pairwise comparisons. The total number of comparisons is n + floor((n-1)/2) = n + ((n+1)/2) - 2.",
        "target_text": "Question: The total comparisons in finding both the smallest and largest elements are:\nChoices:\na) 2*n + 2\nb) n + ((n+1)/2) - 2\nc) n + log n\nd) n^2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In planar graphs, Euler's formula states: V - E + R = C + 1, where V = vertices, E = edges, R = regions, and C = number of connected components. Given V=6, E=7, R=4, substituting values confirms that C = 2.",
        "target_text": "Question: Given a plane graph G with 2 connected components, 6 vertices, 7 edges, and 4 regions, what is the number of connected components?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The given C++ code performs a depth-first traversal (DFS) on an adjacency matrix representation of a graph starting from node 0. The output depends on the recursive call order based on adjacency.",
        "target_text": "Question: What would be the output of the following C++ program for the given input?\n0 0 0 1 1\n0 0 0 0 1\n0 0 0 1 0\n1 0 1 0 0\n1 1 0 0 0\n<Code performs DFS starting from node 0>\nChoices:\na) 0 2 3 1 4\nb) 0 3 2 4 1\nc) 0 2 3 4 1\nd) 0 3 2 1 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation (Polish notation) evaluates expressions by processing operators before operands from right to left. To answer correctly, the exact expression is required. Since it is missing, the context supports understanding the format but the answer is assumed to be based on a placeholder computation.",
        "target_text": "Question: What would be the solution to the given prefix notation?\nChoices:\na) 12\nb) 7.5\nc) 9\nd) 13.5\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Red-Black trees, color information (red/black) can be stored efficiently by utilizing unused bits in node pointers. For instance, the least significant bit of a pointer can indicate color without extra memory.",
        "target_text": "Question: How can you save memory when storing color information in a Red-Black tree?\nChoices:\na) Using least significant bit of one of the pointers in the node for color information\nb) Using another array with colors of each node\nc) Storing color information in the node structure\nd) Using negative and positive numbering\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Queues are widely used to simulate limited resource allocation in operating systems and networks, where processes or requests are handled in FIFO order as resources become available.",
        "target_text": "Question: Queues serve a major role in __________\nChoices:\na) Simulation of recursion\nb) Simulation of arbitrary linked list\nc) Simulation of limited resource allocation\nd) Simulation of heap sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary tree, the number of nodes with two children is always one less than the number of leaves in a full binary tree. If a tree has 20 leaves, it will have 19 nodes with two children.",
        "target_text": "Question: A binary tree T has 20 leaves. The number of nodes in T having two children is:\nChoices:\na) 18\nb) 19\nc) 17\nd) Any number between 10 and 20\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix (or Reverse Polish) notation places operators after operands. For example, the infix expression (A + B) becomes AB+ in postfix notation.",
        "target_text": "Question: In Postfix expressions, the operators come after the operands.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing involves mapping data to a hash table using a hash function. When inserting characters into a hash table, collisions are handled using methods like linear probing or chaining. The correct answer depends on the specific hash function, which is not shown here.",
        "target_text": "Question: Insert the characters of the string K R P C S N Y T J M into a hash table of size 10. Use the hash function:\nChoices:\na) Y\nb) C\nc) M\nd) P\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In infix expressions, operators are placed between operands. When parsed recursively, the structure results in a left expression, followed by an operator, then a right expression, which defines infix notation.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) Prefix expression\nb) Infix expression\nc) Postfix expression\nd) Parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A rope (or cord) is a data structure used for efficiently manipulating large strings. It is implemented as a binary tree of strings and is also referred to as a cord structure.",
        "target_text": "Question: Which of the following is also known as the Rope data structure?\nChoices:\na) Cord\nb) String\nc) Array\nd) Linked List\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of binary trees that can be created with `n` distinct nodes follows the Catalan number sequence. For 3 nodes, the number of structurally unique binary trees is 5.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a full binary tree, each internal node has exactly two children. The number of leaves L in such a tree is always L = I + 1, where I is the number of internal nodes.",
        "target_text": "Question: In a full binary tree, if the number of internal nodes is I, then the number of leaves L is?\nChoices:\na) L = 2*I\nb) L = I + 1\nc) L = I - 1\nd) L = 2*I - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Accessing the k-th element from the beginning of a singly linked list is O(1) if pointer starts from the head. Finding the k-th element from the end requires a traversal or two-pointer method, making it O(n).",
        "target_text": "Question: What are the time complexities of finding the 8th element from the beginning and 8th element from the end in a singly linked list? Let n > 8.\nChoices:\na) O(n) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(1) and O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B-trees and B+ trees are balanced search trees used in databases. B+ trees store all values in leaf nodes and allow larger fanout due to internal node optimizations. However, their depth is not always greater than that of B-trees, making option C False.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) Compared to B-tree, B+-tree has larger fanout\nb) Deletion in B-tree is more complicated than in B+-tree\nc) B+-tree has greater depth than corresponding B-tree\nd) Both B-tree and B+-tree have same search and insertion efficiencies\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-Trees are a type of balanced binary search tree that simulate red-black trees using simpler rules. Maintenance of an AA-tree involves two operations: skew (right rotation) and split (left rotation), making the number of structural shapes to consider just two.",
        "target_text": "Question: How many different shapes does maintenance of an AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees are used for efficient implementation of string operations such as substring search, longest common substring, and pattern matching. They allow these operations in linear time with respect to the string length.",
        "target_text": "Question: Which tree allows fast implementation of string operations?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Separate chaining is a method for handling collisions in hash tables using linked lists. Although it effectively resolves collisions, it increases pointer usage and memory overhead.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining with linked lists?\nChoices:\na) It requires many pointers\nb) It requires linked lists\nc) It uses array\nd) It does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An edge cluster in graph theory typically refers to a tightly connected group of nodes. The minimum number of edges to define such a cluster is one--connecting two nodes--hence, the simplest form includes one edge.",
        "target_text": "Question: How many edges are present in an edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A Cartesian tree is built from a sequence of unique numbers using a recursive rule: the root is the minimum element, and the left and right subtrees are built from the elements to the left and right of the root. It is not height-balanced, but for unique inputs, it is uniquely defined.",
        "target_text": "Question: Which of the below statements are True?\ni. A Cartesian tree is not a height balanced tree\nii. A Cartesian tree of a sequence of unique numbers can be uniquely generated\nChoices:\na) Both statements are True\nb) Only i is True\nc) Only ii is True\nd) Both are False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-3 tree is a balanced search tree where each node can have two or three children. The height of a 2-3 tree with `n` elements lies between log\u2083(n + 1) and log2(n + 1), due to its structure supporting varying degrees.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log\u2083(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In the given C++ code, the issue lies not with queue initialization but typically with conceptual understanding. However, the correct answer is related to the comment suggesting queue setup might be missing (e.g., improper structure or setup for viewing tree levels).",
        "target_text": "Question: What is wrong in the below code for printing the Right View of a binary tree using the Queue data structure?\n#include <iostream>\n#include <queue>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\nvoid printRightView(Node* root) {\n    if (root == nullptr) return;\n    queue<Node*> q;\n    q.push(root);\n    while (!q.empty()) {\n        int n = q.size();\n        for (int i = 0; i < n; i++) {\n            Node* x = q.front();\n            q.pop();\n            if (i == n - 1) {\n                cout << x->data << \" \";\n            }\n            if (x->left) q.push(x->left);\n            if (x->right) q.push(x->right);\n        }\n    }\n}\nChoices:\na) We have not initialized anything in the Queue\nb) Queue will never be empty.\nc) left and right nodes of the tree are null.\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To compute the sum of values between two nodes L and H in a balanced BST, you skip subtrees that are completely out of range. The query takes time O(log n) for traversal and O(m) for m matching elements. The full time bound may include constants a, b, c, and d to model deeper operations.",
        "target_text": "Question: Suppose we have a balanced binary search tree T holding n numbers. We are given two numbers L and H and wish to sum up all the numbers in T that lie between L and H. Suppose there are m such numbers in T. If the tightest upper bound on the time to compute the sum is O(n^a log^b n + m*c log^d n), the value of a + 10b + 100c + 1000d is __________.\nChoices:\na) 60\nb) 110\nc) 210\nd) 50\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The trace of a matrix is the sum of elements on its main diagonal, which are at positions where the row index equals the column index (i == j).",
        "target_text": "Question: What does the following piece of code do?\nfor (int i = 0; i < row; i++) {\n    for (int j = 0; j < column; j++) {\n        if (i == j)\n            sum = sum + array[i][j];\n    }\n}\nSystem.out.println(sum);\nChoices:\na) Normal of a matrix\nb) Trace of a matrix\nc) Square of a matrix\nd) Transpose of a matrix\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Universal hashing is a technique that chooses the hash function at random from a carefully designed class of functions, offering better average-case performance by minimizing collision probability.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) Hashing by division\nb) Hashing by multiplication\nc) Universal hashing\nd) Open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A doubly linked list contains two pointers per node: one to the next node and one to the previous. This allows bidirectional traversal but also increases space usage and complexity compared to a singly linked list.",
        "target_text": "Question: Which of the following is False about a doubly linked list?\nChoices:\na) We can navigate in both directions\nb) It requires more space than a singly linked list\nc) The insertion and deletion of a node take a bit longer\nd) Implementing a doubly linked list is easier than a singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Recursive algorithms often use the system call stack to maintain state across function calls. A non-recursive version of such algorithms requires explicit use of a stack data structure to emulate this behavior.",
        "target_text": "Question: What data structure would you most likely see in a non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked List\nc) Tree\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a queue implemented with a linked list, new elements are added at the rear and removed from the front. During insertion into a non-empty queue, only the `rear` pointer is updated.",
        "target_text": "Question: In a linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In a binary search tree (BST), the left child must have a value less than the parent. The given statement implies this is True for all trees, which is incorrect. It only applies to BSTs, not general binary trees.",
        "target_text": "Question: Left child of a parent node has value lesser than the parent node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap, the heap property ensures that the largest element is always located at the root. This structure allows constant-time access to the maximum element.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) Leaf node\nb) First node of left subtree\nc) Root node\nd) First node of right subtree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists are dynamic structures ideal for collections where the size may change frequently. They allow efficient insertion and deletion, making them suitable for non-permanent or frequently modified data.",
        "target_text": "Question: Linked lists are best suited __________.\nA. For relatively permanent collections of data.\nB. For the size of the structure and the data in the structure are constantly changing.\nC. Data structure\nD. For none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A pseudograph is a graph that allows self-loops and multiple edges. An adjacency matrix representing a graph with non-zero diagonal entries indicates the presence of self-loops, identifying a pseudograph.",
        "target_text": "Question: Given adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0}, {0,1}}\nii) {{0,1}, {1,0}}\niii) {{0,0,1}, {0,1,0}, {1,0,0}}\nChoices:\na) only i)\nb) ii) and iii)\nc) i) and iii)\nd) i), ii), and iii)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Any decision tree that sorts n elements must have at least n leaves, and therefore a height of at least \u03a9(n) in the worst case, as each comparison decision leads to a distinct permutation of input.",
        "target_text": "Question: Any decision tree that sorts n elements has height:\nChoices:\na) \u03a9(n)\nb) \u03a9(log n)\nc) \u03a9(n log n)\nd) \u03a9(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a hypergraph, a hyperedge can connect any number of vertices. The degree of a vertex is the number of hyperedges it is part of. The degree sequence is the list of degrees sorted in non-increasing order.",
        "target_text": "Question: What is the degree sequence of the given hypergraph in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3, 2, 1, 1, 1, 1\nb) 3, 2, 2, 2, 1, 1\nc) 3, 2, 2, 2, 2, 1\nd) 3, 2, 2, 1, 1, 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Topological sorting of a Directed Acyclic Graph (DAG) can be done in linear time using either Depth First Search (DFS) or Kahn's algorithm. The time complexity is O(V + E), where V is the number of vertices and E is the number of edges.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) Cubic\nb) Quadratic\nc) Linear\nd) Logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays provide contiguous memory allocation and support random access. Linked lists allow flexible size but have slower access due to pointer traversal. Access speed is generally better in arrays.",
        "target_text": "Question: Which of the following points is/are not True about the linked list data structure when compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in linked lists\nc) Random access is not allowed in a typical implementation of linked lists\nd) Access of elements in a linked list takes less time than in arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A skip list is a linked structure designed for fast search operations. It uses multiple levels of linked lists with skip pointers to allow logarithmic search time.",
        "target_text": "Question: What is a skip list?\nChoices:\na) A linked list with size value in nodes\nb) A linked list that allows faster search within an ordered sequence\nc) A linked list that allows slower search within an ordered sequence\nd) A tree which is in the form of a linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store data in contiguous memory locations and are efficient for storing elements of the same data type. This allows simple memory management and fast indexed access.",
        "target_text": "Question: What are the advantages of arrays?\nChoices:\na) Objects of mixed data types can be stored\nb) Elements in an array cannot be sorted\nc) Index of the first element of an array is 1\nd) Easier to store elements of the same data type\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), the maximum element is located at the rightmost node. To find it, traverse from the root repeatedly to the right child until reaching a node with no right child.",
        "target_text": "Question: How will you find the maximum element in a binary search tree?\n<Code snippets given for options>\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: If all edge weights in a graph are multiplied by a constant, the shortest path remains the same. This is because path weights scale proportionally and the relative path order does not change.",
        "target_text": "Question: Is the following statement valid about shortest paths?\nGiven a graph, suppose we have calculated shortest paths from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains the same--only the total weight of the path changes.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a complete graph of 100 vertices where edge weights are defined as |i - j| for edge (vi, vj), the minimum spanning tree (MST) connects adjacent vertices (v1-v2, v2-v3, ..., v99-v100). Each edge contributes a weight of 1, and there are 99 such edges.",
        "target_text": "Question: Consider a graph G=(V, E), where V = {v1, v2, ..., v100} and E = {(vi, vj) | 1 <= i < j <= 100}. The weight of edge (vi, vj) is |i - j|. The weight of the minimum spanning tree of G is __________.\nChoices:\na) 99\nb) 100\nc) 98\nd) 101\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Auxiliary space is the extra space or temporary space used by an algorithm. In the given code, an array `temp[10]` is used for temporary storage of `d` elements, hence the auxiliary space is O(d).",
        "target_text": "Question: What will be the auxiliary space complexity of the following code?\n<Code rotates an array using an intermediate temp[] array>\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, the `BitSet` class is used to represent a bit array. It allows bitwise manipulation and is part of the `java.util` package, providing methods like `set`, `clear`, and `flip` for managing bits efficiently.",
        "target_text": "Question: Which class in Java can be used to represent a bit array?\nChoices:\na) BitSet\nb) BitVector\nc) BitArray\nd) BitStream\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a d-heap (a generalization of a binary heap where each node has d children), operations like insert, delete, and create are well-defined. However, a generic `find` operation is not directly supported since heaps are not designed for search.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) Insert\nb) Delete\nc) Find\nd) Create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A triply linked list extends the doubly linked list with an additional pointer (often called top or third) to provide enhanced navigation. Inserting a node typically involves initializing the pointers and updating head/tail references.",
        "target_text": "Question: Consider the following algorithm to insert an element in a triply linked list:\ninitializing previous, next and top pointers to null\npointing the head and tail to the node created\npointing previous, next and top pointers to the node created\ninitializing the head and tail to null\ninitializing previous, next and top pointers to null\ninitializing the head and tail to null\npointing previous, next and top pointers to the node\nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Both Dijkstra's and Bellman-Ford algorithms compute shortest paths from a source node. When all edge weights are positive, the actual shortest path costs are the same, although the paths themselves might differ in structure.",
        "target_text": "Question: Is the following statement valid?\nGiven a graph where all edges have positive weights, the shortest paths produced by Dijkstra and Bellman-Ford algorithms may be different, but path weight would always be the same.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The given function appends a node at the end of a singly linked list. It traverses the list to find the last node and updates its `next` pointer to the new node. This is a common operation in list manipulation.",
        "target_text": "Question: What is the functionality of the following code?\npublic void function(Node node) {\n  if (size == 0)\n    head = node;\n  else {\n    Node temp, cur;\n    for (cur = head; (temp = cur.getNext()) != null; cur = temp);\n    cur.setNext(node);\n  }\n  size++;\n}\nChoices:\na) Inserting a node at the beginning of the list\nb) Deleting a node at the beginning of the list\nc) Inserting a node at the end of the list\nd) Deleting a node at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a K-ary tree, the height of a tree with only the root node is 0 because there are no edges from the root to any other node.",
        "target_text": "Question: What is the height of a K-ary tree having only the root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Transposing a matrix involves swapping elements across its diagonal. In this case, the function iterates over the upper triangle and swaps A[i][j] with A[j][i], effectively transposing the matrix.",
        "target_text": "Question: Let A be a matrix of size n x n. Consider the following program. What is the expected output?\nvoid fun(int A[][N]) {\n    for (int i = 0; i < N; i++)\n        for (int j = i + 1; j < N; j++)\n            swap(A[i][j], A[j][i]);\n}\nChoices:\na) Matrix A\nb) Diagonal Of matrix A\nc) Transpose of matrix A\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operator precedence and associativity guide the conversion from infix to postfix expressions. In this case, the postfix expression is created by respecting right and left associativity and operator precedence.",
        "target_text": "Question: Assume that the operators +, -, * are left-associative and ^ is right-associative. The order of precedence (from highest to lowest) is ^, *, +, -. What is the postfix expression for the infix expression a + b * c - d ^ e ^ f?\nChoices:\na) a b c * + d e f ^ ^ -\nb) a b c * + d e ^ f ^ -\nc) a b + c * d - e ^ f ^\nd) - + a * b c ^ ^ d e f\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B-tree of minimum degree t and height h has a search time complexity of \u03b8(log\u209c n), where n is the number of keys. This allows for efficient disk-based searching in large datasets.",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) \u03b8(log n h * t)\nb) \u03b8(log t n * h)\nc) \u03b8(log h n)\nd) \u03b8(log t n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-trees are simplified versions of red-black trees. They maintain balance using right-child-only 'red' links and a level field instead of colors. Coding practices (e.g., recursion) are not structural rules, hence statement 2 is incorrect.",
        "target_text": "Question: Of the following rules that are followed by an AA-tree, which of the following is incorrect?\n1. Only right children can be red\n2. Procedures are coded recursively\n3. Instead of storing colors, the level of a node is stored\n4. There should not be any left children\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In a binary min-heap, each parent must be less than or equal to its children. During heap construction, comparisons and swaps enforce this property. A violation of this rule would occur on a line where this relationship is not upheld.",
        "target_text": "Question: For the construction of a binary heap with the property that the parent node has a value less than the child node, which line is incorrect (lines indexed from 1)?\nChoices:\na) Line - 3\nb) Line - 5\nc) Line - 6\nd) Line - 7\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: To implement a stack using a priority queue, each new item must be assigned a priority that ensures it is removed before earlier items. This is achieved by assigning strictly decreasing keys, so the last pushed item is removed first.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K) where K is a key. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys should be in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In a linked list-based stack, the top element (`first`) is removed by assigning `first` to `first.getNext()`. The pop operation should return the value of the original top node before the update.",
        "target_text": "Question: Given the Node and Stack classes, which of the following pop() implementations correctly removes and returns the top of the stack?\n<Java pop() method code options provided>\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix expressions are evaluated from right to left. The expression `+-9 2 7` is evaluated as -9 + (2 - 7) = -9 + (-5) = -14. Thus, the correct answer is 14 (absolute value).",
        "target_text": "Question: Using prefix evaluation, what is the result of the expression +-9 2 7?\nChoices:\na) 10\nb) 4\nc) 17\nd) 14\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Compared to arrays, linked lists provide dynamic memory allocation, efficient insertion/deletion, and do not require a fixed size. However, they lack random access and have lower cache locality.",
        "target_text": "Question: Which of the following points is/are True about the Linked List data structure when compared with arrays?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance.\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) The size of array has to be pre-decided, linked lists can change their size any time.', 'E\\nAll of the above\nAnswer: E"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The C++ code reverses the first `k` elements of an array using a two-pointer approach. For k=3 and array {1, 2, 3, 4, 5}, it results in {3, 2, 1, 4, 5}.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h>\nusing namespace std;\nvoid func(int a[], int n, int k) {\n    if (k <= n) {\n        for (int i = 0; i < k/2; i++)\n            swap(a[i], a[k - i - 1]);\n    }\n}\nint main() {\n    int a[] = {1, 2, 3, 4, 5};\n    int n = sizeof(a) / sizeof(int), k = 3;\n    func(a, n, k);\n    for (int i = 0; i < n; ++i)\n        cout << a[i] << \" \";\n    return 0;\n}\nChoices:\na) 3 2 1 4 5\nb) 5 4 3 2 1\nc) 1 2 5 4 3\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sparse array stores only non-null (or non-zero) elements, saving memory. In contrast, a normal array of length 6 stores all elements, including nulls. So its logical size is 6, but the sparse representation only stores 2 meaningful elements.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10}; What would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a XOR linked list, each node stores the XOR of the addresses of the previous and next nodes instead of maintaining two separate pointers. This saves memory in comparison to traditional doubly linked lists.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) Every node stores the XOR of addresses of previous and next nodes\nb) Actual memory address of next node\nc) Every node stores the XOR of addresses of previous and next two nodes\nd) Every node stores XOR of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The given pseudocode performs a right rotation of a binary tree node. This operation restructures the tree by making the left child the new root of the subtree, useful in balancing trees like AVL and splay trees.",
        "target_text": "Question: What output does the below pseudo code produce?\nTree_node function(Tree_node x) {\n    Tree_node y = x.left;\n    x.left = y.right;\n    y.right = x;\n    return y;\n}\nChoices:\na) Right rotation of subtree\nb) Left rotation of subtree\nc) Zig-zag operation\nd) Zig-zig operation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The van Emde Boas (vEB) tree is a tree data structure that supports fast predecessor, successor, and minimum/maximum queries in O(log log U) time. It was introduced by Peter van Emde Boas.",
        "target_text": "Question: Who invented the vEB tree, also known as Van Emde Boas Tree?\nChoices:\na) Peter Van Emde Boas\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Matrix multiplication is associative and distributive over addition, but not commutative. That is, A * B \u2260 B * A in general, making commutativity the property that does not hold.",
        "target_text": "Question: Which of the following properties does not hold for matrix multiplication?\nChoices:\na) Associative\nb) Distributive\nc) Commutative\nd) Additive Inverse\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues are abstract data structures with several variations including ordinary queue (FIFO), circular queue (with wrap-around logic), and priority queue (based on priority levels). 'Single ended queue' is not a standard classification.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) Priority queue\nb) Circular queue\nc) Single ended queue\nd) Ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In column-major order, elements of a matrix are stored column by column in memory. For the matrix:\n```\na b c\nd e f\ng h i\n```\nthe order will be a, d, g, b, e, h, c, f, i.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\n```\na b c\nd e f\ng h i\n```\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap, new elements are inserted at the next available leaf position and then 'heapified up' to maintain the heap property. The level-order traversal changes depending on the heapification process.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 3, 2, 1, 5\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In double hashing, the two hash functions h1(k) and h2(k) are used for probe sequences. A correct implementation involves computing h1(k) = k mod m and h2(k) = 1 + (k mod m') to ensure uniformity and reduce clustering.",
        "target_text": "Question: What are the values of h1(k) and h2(k) in the hash function?\n- h1(k) = m mod k\n  h2(k) = 1 + (m' mod k)\n- h1(k) = 1 + (m mod k)\n  h2(k) = m' mod k\n- h1(k) = 1 + (k mod m)\n  h2(k) = k mod m\n- h1(k) = k mod m\n  h2(k) = 1 + (k mod m')\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: The postfix form of the expression (A+B)*(C*D-E)*F/G is:\nChoices:\na) AB+CD*E-FG/**\nb) AB+CD*E-F**G/\nc) AB+CD*E-*F*G/\nd) AB+ CDE*-*F*G/\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: On what value does the probe sequence depend on?\nChoices:\na) c1\nb) k\nc) c2\nd) m\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in min heap take __________\nChoices:\na) logarithmic and linear time constant respectively\nb) constant and linear time respectively\nc) constant and quadratic time respectively\nd) constant and logarithmic time respectively\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Consider the following definition in c programming language.\nstruct node\n{\n    int data;\n    struct node * next;\n}\ntypedef struct node NODE;\nNODE *ptr;\nWhich of the following c code is used to create new node?\nChoices:\na) ptr = (NODE*)malloc(sizeof(NODE));\nb) ptr = (NODE*)malloc(NODE);\nc) ptr = (NODE*)malloc(sizeof(NODE*));\nd) ptr = (NODE)malloc(sizeof(NODE));\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Consider yourself to be in a planet where the computational power of chips to be slow. You have an array of size 10.You want to perform enqueue some element into this array. But you can perform only push and pop operations .Push and pop operation both take 1 sec respectively. The total time required to perform enQueue operation is?\nChoices:\na) 20\nb) 40\nc) 42\nd) 43\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: 10. What are the disadvantages of arrays?\nChoices:\na) Data structure like queue or stack cannot be implemented\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Index value of an array can be negative\nd) Elements are sequentially accessed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: Consider a hash function that distributes keys uniformly. The hash table size is 20. After hashing of how many keys will the probability that any new key hashed collides with an existing one exceed 0.5.\nChoices:\na) 5\nb) 6\nc) 7\nd) 10\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: How many top trees are there in a tree with single vertex?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths.",
        "target_text": "Question: What would be the value of the distance matrix, after the execution of the given code?\n#include <bits/stdc++.h>\n#define INF 1000000\nint graph[V][V] = {   {0,   7,  INF, 4},\n                      {INF, 0,   13, INF},\n                      {INF, INF, 0,   12},\n                      {INF, INF, INF, 0}\n                  };\n \nint distance[V][V], i, j, k;\n \nfor (i = 0; i < V; i++)\n        for (j = 0; j < V; j++)\n     distance[i][j] = graph[i][j];\n \nfor (k = 0; k < V; k++)\n for (i = 0; i < V; i++)\n         for (j = 0; j < V; j++)\n                {\n              if (distance[i][k] + distance[k][j] < distance[i][j])\n                  distance[i][j] = distance[i][k] + distance[k][j];\n \n                           return 0;\n                }\nd) None of the mentioned\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: The number of nodes of height h in any n - element heap is __________.\nChoices:\na) h\nb) 2h\nc) ceil(n/2h)/\nd) ceil(n/2h+1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths.",
        "target_text": "Question: In which of the following does a Directed Acyclic Word Graph finds its application in?\nChoices:\na) String Matching\nb) Number Sorting\nc) Manipulations on numbers\nd) Pattern Printing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Where does a triply linked list contains an extra pointer in comparison to a doubly linked list?\nChoices:\na) Top of the node\nb) Bottom of the node\nc) Before the node\nd) After the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is the Height of the root node of ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: Is MinHash used as a tool for association rule learning.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of pointer is called __________ 233. A linear collection of data elements where the   linear node is given by means of pointer is called   __________.\nChoices:\na) Linked list\nb) Node list\nc) Primitive list\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: A single array A[1..MAXSIZE] is used to implement two stacks. The two stacks grow from opposite ends of the array. Variables top1 and top2 (topl< top 2) point to the location of the topmost element in each of the stacks. If the space is to be used efficiently, the condition for 'stack full' is:\nChoices:\na) (top1 = MAXSIZE/2) and (top2 = MAXSIZE/2+1)\nb) top1 + top2 + 1 = MAXSIZE\nc) (top1= MAXSIZE/2) or (top2 = MAXSIZE)\nd) top1= top2 -1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is the maximum number of children that a binary tree node can have?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Out of the following given options, which is the fastest algorithm?\nChoices:\na) fibonacci heap\nb) pairing heap\nc) d-ary heap\nd) binary heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Given that the line   \f delete newPtr;   226. Given that the line   delete newPtr;  just executed, what can you conclude?\nChoices:\na) The memory referenced by newPtr is released only if it is \\n needed by the system.\nb) The pointer newPtr is of type void *.\nc) The pointer newPtr only exists if there was an error \\n freeing the memory.\nd) The pointer newPtr still exists.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: To implement a stack using queue(with only enqueue and dequeue operations), how many queues will you need?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: Which is the most appropriate data structure for applying balancing of symbols algorithm?\nChoices:\na) stack\nb) queue\nc) tree\nd) graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Suffix array is space efficient than the suffix tree.\nChoices:\na) True\nb) Fasle\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Time taken in decreasing the node value in a binomial heap is\nChoices:\na) O(n)\nb) O(1)\nc) O(logn)\nd) O(nlogn)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What determines the order of evaluation of a prefix expression?\nChoices:\na) precedence and associativity\nb) precedence only\nc) associativity only\nd) depends on the parser\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: One can convert an infix expression to a postfix   expression using a __________\nChoices:\na) Stack\nb) Queue\nc) Deque\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: What are the applications of linear probing include:\nChoices:\na) Databases\nb) Caching\nc) Compiler Design\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: The number of unused pointers in a complete   binary tree of depth 5 is:\nChoices:\na) 4\nb) 8\nc) 16\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: Which of the following real world scenarios would you associate with a stack data structure?\nChoices:\na) piling up of chairs one above the other\nb) people standing in a line to be serviced at a counter\nc) offer services based on the priority of the customer\nd) tatkal Ticket Booking in IRCTC\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: Which scheme provides good performance?\nChoices:\na) open addressing\nb) universal hashing\nc) hashing by division\nd) hashing by multiplication\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Evaluate the postfix expression ab + cd/- where a=5, b=4, c=9, d=3.\nChoices:\na) 23\nb) 15\nc) 6\nd) 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: ++a*bc*+defg is an?\nChoices:\na) postfix expression\nb) infix expression\nc) prefix expression\nd) invalid expression\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: What is the space complexity for deleting a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) Either O(1) or O(n)\nd) O(logn)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: How many prime concepts are available in nearest neighbour search in a kd tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In a two-dimensional search tree, the root is arbitrarily chosen to be?\nChoices:\na) even\nb) odd\nc) depends on subtrees\nd) 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: In general, linked lists allow: \nChoices:\na) Insertions and removals anywhere.\nb) Insertions and removals only at one end.\nc) Insertions at the back and removals from the front.\nd) None of the above.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Consider the array representation of a binary min-heap containing 1023 elements. The minimum number of comparisons required to find the maximum in the heap is __________ . \nChoices:\na) 510\nb) 511\nc) 512\nd) 255\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: When executing a sequence of Unions, a node of rank r must have at least 2r descendants.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths.",
        "target_text": "Question: What is the maximum number of possible non zero values in an adjacency matrix of a simple graph with n vertices?\nChoices:\na) (n*(n-1))/2\nb) (n*(n+1))/2\nc) n*(n-1)\nd) n*(n+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A binary tree can be converted in to its mirror image by traversing it in __________\nChoices:\na) In-order\nb) Pre-order\nc) Post-order\nd) Any order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Level order traversal of a tree is formed with the help of\nChoices:\na) breadth first search\nb) depth first search\nc) dijkstra's algorithm\nd) prims algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is a disadvantage of parallel array over the traditional arrays?\nChoices:\na) When a language does not support records, parallel arrays can be used\nb) Increased locality of reference\nc) Ideal cache behaviour\nd) Insertion and Deletion becomes tedious\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is the Height of the root node of K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: What is the hash function used in the division method?\nChoices:\na) h(k) = k/m\nb) h(k) = k mod m\nc) h(k) = m/k\nd) h(k) = m mod k\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following operations does not destroy the leftist heap property?\nChoices:\na) insert\nb) merge\nc) delete\nd) swap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: The recurrence relation that arises in relation with the complexity of binary search is:\nChoices:\na) T(n) = 2T(n/ 2) + k , where k is constant\nb) T(n) = T(n / 2) + k , where k is constant\nc) T(n) = T(n / 2) + log n\nd) T(n) = T(n / 2) + n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the order of a matrix?\nChoices:\na) number of rows X number of columns\nb) number of columns X number of rows\nc) number of rows X number of rows\nd) number of columns X number of columns\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: In what way the Symmetry Sparse Matrix can be stored efficiently?\nChoices:\na) Heap\nb) Binary tree\nc) Hash table\nd) Adjacency List\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths.",
        "target_text": "Question: A graph with n vertices will definitely have a   parallel edge or self loop if the total number of   edges are __________\nChoices:\na) greater than n-1\nb) less than n(n-1)\nc) greater than n(n-1)/2\nd) less than n2/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is the time taken for a range query for a perfectly balanced tree?\nChoices:\na) O(N)\nb) O(log N)\nc) O(sqrt(N)+M)\nd) O(sqrt(N))\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String data structures represent sequences of characters. Operations include concatenation, substring search, slicing, and pattern matching, often used in text processing and compiler design.",
        "target_text": "Question: What is the output of the following code?, #include <iostream>\nusing namespace std;\nint main()\n{\n    string str = \"Hello\";\n    cout << str.substr(2, 5);\n    return 0;\n}, \nChoices:\na) Syntax error\nb) ello\nc) llo\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Associative arrays can be implemented using __________\nChoices:\na) B-tree\nb) A doubly linked list\nc) A single linked list\nd) A self balancing binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Which of the following data structure is used to convert postfix expression to infix expression?\nChoices:\na) Stack\nb) Queue\nc) Linked List\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: If -*+abcd = 11, find a, b, c, d using evaluation of prefix algorithm.\nChoices:\na) a=2, b=3, c=5, d=4\nb) a=1, b=2, c=5, d=4\nc) a=5, b=4, c=7,d=5\nd) a=1, b=2, c=3, d=4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the functionality of the following code? Choose the most appropriate answer.\npublic int function()\n{\n if(head == null)\n  return Integer.MIN_VALUE;\n int var;\n Node temp = head;\n Node cur;\n while(temp.getNext() != head)\n {\n  cur = temp;\n  temp = temp.getNext();\n }\n if(temp == head)\n {\n  var = head.getItem();\n  head = null;\n  return var;\n }\n var = temp.getItem();\n cur.setNext(head);\n return var;\n}\nChoices:\na) Return data from the end of the list\nb) Returns the data and deletes the node at the end of the list\nc) Returns the data from the beginning of the list\nd) Returns the data and deletes the node from the beginning of the list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In parse trees, every internal node represents a non-terminal and every leaf node represents a terminal.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: The value of h2(k) can be composite relatively to the hash table size m.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Linked lists are not suitable data structures for   which one of the following problems?\nChoices:\na) Insertion sort\nb) Binary search\nc) Radix sort\nd) Polynomial manipulation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: 11. Assuming int is of 4bytes, what is the size of int arr[15];?\nChoices:\na) 15\nb) 19\nc) 11\nd) 60\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following is a valid heap ? \nChoices:\na) A\nb) B\nc) C\nd) D\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the other name for a postfix expression?\nChoices:\na) Normal polish Notation\nb) Reverse polish Notation\nc) Warsaw notation\nd) Infix notation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following is the implementation of the ternary tree?\nChoices:\na) AVL Tree\nb) Ternary Heap\nc) Hash Table\nd) Dictionary\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the expected error for estimating the Jaccard index using MinHash scheme for k different hash functions?\nChoices:\na) O (log k!)\nb) O (k!)\nc) O (k2)\nd) O (1/k(1/2))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Electrical connectivity is an example of equivalence relation.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: The maximum number of binary trees that can be formed with three unlabelled nodes is:\nChoices:\na) 1\nb) 5\nc) 4\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Abstract syntax tree is an input to which phase of compiler?\nChoices:\na) Lexical analysis\nb) Syntax Analysis\nc) Semantic Analysis\nd) Intermediate code generation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: Who invented the MinHash technique?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Andrei Broder\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider a linked list of n elements. What is the   time taken to insert an element after an element   pointed by some pointer?\nChoices:\na) O(1)\nb) O(log2 n)\nc) O(n)\nd) O(n log2 n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A program to search a contact from phone directory can be implemented efficiently using __________\nChoices:\na) a BST\nb) a trie\nc) a balanced BST\nd) a binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which tree allows fast implementation of a set of string operation?\nChoices:\na) Rope Tree\nb) Tango Tree\nc) Generalized Suffix Tree\nd) Top Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String data structures represent sequences of characters. Operations include concatenation, substring search, slicing, and pattern matching, often used in text processing and compiler design.",
        "target_text": "Question: What is the output of the following code?, #include <iostream>\nusing namespace std;\nint main()\n{\n    string str1 = \"Hello\";\n    string str2 = \"Geeks\";\n    string str3 = str1 + str2;\n    cout << str3 << endl;\n    return 0;\n}, \nChoices:\na) Hello +  Geeks\nb) str1 + str2\nc) Hello Geeks\nd) HelloGeeks\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the other name or Van Emde Boas Tree data structure?\nChoices:\na) Van Emde Boas Array\nb) Van Emde Boas Stack\nc) Van Emde Boas Priority Queue\nd) Van Emde Boas Heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which is the simplest of all binary search trees?\nChoices:\na) AVL tree\nb) Treap\nc) Splay tree\nd) Binary heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a particular order (ascending or descending). Adaptive sorting algorithms improve performance when data is partially sorted.",
        "target_text": "Question: An adaptive sorting algorithm __________\nChoices:\na) adapts to new computers\nb) takes advantage of already sorted elements\nc) takes input which is already sorted \\n (A) adapts to new computers \\n (B) takes advantage of already sorted elements \\n (C) takes input which is already sorted\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is not a disadvantage of bit array?\nChoices:\na) Without compression, they might become sparse\nb) Accessing individual bits is expensive\nc) Compressing bit array to byte/word array, the machine also has to support byte/word addressing\nd) Storing and Manipulating in the register set for long periods of time\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: The algorithm given is for deleting an element in an unrolled linked list. What should be the correct statement for the blank given below?\nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: What will be the output of the following program?\nmain()  \n{  \n   char str[]=\"san foundry\";  \n   int len = strlen(str);  \n   int i;  \n \n   for(i=0;i<len;i++)  \n        push(str[i]);  // pushes an element into stack\n \n   for(i=0;i<len;i++)  \n      pop();  //pops an element from the stack\n}\nChoices:\na) sanfoundry\nb) san foundry\nc) yrdnuof nas\nd) foundry nas\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the node path length of a node with 0 or 1 child?\nChoices:\na) 1\nb) -1\nc) 0\nd) null\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: B Trees are generally\nChoices:\na) very deep and narrow\nb) very wide and shallow\nc) very deep and very wide\nd) cannot say \\n (A) very deep and narrow \\n (B) very wide and shallow \\n (C) very deep and very wide \\n (D) cannot say\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider the following piece of 'C' code fragment that removes duplicates from an ordered list of integers., #include <stdio.h>\nNode *remove_duplicates(Node *head, int *j) {\n    Node *t1, *t2;\n    *j = 0;\n    t1 = head;\n    if (t1 != NULL) t2 = t1->next;\n    else return head;\n    *j = 1;\n    if (t2 == NULL)\n        return head;\n    while (t2 != NULL) {\n        if (t1->val != t2->val) { // S1\n            (*j)++; t1->next = t2; t1 = t2; // S2\n        }\n        t2 = t2->next;\n    }\n    t1->next = NULL;\n    return head;\n}, \nChoices:\na) (a). n-1 times, since comparison is pairwise for n elements.\\n(b). maximum : n-1 for all distinct elements, minimum: 0 for all same elements.\\n(C). j keeps count of distinct nodes in the list.\nb) (a). n times, since comparison is pairwise for n elements.\\n(b). maximum : n-1 for all distinct elements, minimum: 0 for all same elements.\\n(C). j keeps count of distinct nodes in the list.\nc) (a). n-1 times, since comparison is pairwise for n elements.\\n(b). maximum : n-1 for all distinct elements, minimum: 1 for all same elements.\\n(C). j keeps count of distinct nodes in the list.\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is balanced and is a height balanced tree\nb) a tree which is unbalanced and is a height balanced tree\nc) a tree with three children\nd) a tree with atmost 3 children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider an implementation of unsorted singly linked list. Suppose it has its representation with a head pointer only. Given the representation, which of the following operation can be implemented in O(1) time?\nChoices:\na) I and II\nb) I and III\nc) I, II and III\nd) I, II and IV\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient insertion\nb) to have efficient deletion\nc) to have efficient region query\nd) to have efficient traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: To convert the postfix expression into the infix expression we use stack and scan the postfix expression from left to right.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a particular order (ascending or descending). Adaptive sorting algorithms improve performance when data is partially sorted.",
        "target_text": "Question: You have to sort a list L consisting of a sorted   list followed by a few 'random' elements.   Which of the following sorting methods would be   especially suitable for such a task?\nChoices:\na) Bubble sort\nb) Selection sort\nc) Quick sort\nd) Insertion sort\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: In Breadth First Search of Graph, which of the   following data structure is used?\nChoices:\na) Stack\nb) Queue\nc) Linked List\nd) None of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the load factor?\nChoices:\na) Average array size\nb) Average key size\nc) Average chain length\nd) Average hash table length\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Why the below pseudo code where x is a value, wt is weight factor and t is root node can't insert?\nChoices:\na) when x>t. element Rotate-with-left-child should take place and vice versa\nb) the logic is incorrect\nc) the condition for rotating children is wrong\nd) insertion cannot be performed in weight balanced trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which pattern is used to evaluate abstract syntax tree?\nChoices:\na) Visitor pattern\nb) Singleton Pattern\nc) Proxy pattern\nd) Adapter pattern\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Five node splitting operations occurred when an entry is inserted into a B-tree. Then how many nodes are written?\nChoices:\na) 14\nb) 7\nc) 11\nd) 5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is an advantage of parallel arrays?\nChoices:\na) Poor locality of reference for non-sequential access\nb) Very little direct language support\nc) Expensive to shrink or grow\nd) Increased Locality of Reference\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Consider B+ tree in which the search key is 12 bytes long, block size is 1024 bytes, record pointer is 10 bytes long and block pointer is 8 bytes long. The maximum number of keys that can be accommodated in each non-leaf node of the tree is\nChoices:\na) 49\nb) 50\nc) 51\nd) 52\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Recursive procedures are implemented by   using __________ data structure.\nChoices:\na) queues\nb) stacks\nc) linked lists\nd) strings\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Can child node be always called Leaf node in the K-ary tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A balance factor in AVL tree is used to check __________\nChoices:\na) what rotation to make.\nb) if all child nodes are at same level.\nc) when the last rotation occurred.\nd) if the tree is unbalanced.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What would be the Prefix notation and Postfix notation for the given equation?\nChoices:\na) ++ABC and AB+C+\nb) AB+C+ and ++ABC\nc) ABC++ and AB+C+\nd) ABC+ and ABC+\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: For how many vertices in a set, is top tree defined for underlying tree?\nChoices:\na) 3\nb) 4\nc) 5\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Quick sort running time depends on the   selection of __________\nChoices:\na) size of array\nb) pivot element\nc) sequence of values\nd) none of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which type of binary search tree is imitated for construction of tango tree?\nChoices:\na) Complete Binary Search Tree\nb) Perfect Binary Search Tree\nc) Balanced Binary Search Tree\nd) Degenerate Binary Search Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In order traversal of binary search tree will produce __________\nChoices:\na) unsorted list \\n (A) unsorted list\nb) reverse of input\nc) sorted list\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: Reversing a word using stack can be used to find if the given word is a palindrome or not.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Assume there is a free list which contains nodes and is filled with a value if it is already assigned and the value will be the size of requested block else will be 0.\nThe above code represents what?\nChoices:\na) code for first fit\nb) code for best fit\nc) code for worst fit\nd) none of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: The number of items used by the dynamic array contents is its __________\nChoices:\na) Physical size\nb) Capacity\nc) Logical size\nd) Random size\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Suppose, in a triply linked list, the elements 2, 3, 3, 5, 5, 5 and 6 are inserted in the given sequence. To which of the following elements will the top pointer point, if the linked list is traversed starting from the head?\nChoices:\na) \n2\n3top->3\n5top->5\n5top->6\nb)\n2top->3\n3top->5\n5\n5top->6\nc)\n2\n3top->3\n5top->5top->5\n6\nd)\n2top->3top->3top->5\n5\n5\n6"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: __________ is not a theoretical problem but actually occurs in real implementations of probing.\nChoices:\na) Hashing\nb) Clustering\nc) Rehashing\nd) Collision\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Given the Node class implementation, select one of the following that correctly inserts a node at the tail of the list.\npublic class Node\n{\n protected int data;\n protected Node prev;\n protected Node next;\n public Node(int data)\n {\n  this.data = data;\n  prev = null;\n  next = null;\n }\n public Node(int data, Node prev, Node next)\n {\n  this.data = data;\n  this.prev = prev;\n  this.next = next;\n }\n public int getData()\n {\n  return data;\n }\n public void setData(int data)\n {\n  this.data = data;\n }\n public Node getPrev()\n {\n  return prev;\n }\n public void setPrev(Node prev)\n {\n  this.prev = prev;\n }\n public Node getNext()\n {\n  return next;\n }\n public void setNext(Node next)\n {\n  this.next = next;\n }\n}\npublic class DLL\n{\n protected Node head;\n protected Node tail;\n int length;\n public DLL()\n {\n  head = new Node(Integer.MIN_VALUE,null,null);\n  tail = new Node(Integer.MIN_VALUE,null,null);\n  head.setNext(tail);\n  length = 0;\n }\n}\npublic void insertRear(int data)\n{\n Node node = new Node(data,tail.getPrev(),tail);\n node.getPrev().setNext(node);\n tail.setPrev(node);\n length++;\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: What is the output of the following Java code?\npublic class CircularQueue\n{\n protected static final int CAPACITY = 100;\n protected int size,front,rear;\n protected Object q[];\n int count = 0;\n \n public CircularQueue()\n {\n  this(CAPACITY);\n }\n public CircularQueue (int n)\n {\n  size = n;\n  front = 0;\n  rear = 0;\n  q = new Object[size];\n }\n \n \n public void enqueue(Object item)\n {\n  if(count == size)\n  {\n   System.out.println(\"Queue overflow\");\n    return;\n  }\n  else\n  {\n   q[rear] = item;\n   rear = (rear+1)%size;\n   count++;\n  }\n }\n public Object dequeue()\n {\n  if(count == 0)\n  {\n   System.out.println(\"Queue underflow\");\n   return 0;\n  }\n  else\n  {\n   Object ele = q[front];\n   q[front] = null;\n   front = (front+1)%size;\n   count--;\n   return ele;\n  }\n }\n public Object frontElement()\n {\n  if(count == 0)\n  return -999;\n  else\n  {\n   Object high;\n   high = q[front];\n   return high;\n  }\n }\n public Object rearElement()\n {\n  if(count == 0)\n  return -999;\n  else\n  {\n   Object low;\n   rear = (rear-1)%size;\n   low = q[rear];\n   rear = (rear+1)%size;\n   return low;\n  }\n }\n}\npublic class CircularQueueDemo\n{\n public static void main(String args[])\n {\n  Object var;\n  CircularQueue myQ = new CircularQueue();\n  myQ.enqueue(10);\n  myQ.enqueue(3);\n  var = myQ.rearElement();\n  myQ.dequeue();\n  myQ.enqueue(6);\n  var = mQ.frontElement();\n  System.out.println(var+\" \"+var);\n }\n}\nChoices:\na) 3 3\nb) 3 6\nc) 6 6\nd) 10 6\n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Fill in the blanks for completing the program to rotate an array by d elements., /*Function to left rotate arr[] of size n by d*/\nvoid Rotate(int arr[], int d, int n)\n{\n    int p = 1;\n    while (__________) {\n        int last = arr[0];\n        for (int i = 0; __________ i++) {\n            arr[i] = arr[i + 1];\n        }\n        __________\n        p++;\n    }\n}, \nChoices:\na) p <= d , i < n - 1 , arr[n - 1] = last;\nb) p < d, i < n, arr[n] = last;\nc) p >=d, i >n , arr[n] =  last\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following has search efficiency of   \u03a9(1)?\nChoices:\na) Tree\nb) Heap\nc) Hash Table\nd) Linked-List\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which type of binary search tree or algorithm does tango tree use?\nChoices:\na) Online\nb) Offline\nc) Static\nd) Dynamic\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Dijkstra's Algorithm will work for both negative and positive weights?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What will be the auxiliary space complexity of the code to rotate an array by using the reversal algorithm (d = number of rotations)?\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String data structures represent sequences of characters. Operations include concatenation, substring search, slicing, and pattern matching, often used in text processing and compiler design.",
        "target_text": "Question: How does strcmp() function work to compare two strings?\nChoices:\na) It compares characters based on their index.\nb) It compares strings based on the index.\nc) It compares characters of the string based on their ASCII values.\nd) None.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Is Top tree used for maintaining Dynamic set of trees called forest.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Accessing free list very frequently for wide range of addresses can lead to\nChoices:\na) paging\nb) segmentation fault\nc) memory errors\nd) cache problems\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider an implementation of unsorted single linked list. Suppose it has its representation with a head and a tail pointer (i.e. pointers to the first and last nodes of the linked list). Given the representation, which of the following operation can not be implemented in O(1) time ?\nChoices:\na) Insertion at the front of the linked list.\nb) Insertion at the end of the linked list.\nc) Deletion of the front node of the linked list.\nd) Deletion of the last node of the linked list.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths. Topological sorting applies to Directed Acyclic Graphs (DAGs).",
        "target_text": "Question: Which of the given statement is True?\nChoices:\na) All the Cyclic Directed Graphs have topological sortings\nb) All the Acyclic Directed Graphs have topological sortings\nc) All Directed Graphs have topological sortings\nd) All the cyclic directed graphs hace non topological sortings\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: The result evaluating the postfix expression 10 5 + 60 6 / * 8 - is\nChoices:\na) 284\nb) 213\nc) 142\nd) 71\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) Distinct array position for every possible key\nb) Fewer array positions than keys\nc) Fewer keys than array positions\nd) Same array position for all keys\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In a binary tree, for every node the difference between the number of nodes in the left and right subtrees is at most 2. If the height of the tree is h > 0, then the minimum number of nodes in the tree is:\nChoices:\na) 2h - 1\nb) 2h - 1 + 1\nc) 2h - 1\nd) 2h\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: 9. Which of the following statement(s) about stack data structure is/are NOT correct?\nChoices:\na) Top of the Stack always contain the new node\nb) Stack is the FIFO data structure\nc) Null link is present in the last node at the bottom of the stack\nd) Linked List are used for implementing Stacks\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is the range of \u03b2 in finding the length of the longest path in a randomized binary search tree?\nChoices:\na) (-1, 0)\nb) (1, 0)\nc) (0, 5)\nd) (0, 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths. Simple graphs do not allow loops or multiple edges.",
        "target_text": "Question: Which of the following properties does a simple graph not hold?\nChoices:\na) Must be connected\nb) Must be unweighted\nc) Must have no loops or multiple edges\nd) Must have no multiple edges\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Tree data structures also include randomized types like treaps, which combine binary search trees with heap properties.",
        "target_text": "Question: Who invented treaps?\nChoices:\na) Cecilia and Raimund\nb) Arne Andersson\nc) Donald Shell\nd) Harris and Ross\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: If A[x+3][y+5] represents an adjacency matrix, which of these could be the value of x and y.\nChoices:\na) x=5, y=3\nb) x=3, y=5\nc) x=3, y=3\nd) x=5, y=5\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Can leaf node be called child node in a K-ary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: Given a queue with a linked list implementation. the Rear pointer points to the rear node of the queue. and the front node of the queue points to the front node of the queue, Which of the following operations is impossible to do in O(1) time?\n \nChoices:\na) Delete the front item from the list.\nb) Delete the rear from the list.\nc) insert at the front of the list.\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: How many stacks are required for evaluation of prefix expression?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees. AA-trees are a balanced binary search tree variant using skew and split operations.",
        "target_text": "Question: In an AA-tree, we process split first, followed by a skew.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Path Compression algorithm performs in which of the following operations?\nChoices:\na) Create operation\nb) Insert operation\nc) Find operation\nd) Delete operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Given an array of element 5, 7, 9, 1, 3, 10, 8, 4. Which of the following are the correct sequences of elements after inserting all the elements in a min-heap?\nChoices:\na) 1,3,4,5,7,8,9,10\nb) 1,4,3,9,8,5,7,10\nc) 1,3,4,5,8,7,9,10\nd) 1,3,7,4,8,5,9,10\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and collision handling techniques such as open addressing and separate chaining are key to practical implementations.",
        "target_text": "Question: What are the methods to handle  collision: \nChoices:\na) Separate Chaining \nb) Open Chaining \nc) Both of the above\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Parse trees, especially in compiler design, represent the syntactic structure of strings. Nodes may be evaluated using rule-based grammars.",
        "target_text": "Question: Suppose X is the starting symbol of the given grammar with the following transition rules. Compute the value of X as the root of the parse tree for the expression: 3 & 4 % 7.\nX -> X1 & B | B {X.value = X1.value + B.value, X.value = B.value}\nB -> B1 % D | D {B.value = B1.value * D.value, B.value = D.value}\nD -> num {D.value = num.value}\nChoices:\na) 31\nb) 32\nc) 33\nd) 34\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Which of the following is not the rearranging method used to implement self-organizing lists?\nChoices:\na) count method\nb) move to front method\nc) ordering method\nd) least frequently used\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths.",
        "target_text": "Question: Which of these adjacency matrices represents a simple graph?\nChoices:\na) [ [1, 0, 0], [0, 1, 0], [0, 1, 1] ]\nb) [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ]\nc) [ [0, 0, 1], [0, 0, 0], [0, 0, 1] ]\nd) [ [0, 0, 1], [1, 0, 1], [1, 0, 0] ]\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following can be called a parallel array implementation?\nChoices:\na) \nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. Sparse arrays are used when most elements are zero and can be optimized in memory by only storing non-zero entries.",
        "target_text": "Question: When do you use a sparse array?\nChoices:\na) When there are unique elements in the array\nb) When the array has more occurrence of zero elements\nc) When the data type of elements differ\nd) When elements are sorted\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The incidence matrix of a connected graph has a rank that depends on the number of vertices and the structure of the graph. For a connected graph with n vertices, the rank is at most n-1.",
        "target_text": "Question: If a connected Graph (G) contains n vertices what would be the rank of its incidence matrix?\nChoices:\na) n-1\nb) values greater than n are possible\nc) values less than n-1 are possible\nd) insufficient Information is given\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Bellman-Ford algorithm is used for finding the shortest paths from a source vertex to all other vertices in a graph. It is capable of handling graphs with negative weights.",
        "target_text": "Question: Which of the following statement(s)is / are correct regarding Bellman-Ford shortest path algorithm?\nChoices:\na) P Only\nb) Q Only\nc) Both P and Q\nd) Neither P nor Q\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Who proposed the concept of Suffix Tree?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: What is the average retrieval time when n keys hash to the same slot?\nChoices:\na) \u0398(n)\nb) \u0398(n2)\nc) \u0398(nlog n)\nd) Big-Oh(n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Algorithms for dynamic programming and greedy strategies are often used in jump games and path finding.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nint min(int x, int y) \n{ return (x < y)? x: y; } \nint func(int arr[], int n) \n{ \n int *jump = new int[n]; \n int i, j; \n if (n == 0 || arr[0] == 0) \n  return INT_MAX; \n jump[0] = 0; \n for (i = 1; i < n; i++) \n { \n  jump[i] = INT_MAX; \n  for (j = 0; j < i; j++) \n  { \n   if (i <= j + arr[j] && jump[j] != INT_MAX) \n   { \n    jump[i] = min(jump[i], jump[j] + 1); \n    break; \n   } \n  } \n } \n return jump[n-1]; \n} \nint main() \n{ \n int arr[] = {1, 3, 6, 1, 9,7}; \n int size = sizeof(arr)/sizeof(int); \n cout<< func(arr,size); \n return 0; \n}\nChoices:\na) 1\nb) 2\nc) 3\nd) error\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. JavaScript provides many built-in array methods, including reverse(), sort(), and slice().",
        "target_text": "Question: Which of the following is the predefined function for array reversal in javascript?\nChoices:\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: The best average behaviour is shown by:\nChoices:\na) Quick Sort\nb) Merge Sort\nc) Insertion Sort\nd) Heap Sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. The degree sum formula for undirected graphs states that the sum of degrees equals twice the number of edges.",
        "target_text": "Question: For an undirected graph with n vertices and e   edges, the sum of the degree of each vertex is equal   to:\nChoices:\na) 2n\nb) (2n-1)/2\nc) 2e\nd) e2/2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A weight-balanced tree is a binary tree in which each node maintains balance based on subtree sizes. The height of such trees can be bounded using logarithmic relationships.",
        "target_text": "Question: A weight-balanced tree is a binary tree in which for each node. The number of nodes in the left sub tree is at least half and at most twice the number of nodes in the right sub tree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on n nodes is best described by which of the following\nChoices:\na) log_2n\nb) log_{4/3}n\nc) log_3n\nd) log_{3/2}n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The adjacency matrix of a graph with n vertices is an n x n matrix. Each entry indicates the presence or absence of an edge.",
        "target_text": "Question: The number of elements in the adjacency matrix of a graph having 7 vertices is __________\nChoices:\na) 7\nb) 14\nc) 36\nd) 49\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In theory, prefix expressions (also known as Polish notation) are written with operators preceding operands and can be evaluated using a stack.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) |&-+ab/cdef\nb) &|-+ab/cdef\nc) |&-ab+/cdef\nd) |&-+/abcdef\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In graph theory, a cycle in a connected undirected graph can be formed only when the number of edges exceeds the number of vertices by at least one.",
        "target_text": "Question: Let G be a connected undirected graph with n vertices and m edges. Which of the following statements is True regarding the minimum number of edges required to create a cycle in G?\n \nChoices:\na) The minimum number of edges required to create a cycle is n.\nb) The minimum number of edges required to create a cycle is n - 1.\nc) The minimum number of edges required to create a cycle is m - n + 1.\nd) The minimum number of edges required to create a cycle is m - n + 2.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: The goal of hashing is to produce a search that   takes __________\nChoices:\na) O(1) time\nb) O(n2) time\nc) O(log n) time\nd) O(n log n) time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a particular order (ascending or descending). Binary search, which is used on sorted data, reduces the search space logarithmically.",
        "target_text": "Question: A sorted file contains 16 items. Using binary   search, the maximum number of comparisons to   search for an item in this file is __________\nChoices:\na) 15\nb) 8\nc) 1\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees represent hierarchical structures. In certain graph-tree transformations or path queries, complexity depends on the structure. Some algorithms can achieve O(m+n) performance.",
        "target_text": "Question: O(m2 + n2)\nChoices:\na) O(m+n)\nb) O(mlogn)\nc) O(nlogm)\nd) O(m2 + n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B+ tree is a type of self-balancing search tree where all records are stored at the leaf level and internal nodes only store keys. It remains balanced because the paths from the root to all leaves are of the same length.",
        "target_text": "Question: B+ Trees are considered BALANCED because\nChoices:\na) the lengths of the paths from the root to all leaf nodes are all equal.\nb) the lengths of the paths from the root to all leaf nodes differ from each other by at most 1.\nc) the number of children of any two non-leaf sibling nodes differ by at most 1.\nd) the number of records in any two leaf nodes differ by at most 1.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each element is stored in a node containing a pointer to the next node. Searching through a linked list is a linear-time operation.",
        "target_text": "Question: Linked list search complexity is __________\nChoices:\na) \u03a9(1)\nb) \u03a9(n)\nc) \u03a9(log n)\nd) \u03a9(log log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A binary search tree contains values 7, 8, 13, 26, 35, 40, 70, 75. Which one of the following is a valid post-order sequence of the tree provided the pre-order sequence as 35, 13, 7, 8, 26, 70, 40 and 75?\nChoices:\na) 7, 8, 26, 13, 75, 40, 70, 35\nb) 26, 13, 7, 8, 70, 75, 40, 35\nc) 7, 8, 13, 26, 35, 40, 70, 75\nd) 8, 7, 26, 13, 40, 75, 70, 35"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is the limitation of the array?\nChoices:\na) elements can be accessed from anywhere.\nb) The size of the array is fixed.\nc) Indexing is started from Zero.', \"D\\nMemory waste if an array's elements are smaller than the size allotted to them\"], Answer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs can be represented using adjacency matrices or lists. Matrix representations offer efficient lookups at the cost of higher space complexity.",
        "target_text": "Question: Which of the following is an advantage of matrices?\nChoices:\na) Internal complexity\nb) Searching through a matrix is complex\nc) Not space efficient\nd) Graph Plotting\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Circular arrays allow rotation or wrapping around of elements and are useful in problems like buffer cycling and rotation tasks.",
        "target_text": "Question: Consider the below program, and what is doing this program basically?, #include <bits/stdc++.h>\nusing namespace std;\nvoid print(char a[], int n, int ind)\n{\n    for (int i = ind; i < n + ind; i++)\n        cout << a[(i % n)] << \" \";\n}\nint main()\n{\n    char a[] = { 'A', 'B', 'C', 'D', 'E', 'F' };\n    int n = sizeof(a) / sizeof(a[0]);\n    print(a, n, 3);\n    return 0;\n}, \nChoices:\na) It is printing the normal array\nb) It is printing circular array rotated by 3\nc) Syntax error\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each element is stored in a node containing a pointer to the next. Trie data structures, though tree-based, can outperform linked lists and BSTs for dictionary word searches.",
        "target_text": "Question: Which of the following is the efficient data structure for searching words in dictionaries?\nChoices:\na) BST\nb) Linked List\nc) Balancded BST\nd) Trie\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: The following postfix expression with single digit operands is evaluated using a stack:\nChoices:\na) 6, 1\nb) 5, 7\nc) 3, 2\nd) 1, 5\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure used in expression evaluation, symbol balancing, and function call tracking. It operates on the LIFO principle.",
        "target_text": "Question: Which of the following is not an application of stack?\nChoices:\na) evaluation of postfix expression\nb) conversion of infix to postfix expression\nc) balancing symbols\nd) line at ticket counter\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays support multiple operations, but the performance of stack/queue simulation using arrays can differ in terms of complexity, especially with dequeue operations.",
        "target_text": "Question: Consider you have an array of some random size. You need to perform dequeue operation. You can perform it using stack operation (push and pop) or using queue operations itself (enQueue and Dequeue). The output is guaranteed to be same. Find some differences?\nChoices:\na) They will have different time complexities\nb) The memory used will not be different\nc) There are chances that output might be different\nd) No differences\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A doubly linked list is a variation of linked list in which each node contains pointers to both the next and the previous node, making bidirectional traversal possible.",
        "target_text": "Question: In doubly linked lists:\nChoices:\na) a pointer is maintained to store both next and previous \\n nodes.\nb) two pointers are maintained to store next and previous \\n nodes.\nc) a pointer to self is maintained for each node.\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each node contains data and a reference to the next node. In a queue implemented using a linked list, new elements are typically added at the tail (rear).",
        "target_text": "Question: In linked list implementation of a queue, where does a new element be inserted?\nChoices:\na) At the head of link list\nb) At the centre position in the link list\nc) At the tail of the link list\nd) At any position in the linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: A priority queue can efficiently implemented using which of the following data structures? Assume that the number of insert and peek (operation to see the current highest priority item) and extraction (remove the highest priority item) operations are almost same.\nChoices:\na) Array\nb) Linked List\nc) Heap Data Structures like Binary Heap, Fibonacci Heap\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a weight-balanced tree, the left and right subtrees of each node must maintain specific size constraints. This affects the tree's height, which grows logarithmically based on the subtree ratio.",
        "target_text": "Question: Consider a weight balanced tree such that, the number of nodes in the left sub tree is at least half and at most twice the number of nodes in the right sub tree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on k nodes can be described as\nChoices:\na) log2 n\nb) log4/3 n\nc) log3 n\nd) log3/2 n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Tree rotations are used in AVL trees to restore balance after insertions and deletions. Height updates are necessary after a rotation to maintain the AVL property.",
        "target_text": "Question: Consider the below left-left rotation pseudo code where the node contains value pointers to left, right child nodes and a height value and Height() function returns height value stored at a particular node.\nWhat is missing?\nChoices:\na) Height(w-left), x-height\nb) Height(w-right), x-height\nc) Height(w-left), x\nd) Height(w-left)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B-tree is a self-balancing tree data structure. During insertions, a node may split if it exceeds its capacity. The number of splits depends on how often insertions cause overflow.",
        "target_text": "Question: A B-tree of order 4 is built from scratch by 10 successive insertions. What is the maximum number of node splitting operations that may take place?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A heap is a binary tree where each node follows a specific heap property. In a min-heap, each parent is less than or equal to its children. In a max-heap, the opposite is True.",
        "target_text": "Question: The ascending heap property is __________\nChoices:\na) A[Parent(i)] =A[i]\nb) A[Parent(i)] <= A[i]\nc) A[Parent(i)] >= A[i]\nd) A[Parent(i)] > 2 * A[i]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. The incidence matrix of a simple graph has columns that sum to 2 for each edge.",
        "target_text": "Question: The column sum in an incidence matrix for a simple graph is __________\nChoices:\na) depends on number of edges\nb) always greater than 2\nc) equal to 2\nd) equal to the number of edges\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions. Double hashing is an open addressing technique that reduces clustering.",
        "target_text": "Question: Double hashing is one of the best methods available for open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. Common operations include enqueue (insertion), dequeue (removal), and peek (access front without removing).",
        "target_text": "Question: Which of the following is NOT a common operation in a queue data structure? \nChoices:\na) Enqueue \nb) Dequeue \nc) Peek \nd) Shuffle \nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inversions in an array occur when a pair of elements is out of order. Counting inversions is useful in analyzing sorting algorithms like merge sort.",
        "target_text": "Question: Which of the following form inversion in the array arr = {1,5,4,2}?\nChoices:\na) (5,4), (5,2)\nb) (5,4), (5,2), (4,2)\nc) (1,5), (1,4), (1,2)\nd) (1,5)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A Cartesian tree is a binary tree derived from a sequence of numbers. It satisfies the heap property and its in-order traversal yields the original sequence.",
        "target_text": "Question: What is a Cartesian tree?\nChoices:\na) a skip list in the form of tree\nb) a tree which obeys cartesian product\nc) a tree which obeys heap property and whose inorder traversal yields the given sequence\nd) a tree which obeys heap property only\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: In what time can a leftist heap be built?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. A full K-ary tree and a complete K-ary tree may differ in the distribution of their children, leading to a difference in node counts.",
        "target_text": "Question: How many extra nodes are there in Full K-ary tree than complete K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) Both have same number of nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees are used in string matching and compression. Farach's algorithm is one of the linear-time algorithms that can construct suffix trees efficiently, especially in external memory settings.",
        "target_text": "Question: Who among the following algorithm is used in external memory and compression of the suffix tree?\nChoices:\na) Weiner's algorithm\nb) Farach's algorithm\nc) Ukkonen's algorithm\nd) Alexander Morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues are FIFO data structures, but self-balancing binary search trees can be used for efficient implementations of priority queues due to ordered access and rebalancing features.",
        "target_text": "Question: A self - balancing binary search tree can be used to implement __________\nChoices:\na) Priority queue\nb) Hash table\nc) Heap sort\nd) Priority queue and Heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: An equivalence relation must be reflexive, symmetric, and transitive. Two-way connections are needed to satisfy the symmetry property.",
        "target_text": "Question: What is the condition for an equivalence relation if two cities are related within a country?\nChoices:\na) the two cities should have a one-way connection\nb) the two cities should have a two-way connection\nc) the two cities should be in different countries\nd) no equivalence relation will exist between two cities\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Stacks can be implemented using arrays or linked lists. Stacks follow LIFO (Last In First Out) behavior, unlike queues which follow FIFO.",
        "target_text": "Question: Which of the following statements about stacks   is incorrect?\nChoices:\na) Stacks can be implemented using linked lists.\nb) Stacks are first-in, first-out (FIFO) data structures.\nc) New nodes can only be added to the top of the stack.\nd) The last node (at the bottom) of a stack has a null (0) \\n link. \\n (D) The last node (at the bottom) of a stack has a null (0) \\n link.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. AVL trees and 2-3 trees are both self-balancing, but they differ in how they manage balance and insertion.",
        "target_text": "Question: AVL trees provide better insertion the 2-3 trees.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: In the given C snippet, find the statement number that has error.\n//C code to push an element into a stack\n1. void push( struct stack *s, int x) \n2. {\n3.     if(s->top==MAX-1)\n4.     {\n5.         printf(\"stack overflow\");\n6.     }\n7.     else\n8.     {\n9.         s->items[++s->top]=x;\n10.        s++;\n11.    }   \n12. }\nChoices:\na) 1\nb) 9\nc) 10\nd) 11\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In propositional logic, directed acyclic graphs (DAGs) can represent expressions and computations. Leaves in such graphs may represent boolean constants or variables.",
        "target_text": "Question: In a Propositional Directed Acyclic Graph Leaves maybe labelled with a boolean variable.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AVL trees are height-balanced binary search trees. The difference in height between left and right subtrees of every node is at most 1.",
        "target_text": "Question: In __________, the difference between the height of   the left sub tree and height of the right tree, for each   node, is almost one.\nChoices:\na) Binary search tree\nb) AVL - tree\nc) Complete tree\nd) Threaded binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Binary Search Trees (BSTs) are created by placing elements such that left children are smaller and right children are larger. The number of BSTs that can be made from n distinct elements is given by the Catalan number: (1/(n+1)) * C(2n, n).",
        "target_text": "Question: We are given a set of n distinct elements and an unlabelled binary tree with n nodes. In how many ways can we populate the tree with the given set so that it becomes a binary search tree? (GATE CS 2011)\nChoices:\na) 0\nb) 1\nc) n!\nd) (1/(n+1)).2nCn\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms are used to retrieve data from structures. Binary search is an efficient method to find elements in sorted arrays with time complexity O(log n).",
        "target_text": "Question: The complexity of searching an element from a   set of n elements using Binary search algorithm is __________\nChoices:\na) O(n)\nb) O(log n)\nc) O(n2)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree can be uniquely constructed using both preorder and postorder traversals. One traversal alone is not sufficient.",
        "target_text": "Question: A full binary tree can be generated using __________\nChoices:\na) post-order and pre-order traversal\nb) pre-order traversal\nc) post-order traversal\nd) in-order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full ternary tree is one where every node has either 0 or 3 children. A complete ternary tree is filled level by level, but may not fill the last level entirely.",
        "target_text": "Question: How many extra nodes are there in Full ternary tree than a complete ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) Both have same number of nodes\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A pairing heap is a type of heap-ordered multiway tree. It supports many priority queue operations efficiently and is simpler to implement than Fibonacci heaps.",
        "target_text": "Question: How is a pairing heap represented?\nChoices:\na) binary tree\nb) fibonacci tree\nc) heap ordered tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: Consider the following program:, #include <iostream>\n#include <cctype>\n#include <stack>\n#define EOF -1\nstd::stack<int> s;\nvoid push(int value) { s.push(value); } /* push the argument on the stack */\nint pop(void) { if (s.empty()) return EOF; int value = s.top(); s.pop(); return value; }  /* pop the top of the stack */\nvoid flagError() { std::cerr << \"Error!\" << std::endl; exit(1); }\nint main() {\n    int c, m, n, r;\n    while ((c = std::cin.get()) != EOF) {\n        if (isdigit(c))\n            push(c - '0');\n        else if ((c == '+') || (c == '*')) {\n            m = pop();\n            n = pop();\n            r = (c == '+') ? n + m : n * m;\n            push(r);\n        } else if (c != ' ')\n            flagError();\n    }\n    std::cout << pop() << std::endl;\n}, \nChoices:\na) 15\nb) 25\nc) 30\nd) 150\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In any rooted tree, the node with no ancestors is the root. All other nodes are descendants.",
        "target_text": "Question: How many nodes in a tree have no ancestors?\nChoices:\na) 0\nb) 1\nc) 2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Union-find data structures with union by size and path compression techniques achieve nearly constant time complexity, amortized over a series of m operations on n elements.",
        "target_text": "Question: What is the worst-case running time of unions done by size and path compression?\nChoices:\na) O(N)\nb) O(logN)\nc) O(N logN)\nd) O(M logN)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A spanning tree is formed by removing edges from a connected graph such that all nodes remain connected and the graph becomes acyclic. A complete graph has the maximum possible edges.",
        "target_text": "Question: From a complete graph, by removing maximum   __________. edges, we can construct a spanning tree.\nChoices:\na) e-n+1\nb) n-e+1\nc) n+e-1\nd) e-n-1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. B+ trees are a variation of B-trees and are commonly used in databases and file systems. They are balanced, support sequential access through sibling pointers, and grow upward.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) A B+ -tree grows downwards\nb) A B+ -tree is balanced\nc) In a B+ -tree, the sibling pointers allow sequential searching\nd) B+ -tree is shallower than B-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Abstract Syntax Trees (ASTs) are used in compilers to represent the structure of source code. Operators are represented as internal nodes and operands as leaves.",
        "target_text": "Question: In an abstract syntax tree, each internal node represents an operand and each leaf node represents an operator.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Unrolled linked lists store multiple elements per node, reducing memory allocation and access overhead, which improves insertion and deletion performance.",
        "target_text": "Question: Insertion and deletion are much faster in an unrolled linked list than in a singly linked list.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: C++ offers standard functions like reverse() and rotate() for manipulating arrays or ranges within containers like std::vector and std::array.",
        "target_text": "Question: Which of the following is the predefined function for array reversal in C++?\nChoices:\na) rotate()\nb) arr_rotate()\nc) array_rotate()\nd) rot()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays can represent binary trees in sequential memory where the height determines the number of elements. A tree of height l has up to 2^l - 1 nodes.",
        "target_text": "Question: What must be the ideal size of array if the height of tree is 'l'?\nChoices:\na) 2l-1\nb) l-1\nc) l\nd) 2l\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. AA-trees are a simplified form of balanced binary search trees and were introduced by Arne Andersson.",
        "target_text": "Question: Who is the inventor of AA-Tree?\nChoices:\na) Arne Anderson\nb) Daniel Sleator\nc) Rudolf Bayer\nd) Jon Louis Bentley\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a full binary tree, every node has either 0 or 2 children. A full binary tree with 2n+1 total nodes always contains exactly n non-leaf (internal) nodes.",
        "target_text": "Question: A full binary tree with 2n+1 nodes contain   __________.\nChoices:\na) n leaf nodes\nb) n non-leaf nodes\nc) n-1 leaf nodes\nd) n-1 non-leaf nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Expression trees can be built from prefix, infix, or postfix expressions. Only infix cannot uniquely determine an expression tree.",
        "target_text": "Question: Only infix expression can be made into an expression tree.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix notation (Reverse Polish Notation) is a way to write arithmetic expressions without using parentheses. It can be derived from infix expressions using operator precedence.",
        "target_text": "Question: What is the corresponding postfix expression for the given infix expression?\nChoices:\na) ab*+cd/\nb) ab+*cd/\nc) abc*+/d\nd) abc+*d/\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In separate chaining, each hash bucket contains a list of all elements that hash to the same bucket. A doubly linked list is often used for chaining in hash tables.",
        "target_text": "Question: Which of the following technique stores data in a separate entity in case of a collision?\nChoices:\na) Open addressing\nb) Chaining using doubly linked list\nc) Linear probing\nd) Double hashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A Binary Search Tree (BST) is a binary tree where the left subtree contains only nodes with keys less than the parent node and the right subtree only nodes with keys greater. The number of distinct BSTs that can be formed with n keys is the nth Catalan number.",
        "target_text": "Question: How many distinct BSTs can be constructed with 3 distinct keys?\nChoices:\na) 4\nb) 5\nc) 6\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Poor hash functions can lead to clustering, especially when the modulus operator is used with closely packed keys.",
        "target_text": "Question: Which of the following hash functions is most likely to cause clustering in a hash table? Here k is the input key value and m is hash table size. You may assume that all four hash functions generate valid indexes in the hash table.\nChoices:\na) h(k) = k % m\nb) h(k) = floor(m * (k mod 1))\nc) h(k) = k\nd) h(k) = ((k / m) + k * m) + k % m\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Skip lists are probabilistic data structures that allow efficient search, insertion, and deletion. Their multi-level structure is maintained by adjusting probabilities when modifying nodes.",
        "target_text": "Question: How to maintain multi-level skip list properties when insertions and deletions are done?\nChoices:\na) design each level of a multi-level skip list with varied probabilities\nb) that cannot be maintained\nc) rebalancing of lists\nd) reconstruction\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: MinHash is a probabilistic technique for estimating similarity between sets. It was originally used to cluster web documents based on shared content (like shingles or n-grams).",
        "target_text": "Question: Which technique was firstly used clustering documents using the similarity of two words or strings?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Bitwise XOR is used to toggle specific bits in a binary representation. It flips a bit from 0 to 1 or from 1 to 0.",
        "target_text": "Question: Which of the following bitwise operations will you use to toggle a particular bit?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NOT\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: MinHash was used in the AltaVista search engine to detect duplicate pages. It's a fast method to compute Jaccard similarity between large sets.",
        "target_text": "Question: Which technique was firstly used to remove duplicate web pages from search results in AltaVista search engine?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Splay trees are self-adjusting binary search trees where recently accessed elements are moved to the root for fast access.",
        "target_text": "Question: In which of the following self - balancing binary search tree the recently accessed element can be accessed quickly?\nChoices:\na) AVL tree\nb) AA tree\nc) Splay tree\nd) Red - Black tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Collision resolution techniques like separate chaining, linear probing, and quadratic probing manage collisions, whereas hashing itself is the overall process.",
        "target_text": "Question: Which of the following is not a collision resolution technique?\nChoices:\na) Separate chaining\nb) Linear probing\nc) Quadratic probing\nd) Hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The symbol balancing algorithm checks whether parentheses, brackets, and braces are balanced. It is typically implemented using a stack.",
        "target_text": "Question: Which of the following statement is incorrect with respect to balancing symbols algorithm?\nChoices:\na) {[()]}\nb) ([ )]\nc) {( )}\nd) { [ ] }\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Linear search is a sequential search technique, while binary search divides the search space. Binary search is more efficient in large, sorted arrays.",
        "target_text": "Question: Linear search is highly inefficient compared to  binary search when dealing with:\nChoices:\na) Small, unsorted arrays\nb) Small, sorted arrays\nc) Large, unsorted arrays\nd) Large, sorted arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Separate chaining is a common technique used in hash tables where each bucket is a linked list. A typical hash function for this method is x mod table size.",
        "target_text": "Question: Which of the following is the hashing function for separate chaining?\nChoices:\na) H(x)=(hash(x)+f(i)) mod table size\nb) H(x)=hash(x)+i2 mod table size\nc) H(x)=x mod table size\nd) H(x)=x mod (table size * 2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Threaded binary trees reduce the need for stack and queue memory by using NULL pointers to point to in-order predecessor or successor. Efficiency, not memory size, is a primary concern.",
        "target_text": "Question: Identify the reason which doesn't play a key role to use threaded binary trees?\nChoices:\na) The storage required by stack and queue is more\nb) The pointers in most of nodes of a binary tree are NULL\nc) It is Difficult to find a successor node\nd) They occupy less size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic Object delete_key() \n{\n if(count == 0)\n {\n  System.out.println(\"Q is empty\");\n  System.exit(0);\n }\n else\n {\n  Node cur = head.getNext();\n  Node dup = cur.getNext();\n  Object e = cur.getEle();\n  head.setNext(dup);\n  count--;\n  return e;\n }\n}\nChoices:\na) Delete the second element in the list\nb) Return but not delete the second element in the list\nc) Delete the first element in the list\nd) Return but not delete the first element in the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a tree in which every node has either 0 or 2 children. The number of nodes in such a tree is always of the form 2n+1.",
        "target_text": "Question: Which of the following number of nodes can form a full binary tree?\nChoices:\na) 8\nb) 15\nc) 14\nd) 13\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In simple uniform hashing, every key is equally likely to hash to any slot, which makes the expected search time constant.",
        "target_text": "Question: In simple uniform hashing, what is the search complexity?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Insert operations in trees are usually implemented using recursion or iteration with pointers. The pseudocode that traverses the tree and modifies pointers is typically performing insertion.",
        "target_text": "Question: What is the below pseudo code trying to do, where pt is a node pointer and root pointer?\nChoices:\na) insert a new node\nb) delete a node\nc) search a node\nd) count the number of nodes\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Top operation returns the most recently pushed element on the stack. Push adds to the top, and Top returns that value.",
        "target_text": "Question: What is the result of the following operation:   Top (Push (S, X))\nChoices:\na) X\nb) null\nc) S\nd) None of these.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Randomized hashing techniques like universal and double hashing reduce clustering and collision frequency by generating hashes independent of the data.",
        "target_text": "Question: Collisions can be reduced by choosing a hash function randomly in a way that is independent of the keys that are actually to be stored.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In memory storage, row-major order stores elements of a 2D array row by row. For a 3x3 matrix, the elements are stored sequentially as they appear row-wise.",
        "target_text": "Question: If row-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inversions represent the number of pairs of elements that are out of order. A sorted array has zero inversions, which is the minimum.",
        "target_text": "Question: Under what condition the number of inversions in an array are minimum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The kth power of an adjacency matrix gives the number of paths of length k between any two vertices in a graph. Each entry A^k[i][j] equals the number of such paths from i to j.",
        "target_text": "Question: Let A be an adjacency matrix of a graph G. The   ijth entry in the matrix AK , gives\nChoices:\na) The number of paths of length K from vertex Vi to vertex \\n Vj.\nb) Shortest path of K edges from vertex Vi to vertex Vj.\nc) Length of a Eulerian path from vertex Vi to vertex Vj.\nd) Length of a Hamiltonian cycle from vertex Vi to vertex \\n Vj.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In an AVL tree, after inserting a node, the balance factor of nodes along the path to the root may need to be updated. This ensures the tree remains balanced.",
        "target_text": "Question: To restore the AVL property after inserting a element, we start at the insertion point and move towards root of that tree. is this statement True?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-Trees and Red-Black Trees are both self-balancing binary search trees. They have similar properties and performance characteristics.",
        "target_text": "Question: Which of the following trees is similar to that of an AA-Tree?\nChoices:\na) Splay Tree\nb) B+ Tree\nc) AVL Tree\nd) Red-Black Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) ^^^ABCD\nb) ^A^B^CD\nc) ABCD^^^\nd) AB^C^D\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Linked list manipulations require careful updates of pointers. The given code removes the first node in a circular list and returns its value.",
        "target_text": "Question: What is the functionality of the following code? Choose the most appropriate answer.\npublic int function() {\n if(head == null) return Integer.MIN_VALUE;\n int var;\n Node temp = head;\n while(temp.getNext() != head) temp = temp.getNext();\n if(temp == head) {\n  var = head.getItem();\n  head = null;\n  return var;\n }\n temp.setNext(head.getNext());\n var = head.getItem();\n head = head.getNext();\n return var;\n}\nChoices:\na) Return data from the end of the list\nb) Returns the data and deletes the node at the end of the list\nc) Returns the data from the beginning of the list\nd) Returns the data and deletes the node from the beginning of the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Breadth First Traversal (BFS) is implemented using a queue. This data structure allows level-order traversal in graphs or trees.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is?\nChoices:\na) Stack\nb) Array\nc) Queue\nd) Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix expressions are evaluated from left to right using a stack. The evaluation substitutes variables with values and applies operators.",
        "target_text": "Question: Evaluate and write the result for the following postfix expression\nabc*+de*f+g*+ where a=1, b=2, c=3, d=4, e=5, f=6, g=2.\nChoices:\na) 61\nb) 59\nc) 60\nd) 55\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In array-based representation of binary trees, left and right children of node at index i can be found at 2i+1 and 2i+2 respectively.",
        "target_text": "Question: If binary trees are represented in arrays, what formula can be used to locate a left child, if the node has an index i?\nChoices:\na) 2i+1\nb) 2i+2\nc) 2i\nd) 4i\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Hashing-based searches use probing for insertion and lookup. On average, linear probing requires 2.5 probes for insertion and 1.5 for successful search.",
        "target_text": "Question: How many probes are required on average for insertion and successful search?\nChoices:\na) 4 and 10\nb) 2 and 6\nc) 2.5 and 1.5\nd) 3.5 and 1.5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) effective usage of memory\nb) easier computations\nc) to delete elements based on priority\nd) implement LIFO principle in queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: Let Q denote a queue containing sixteen numbers and S be an empty stack. Head(Q) returns the element at the head of the queue Q without removing it from Q. Similarly Top(S) returns the element at the top of S without removing it from S. Consider the algorithm given below.\nChoices:\na) 16\nb) 32\nc) 256\nd) 64\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Abstract Data Types (ADTs) are defined by their behavior from the point of view of a user, characterized by the collection of operations that can be performed on them.",
        "target_text": "Question: An ADT is defined to be a mathematical model \f of a user-defined type along with the collection of all __________. operations on that model.\nChoices:\na) Cardinality\nb) Assignment\nc) Primitive \\n (A) Cardinality \\n (B) Assignment \\n (C) Primitive\nd) Structured\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In postfix expressions (also known as Reverse Polish Notation), operators follow their operands. They eliminate the need for parentheses to define operation order.",
        "target_text": "Question: Which of the following is an example for a postfix expression?\nChoices:\na) a*b(c+d)\nb) abc*+de-+\nc) +ab\nd) a+b-c\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Balanced parentheses checks often use stacks because of their LIFO structure, which mirrors the nesting of brackets. Arrays can store stack data.",
        "target_text": "Question: One can determine whether an infix expression has balanced parenthesis or not by using __________\nChoices:\na) Array\nb) Queue\nc) Stack\nd) Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: This recursive function computes the minimum number of jumps to reach the end of the array, where each element represents the maximum number of steps that can be jumped forward from that index.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nint func(int arr[], int s, int e) \n{\n   if (s == e) \n return 0; \n   if (arr[s] == 0) \n return INT_MAX; \n \nint min = INT_MAX; \nfor (int i = s + 1; i <= e && i <= s + arr[s]; i++) \n{ \n int jumps = func(arr, i, e); \n if(jumps != INT_MAX && jumps + 1 < min) \n  min = jumps + 1; \n} \nreturn min; \n}\n \nint main() \n{ \n int arr[] = {1, 3, 6, 3, 8, 5}; \n int n = sizeof(arr)/sizeof(arr[0]); \n cout << func(arr, 0, n-1); \n return 0; \n}\nChoices:\na) 1\nb) 2\nc) 3\nd) error\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A heap is a special tree-based data structure that satisfies the heap property and can efficiently support priority queue operations.",
        "target_text": "Question: Heap can be used as __________\nChoices:\na) Priority queue\nb) Stack\nc) A decreasing order array\nd) Normal Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Quadratic probing is a collision resolution technique in open addressing where the hash index is computed as (h(k) + c1*i + c2*i^2) % table_size. Often simplified as f(i) = i^2.",
        "target_text": "Question: Which of the following is the correct function definition for quadratic probing?\nChoices:\na) F(i)=i2\nb) F(i)=i\nc) F(i)=i+1\nd) F(i)=i2+1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: The `charAt()` method in Java's `String` class is used to return the character located at a specific index.",
        "target_text": "Question: Which of these methods from the String class is used to extract a single character from an object of String?\nChoices:\na) CHARAT()\nb) charAt()\nc) CharAt()\nd) charAT()\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A suffix tree is a compressed trie that contains all the suffixes of a given string. For a string of length n, the tree has n leaves and helps in efficient string pattern matching.",
        "target_text": "Question: Which statement is correct of suffix tree with a string of length n?\nChoices:\na) The tree has n leaves.\nb) The tree has n roots\nc) Height of Tree is n\nd) Depth of tree is n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In stack operations, Push(S, X) adds X to stack S, and Top returns the last element pushed onto the stack, which would be X.",
        "target_text": "Question: What is the result of the following operation?\nTop (Push (S, X))\nChoices:\na) X\nb) X+S\nc) S\nd) XS\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Propositional Directed Acyclic Graphs (PDAGs) are used to represent Boolean functions efficiently. They help in logical inference and are fundamental in knowledge representation and reasoning systems.",
        "target_text": "Question: In which of the following case does a Propositional Directed Acyclic Graph is used for?\nChoices:\na) Representation of Boolean Functions\nb) String Matching\nc) Searching\nd) Sorting of number\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black trees are chosen for frequent insertions, AVL trees for fast lookups due to strict balancing, and B-trees for handling large datasets and disk-based storage.",
        "target_text": "Question: When to choose Red-Black tree, AVL tree and B-trees?\nChoices:\na) many inserts, many searches and when managing more items respectively\nb) many searches, when managing more items respectively and many inserts respectively\nc) sorting, sorting and retrieval respectively\nd) retrieval, sorting and retrieval respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A weight balanced tree is a binary tree where each node stores the size (or weight) of its subtrees to maintain balance. It helps in ensuring efficient insertions, deletions, and access operations.",
        "target_text": "Question: What is a weight balanced tree?\nChoices:\na) A binary tree that stores the sizes of subtrees in nodes\nb) A binary tree with an additional attribute of weight\nc) A height balanced binary tree\nd) A normal binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In a Hash Tree (Merkle Tree), sequential access is more efficient compared to B-trees because of the way data is hashed and arranged. However, B-trees are better for range queries and disk-based access.",
        "target_text": "Question: Sequential access in a Hash tree is faster than in B-trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binomial heap, the number of binomial trees with n nodes corresponds to the number of 1's in the binary representation of n, which is approximately log(n).",
        "target_text": "Question: The number of trees in a binomial heap with n nodes is\nChoices:\na) logn\nb) n\nc) nlogn\nd) n/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A doubly linked list allows traversal in both directions and provides direct access to the previous node, which makes deletion of a known node location more efficient compared to a singly linked list.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by linear linked list?\nChoices:\na) Deleting a node whose location is given\nb) Searching an unsorted list for a given item\nc) Inserting a node after the node with a given location\nd) Traversing the list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: The given code checks if the stack is empty, and if not, traverses and prints each element. This is the typical behavior of displaying a linked list representing a stack.",
        "target_text": "Question: 30. What is the functionality of the following piece of code?\npublic void display() \n{\n\tif(size == 0)\n\t\tSystem.out.println(\"underflow\");\n\telse\n\t{\n\t\tNode current = first;\n\t\twhile(current != null)\n\t\t{\n\t\t\tSystem.out.println(current.getEle());\n\t\t\tcurrent = current.getNext();\n\t\t}\n\t}\n}\nChoices:\na) display the list\nb) reverse the list\nc) reverse the list excluding top-of-the-stack-element\nd) display the list excluding top-of-the-stack-element\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When converting expressions or evaluating them using a stack, operands are typically placed directly into the output stream or output list.",
        "target_text": "Question: When an operand is read, which of the following is done?\nChoices:\na) It is placed on to the output\nb) It is placed in operator stack\nc) It is ignored\nd) Operator stack is emptied\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An optimal binary search tree minimizes the expected search cost based on known frequencies of access. It is constructed when the access pattern of the keys is known and remains unchanged.",
        "target_text": "Question: What are the conditions for an optimal binary search tree and what is its advantage?\nChoices:\na) The tree should not be modified and you should know how often the keys are accessed, it improves the lookup cost\nb) You should know the frequency of access of the keys, improves the lookup time\nc) The tree can be modified and you should know the number of elements in the tree before hand, it improves the deletion time\nd) The tree should be just modified and improves the lookup time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: It is possible to find the minimum number of steps to reach the end of an array using a greedy or dynamic programming approach in linear time, contrary to common belief.",
        "target_text": "Question: It is not possible to find the minimum number of steps to reach the end of an array in linear time.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A spanning tree of a connected graph with `n` vertices always contains exactly `n-1` edges. It is a subgraph that connects all the vertices without forming any cycle.",
        "target_text": "Question: The spanning tree of connected graph with 10 vertices contains __________\nChoices:\na) 9 edges\nb) 11 edges\nc) 10 edges\nd) 9 vertices\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a linked list, overflow can occur if a node creation is attempted but there is no available memory (i.e., the free space pool is empty).",
        "target_text": "Question: Overflow condition in linked list may occur when attempting to __________\nChoices:\na) Create a node when free space pool is empty.\nb) Traverse the nodes when free space pool is empty.\nc) Create a node when linked list is empty.\nd) None of these.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: To print special characters like a newline escape sequence (\\n), you must use double backslashes (\\\\) in C++ to escape each backslash.",
        "target_text": "Question: How will you print \"\\\\\\n\" on the screen?\nChoices:\na)   cout << \"\\\\\\\\\\\\n\";\nb) cout<<\"\\\\\\\\\\\\\\\\\\\\n\";\nc) cout<<\"//n\";\nd) cout<<\"///n\"\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Binary Search is the most efficient technique to search in a sorted array, requiring O(log n) time.",
        "target_text": "Question: To search for an element in a sorted array, which searching technique can be used?\nChoices:\na) Linear Search\nb) Jump Search\nc) Binary Search\nd) Fibonacci Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The described problem involves in-place reversal and rearrangement, where memory efficiency and element manipulation are important. XOR linked lists offer constant space without using extra pointers, saving memory.",
        "target_text": "Question: Given 10,8,6,7,9\nswap the above numbers such that finally you got 6,7,8,9,10\nso now reverse 10\n9,7,6,8,10\nnow reverse 9\n8,6,7,9,10\n7,6,8,9,10\n6,7,8,9,10\nat this point 6 is ahead so no more reversing can be done so stop.\nTo implement above algorithm which datastructure is better and why ?\nChoices:\na) linked list. because we can swap elements easily\nb) arrays. because we can swap elements easily\nc) xor linked list. because there is no overhead of pointers and so memory is saved\nd) doubly linked list. because you can traverse back and forth\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B-trees are used in databases and filesystems. Compression techniques applied to keys in a B-tree can optimize both space and lookup time.",
        "target_text": "Question: Compression techniques can be used on the keys to reduce both space and time requirements in a B-tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is a technique used to map data (keys) to specific addresses in memory using hash functions. It enables constant-time average-case access.",
        "target_text": "Question: Hashing is the problem of finding an appropriate mapping of keys into addresses.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The `reverse()` function in C++ is part of the Standard Template Library (STL) and is defined in the `<algorithm>` header file. It is used to reverse elements in a range.",
        "target_text": "Question: Predefined function reverse() in C++ is available under which header file?\nChoices:\na) math\nb) stdio\nc) stdlib\nd) algorithm\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A single traversal like inorder, preorder, or postorder is not sufficient to uniquely reconstruct a binary tree. At least two traversals (such as inorder and preorder) are required.",
        "target_text": "Question: Can a tree stored in an array using either one of inorder or post order or pre order traversals be again reformed?\nChoices:\na) Yes just traverse through the array and form the tree\nb) No we need one more traversal to form a tree\nc) No in case of sparse trees\nd) Yes by using both inorder and array elements\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: In C/C++, the `strcmp()` function compares two strings. If both strings are identical, it returns `0`.",
        "target_text": "Question: If two string s are identical, then strcmp() functions returns __________\nChoices:\na) -1\nb) 1\nc) YES\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Least Common Ancestor (LCA) of two nodes in a binary search tree (BST) is the deepest node that is an ancestor of both. A correct approach involves comparing the node values and traversing left or right accordingly.",
        "target_text": "Question: Given that 2 elements are present in the tree, write a function to find the LCA(Least Common Ancestor) of the 2 elements.\nChoices:\na) \npublic void lca(Tree root,int n1, int n2)\n{\n while (root != NULL)\n        {\n            if (root.data() > n1 && root.data() > n2)\n            root = root.right();\n            else if (root.data() < n1 && root.data() < n2)\n            root = root.left();\n     else break;\n        }\n        System.out.println(root.data());\n}\npublic void lca(Tree root,int n1, int n2)\n{\n    while (root != NULL)\n    {\n        if (root.data() > n1 && root.data() < n2)\n        root = root.left();\n        else if (root.data() < n1 && root.data() > n2)\n        root = root.right();\n else break;\n    }\n    System.out.println(root.data());\n}\npublic void lca(Tree root,int n1, int n2)\n{\n    while (root != NULL)\n    {\n        if (root.data() > n1 && root.data() > n2)\n        root = root.left();\n        else if (root.data() < n1 && root.data() < n2)\n        root = root.right();\n else break;\n    }\n    System.out.println(root.data());\n}\npublic void lca(Tree root,int n1, int n2)\n{\n    while (root != NULL)\n    {\n        if (root.data() > n1 && root.data() > n2)\n        root = root.left.left();\n        else if (root.data() < n1 && root.data() < n2)\n        root = root.right.right();\n else break;\n    }\n    System.out.println(root.data());\n}\nd)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a randomized binary search tree, the expected number of leaves is generally (n + 1)/3, assuming uniform insertion probabilities.",
        "target_text": "Question: What is the expected number of leaves in a randomized binary search tree?\nChoices:\na) n + 1\nb) (n + 1)/3\nc) (n + 1)/2\nd) n + 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A stack is a Last-In First-Out (LIFO) structure. Saying it is FIFO is incorrect. Stacks are commonly implemented using linked lists where the top points to the most recently added node.",
        "target_text": "Question: Which of the following statement(s) about stack data structure is/are NOT correct?\nChoices:\na) Linked List are used for implementing Stacks\nb) Top of the Stack always contain the new node\nc) Stack is the FIFO data structure\nd) Null link is present in the last node at the bottom of the stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Converting an infix expression (like A + B) to postfix (like AB+) requires temporarily storing operators in the correct precedence order. This is efficiently done using a stack.",
        "target_text": "Question: 6. Which data structure is needed to convert infix notation to postfix notation?\nChoices:\na) Tree\nb) Branch\nc) Stack\nd) Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A complete graph with n vertices has an edge between every pair of distinct vertices. The number of edges is given by the formula (n*(n-1))/2.",
        "target_text": "Question: What is the number of edges present in a complete graph having n vertices?\nChoices:\na) (n*(n+1))/2\nb) (n*(n-1))/2\nc) n\nd) Information given is insufficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Bit arrays are memory-efficient data structures that enable compact storage and bit-level operations. However, accessing individual bits can be slower due to bit masking and shifting.",
        "target_text": "Question: Which of the following is not an advantage of bit array?\nChoices:\na) Exploit bit level parallelism\nb) Maximal use of data cache\nc) Can be stored and manipulated in the register set for long periods of time\nd) Accessing Individual Elements is easy\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a randomized binary search tree (RBST), the expected depth of a node is approximately 2 * log(n) + O(1), based on probabilistic balancing during insertion.",
        "target_text": "Question: What is the expected depth of a node in a randomized binary search tree?\nChoices:\na) log n\nb) n!\nc) n2\nd) 2 log n + O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In threaded binary trees, null pointers are replaced with special pointers (threads) to the in-order predecessor or successor. A single-threaded tree has one such pointer, while a double-threaded tree has two.",
        "target_text": "Question: What are double and single threaded trees?\nChoices:\na) when both left, right nodes are having null pointers and only right node is null pointer respectively\nb) having 2 and 1 node\nc) using single and double linked lists\nd) using heaps and priority queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In postfix expressions (also known as Reverse Polish Notation), operators follow their operands. To convert infix expressions to postfix, operator precedence and parentheses are handled using stack-based parsing.",
        "target_text": "Question: The postfix form of A ^ B * C - D + E/ F/ (G + H),\nChoices:\na) AB^C*D-EF/GH+/+\nb) AB^CD-EP/GH+/+*\nc) ABCDEFGH+//+-*^\nd) AB^D +EFGH +//*+\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array is an array of integers giving the starting positions of suffixes of a string in lexicographical order. It is useful in full-text indexing and pattern matching.",
        "target_text": "Question: Suffix array of the string 'statistics' is __________\nChoices:\na) 2 8 7 4 9 0 5 1 6 3\nb) 2 7 4 9 8 0 5 1 6 3\nc) 2 4 9 0 5 7 8 1 6 3\nd) 2 8 7 0 5 1 6 9 4 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack operations like push and pop follow Last-In First-Out (LIFO). The final output after a sequence of operations depends on the order of these operations.",
        "target_text": "Question: Consider the following sequence of operations on an empty stack.\nChoices:\na) 86\nb) 68\nc) 24\nd) 94\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Time complexity of different tree algorithms varies. For example, optimal Binary Search Trees have \u03b8(n^2) time complexity, but other structures like AVL trees offer \u03b8(n log n) performance.",
        "target_text": "Question: \u03b8(n2)\nChoices:\na) \u03b8(n)\nb) \u03b8(nLogn)\nc) \u03b8(n2)\nd) \u03b8(n2log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a k-d tree, the 'k' refers to the number of dimensions. It is a space-partitioning data structure for organizing points in a k-dimensional space.",
        "target_text": "Question: In a k-d tree, k originally meant?\nChoices:\na) number of dimensions\nb) size of tree\nc) length of node\nd) weight of node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Cartesian trees are used in scenarios requiring range minimum queries and lowest common ancestor computations. They combine properties of a heap and binary search tree.",
        "target_text": "Question: Cartesian trees are most suitable for?\nChoices:\na) searching\nb) finding nth element\nc) minimum range query and lowest common ancestors\nd) self balancing a tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix tree can be constructed using a suffix array and an LCP (Longest Common Prefix) array, which together allow efficient representation and search in strings.",
        "target_text": "Question: LCP array and __________ is used to construct suffix tree.\nChoices:\na) Hash tree\nb) Hash trie\nc) Suffix array\nd) Balanced tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a min heap, the value of the parent node is always less than or equal to its child nodes. This ensures the minimum element is always at the root.",
        "target_text": "Question: In a min heap:\nChoices:\na) minimum values are stored.\nb) child nodes have less value than parent nodes. \\n (A) minimum values are stored. \\n (B) child nodes have less value than parent nodes.\nc) parent nodes have less value than child nodes.\nd) maximum value is contained by the root node.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees are widely used in bioinformatics for tasks like DNA sequence alignment, pattern matching, and repeat finding.",
        "target_text": "Question: Can suffix tree be used in bioinformatics problems and solutions.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a randomized binary search tree, the longest path during insertion can be analyzed probabilistically. The expected maximum depth for inserting a node is around 4.311 * log(x).",
        "target_text": "Question: What is the longest length path for a node x in random binary search tree for the insertion process?\nChoices:\na) log x\nb) x2\nc) x!\nd) 4.311 log x\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In C++, when passing an array to a function, you typically pass the array name (which decays to a pointer). So, calling a function with `fun(arr)` is correct.",
        "target_text": "Question: What is the correct way to call the function (fun) in the below program?, #include <bits/stdc++.h>\n#include <iostream>\nusing namespace std;\nvoid fun(char* arr)\n{\n    int i;\n    unsigned int n = strlen(arr);\n    for (i = 0; i < n; i++)\n        cout << \" \" << arr[i];\n}\n// Driver program\nint main()\n{\n    char arr[]\n        = { 'g', 'e', 'e', 'k', 's', 'q', 'u', 'i', 'z' };\n    // How to call the above function here to print the char\n    // elements?\n    return 0;\n}, \nChoices:\na) fun(&arr);\nb) fun(*arr);\nc) fun(arr)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B+-tree, if the maximum number of keys in a node is `m`, then the minimum number of keys in any non-root node is typically ceil(m/2). This ensures balance and efficient access. (As asked in GATE CS 2010)",
        "target_text": "Question: Consider a B+-tree in which the maximum number of keys in a node is 5. What is the minimum number of keys in any non-root node? (GATE CS 2010)\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Searching for a specific element in a heap requires scanning each node, as heaps are not designed for search operations. Therefore, the worst-case time complexity is O(n).",
        "target_text": "Question: What is the space complexity of searching in a heap?\nChoices:\na) O(logn)\nb) O(n)\nc) O(1)\nd) O(nlogn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heap data structures are widely used in various real-world applications such as medical systems (task scheduling), file compression (Huffman coding), and stock market analysis (priority queues).",
        "target_text": "Question: What are the applications of the Heap data structure?\nChoices:\na) Medical Applications\nb) File Compression\nc) Stock market\nd) All of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The time complexity for multiplying two matrices of order m*n and n*p using standard matrix multiplication is O(mnp), where m, n, and p are the respective dimensions.",
        "target_text": "Question: The complexity of multiplying two matrices of order m*n and n*p is __________.\nChoices:\na) mnp\nb) mp\nc) mn\nd) np\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Circular queues optimize memory use by treating the queue as a circular buffer. They are beneficial in memory management, traffic systems, and CPU scheduling.",
        "target_text": "Question: Which of the following is/are advantages of circular Queue?\nChoices:\na) Memory Management\nb) Traffic system\nc) CPU Scheduling\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In direct addressing, each key has a unique position in an array, meaning there's a one-to-one correspondence between keys and array indices. This allows constant-time access but requires large arrays if the key range is large.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) Distinct array position for every possible key\nb) Fewer array positions than keys\nc) Fewer keys than array positions\nd) Distinct array positions for keys based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Priority scheduling can cause issues like starvation and indefinite blocking for low-priority processes. However, interrupt handling is a standard OS function and not a specific disadvantage of this scheduling.",
        "target_text": "Question: What is not a disadvantage of priority scheduling in operating systems?\nChoices:\na) A low priority process might have to wait indefinitely for the CPU\nb) If the system crashes, the low priority systems may be lost permanently\nc) Interrupt handling\nd) Indefinite blocking\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Circular queues are used to optimize memory usage by wrapping around when the end of the array is reached, unlike linear queues which can waste space after deletions.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) easier computations\nb) implement LIFO principle in queues\nc) effective usage of memory\nd) to delete elements based on priority\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), an inorder traversal visits the nodes in sorted (increasing) order. This property makes it useful for producing sorted output.",
        "target_text": "Question: What is the speciality about the inorder traversal of a binary search tree?\nChoices:\na) It traverses in a non increasing order\nb) It traverses in an increasing order\nc) It traverses in a random fashion\nd) It traverses based on priority of the node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The postfix (Reverse Polish Notation) form of an expression removes parentheses and places operators after their operands. It is used for expression evaluation using stacks.",
        "target_text": "Question: The postfix form of the expression (A+ B)*(C*D- E)*F / G is?\nChoices:\na) AB+ CD*E - FG /**\nb) AB + CD* E - F **G /\nc) AB + CD* E - *F *G /\nd) AB + CDE * - * F *G /\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Computational geometry is a field of computer science that deals with the study and development of algorithms to solve geometric problems. It plays an important role in computer graphics, robotics, and more.",
        "target_text": "Question: What is computational geometry?\nChoices:\na) study of geometry using a computer\nb) study of geometry\nc) study of algorithms\nd) study of algorithms related to geometry\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In B-trees, when a node splits during insertion, the middle key moves up to the parent, and stays in the right child. During deletion, keys are removed only from the leaf and not repeated in internal nodes.",
        "target_text": "Question: Statement 1: When a node is split during insertion, the middle key is promoted to the parent as well as retained in right half-node.\nStatement 2: When a key is deleted from the leaf, it is also deleted from the non-leaf nodes of the tree.\nChoices:\na) Statement 1 is True but statement 2 is False\nb) Statement 2 is True but statement 1 is False\nc) Both the statements are True\nd) Both the statements are False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In evaluating infix expressions using stacks, the precedence of operators determines the evaluation order. Higher precedence should not trigger immediate evaluation--only lower or equal precedence should.",
        "target_text": "Question: Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?\nChoices:\na) Operand is pushed on to the stack\nb) If the precedence of operator is higher, pop two operands and evaluate\nc) If the precedence of operator is lower, pop two operands and evaluate\nd) The result is pushed on to the operand stack\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Top trees are a type of dynamic tree data structure, often used in advanced algorithms for dynamic connectivity. They are based on the divide and conquer paradigm to maintain and update tree structures efficiently.",
        "target_text": "Question: Which algorithm is used in the top tree data structure?\nChoices:\na) Backtracking\nb) Divide and Conquer\nc) Branch\nd) Greedy\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An AVL tree is a height-balanced binary search tree. For every node, the difference in height between its left and right subtrees (called balance factor) must be at most 1.",
        "target_text": "Question: An AVL tree is a self - balancing binary search tree, in which the heights of the two child sub trees of any node differ by __________\nChoices:\na) At least one\nb) At most one\nc) Two\nd) At most two\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), in-order traversal visits nodes in the left-root-right order, which yields values in ascending sorted order.",
        "target_text": "Question: In a binary search tree, which of the following traversals would print the numbers in the ascending order?\nChoices:\na) Level-order traversal\nb) Pre-order traversal\nc) Post-order traversal\nd) In-order traversal\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Height-balanced binary trees like AVL trees maintain balance to prevent skewed shapes, which helps achieve faster access and insertion times, improving overall efficiency.",
        "target_text": "Question: Why we need to a binary tree which is height balanced?\nChoices:\na) to avoid formation of skew trees\nb) to save memory\nc) to attain faster memory access\nd) to simplify storing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Open addressing handles collisions by probing alternative locations in the hash table. Common techniques include linear probing, quadratic probing, and double hashing. Rehashing, however, refers to resizing the hash table, not collision resolution.",
        "target_text": "Question: Which of the following is not a collision resolution strategy for open addressing?\nChoices:\na) Linear probing\nb) Quadratic probing\nc) Double hashing\nd) Rehashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B+ tree with n pointers, the number of keys in a leaf node ranges from ceil((n-1)/2) to n-1. If the node can hold 7 pointers, it can hold up to 6 keys, with a minimum of ceil(6/2) = 3.",
        "target_text": "Question: A B+ tree can contain a maximum of 7 pointers in a node. What is the minimum number of keys in leaves?\nChoices:\na) 6\nb) 3\nc) 4\nd) 7\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In syntax trees or parse trees used by compilers, an in-order traversal returns the original infix expression, which is the same as the original input string.",
        "target_text": "Question: While evaluating the parse tree, which traversal technique is used to give the original input string?\nChoices:\na) Pre-order traversal\nb) In-order traversal\nc) Post-order traversal\nd) Breadth-first traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a hypergraph, an incidence matrix is a binary matrix that indicates the membership of vertices in hyperedges. Each row represents a vertex, and each column a hyperedge.",
        "target_text": "Question: What would be the Incidence Matrix of the given HyperGraph?\nV = {x,y,z} E = {{x,y}{y}{x,z}{z,y}}\nChoices:\na) {{1,0,1,0},\n{1,1,0,1},\n{0,0,1,1}}\nb) {{1,1,0,0},\n{0,1,0,0},\n{1,1,1,0}}\nc) {{0,1,0,1},\n{0,0,1,0},\n{1,1,0,0}}\nd) None of the Mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The maximum number of nodes in a binary tree of depth `d` is given by the formula 2^d - 1. For depth 5, it would be 2^5 - 1 = 31.",
        "target_text": "Question: The maximum number of nodes in a binary tree of depth 5 is __________\nChoices:\na) 31\nb) 16\nc) 32 \\n (A) 31 \\n (B) 16 \\n (C) 32\nd) 15\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Quadratic probing is a collision resolution method in open addressing. The hash function is adjusted using a quadratic function: Hash(x) = (hash(x) + c1*i + c2*i^2) % table_size, often simplified as (hash(x) + F(i^2)) mod table size.",
        "target_text": "Question: What is the formula used in quadratic probing?\nChoices:\na) Hash key = key mod table size\nb) Hash key=(hash(x)+F(i)) mod table size\nc) Hash key=(hash(x)+F(i2)) mod table size\nd) H(x) = x mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The k-d tree (k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. It was invented by Jon Bentley in 1975.",
        "target_text": "Question: Who invented k-d trees?\nChoices:\na) Arne Andersson\nb) Jon Bentley\nc) Jon Von Newmann\nd) Rudolf Bayer\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation (Polish notation) places operators before their operands. The infix expression (p + q) - (r * t) is written as - + p q * r t in prefix form.",
        "target_text": "Question: The prefix form of an infix expression (p + q) - (r * t) is?\nChoices:\na) + pq - *rt\nb) - +pqr * t\nc) - +pq * rt\nd) - + * pqrt\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2D search tree, also known as a k-d tree, uses alternate dimensions for comparison at different levels. At odd levels, comparisons are typically made using the first key.",
        "target_text": "Question: The 2d search tree has the simple property that branching on odd levels is done with respect to the first key.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix expressions (Reverse Polish Notation) are evaluated using a stack. For `abc*+`, with a=1, b=2, c=3, it becomes 1 + (2 * 3) = 7.",
        "target_text": "Question: What is the result of the given postfix expression? abc*+ where a=1, b=2, c=3.\nChoices:\na) 4\nb) 5\nc) 6\nd) 7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix expressions are evaluated using a stack. The expression `6 3 2 4 + - *` evaluates as: 2 + 4 = 6, then 3 - 6 = -3, and finally 6 * (-3) = -18.",
        "target_text": "Question: 7. What is the value of the postfix expression 6 3 2 4 + - *?\nChoices:\na) 74\nb) -18\nc) 22\nd) 40\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Van Emde Boas tree, an advanced data structure that supports operations in O(log log u) time, was invented by Peter van Emde Boas in 1975.",
        "target_text": "Question: In which year was Van Emde Boas tree invented?\nChoices:\na) 1972\nb) 1973\nc) 1974\nd) 1975\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a binary tree in which every node other than the leaves has two children. A balanced full binary tree with `n` leaves has height ceil(log2(n)). For 8 leaves, height is log2(8) = 3, so height = 3 + 1 = 4.",
        "target_text": "Question: What will be the height of a balanced full binary tree with 8 leaves?\nChoices:\na) 8\nb) 5\nc) 6\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, accessing an array element outside its valid index range throws an `ArrayIndexOutOfBoundsException`. In the given code, `arr[5]` is invalid for a 5-element array (index 0-4).",
        "target_text": "Question: What is the output of the following Java code?\npublic class array\n{\n public static void main(String args[])\n {\n  int []arr = {1,2,3,4,5};\n  System.out.println(arr[5]);\n }\n}\nChoices:\na) 4\nb) 5\nc) ArrayIndexOutOfBoundsException\nd) InavlidInputException\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A spanning tree is a subgraph that includes all vertices and is a tree. All spanning trees of a graph have the same number of vertices and exactly (V - 1) edges.",
        "target_text": "Question: All possible spanning trees of graph G:\nChoices:\na) have same number of edges and vertices.\nb) have same number of edges and but not vertices.\nc) have same number of vertices but not edges.\nd) depends upon algorithm being used.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A self-balancing binary search tree ensures logarithmic height. The minimum height for `n` nodes in such a tree is approximately log2(n).",
        "target_text": "Question: The minimum height of self balancing binary search tree with n nodes is __________\nChoices:\na) log2(n)\nb) n\nc) 2n + 1\nd) 2n - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Random trees are generated using probabilistic algorithms. AVL trees are deterministic and follow strict balancing rules, making them non-random trees.",
        "target_text": "Question: Which of the following is not a random tree?\nChoices:\na) Treap\nb) Random Binary Tree\nc) Uniform Spanning Tree\nd) AVL Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: XOR linked lists use a single pointer per node that stores the XOR of previous and next node addresses. This reduces memory usage compared to traditional doubly linked lists.",
        "target_text": "Question: Is it possible to create a doubly linked list using only one pointer with every node.\nChoices:\na) Not Possible\nb) Yes, possible by storing XOR of addresses of previous and next nodes.\nc) Yes, possible by storing XOR of current node and next node\nd) Yes, possible by storing XOR of current node and previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a BFS traversal of an undirected graph, any non-tree edge (u, v) connects nodes that are at the same level or one level apart. A difference of more than 1 is not possible.",
        "target_text": "Question: Let G = (V, E) be a simple undirected graph, and s be a particular vertex in it called the source. For x is an element of V, let d(x) denote the shortest distance in G from s to x. A breadth first search (BFS) is performed starting at s. Let T be the resultant BFS tree. If (u, v) is an edge of G that is not in T, then which one of the following CANNOT be the value of d(u) - d(v)?\nChoices:\na) -1\nb) 0\nc) 1\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays provide a way to store elements of the same data type in contiguous memory locations. They are simple to use and offer efficient indexing.",
        "target_text": "Question: 9. What are the advantages of arrays?\nChoices:\na) Objects of mixed data types can be stored\nb) Elements in an array cannot be sorted\nc) Index of first element of an array is 1\nd) Easier to store elements of same data type\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A special sparse matrix has mostly zero elements but follows a specific structure. A band matrix is one such type, where non-zero elements are confined to a diagonal band.",
        "target_text": "Question: Which one of the following is a Special Sparse Matrix?\nChoices:\na) Band Matrix\nb) Skew Matrix\nc) Null matrix\nd) Unit matrix\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Deleting a node from a singly linked list requires adjusting the previous node's next pointer to skip over the node being deleted. The implementation must carefully check bounds and node existence.",
        "target_text": "Question: How would you delete a node in the singly linked list? The position to be deleted is given.\nChoices:\na) \npublic void delete(int pos)\n{\n if(pos < 0)\n pos = 0;\n if(pos > size)\n pos = size;\n if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=1; i<pos; i++)\n            {\n  temp = temp.getNext();\n            }\n     temp.setNext(temp.getNext().getNext());\n }\n     size--;\n}\npublic void delete(int pos)\n{\n if(pos < 0)\n pos = 0;\n if(pos > size)\n pos = size;\n if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=1; i<pos; i++)\n     {\n  temp = temp.getNext();\n     }\n     temp.setNext(temp.getNext());\n }\n     size--;\n}\npublic void delete(int pos)\n{\n        if(pos < 0)\n pos = 0;\n if(pos > size)\n pos = size;\n if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=1; i<pos; i++)\n     {\n  temp = temp.getNext().getNext();\n            }\n     temp.setNext(temp.getNext().getNext());\n }\n     size--;\n}\npublic void delete(int pos)\n{\n        if(pos < 0)\n        pos = 0;\n        if(pos > size)\n        pos = size;\n        if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=0; i<pos; i++)\n     {\n  temp = temp.getNext();\n     }\n     temp.setNext(temp.getNext().getNext());\n }\n size--;\n}\nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In C and C++, arrays are declared using the syntax `type name[size];`. For example, `int geeks[20];` declares an array of 20 integers.",
        "target_text": "Question: Which of the following correctly declares an array?\nChoices:\na) int geeks[20];\nb) int geeks;\nc) geeks{20};\nd) array geeks[20];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: XOR linked lists use a single field to store the XOR of the addresses of previous and next nodes. The first node XORs NULL and the address of the second node; the last node XORs its previous node and NULL.",
        "target_text": "Question: What does first and last nodes of a xor linked lists contain ? (let address of first and last be A and B)\nChoices:\na) NULL xor A and B xor NULL\nb) NULL and NULL\nc) A and B\nd) NULL xor A and B\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Simple uniform hashing assumes that every key is equally likely to hash into any of the available slots in the hash table, resulting in uniform distribution.",
        "target_text": "Question: What is simple uniform hashing?\nChoices:\na) Every element has equal probability of hashing into any of the slots\nb) A weighted probabilistic method is used to hash elements into the slots\nc) Elements has Random probability of hashing into array slots\nd) Elements are hashed based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A suffix tree is a compressed trie used for efficient full-text searches, particularly in string processing and bioinformatics.",
        "target_text": "Question: Which of the following special type of trie is used for fast searching of the full texts?\nChoices:\na) Ctrie\nb) Hash tree\nc) Suffix tree\nd) T tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In queue data structures, attempting to insert an element into a full queue results in an overflow condition, especially in fixed-size implementations like arrays.",
        "target_text": "Question: What is the term for inserting into a full queue known as?\nChoices:\na) overflow\nb) underflow\nc) null pointer exception\nd) program won't be compiled\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The bitwise NOT operator (`~` in C/C++) is used to invert all bits of a bit array. It flips 0s to 1s and vice versa.",
        "target_text": "Question: Which of the following bitwise operator will you use to invert all the bits in a bit array?\nChoices:\na) OR\nb) NOT\nc) XOR\nd) NAND\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In array-based dequeue operations (double-ended queue), elements can be inserted and removed from both ends. Each element may be touched multiple times for shifting or reordering, potentially up to four times in certain implementations.",
        "target_text": "Question: Given an array of size n, let's assume an element is 'touched' if and only if some operation is performed on it(for example, for performing a pop operation the top element is 'touched'). Now you need to perform Dequeue operation. Each element in the array is touched atleast?\nChoices:\na) Once\nb) Twice\nc) Thrice\nd) Four times\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In C, memory allocated using `malloc` or `calloc` should be released using `free`. For deleting nodes in an expression tree, `free` is used to deallocate the memory.",
        "target_text": "Question: An expression tree's nodes can be deleted by calling?\nChoices:\na) malloc\nb) calloc\nc) delete\nd) free\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In data structures and algorithms, a naive merge strategy can sometimes still apply in skewed merges, depending on the case. The claim that naive merge cannot be done is False.",
        "target_text": "Question: Naive merge cannot be done in a skew merge.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation (Polish notation) expressions must include the expression itself. Without it, no solution is possible. This question appears to be missing the actual prefix expression.",
        "target_text": "Question: What would be the solution to the given prefix notation?\nChoices:\na) 14\nb) 15\nc) 18\nd) 12\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Reversing an array involves swapping pairs of elements from both ends toward the center. For an array of even length n, exactly n/2 swaps are required.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an even number?\nChoices:\na) (n-1) / 2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Height-balanced binary search trees (like AVL trees) can efficiently implement abstract data types such as sets and priority queues due to their balanced structure and fast lookup and update times.",
        "target_text": "Question: Which of the following data structures can be efficiently implemented using height balanced binary search tree?\nChoices:\na) sets\nb) priority queue\nc) heap\nd) both sets and priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A leftist heap is a variant of a binary heap that is designed to support efficient merging of two heaps. Merging is the fundamental operation upon which others like insertion and deletion are based.",
        "target_text": "Question: What is the fundamental operation on leftist heap?\nChoices:\na) insertion\nb) merging\nc) deletion\nd) swapping\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a doubly linked list, inserting a node at the front shifts the current head to the second position. If `6` is inserted at the beginning of the list `1-2-3-4-5`, the result will be `6-1-2-3-4`, assuming the last element is removed.",
        "target_text": "Question: Consider the following doubly linked list: head-1-2-3-4-5-tail. What will be the list after performing the given sequence of operations?\nChoices:\na) head-6-1-2-3-4-5-tail\nb) head-6-1-2-3-4-tail\nc) head-1-2-3-4-5-6-tail\nd) head-1-2-3-4-5-tail\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree, the number of different search paths to a specific key depends on the structure of the tree. For searching key `60`, the order of traversal over 7 nodes can occur in C(7,3) = 35 ways.",
        "target_text": "Question: When searching for the key value 60 in a binary search tree, nodes containing the key values 10, 20, 40, 50, 70 80, 90 are traversed, not necessarily in the order given. How many different orders are possible in which these key values can occur on the search path from the root to the node containing the value 60?\nChoices:\na) 35\nb) 64\nc) 128\nd) 5040\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Balanced symbol expressions ensure that every opening bracket has a corresponding closing bracket of the same type and properly nested. An expression like `((A+B)+(C+D)` is unbalanced.",
        "target_text": "Question: Which of the following statement is invalid with respect to balancing symbols?\nChoices:\na) [(A+B) + (C-D)]\nb) [{A+B}-{C-[D+E]}]\nc) ((A+B) + (C+D)\nd) {(A+B) + [C+D]}\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Insertion Sort is efficient for nearly sorted data because it performs fewer comparisons and shifts compared to other algorithms. Bubble Sort, though simple, is less efficient in general.",
        "target_text": "Question: Which of the following sorting methods would be most suitable for sorting a list which is almost sorted?\nChoices:\na) Bubble Sort\nb) Insertion Sort\nc) Selection Sort\nd) Quick Sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A palindrome is a word that reads the same backward as forward. 'Maadam' is not a palindrome due to its asymmetric spelling.",
        "target_text": "Question: Which among the following is not a palindrome?\nChoices:\na) Madam\nb) Dad\nc) Malayalam\nd) Maadam\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Bit arrays are commonly used in applications like Bloom filters and bitmaps. To find the first occurrence of a `1` in a bit array, a `Find First One` operation is typically used.",
        "target_text": "Question: Which one of the following operations returns the first occurrence of bit 1 in bit arrays?\nChoices:\na) Find First Zero\nb) Find First One\nc) Counting lead Zeroes\nd) Counting lead One\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: The Jaccard Coefficient is a statistical measure used to compare the similarity between two sets. It is defined as the size of the intersection divided by the size of the union of the sets.",
        "target_text": "Question: Which indicator is used for similarity between two sets?\nChoices:\na) Rope Tree\nb) Jaccard Coefficient\nc) Tango Tree\nd) MinHash Coefficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree supports three primary traversal orders: in-order, pre-order, and post-order. Level-order traversal is also applicable, but generally the number of basic traversal orders is considered to be 3.",
        "target_text": "Question: How many orders of traversal are applicable to a binary tree (In General)?\nChoices:\na) 1\nb) 4\nc) 2\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In any K-ary tree, the root node is always at depth 0. Depth is defined as the number of edges from the root to a given node.",
        "target_text": "Question: What is the depth of the root node of K-ary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The average depth of a binary tree gives an idea of how far nodes are from the root on average. It is often approximated by O(sqrt(N)) in randomly constructed binary trees.",
        "target_text": "Question: The average depth of a binary tree is given as?\nChoices:\na) O(N)\nb) O(log N)\nc) O(M log N)\nd) O(sqrt(N))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B-tree of minimum degree t, each node can have at most 2t children (pointers), and hence a maximum of 2t pointers.",
        "target_text": "Question: A B-tree of minimum degree t can maximum __________ pointers in a node.\nChoices:\na) t-1\nb) 2t-1\nc) 2t\nd) t\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly or doubly linked list, searching requires sequential traversal from the head node, leading to a linear time complexity of O(n).",
        "target_text": "Question: The time required to search an element in a linked list of length n is\nChoices:\na) O (log n)\nb) O (n)\nc) O (1)\nd) O (n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees are self-adjusting binary search trees. They are used in applications such as cache implementation where frequently accessed elements are moved closer to the root.",
        "target_text": "Question: Which of the following options is an application of splay trees?\nChoices:\na) cache Implementation\nb) networks\nc) send values\nd) receive values\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A graph is bipartite if and only if it does not contain any cycles of odd length. This is a necessary and sufficient condition for bipartiteness.",
        "target_text": "Question: A graph 'G' with 'n' nodes is bipartite if it contains __________\nChoices:\na) n edges\nb) a cycle of odd length\nc) no cycle of odd length\nd) n2 edges\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A queue is a linear data structure where insertion (enqueue) occurs at the rear and deletion (dequeue) occurs at the front. This behavior classifies it as FIFO.",
        "target_text": "Question: A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as __________\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: When a node with two children is deleted in a binary search tree, it is typically replaced with its in-order successor (the next larger node) to maintain the BST properties.",
        "target_text": "Question: If a node having two children is deleted from a binary tree, it is replaced by its __________\nChoices:\na) In-order predecessor\nb) In-order successor\nc) Pre-order predecessor\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A priority queue allows elements to be processed based on priority. While it efficiently handles priority-based operations, arbitrary deletions (deleting any element) are not straightforward or efficient.",
        "target_text": "Question: Which of the following is not an advantage of a priority queue?\nChoices:\na) Easy to implement\nb) Processes with different priority can be efficiently handled\nc) Applications with differing requirements\nd) Easy to delete elements in any case\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Heaps are typically complete binary trees, which are well-suited to array representations. Arrays provide better memory efficiency and caching compared to linked tree structures.",
        "target_text": "Question: Why is heap implemented using array representations than tree(linked list) representations though both tree representations and heaps have same complexities?\nThen why go with array representation when both are having same values ?\nChoices:\na) arrays can store trees which are complete and heaps are not complete\nb) lists representation takes more memory hence memory efficiency is less and go with arrays and arrays have better caching\nc) lists have better caching\nd) In lists insertion and deletion is difficult\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Open addressing and separate chaining are two methods to resolve hash collisions. Open addressing can be easier to implement because it does not require additional data structures like linked lists.",
        "target_text": "Question: Which of the following is an advantage of open addressing over separate chaining?\nChoices:\na) it is simpler to implement\nb) table never gets full\nc) it is less sensitive to hash function\nd) it has better cache performance\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), the minimum element is found by traversing left from the root until the leftmost node is reached.",
        "target_text": "Question: How will you find the minimum element in a binary search tree?\nChoices:\na) \npublic void min(Tree root)\n{\n while(root.left() != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\npublic void min(Tree root)\n{\n while(root != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\npublic void min(Tree root)\n{\n while(root.right() != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\npublic void min(Tree root)\n{\n while(root != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In threaded binary trees, null pointers are replaced with references to in-order predecessors and successors to allow for efficient non-recursive traversal.",
        "target_text": "Question: What are null nodes filled with in a threaded binary tree?\nChoices:\na) inorder predecessor for left node and inorder successor for right node information\nb) right node with inorder predecessor and left node with inorder successor information\nc) they remain null\nd) some other values randomly\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a d-heap (a generalization of a binary heap where each node has d children), most operations like insert and delete are efficient, but merging two d-heaps is not efficient without specialized data structures.",
        "target_text": "Question: Which operation is not efficiently performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) merge\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list representation of a queue, maintaining a single pointer to the rear node allows both enQueue (insert at rear) and deQueue (delete from front) operations to be performed in constant time.",
        "target_text": "Question: A circularly linked list is used to represent a Queue. A single variable p is used to access the Queue. To which node should p point such that both the operations enQueue and deQueue can be performed in constant time? (GATE 2004) \nChoices:\na) rear node\nb) front node\nc) not possible with a single pointer\nd) node next to front\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A binomial heap supports efficient union operations, unlike binary heaps. It consists of a collection of binomial trees, allowing union in logarithmic time.",
        "target_text": "Question: The main distinguishable characterstic of a binomial heap from a binary heap is that\nChoices:\na) it allows union operations very efficiently\nb) it does not allow union operations that could easily be implemented in binary heap\nc) the heap structure is not similar to complete binary tree\nd) the location of child node is not fixed i.e child nodes could be at level (h-2) or (h-3), where h is height of heap and h>4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: For pre-order and post-order traversals to be the same, the tree must have only one node. With more than one node, the traversal orders will differ.",
        "target_text": "Question: The maximum number of nodes in a tree for which post-order and pre-order traversals may be equal is __________\nChoices:\na) 3\nb) 1\nc) 2\nd) any number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: If a Directed Acyclic Graph (DAG) has more than one valid topological sort, then it cannot have exactly one Hamiltonian path. A unique topological sort would imply exactly one such path.",
        "target_text": "Question: If there are more than 1 topological sorting of a DAG is possible, which of the following is True.\nChoices:\na) Many Hamiltonian paths are possible\nb) No Hamiltonian path is possible\nc) Exactly 1 Hamiltonian path is possible\nd) Given information is insufficient to comment anything\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AVL trees are more strictly balanced than Red-Black trees, which may result in more rotations during insertion and deletion. Red-Black trees allow faster updates but are less balanced.",
        "target_text": "Question: Which of the following is True\nChoices:\na) The AVL trees are more balanced compared to Red Black Trees, but they may cause more rotations during insertion and deletion.\nb) Heights of AVL and Red-Black trees are generally same, but AVL Trees may cause more rotations during insertion and deletion.\nc) Red Black trees are more balanced compared to AVL Trees, but may cause more rotations during insertion and deletion.\nd) Heights of AVL and Red-Black trees are generally same, but Red Black trees may cause more rotations during insertion and deletion.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A Hash tree (or Merkle tree) uses hashing to support direct access and data integrity verification. It does not provide sequential access.",
        "target_text": "Question: Which of the following is True for a Hash tree?\nChoices:\na) Hashing is used for sequential access\nb) Indexing is used for direct access\nc) Hash tree allows only sequential access\nd) Hashing is used for direct access\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A triply linked list is an extension of doubly linked lists and is dynamic in nature, allowing flexible memory usage. It supports forward and backward traversal and an additional pointer for special operations.",
        "target_text": "Question: Which of the following is True about a triply linked list?\nChoices:\na) Dynamic in nature\nb) Allows random access\nc) Less memory wastage\nd) Reverse traversing is difficult\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Huffman coding is a popular application of binary trees used in data compression algorithms. It constructs an optimal prefix code based on the frequency of characters.",
        "target_text": "Question: An important application of binary tree is __________\nChoices:\na) Huffman coding\nb) stack implementation\nc) queue implementation\nd) traverse a cyclic graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A graph can consist of only vertices and no edges (called an edgeless graph). However, it cannot contain edges without vertices, since edges must connect vertices.",
        "target_text": "Question: Which of the following is True?\nChoices:\na) A graph may contain no edges and many vertices\nb) A graph may contain many edges and no vertices\nc) A graph may contain no edges and no vertices\nd) A graph may contain no vertices and many edges\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The number of inversions in an array indicates how far the array is from being sorted. A common method to compute inversions efficiently is via a modified merge sort algorithm.",
        "target_text": "Question: Choose the correct function from the following which determines the number of inversions in an array?\nChoices:\na) Using bubble sort comparisons\nb) Using merge sort with inversion count logic\nc) Using simple count of unequal elements\nd) Using linear scan for each element\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B+ tree is a type of self-balancing tree structure that allows both rapid sequential access (via leaf node chaining) and rapid random access (through internal indexing).",
        "target_text": "Question: Which of the following is True?\nChoices:\na) B + tree allows only the rapid random access\nb) B + tree allows only the rapid sequential access\nc) B + tree allows rapid random access as well as rapid sequential access\nd) B + tree allows rapid random access and slower sequential access\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Priority queues can be implemented using multiple queues for different priority levels. A minimum of 2 queues is required--one for high and one for low priority elements.",
        "target_text": "Question: Minimum number of queues required for priority queue implementation?\nChoices:\na) 5\nb) 4\nc) 3\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: To move the last element of a singly linked list to the front, one must first find the second-last node (q), update q's next to NULL, then set the last node (p)'s next to head, and update head to p.",
        "target_text": "Question: The following C function takes a simply-linked list as input argument. It modifies the list by moving the last element to the front of the list and returns the modified list. Some part of the code is left blank. Choose the correct alternative that contain the correct pseudocode for the blank line. , #include <iostream>\nstruct Node {\n    int value;\n    Node *next;\n};\nNode* move_to_front(Node *head) {\n    Node *p, *q;\n    if (head == NULL || head->next == NULL)\n        return head;\n    q = NULL; p = head;\n    while (p->next != NULL) {\n        q = p;\n        p = p->next;\n    }\n    __________\n    return head;\n}, \nChoices:\na) q = NULL; next of p = head; head = p;\nb) next of q = NULL; head = p; next of p = head;\nc) head = p; next of p = q; next of q = NULL;\nd) next of q = NULL; next of p = head; head = p;\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Standard operator precedence rules apply: division and multiplication before addition. The expression `a/b + c*d` with values a=4, b=2, c=2, d=1 becomes 2 + 2 = 4.",
        "target_text": "Question: Evaluate the following and choose the correct answer.\na/b+c*d where a=4, b=2, c=2, d=1.\nChoices:\na) 1\nb) 4\nc) 5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Threaded binary trees use null pointers to link to in-order predecessor and successor nodes, allowing all standard traversals (in-order, pre-order, post-order) to be performed efficiently.",
        "target_text": "Question: Which of the following tree traversals work if the null left pointer pointing to the predecessor and null right pointer pointing to the successor in a binary tree?\nChoices:\na) inorder, postorder, preorder traversals\nb) inorder\nc) postorder\nd) preorder\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In expression trees, evaluating and converting them to infix form involves recursive traversal. This problem assumes a correct traversal and evaluation path to yield 12.",
        "target_text": "Question: From the given expression tree, identify the infix expression, evaluate it and choose the correct result.\nChoices:\na) 5\nb) 10\nc) 12\nd) 16\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: When implementing a queue with a linked list, inserting at one end (e.g., rear) and deleting from the other (e.g., front) maintains FIFO order. Option a describes this behavior correctly.",
        "target_text": "Question: Which of the following is True about linked list implementation of queue?\nChoices:\na) In push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end\nb) In push operation, if new nodes are inserted at the beginning, then in pop operation, nodes must be removed from the beginning\nc) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from end\nd) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from beginning\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: According to operator precedence, multiplication is done before addition and subtraction. The expression `1+2*3-2` evaluates as `1 + 6 - 2 = 5`.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 1+2*3-2\nChoices:\na) 3\nb) 6\nc) 5\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In Fibonacci heaps, insertion is simple, but certain lines in the code may cause structural issues. The line referenced (Line 9) likely introduces an error in maintaining heap properties.",
        "target_text": "Question: What is wrong with the following code of insertion in fibonacci heap.\nChoose the correct option\nChoices:\na) Line -11\nb) Line -3\nc) Line 9\nd) Line 7\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In Binary Search Tree deletion, when a node has two children, it's replaced with its inorder successor or predecessor. The inorder successor is either a leaf or has no left child.",
        "target_text": "Question: In delete operation of BST, we need inorder successor (or predecessor) of a node when the node to be deleted has both left and right child as non-empty. Which of the following is True about inorder successor needed in delete operation?\nChoices:\na) Inorder Successor is always a leaf node\nb) Inorder successor is always either a leaf node or a node with empty left child\nc) Inorder successor may be an ancestor of the node\nd) Inorder successor is always either a leaf node or a node with empty right child\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The given function resembles a Max-Heapify function which ensures the max-heap property. It swaps the largest of parent and child and recursively fixes the heap.",
        "target_text": "Question: Given the code, choose the correct option that is consistent with the code. (Here A is the heap)\nbuild(A,i)\n left-> 2*i\n right->2*i +1\n temp- > i\n if(left<= heap_length[A] ans A[left] >A[temp])\n temp -> left\n if (right = heap_length[A] and A[right] > A[temp])\n temp->right\n if temp!= i\n swap(A[i],A[temp])\n build(A,temp)\nChoices:\na) It is the build function of max heap\nb) It is the build function of min heap\nc) It is general build function of any heap\nd) It is used to search element in any heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Post-order traversal of an expression tree prints operands first, followed by operators. For (7 - (4 * 5)) + (9 / 3), the post-order is 745*-93/+.",
        "target_text": "Question: For the expression (7-(4*5))+(9/3) which of the following is the post order tree traversal?\nChoices:\na) *745-93/+\nb) 93/+745*-\nc) 745*-93/+\nd) 74*+593/-\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Stack implemented with arrays has fixed size; resizing requires reallocation. This limits flexibility and is the main drawback of array-based stacks.",
        "target_text": "Question: Array implementation of Stack is not dynamic, which of the following statements supports this argument?\nChoices:\na) space allocation for array is fixed and cannot be changed during run-time\nb) user unable to give the input for stack operations\nc) a runtime exception halts execution\nd) improper program compilation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Move-To-Front heuristic reorganizes data to improve access time. However, it may bring infrequently accessed nodes to the front, potentially decreasing performance.",
        "target_text": "Question: Which of the following is True about the Move-To-Front Method for rearranging nodes?\nChoices:\na) node with highest access count is moved to head of the list\nb) requires extra storage\nc) may over-reward infrequently accessed nodes\nd) requires a counter for each node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Searching in AVL trees is \u03b8(log n) due to their balanced nature, while unbalanced BSTs may degrade to O(n) in worst case.",
        "target_text": "Question: Which of the following is TRUE?\nChoices:\na) The cost of searching an AVL tree is \u03b8 (log n) but that of a binary search tree is O(n)\nb) The cost of searching an AVL tree is \u03b8 (log n) but that of a complete binary tree is \u03b8 (n log n)\nc) The cost of searching a binary search tree is O (log n ) but that of an AVL tree is \u03b8(n)\nd) The cost of searching an AVL tree is \u03b8 (n log n) but that of a binary search tree is O(n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack operations like push and pop must respect stack size. The given sequence respects the size limit and does not cause overflow or underflow.",
        "target_text": "Question: Consider the following operations performed on a stack of size 5 : Push (a); Pop() ; Push(b); Push(c); Pop(); Push(d); Pop();Pop(); Push (e) Which of the following statements is correct?\nChoices:\na) Underflow occurs\nb) Stack operations are performed smoothly\nc) Overflow occurs\nd) None of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a linked list implementation of a queue, you can insert at the beginning and remove from the end, or vice versa, depending on your implementation. Both configurations are valid.",
        "target_text": "Question: Which of the following is True about linked list implementation of queue?\nChoices:\na) In push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end.\nb) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from the beginning.\nc) Both of the above\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In B-trees, the higher the order (maximum number of children), the more keys each node can hold. This reduces the frequency of splits because nodes can accommodate more insertions.",
        "target_text": "Question: Which of the following is True?\nChoices:\na) larger the order of B-tree, less frequently the split occurs\nb) larger the order of B-tree, more frequently the split occurs\nc) smaller the order of B-tree, more frequently the split occurs\nd) smaller the order of B-tree, less frequently the split occurs\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Using standard operator precedence (exponentiation > multiplication/division > addition/subtraction), evaluate a + b * c - d / e ^ f with given values: 1 + 2*3 - 4/4 = 1 + 6 - 1 = 6.",
        "target_text": "Question: Evaluate the following infix expression using algorithm and choose the correct answer. a+b*c-d/e^f where a=1, b=2, c=3, d=4, e=2, f=2.\nChoices:\na) 6\nb) 8\nc) 9\nd) 7\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: In a trie (prefix tree), strings are stored such that the path from the root to a leaf represents a string. Each node contains character edges to its children.",
        "target_text": "Question: Which of the following is True about the trie?\nChoices:\na) root is letter a\nb) path from root to the leaf yields the string\nc) children of nodes are randomly ordered\nd) each node stores the associated keys\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In normal binary trees, many pointers in the structure may be null (especially in leaf nodes), which leads to space inefficiency. Threaded binary trees solve this by reusing null pointers.",
        "target_text": "Question: What are the disadvantages of normal binary tree traversals?\nChoices:\na) there are many pointers which are null and thus useless\nb) there is no traversal which is efficient\nc) complexity in implementing\nd) improper traversals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In evaluating `a^b + c` with a=2, b=2, c=2, we compute 2^2 + 2 = 4 + 2 = 6.",
        "target_text": "Question: Using the evaluation of infix expression, evaluate a^b+c and choose the correct answer. (a=2, b=2, c=2)\nChoices:\na) 12\nb) 8\nc) 10\nd) 6\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Binary trees can be both complete and full, but not all binary trees satisfy these properties. Therefore, none of the listed options are universally True.",
        "target_text": "Question: Which of the following is True about Binary Trees?\nChoices:\na) Every binary tree is either complete or full.\nb) Every complete binary tree is also a full binary tree.\nc) Every full binary tree is also a complete binary tree.\nd) No binary tree is both complete and full.', 'E\\nNone of the above\nAnswer: E\nNone of the above"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Standard infix evaluation respects operator precedence: multiplication/division before addition/subtraction. The expression `4*2 + 3 - 5/5` = `8 + 3 - 1` = `10`.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 4*2+3-5/5\nChoices:\na) 10\nb) 11\nc) 16\nd) 12\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a weak-heap, each right child has a greater value than its parent. It is a relaxed version of the min-heap with specific rules enabling better performance in certain cases.",
        "target_text": "Question: Choose the correct properties of weak-heap.\nChoices:\na) Every node has value greater than the value of child node\nb) Every right child of node has greater value than parent node\nc) Every left child of node has greater value than parent node\nd) Every left and right child of node has same value as parent node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A threaded binary tree replaces null pointers with pointers to in-order predecessor or successor, enabling traversal without stacks or queues.",
        "target_text": "Question: What is a threaded binary tree traversal?\nChoices:\na) a binary tree traversal using stacks\nb) a binary tree traversal using queues\nc) a binary tree traversal using stacks and queues\nd) a binary tree traversal without using stacks and queues\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To evaluate an expression tree (or syntax tree), post-order traversal is used because it first visits subtrees (operands) before applying the operator (root).",
        "target_text": "Question: Which tree traversal technique is used to evaluate the expression represented by syntax tree?\nChoices:\na) Pre-order traversal\nb) In-order traversal\nc) Post-order traversal\nd) Breadth first traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: If delete and decrease-key operations are rare and provided with direct access, an unsorted array allows O(1) insertions and direct deletions, making it optimal for minimizing total cost.",
        "target_text": "Question: An algorithm performs (logN)^1/2 find operations, N insert operations, (logN)^1/2 delete operations, and (logN)^1/2 decrease-key operations on a set of data items with keys drawn from a linearly ordered set. For a delete operation, a pointer is provided to the record that must be deleted. For the decrease-key operation, a pointer is provided to the record that has its key decreased. Which one of the following data structures is the most suited for the algorithm to use, if the goal is to achieve the best total asymptotic complexity considering all the operations?\nChoices:\na) Unsorted array\nb) Min-heap\nc) Sorted array\nd) Sorted doubly linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In a hash table with chaining using a list head, deleting an element pointed to by a reference is done in constant time, giving a time complexity of O(1).",
        "target_text": "Question: What is the time complexity of delete function in the hash table using list head?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-Trees are balanced binary search trees with worst-case time complexity for operations like search, insert, and delete being O(log N), similar to AVL or Red-Black trees.",
        "target_text": "Question: What is the worst case analysis of an AA-Tree?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap, each node has 3 children. The height is log base 3 of n. Decreasing a key may involve bubbling down the tree, taking O(3 * log n / log 3) time in the worst case.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(3 log n / log 3)\nc) O(n)\nd) O(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, searching for a specific element still requires traversing up to n elements in the worst case, giving a time complexity of O(n).",
        "target_text": "Question: What is the time complexity of searching for an element in a circular linked list?\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(1)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Finding all tandem repeats (repeated substrings appearing consecutively) can be done using suffix trees in O(n log n + z), where z is the number of such repeats.",
        "target_text": "Question: What is a time complexity for finding all the tandem repeats?\nChoices:\na) \u0398(n)\nb) \u0398(n!)\nc) \u0398(1)\nd) O(n log n + z)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: While hash tables offer O(1) average-case time complexity, self-balancing BSTs offer O(log n). Hence, BSTs are worse than hash tables in the average case.",
        "target_text": "Question: Self - balancing binary search trees have a much better average-case time complexity than hash tables.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Generalized suffix trees can be used to find the longest palindromic substring in linear time using clever traversal and string manipulations.",
        "target_text": "Question: What is a time complexity for finding the longest palindromic substring in a string by using the generalized suffix tree?\nChoices:\na) Linear Time\nb) Exponential Time\nc) Logarithmic Time\nd) Cubic Time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Dynamic arrays provide amortized O(1) time complexity for insertion at the end. But resizing may take O(n), so worst case is O(n).",
        "target_text": "Question: What is the time complexity of inserting at the end in dynamic arrays?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) Either O(1) or O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: When using separate chaining with a list head in a hash table, if a key is present at the head, it can be found in constant time O(1) on average.",
        "target_text": "Question: What is the time complexity of search function in a hash table using list head?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Finding the minimum number of steps to reach the end of an array (e.g., jump game) can be solved using greedy or dynamic programming in O(n) time.",
        "target_text": "Question: What is the minimum possible time complexity to find the number of steps to reach the end of an array?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(n^{3/2})\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Appending to a variable-length array may cause reallocation when capacity is exceeded, leading to O(n) time in the worst case.",
        "target_text": "Question: Which among the following is the worst-case time complexity for appending an element in a variable-length array?\nChoices:\na) O(n)\nb) O(1)\nc) O(n^2)\nd) O(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A Van Emde Boas (vEB) tree can store up to M elements with linear space O(M). It offers fast operations like insert, delete, and search in O(log log M) time.",
        "target_text": "Question: What is the time complexity for storing the maximum number of elements in Van Emde Boas tree if M is the maximum number of elements?\nChoices:\na) O(log M)\nb) O(M!)\nc) O(M)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap, each node has up to 3 children. The height of the heap is log base 3 of n, so inserting takes O(log n / log 3) time in the worst case.",
        "target_text": "Question: What is the time complexity for inserting a new item in a ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Implementing a stack using queues (especially a single queue) can lead to O(n) time complexity for some operations, making it inefficient for large datasets.",
        "target_text": "Question: Why is implementation of stack operations on queues not feasible for a large dataset (Assume the number of elements in the stack to be n)?\nChoices:\na) Because of its time complexity O(n)\nb) Because of its time complexity O(log(n))\nc) Extra memory is not required\nd) There are no problems\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Merge Sort is a divide-and-conquer algorithm with a guaranteed worst-case time complexity of O(n log n), unlike other elementary sorts like Bubble or Insertion Sort.",
        "target_text": "Question: Which of the following sorting algorithms does not have a worst case running time of O(n^2) ?\nChoices:\na) Insertion sort\nb) Merge sort\nc) Quick sort\nd) Bubble sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly or doubly linked list, searching for a specific element requires traversing the list from the head to the desired node, resulting in O(n) time in the worst case.",
        "target_text": "Question: What would be the asymptotic time complexity to find an element in the linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^4)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting at the second position in a linked list requires only a single traversal step and pointer adjustment, which takes constant time, i.e., O(1).",
        "target_text": "Question: What would be the asymptotic time complexity to insert an element at the second position in the linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary min-heap, the maximum element is not necessarily at the root and could be in any of the leaf nodes. To find it requires scanning up to n/2 leaf nodes, giving \u03b8(n) time.",
        "target_text": "Question: Let H be a binary min-heap consisting of n elements implemented as an array. What is the worst case time complexity of an optimal algorithm to find the maximum element in H?\nChoices:\na) \u03b8(1)\nb) \u03b8(logn)\nc) \u03b8(n)\nd) \u03b8(nlogn)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In separate chaining, the worst-case scenario occurs when all elements hash to the same bucket, resulting in a linear search through a linked list. This gives O(n) worst-case search time.",
        "target_text": "Question: What is the worst case search time of a hashing using separate chaining algorithm?\nChoices:\na) O(n log n)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The Build Heap operation for constructing a binary heap from an array of n elements has a time complexity of O(n), not O(n log n), due to the reduced cost of heapifying lower levels.",
        "target_text": "Question: What is the time complexity of Build Heap operation? \n(Build Heap is used to build a max(or min) binary heap from a given array. Build Heap is used in Heap Sort as a first step for sorting.)\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: If an adjacency matrix is used to represent a graph, checking for the existence of an edge between two vertices takes O(1) time, and does not depend on the number of vertices or edges.",
        "target_text": "Question: On which of the following statements does the time complexity of checking if an edge exists between two particular vertices not depend?\nChoices:\na) Depends on the number of edges\nb) Depends on the number of vertices\nc) Is independent of both the number of edges and vertices\nd) It depends on both the number of edges and vertices\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: When a binary search tree is used for chaining in a hash table, insertion into the tree (assuming it is balanced) takes O(log n), but inserting at the head or tail of a list in chaining takes O(1).",
        "target_text": "Question: What is the time complexity of insert function in a hash table using a binary tree?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees provide amortized time complexity guarantees. A sequence of j operations on a splay tree with at most h nodes takes O(j log h) time in the worst case.",
        "target_text": "Question: Which of the following property of splay tree is correct?\nChoices:\na) it holds probability usage of the respective sub trees\nb) any sequence of j operations starting from an empty tree with h nodes at most, takes O(j log h) time complexity\nc) sequence of operations with h nodes can take O(log h) time complexity\nd) splay trees are unstable trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Project scheduling can be modeled using optimization techniques such as Dynamic Programming, especially when overlapping subproblems are involved.",
        "target_text": "Question: Project scheduling is an example of __________\nChoices:\na) Greedy programming\nb) Dynamic programming \\n (A) Greedy programming \\n (B) Dynamic programming\nc) Divide and conquer\nd) None of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The given recursive function reverses an array. Each recursive call processes one pair of elements, so the time complexity is linear, i.e., O(n).",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{ \n    if (left >= right) \n    return; \n \n    int temp = arr[left];  \n    arr[left] = arr[right]; \n    arr[right] = temp; \n \n    func(arr, left + 1, right - 1);  \n}      \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,2,3,4}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Inserting n^2 elements into an AVL tree with n initial elements involves multiple insertions, each costing O(log n), leading to a total time complexity of \u03b8(n^2 log n).",
        "target_text": "Question: What is the worst case time complexity of inserting n^2 elements into an AVL-tree with n elements initially ?\nChoices:\na) \u03b8(n^4)\nb) \u03b8(n^2)\nc) \u03b8(n^2 log n)\nd) \u03b8(n^3)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, to count nodes we loop until we reach the head again. The correct method must check `while(temp != head)` and increment the count properly.",
        "target_text": "Question: How do you count the number of elements in the circular linked list?\nChoices:\na) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != null)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp != null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp == null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\nd)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Level order traversal visits nodes breadth-first, processing each node once. The total complexity is linear in the number of nodes, O(n).",
        "target_text": "Question: What is the time complexity of level order traversal?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Red-black trees are preferred over hash tables when ordered data or range queries are needed. Hash tables require resizing and do not maintain order.",
        "target_text": "Question: Why Red-black trees are preferred over hash tables though hash tables have constant time complexity?\nChoices:\na) no they are not preferred\nb) because of resizing issues of hash table and better ordering in red-black trees\nc) because they can be implemented using trees\nd) because they are balanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, deleting a node given only a pointer to it requires traversal from the head to find the previous node, making the worst-case time complexity O(n).",
        "target_text": "Question: Let P be a singly linked list. Let Q be the pointer to an intermediate node x in the list. What is the worst-case time complexity of the best known algorithm to delete the node Q from the list?\nChoices:\na) O(n)\nb) O(log^2 n)\nc) O(log n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hash tables generally have lower average-case time complexity for insert, search, and delete compared to Binary Search Trees (BST), which may degrade to O(n) in the worst case.",
        "target_text": "Question: What is the disadvantage of BST over the hash table?\nChoices:\na) BST is easier to implement\nb) BST can get the keys sorted by just performing inorder traversal\nc) BST can perform range query easily\nd) Time complexity of hash table in inserting, searching and deleting is less than that of BST\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: The Van Emde Boas (vEB) tree provides extremely fast operations for search, insert, and delete, with time complexity O(log log M), where M is the universe size.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) O(log M!)\nb) O(M!)\nc) O(M^2)\nd) O(log log M)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Skip lists improve over linked lists by allowing fast search, insertion, and deletion in expected O(log n) time, compared to O(n) in regular linked lists.",
        "target_text": "Question: What is the time complexity improvement of skip lists from linked lists in insertion and deletion?\nChoices:\na) O(n) to O(log n) where n is number of elements\nb) O(n) to O(1) where n is number of elements\nc) no change\nd) O(n) to O(n^2) where n is number of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting a node at the end of a singly linked list requires traversing all nodes from the head unless a tail pointer is maintained, resulting in O(n) time.",
        "target_text": "Question: What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\nChoices:\na) O(1)\nb) O(n)\nc) \u03b8(n)\nd) Both O(n) and \u03b8(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In heapsort, multiple heapify operations may be required depending on element swaps. The array snapshot suggests at least two heapify operations were done at the root.",
        "target_text": "Question: Suppose we are sorting an array of eight integers using heapsort, and we have just finished some heapify (either maxheapify or minheapify) operations. The array now looks like this: 16 14 15 10 12 27 28. How many heapify operations have been performed on root of heap?\nChoices:\na) 1\nb) 2\nc) 3 or 4\nd) 5 or 6\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a skewed binary search tree (like a linked list), all operations--search, insert, and delete--take linear time in the number of nodes, i.e., O(n).",
        "target_text": "Question: What is the worst case time complexity for search, insert and delete operations in a general Binary Search Tree for a skewed tree ?\nChoices:\na) O(n) for all\nb) O(log n) for all\nc) O(log n) for search and insert, and O(n) for delete\nd) O(log n) for search, and O(n) for insert and delete\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The given code reverses an array in-place using a loop that swaps elements from both ends toward the center. This operation has a linear time complexity of O(n).",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{ \n     while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n}  \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The best-case height of a B-tree with k keys and order n is log\u2099(k+1) - 1. This occurs when the tree is perfectly balanced and maximally filled.",
        "target_text": "Question: What is the best case height of a B-tree of order n and which has k keys?\nChoices:\na) log\u2099(k+1) - 1\nb) nk\nc) log\u2096(n+1) - 1\nd) k log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Circular linked lists are suitable for implementing both stacks and queues due to their ability to cycle through elements without needing null termination.",
        "target_text": "Question: A circular linked list can be used for __________\nChoices:\na) Stack\nb) Queue \\n (A) Stack \\n (B) Queue\nc) Both Stack & Queue\nd) Neither Stack or Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In sparse matrix addition, only the non-zero elements need to be processed. Hence, the worst-case time complexity is O(n), where n is the number of non-zero elements.",
        "target_text": "Question: Is O(n) the Worst case Time Complexity for addition of two Sparse Matrix?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Both the reversal algorithm and the juggling algorithm for array rotation have linear time complexity O(n), though they use different approaches and space.",
        "target_text": "Question: Reversal algorithm and juggling algorithm for array rotation have the same time complexity.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: To count the number of elements in a singly or circular linked list, each node must be visited once. This results in linear time complexity, O(n).",
        "target_text": "Question: What is the time complexity to count the number of elements in the linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Using suffix automaton or enhanced string techniques, it is possible to find the longest common prefix between any suffix in constant time, i.e., \u03b8(1), after preprocessing.",
        "target_text": "Question: What is a time complexity for finding the longest prefix that is common between suffix in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) O(log n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Merging two max-heaps of size n can be done by copying elements from both into an array and using Build-Heap, which has a linear time complexity of O(n).",
        "target_text": "Question: Given two max heaps of size n each, what is the minimum possible time complexity to make a one max-heap of size from elements of two max heaps?\nChoices:\na) O(n^2)\nb) O(n log log n)\nc) O(n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Skew heaps are self-adjusting heaps where operations like insert and delete have an amortized time of O(log n), but the worst-case time complexity can reach O(n).",
        "target_text": "Question: The worst case running time of all operations in a skew heap is given as?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(n^2)\nd) O(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: When searching through k+1 auxiliary trees, such as in the union-find structure with trees, the time complexity per operation can be O(log log n), making total complexity (k+1)*O(log log n).",
        "target_text": "Question: What is the time complexity for searching k+1 auxiliary trees?\nChoices:\na) (k+2) O(log log n)\nb) (k+1) O(log n)\nc) (k+2) O(log n)\nd) (k+1) O(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Substring checking (e.g., using KMP or Rabin-Karp algorithms) can be done in linear time, i.e., O(n), where n is the length of the string.",
        "target_text": "Question: What is a time complexity for checking a string of length n is substring or not?\nChoices:\na) O(log n!)\nb) O(n!)\nc) O(n^2)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the worst case, a query operation over a set of n elements (e.g., a linear scan or unindexed search) can take O(n) time.",
        "target_text": "Question: What is the worst case time complexity of query operation (n is the number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In simple chaining used for hash tables, a doubly linked list can make deletion more efficient by allowing constant-time removal without needing to search for the previous node.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Binary trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, inserting at the head takes O(n) if there's no tail pointer. Thus, it's not O(1) unless special conditions apply, making option b False.",
        "target_text": "Question: Which of the following is False about a circular linked list?\nChoices:\na) Every node has a successor\nb) Time complexity of inserting a new node at the head of the list is O(1)\nc) Time complexity for deleting the last node is O(n)\nd) We can traverse the whole circular linked list by starting from any point\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Binary search has a worst-case complexity of O(log n), which is significantly better than linear search. However, in edge cases (like unsorted data), both may fall back to linear scanning.",
        "target_text": "Question: The worst case complexity of binary search matches with __________\nChoices:\na) interpolation search\nb) linear search\nc) merge sort\nd) none of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Building a heap from an array using the bottom-up approach (heapify) has time complexity O(n), but if each insert is done individually, the complexity is O(n log n).",
        "target_text": "Question: An array consists of n elements. We want to create a heap using the elements. The time complexity of building a heap will be in order of\nChoices:\na) O(n^2 log n)\nb) O(n log n)\nc) O(n^2)\nd) O(n log^2 n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tango trees are a type of binary search tree that achieve a competitive ratio of O(log log n) using preferred path decomposition and auxiliary trees.",
        "target_text": "Question: What is the time complexity of for achieving competitive ratio by tango tree?\nChoices:\na) O(log n)\nb) O(n^2)\nc) O(n!)\nd) O(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an adjacency list representation, checking if an edge exists between two vertices may require scanning the list of one vertex, resulting in O(degree) = O(E) in worst case.",
        "target_text": "Question: Time complexity to check if an edge exists between two vertices would be __________\nChoices:\na) O(V^2)\nb) O(V + E)\nc) O(1)\nd) O(E)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Deleting an arbitrary node from a binary heap involves locating the node (O(n)), replacing it with the last node, and then heapifying (O(log n)). Combined worst-case: O(n).",
        "target_text": "Question: The worst case complexity of deleting any arbitrary node value element from heap is __________\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: If each bin has a constant number of candidates and m bins are checked, the time complexity of insertion is proportional to the number of bins: O(m).",
        "target_text": "Question: What will be the time complexity of insertion operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) O(1)\nb) O(m)\nc) O(m^2)\nd) O(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Inserting an alphabet into a tree-like structure using a hash map can be done in constant time assuming ideal hashing and constant-time insert in each map level.",
        "target_text": "Question: What is a time complexity for inserting an alphabet in the tree using hash maps?\nChoices:\na) O(log n!)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Quick Sort is a classic example of the Divide and Conquer design paradigm where the array is divided into parts based on a pivot, and each part is recursively sorted.",
        "target_text": "Question: The quick sort algorithm exploit __________ design technique.\nChoices:\na) Greedy\nb) Dynamic programming\nc) Divide and Conquer\nd) Backtracking\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Segregating positive and negative numbers in an array can be done using a partitioning approach similar to Quick Sort's partition step, achieving linear time O(N).",
        "target_text": "Question: Consider an array consisting of -ve and +ve numbers. What would be the worst case time complexity of an algorithm to segregate the numbers having same sign altogether i.e all +ve on one side and then all -ve on the other ?\nChoices:\na) O(N)\nb) O(N Log N)\nc) O(N * N)\nd) O(N Log Log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Van Emde Boas tree supports insertion, deletion, and search operations in O(log log M) time, where M is the size of the universe of keys.",
        "target_text": "Question: What is the time complexity for deleting a key or integer in Van Emde Boas data structure?\nChoices:\na) O(log M!)\nb) O(log log M)\nc) O(M!)\nd) O(M^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Reversing a word using a stack involves pushing each character and then popping them to reverse the order. This process takes linear time O(N).",
        "target_text": "Question: What is the time complexity of reversing a word using stack algorithm?\nChoices:\na) O(N log N)\nb) O(N^2)\nc) O(N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Rope data structures are used for efficient string manipulation, especially insertions and concatenations, which can be done in O(log n) time.",
        "target_text": "Question: What is the time complexity for inserting the string and forming a new string in the rope data structure?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Using two stacks to implement a double-ended queue (deque) involves constant time O(1) for operations at the top, but may require O(n) for operations at the opposite end due to shifting.",
        "target_text": "Question: A double-ended queue supports operations like adding and removing items from both the sides of the queue. They support four operations like addFront(adding item to top of the queue), addRear(adding item to the bottom of the queue), removeFront(removing item from the top of the queue) and removeRear(removing item from the bottom of the queue). You are given only stacks to implement this data structure. You can implement only push and pop operations. What's the time complexity of performing addFront and addRear? (Assume 'm' to be the size of the stack and 'n' to be the number of elements)\nChoices:\na) O(m) and O(n)\nb) O(1) and O(n)\nc) O(n) and O(1)\nd) O(n) and O(m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Merge Sort is the most suitable sorting algorithm for linked lists due to its efficient O(n log n) time and ability to be implemented without random access.",
        "target_text": "Question: Which of the following sorting algorithms can be used to sort a random linked list with minimum time complexity?\nChoices:\na) Insertion Sort\nb) Quick Sort\nc) Heap Sort\nd) Merge Sort\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: When chaining is implemented using a list head, the worst-case scenario occurs when all keys hash to the same bucket, requiring a linear search through a linked list, giving O(n) time for insertion.",
        "target_text": "Question: What is the worst case time complexity of insert function in the hash table when the list head is used for chaining?\nChoices:\na) O(1)\nb) O(n log n)\nc) O(log n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The naive method to count inversions in an array is to use two nested loops, leading to O(n^2) time complexity.",
        "target_text": "Question: What is the time complexity of the following code that determines the number of inversions in an array?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(n^2)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a queue implemented with an array or linked list, enqueue (insertion at the rear) takes constant time O(1) in the average and worst case.",
        "target_text": "Question: What is the time complexity of enqueue operation?\nChoices:\na) O(log n)\nb) O(n log n)\nc) O(n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: If elements are evenly distributed among bins, deletion from a bin takes O(m), where m is the number of bins intersected during deletion.",
        "target_text": "Question: What will be the time complexity of delete operation if all the candidates are evenly spaced so that each bin has constant number of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) O(1)\nb) O(m)\nc) O(m^2)\nd) O(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: One key advantage of chained hashing (external hashing) over open addressing is ease of deletion, as linked list operations allow direct removal without shifting elements.",
        "target_text": "Question: An advantage of chained hash table (external hashing) over the open addressing scheme is\nChoices:\na) Worst case complexity of search operations is less\nb) Space used is less\nc) Deletion is easier\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Rope data structures allow efficient editing of large strings. Deletion in a rope takes O(log n) time by splitting and concatenating balanced tree nodes.",
        "target_text": "Question: What is the time complexity for deleting the string to form a new string in the rope data structure?\nChoices:\na) O(n^2)\nb) O(n!)\nc) O(log n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a priority queue, inserting a node based on position (priority) may require traversing or adjusting elements, resulting in worst-case linear time complexity O(n).",
        "target_text": "Question: What is the time complexity to insert a node based on position in a priority queue?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hash tables typically offer constant average-case time complexity for insert, delete, and search operations, which is better than the O(log n) average of balanced BSTs.",
        "target_text": "Question: What is the advantage of a hash table over BST?\nChoices:\na) hash table has a better average time complexity for performing insert, delete and search operations\nb) hash table requires less space\nc) range query is easy with hash table\nd) easier to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Selection sort has the same time complexity in best, average, and worst cases--O(n^2)--making it the slowest among common algorithms even in the best case.",
        "target_text": "Question: Which of the sorting techniques has highest best-case runtime complexity?\nChoices:\na) Quick sort\nb) Selection sort\nc) Insertion sort\nd) Bubble sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Circular linked lists are commonly used in CPU scheduling (Round Robin) because they allow the scheduler to cycle through processes efficiently.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) Undo Operation\nb) Recursive function calls\nc) Allocating CPU to resources\nd) Implement Hash Tables\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In the worst case, searching a singly linked list requires traversing all n nodes to find a specific element, resulting in O(n) comparisons.",
        "target_text": "Question: In the worst case, the number of comparisons needed to search a singly linked list of length n for a given element is\nChoices:\na) log(2*n)\nb) n/2\nc) log(2*n) - 1\nd) n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The average-case height of a binary search tree is O(log n) when nodes are inserted in random order, making searches and updates efficient.",
        "target_text": "Question: What is the average case time complexity for finding the height of the binary tree?\nChoices:\na) h = O(log log n)\nb) h = O(n log n)\nc) h = O(n)\nd) h = O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In a hash table using a binary tree (e.g., in chaining), delete operations in a balanced binary search tree take O(log n) time, not constant.",
        "target_text": "Question: What is the time complexity of the delete function in the hash table using a binary tree?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash tree (Merkle tree) is used for data synchronization and verification. In the worst case, all nodes may need to be compared, resulting in O(n) time complexity.",
        "target_text": "Question: Hash tree is used in data synchronisation. In the worst case the data synchronisation takes __________ time.\nChoices:\na) O(log n)\nb) O(n^2)\nc) O(n log n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap, each node has three children, so the height is log base 3 of n. Deleting the root requires bubbling down and comparing up to 3 children per level, giving time complexity O(3 log n / log 3).",
        "target_text": "Question: What is the time complexity for deleting root key in a ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(3 log n / log 3)\nc) O(n)\nd) O(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Balancing parentheses requires traversing the string once and using a stack or counter, resulting in O(n) time complexity where n is the string length.",
        "target_text": "Question: What is the time complexity of balancing parentheses algorithm?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(m log n)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Given a postorder traversal of a BST, it is possible to reconstruct the unique tree in O(n) time using a stack and recursion-based strategy.",
        "target_text": "Question: You are given the postorder traversal, P, of a binary search tree on the n elements 1, 2, ..., n. You have to determine the unique binary search tree that has P as its postorder traversal. What is the time complexity of the most efficient algorithm for doing this?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) None of the above, as the tree cannot be uniquely determined.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Binary tree sort using a self-balancing BST ensures sorted output and guarantees O(n log n) time in the worst case by keeping the tree balanced.",
        "target_text": "Question: The binary tree sort implemented using a self-balancing binary search tree takes __________ time in worst case.\nChoices:\na) O(n log n)\nb) O(n)\nc) O(n^2)\nd) O(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, all nodes are connected in a circle, making it appear as though there is no True beginning or end.",
        "target_text": "Question: In a circular linked list:\nChoices:\na) Components are all linked together in some sequential manner.\nb) There is no beginning and no end.\nc) Components are arranged hierarchically.\nd) Forward and backward traversal within the list is permitted.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: In a self-organizing list with linear search, the worst-case scenario requires traversing all elements, giving O(n) time complexity.",
        "target_text": "Question: The worst case running time of a linear search on the self-organizing list is __________\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Linear search checks each element sequentially until the target is found or the end is reached, resulting in a worst-case time complexity of \u03b8(n).",
        "target_text": "Question: What is the worst case time complexity of linear search algorithm?\nChoices:\na) \u03b8(1)\nb) \u03b8(n)\nc) \u03b8(log n)\nd) \u03b8(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap, each node has 3 children. Increasing the priority of a key involves bubbling it up the tree, which takes O(log n / log 3) time.",
        "target_text": "Question: What is the time complexity for increasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: The worst case of Quick Sort occurs when the pivot selection leads to unbalanced partitions, causing O(n^2) time complexity.",
        "target_text": "Question: The worst case of quick sort has order __________.\nChoices:\na) O(n^2)\nb) O(n)\nc) O(n log^2 n)\nd) O(log^2 n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Fibonacci Series (with memoization), Tower of Hanoi (recursive), and Dijkstra's algorithm all demonstrate dynamic programming principles when overlapping subproblems exist.",
        "target_text": "Question: Which of the following is an example of dynamic programming approach?\nChoices:\na) Fibonacci Series\nb) Tower of Hanoi\nc) Dijkstra's Shortest Path\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Chaining in hashing is less sensitive to the choice of hash function because collisions are handled using separate lists rather than probing schemes.",
        "target_text": "Question: What is the advantage of hashing with chaining?\nChoices:\na) cache performance is good\nb) uses less space\nc) less sensitive to hash function\nd) has a time complexity of O(n) in the worst case\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Red-black tree constraints (black height balance, red child rule) ensure logarithmic tree height, guaranteeing O(log n) time complexity for operations.",
        "target_text": "Question: Why do we impose restrictions like:\n- root property is black\n- every leaf is black\n- children of red node are black\n- all leaves have same black height\nChoices:\na) to get logarithm time complexity\nb) to get linear time complexity\nc) to get exponential time complexity\nd) to get constant time complexity\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Both AVL trees and B-trees maintain balanced structures that ensure logarithmic time complexity O(log n) in the worst case for insertion and deletion.",
        "target_text": "Question: B-tree and AVL tree have the same worst case time complexity for insertion and deletion.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Merge Sort can be used to count inversions in an array efficiently. This modified version runs in O(n log n) time by counting inversions during the merge step.",
        "target_text": "Question: What is the time complexity of the code that uses merge sort for determining the number of inversions in an array?\nChoices:\na) O(n^2)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The juggling algorithm for array rotation performs element swaps based on the greatest common divisor (GCD) of the array size and rotation steps. Its time complexity is O(n).",
        "target_text": "Question: What is the time complexity of the juggling algorithm to rotate an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting infix expressions to postfix (Reverse Polish Notation) using a stack-based algorithm can be done in linear time O(n), where n is the length of the expression.",
        "target_text": "Question: What is the time complexity of an infix to postfix conversion algorithm?\nChoices:\na) O(n log n)\nb) O(n)\nc) O(n^2)\nd) O(m log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting into a doubly linked list takes O(1) time if the pointer to the insertion point is known. However, finding the correct position can take O(n) in the worst case.",
        "target_text": "Question: What is the worst case time complexity of inserting a node in a doubly linked list?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Finding the most frequent substring of a given minimum length can be done using a sliding window and hashmap or suffix tree in linear time O(n).",
        "target_text": "Question: What is a time complexity for finding frequently occurring substring of minimum length in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) O(n^2 + n)\nd) O(log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a balanced binary search tree with 2\u207f elements, search operations take time proportional to the tree height, which is O(log n). So the worst-case time is \u03b8(log n).",
        "target_text": "Question: The worst case running time to search for an element in a balanced binary search tree with n = 2^k elements is:\nChoices:\na) \u03b8(n log n)\nb) \u03b8(n*2\u207f)\nc) \u03b8(n)\nd) \u03b8(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Reversing a string involves swapping characters from both ends toward the center, which takes O(n) time where n is the string length.",
        "target_text": "Question: What is the time complexity to reverse a string?\nChoices:\na) O(n^2)\nb) O(1)\nc) O(log n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The provided code rotates an array to the left by `d` positions using a loop that shifts elements one-by-one `d` times. Each shift takes O(n), and it runs d times, resulting in O(n*d) complexity.",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int n) \n{ \n int k = arr[0], i; \n for (i = 0; i < n - 1; i++) \n  arr[i] = arr[i + 1]; \n \n arr[i] = k; \n} \n \nvoid func(int arr[], int d, int n) \n{ \n for (int i = 0; i < d; i++) \n  func1(arr, n); \n} \n \nvoid printArray(int arr[], int n) \n{ \n for (int i = 0; i < n; i++) \n  cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = { 1, 2, 3, 4, 5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n \n    int d = 3;\n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\nChoices:\na) O(n*d)\nb) O(n)\nc) O(d)\nd) O(n^2)\n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In rope data structures, creating a new node and concatenating ropes are done using tree operations that can take O(1) time when no balancing is required.",
        "target_text": "Question: What is the time complexity for creating a new node and then performing concatenation in the rope data structure?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Bubble Sort performs pairwise comparisons and swaps in nested loops, giving a worst-case time complexity of O(n^2).",
        "target_text": "Question: Consider that n elements are to be sorted. What is the worst case time complexity of Bubble sort?\nChoices:\na) O(1)\nb) O(log^2 n)\nc) O(n)\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Floyd's Cycle Detection algorithm (also known as the Tortoise and Hare algorithm) detects cycles using two pointers moving at different speeds, making it highly efficient.",
        "target_text": "Question: Consider a small circular linked list. How to detect the presence of cycles in this list effectively?\nChoices:\na) Keep one node as head and traverse another temp node till the end to check if its 'next' points to head\nb) Have fast and slow pointers with the fast pointer advancing two nodes at a time and slow pointer advancing by one node at a time\nc) Cannot determine, you have to pre-define if the list contains cycles\nd) Circular linked list itself represents a cycle. So no new cycles cannot be generated\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In circular linked lists, nodes are linked in a loop without a terminating NULL, and traversal can start at any point. Valid statements about their structure often include loop-based properties like P1 and P4.",
        "target_text": "Question: Which of the following Statement is correct about Circular Linked List?\nChoices:\na) Only P4\nb) Only P1\nc) P1 and P2\nd) P1 and P4.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In array-based stack implementations, the pop operation simply decrements the index (top pointer) and is therefore done in constant time, O(1).",
        "target_text": "Question: What is the time complexity of pop() operation when the stack is implemented using an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting a node at the beginning of a linked list requires changing the head pointer and the next pointer of the new node, which is a constant time O(1) operation.",
        "target_text": "Question: What is the time complexity to insert a node at the beginning of the list?\nChoices:\na) O(log n)\nb) O(n)\nc) O(1)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A self-balancing binary search tree (BST) can be used to count the number of inversions in an array in O(n log n) time by keeping track of inserted elements.",
        "target_text": "Question: What is the time complexity of the code that uses self-balancing BST for determining the number of inversions in an array?\nChoices:\na) O(n^2)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a hash table with chaining using doubly linked lists, insertions occur at the head or tail of the list and take constant time, i.e., O(1).",
        "target_text": "Question: What is the time complexity of insert function in a hash table using a doubly linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Implementing a queue using two stacks requires moving all elements during the dequeue operation. If `m` elements exist, dequeue takes O(m) time in the worst case.",
        "target_text": "Question: You are asked to perform a queue operation using a stack. Assume the size of the stack is some value 'n' and there are 'm' number of variables in this stack. The time complexity of performing deQueue operation is (Using only stack operations like push and pop) (Tightly bound).\nChoices:\na) O(m)\nb) O(n)\nc) O(m*n)\nd) Data is insufficient\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The worst-case height of an AVL tree is approximately 1.44 log2(n), where n is the number of nodes. This follows from AVL balancing rules.",
        "target_text": "Question: What is the worst case possible height of AVL tree?\nChoices:\na) 2 log n (Assume base of log is 2)\nb) 1.44 log n (Assume base of log is 2)\nc) Depends upon implementation\nd) \u03b8(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In a hash tree (e.g., Merkle tree), insertion can involve O(log\u2096(n)) time, where k is the arity of the tree and n is the number of elements.",
        "target_text": "Question: What is the worst case time complexity of the insertion in the hash tree?\nChoices:\na) O(log\u2096(n))\nb) O(n^2)\nc) O(n log\u2096(n))\nd) O(k*n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a suffix tree, the number of nodes in the worst case is 2n where n is the length of the string, because each suffix may form a new branch.",
        "target_text": "Question: For what size of nodes, the worst case of usage of space in suffix tree seen?\nChoices:\na) n Nodes\nb) 2n Nodes\nc) 2n nodes\nd) n! nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap, increasing a key's priority may require bubbling it up through levels. The height is log base 3 of n, and with up to 3 comparisons per level, time is O(3 log n / log 3).",
        "target_text": "Question: What is the time complexity for increasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(3 log n / log 3)\nc) O(n)\nd) O(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: To check if a graph is bipartite using an adjacency matrix, we perform BFS or DFS which runs in O(V^2) time due to the dense matrix representation.",
        "target_text": "Question: What would the time complexity to check if an undirected graph with V vertices and E edges is Bipartite or not given its adjacency matrix?\nChoices:\na) O(E^2)\nb) O(V^2)\nc) O(E)\nd) O(V)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Dynamic Programming uses memoization to store intermediate results of subproblems, which helps avoid redundant computations and improve efficiency.",
        "target_text": "Question: Which of the following uses memorization?\nChoices:\na) Greedy approach\nb) Divide and conquer approach\nc) Dynamic programming approach\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a balanced BST, reporting all elements in a range [a, b] requires a traversal to the range (O(log n)) and printing k elements, resulting in \u03b8(log n + k) time.",
        "target_text": "Question: In a balanced binary search tree with n elements, what is the worst-case time complexity of reporting all elements in the range [a,b]? Assume that the number of reported elements is k.\nChoices:\na) \u03b8(log n)\nb) \u03b8(log n + k)\nc) \u03b8(k log n)\nd) \u03b8(n log k)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Van Emde Boas tree supports operations like finding the minimum and maximum in constant O(1) time due to its structure and recursive splitting of the universe.",
        "target_text": "Question: What is the time complexity for finding a maximum and minimum integer in Van Emde Boas data structure?\nChoices:\na) O(log M!)\nb) O(M!)\nc) O(1)\nd) O(log log M)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Finding all maximal palindromes in a string can be done in linear time O(n) using Manacher's algorithm.",
        "target_text": "Question: What is a time complexity for finding all the maximal palindrome in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) O(log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Building a ternary heap (heap with 3 children per node) using a bottom-up heapify approach takes linear time O(n), similar to binary heaps.",
        "target_text": "Question: What is the time complexity for creating a ternary heap using swapping?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Interpolation search is efficient on uniformly distributed, sorted data. It achieves a time complexity of \u03b8(log log n) in the best case when distribution is ideal.",
        "target_text": "Question: If the data collection is in sorted form and equally distributed then the run time complexity of interpolation search is __________\nChoices:\na) \u03b8(n)\nb) \u03b8(1)\nc) \u03b8(log n)\nd) \u03b8(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting at the beginning of a triply linked list (similar to a doubly linked list but with an extra pointer) still takes O(1) time when the pointer to the head is known.",
        "target_text": "Question: Which among the following is the time complexity for inserting at the beginning of a triply linked list?\nChoices:\na) O(n)\nb) O(1)\nc) O(log n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Rope data structures enable efficient string manipulation. Splitting a string in a rope (balanced binary tree) can be done in O(log n) time.",
        "target_text": "Question: What is the time complexity for splitting the string into two new strings in the rope data structure?\nChoices:\na) O(n^2)\nb) O(n!)\nc) O(log n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Finding x-pattern occurrences of length n can be done in \u03b8(n + x) time using pattern matching algorithms like KMP or Aho-Corasick.",
        "target_text": "Question: What is a time complexity for x pattern occurrence of length n?\nChoices:\na) O(log n!)\nb) \u03b8(n!)\nc) O(n^2)\nd) \u03b8(n + x)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Skip lists offer logarithmic time complexities similar to balanced binary search trees for insert, delete, and search operations.",
        "target_text": "Question: To which data structure are skip lists similar in terms of time complexities in worst and best cases?\nChoices:\na) balanced binary search trees\nb) binary search trees\nc) binary trees\nd) linked lists\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an adjacency matrix, each vertex is checked against all others, resulting in O(V^2) time to compute or count edges.",
        "target_text": "Question: The time complexity to calculate the number of edges in a graph whose information is stored in form of an adjacency matrix is __________\nChoices:\na) O(V)\nb) O(E^2)\nc) O(E)\nd) O(V^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Quick Sort uses the Divide and Conquer paradigm, where the array is partitioned recursively based on pivots.",
        "target_text": "Question: Quick sort algorithm is an example of __________.\nChoices:\na) Greedy approach\nb) Improved binary search\nc) Dynamic Programming\nd) Divide and conquer\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, deleting a node is O(1) if a pointer to the node and its previous node is already available. This is the best-case time complexity.",
        "target_text": "Question: What is the best case time complexity of deleting a node in a Singly Linked list?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the worst case, deleting an element from an unsorted data structure may require scanning all elements, resulting in O(n) time.",
        "target_text": "Question: What is the worst case time complexity of delete operation (n is the number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a hash table using chaining with doubly linked lists, insertion is done at the head or tail in O(1) time, and search operations can also be optimized to O(1) under ideal hashing.",
        "target_text": "Question: What is the time complexity of search function in a hash table using a doubly linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The provided code implements a dynamic programming solution to find the minimum number of jumps needed to reach the end of an array. The two nested loops result in O(n^2) time complexity.",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nint min(int x, int y) \n{ return (x < y)? x: y; } \n \nint func(int arr[], int n) \n{ \n \n int *jump = new int[n]; \n int i, j; \n \n if (n == 0 || arr[0] == 0) \n  return INT_MAX; \n \n jump[0] = 0; \n \n for (i = 1; i < n; i++) \n { \n  jump[i] = INT_MAX; \n  for (j = 0; j < i; j++) \n  { \n   if (i <= j + arr[j] && jumps[j] != INT_MAX) \n   { \n    jump[i] = min(jump[i], jump[j] + 1); \n    break; \n   } \n  } \n } \n return jump[n-1]; \n} \n \nint main() \n{ \n int arr[] = {1, 3, 6, 1, 9,7}; \n int size = sizeof(arr)/sizeof(int); \n cout<< func(arr,size); \n return 0; \n}\nChoices:\na) O(n log n)\nb) O(n)\nc) O(sqrt(n))\nd) O(n^2)\n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A skew heap uses recursion to perform merges. A recursive implementation can fail if the stack depth exceeds limits, especially in degenerate cases. Hence, stack space becomes a limitation.",
        "target_text": "Question: Why would a recursive implementation fail in skew heaps?\nChoices:\na) skew heaps are self adjusting\nb) efficiency gets reduced\nc) lack of stack space\nd) time complexity\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black Trees provide logarithmic time complexity for insert, delete, and search operations, including finding predecessor and successor.",
        "target_text": "Question: What are the operations that could be performed in O(log n) time complexity by red-black tree?\nChoices:\na) insertion, deletion, finding predecessor, successor\nb) only insertion\nc) only finding predecessor, successor\nd) for sorting\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Free memory blocks in memory management systems are typically maintained in a circular linked list and organized by increasing address to support merging of adjacent blocks.",
        "target_text": "Question: How are free blocks linked together mostly and in what addressing order?\nChoices:\na) circular linked list and increasing addressing order\nb) linked list and decreasing addressing order\nc) linked list and in no addressing order\nd) none of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Performing \u03b8(N) delete, O(log N) insert and find, and \u03b8(N) decrease-key operations on a sorted doubly linked list gives an overall complexity of O(N log N).",
        "target_text": "Question: N items are stored in a sorted doubly linked list. For a delete operation, a pointer is provided to the record to be deleted. For a decrease-key operation, a pointer is provided to the record on which the operation is to be performed. An algorithm performs the following operations on the list in this order: \u03b8(N) delete, O(log N) insert, O(log N) find, and \u03b8(N) decrease-key. What is the time complexity of all these operations put together?\nChoices:\na) O(log^2 N)\nb) O(N)\nc) O(N log N)\nd) \u03b8(N^2 log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Circular linked lists are often used in CPU scheduling, such as round-robin schedulers, to allocate time slices to multiple processes in a loop.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) Recursive function calls\nb) Undo operation in a text editor\nc) Implement Hash Tables\nd) Allocating CPU to resources\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The naive nearest neighbor search in an unsorted list of N items requires scanning all points, resulting in O(N) time in the worst case.",
        "target_text": "Question: What is the worst case time complexity of finding the nearest neighbour?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(N^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The provided code includes nested loops. The outer loop runs O(n) and the inner loop may also run O(n), giving a worst-case time complexity of O(n^2).",
        "target_text": "Question: What will be the worst case time complexity of the following code?\n<code omitted>\nChoices:\na) O(sqrt(n))\nb) O(n)\nc) O(n^{3/2})\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Maintaining dynamic sets of weighted trees using advanced data structures (like union-find with union by rank and path compression) can be achieved in O(log n) time.",
        "target_text": "Question: What is the time complexity for maintaining a dynamic set of weighted trees?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(log n)\nd) O(n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, the last node's 'next' pointer points back to the head instead of NULL, ensuring the list loops continuously.",
        "target_text": "Question: What differentiates a circular linked list from a normal linked list?\nChoices:\na) You cannot have the 'next' pointer point to null in a circular linked list\nb) It is faster to traverse the circular linked list\nc) In a circular linked list, each node points to the previous node instead of the next node\nd) Head node is known in circular linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In an unrolled linked list, insertion may require shifting elements in the array part or splitting nodes, which could take linear time O(n) in the worst case.",
        "target_text": "Question: Which among the following is the time complexity for inserting an element in an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap (where each node has 3 children), decreasing a key's priority involves bubbling up, taking O(log n / log 3) time.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The recursive solution for the 0/1 Knapsack problem uses a brute-force approach, exploring all combinations. The final value depends on correct implementation and inputs. Based on standard 0/1 Knapsack inputs, the correct output might be 300.",
        "target_text": "Question: Consider the following dynamic programming code snippet for solving the 0/1 Knapsack problem:\ndef knapsack(values, weights, capacity, n):\n    if n == 0 or capacity == 0:\n        return 0\n    if weights[n-1] > capacity:\n        return knapsack(values, weights, capacity, n-1)\n    else:\n        return max(values[n-1] + knapsack(values, weights, capacity - weights[n-1], n-1),\n                   knapsack(values, weights, capacity, n-1))\nWhat is the maximum value obtained if capacity = 50, values = [60, 100, 120], weights = [10, 20, 30]?\nChoices:\na) 180\nb) 220\nc) 280\nd) 300\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a priority queue implemented using a linear array, insertion based on key requires scanning for the correct position, leading to O(n) time complexity.",
        "target_text": "Question: What is the time complexity to insert a node based on key in a priority queue?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Pairing heaps are self-adjusting heaps. Their time complexity analysis was inspired by that of splay trees, which also use amortized analysis.",
        "target_text": "Question: Pairing heaps time complexity was inspired by that of?\nChoices:\na) splay tree\nb) treap\nc) red-black tree\nd) avl tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In chaining with a list head, inserting at the beginning of the linked list takes constant time O(1) under ideal hashing assumptions.",
        "target_text": "Question: What is the time complexity of insert function in a hash table using list head?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Van Emde Boas trees offer fast operations for search, insert, and delete in O(log log M) time, where M is the universe size.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) O(M!)\nb) O(log M!)\nc) O(log log M)\nd) O(M^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing provides O(1) time complexity on average for search operations, assuming a good hash function and low collision rate.",
        "target_text": "Question: Which searching technique takes O(1) time complexity for searching the data?\nChoices:\na) Binary Search\nb) Linear Search\nc) AVL Tree Search\nd) Hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: In the worst case (e.g., sorted input), Quick Sort's partitioning may lead to unbalanced recursion, giving time complexity O(n^2/2).",
        "target_text": "Question: In worst case Quick Sort has order __________.\nChoices:\na) O(n log n)\nb) O(n^2/2)\nc) O(log n)\nd) O(n^2/4)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In dynamic tree structures like auxiliary trees (used in link-cut trees), update operations (e.g., link, cut) can have amortized time complexity of O(log log n), depending on implementation.",
        "target_text": "Question: What is the time complexity for the update cost on auxiliary trees?\nChoices:\na) O(log log n)\nb) (k-1) O(log n)\nc) k^2 O(log n)\nd) (k+1) O(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Counting inversions using Merge Sort is more efficient (O(n log n)) than using a nested loop approach (O(n^2)), thus giving better performance for large arrays.",
        "target_text": "Question: The time complexity of the code that determines the number of inversions in an array using merge sort is lesser than that of the code that uses loops for the same purpose.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Adding an edge to an adjacency list takes constant time O(1) since it involves pushing to the back of a vector.",
        "target_text": "Question: What would be the time complexity of the following function which adds an edge between two vertices i and j, with some weight 'weigh' to the graph having V vertices?\n<code omitted>\nChoices:\na) O(1)\nb) O(V)\nc) O(V^2)\nd) O(log V)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a Directed Acyclic Word Graph (DAWG), checking if S1 is a substring of S2 takes O(|S1|) time as it depends only on the length of the pattern string.",
        "target_text": "Question: What is the time complexity to check if a string (length S1) is a substring of another string (length S2) stored in a Directed Acyclic Word Graph, given S2 > S1?\nChoices:\na) O(S1)\nb) O(S2)\nc) O(S1 + S2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting n elements into a sorted linked list one by one requires traversal for each insert, resulting in a total time of \u03b8(n^2) in the worst case.",
        "target_text": "Question: What is the worst case time complexity of inserting n elements into an empty linked list, if the linked list needs to be maintained in sorted order?\nChoices:\na) \u03b8(n)\nb) \u03b8(n log n)\nc) \u03b8(n^2)\nd) \u03b8(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting prefix notation to infix using a stack-based approach processes each token once, resulting in O(n) time where n is the number of symbols.",
        "target_text": "Question: The time complexity of converting a prefix notation to infix notation is __________\nChoices:\na) O(n) where n is the length of the equation\nb) O(n) where n is number of operands\nc) O(1)\nd) O(log n) where n is length of the equation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Tower of Hanoi problem has exponential time complexity O(2\u207f), making it one of the slowest recursive algorithms with the highest runtime.",
        "target_text": "Question: Program with highest run-time complexity is __________\nChoices:\na) Tower of Hanoi\nb) Fibonacci Series\nc) Prime Number Series\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Van Emde Boas trees support operations like insert, delete, and search in O(log log M) time, where M is the universe size.",
        "target_text": "Question: What is the time complexity for inserting a key or integer in Van Emde Boas data structure?\nChoices:\na) O(log M!)\nb) O(M!)\nc) O(M^2)\nd) O(log log M)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting an element at the front of a linked list when the head is known is a constant-time operation, as no traversal is needed.",
        "target_text": "Question: What would be the asymptotic time complexity to insert an element at the front of the linked list (head is known)?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The \u03b8 (\u0398) notation in asymptotic analysis represents the tight bound, usually associated with the average case but also applies when upper and lower bounds match.",
        "target_text": "Question: The \u03b8 notation in asymptotic evaluation represents __________\nChoices:\na) Base case\nb) Average case\nc) Worst case\nd) NULL case\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Floyd-Warshall algorithm is a dynamic programming-based algorithm used to find the shortest paths between all pairs of vertices in O(V^3) time.",
        "target_text": "Question: Floyd Warshall Algorithm used to solve the shortest path problem has a time complexity of __________\nChoices:\na) O(V^2)\nb) O(V^3)\nc) O(E*V)\nd) O(E^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black trees are preferred over AVL trees in scenarios with frequent insertions and deletions because they require fewer rotations and offer faster amortized performance.",
        "target_text": "Question: When would it be optimal to prefer Red-black trees over AVL trees?\nChoices:\na) when there are more insertions or deletions\nb) when more search is needed\nc) when tree must be balanced\nd) when log(nodes) time complexity is needed\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a hash table using chaining with doubly linked lists, deletion is efficient and performed in constant time O(1) if a pointer to the node is provided.",
        "target_text": "Question: What is the time complexity of delete function in the hash table using a doubly linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Evaluating a postfix expression (Reverse Polish Notation) using a stack processes each token once, leading to linear time complexity O(n).",
        "target_text": "Question: What is the time complexity of evaluation of postfix expression algorithm?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N^2)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Floyd-Warshall algorithm applies dynamic programming to solve the all-pairs shortest path problem in a weighted graph.",
        "target_text": "Question: The Floyd-Warshall algorithm for all-pair shortest paths computation is based on:\nChoices:\na) Greedy paradigm.\nb) Divide-and-Conquer paradigm.\nc) Dynamic Programming paradigm.\nd) None of the above.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In naive merging of two sorted arrays (or lists), each element must be compared and placed into a new array, resulting in a worst-case time complexity of O(N).",
        "target_text": "Question: The worst case analysis for a naive merge is given as?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), the worst case occurs when the tree becomes skewed, leading to O(n) complexity. The average case for balanced BSTs is O(log n).",
        "target_text": "Question: What are the worst case and average case complexities of a binary search tree?\nChoices:\na) O(n), O(n)\nb) O(log n), O(log n)\nc) O(log n), O(n)\nd) O(n), O(log n)\nAnswer: d"
    }
]