[
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: A queue is implemented using an array such that ENQUEUE and DEQUEUE operations are performed efficiently. Which one of the following statements is CORRECT (n refers to the number of items in the queue)?\nChoices:\na) Both operations can be performed in O(1) time\nb) At most one operation can be performed in O(1) time but the worst case time for the other operation will be \u03a9(n)\nc) The worst case time complexity for both operations will be \u03a9(n)\nd) Worst case time complexity for both operations will be \u03a9(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Let G(V, E) be an undirected graph with positive edge weights. Dijkstra's single-source shortest path algorithm can be implemented using the binary heap data structure with time complexity:\nChoices:\na) O(|V|^2)\nb) O(|E| + |V| log |V|)\nc) O(|V| log |V|)\n d)O((|E| + |V|) log |V|)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) Undo operation in a text editor\nb) Recursive function calls\nc) Allocating CPU to resources\nd) Implement Hash Tables\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the time complexity for inserting/deleting at the beginning of the array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following operations on a queue data structure have a time complexity of O(1)?\nChoices:\na) Enqueue and Clear\nb) Dequeue and Peek\nc) Enqueue and Peek\nd) Clear only\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the time complexity of the search function in a hash table using a binary tree?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: An operator delete(i) for a binary heap data structure is to be designed to delete the item in the i-th node. Assume that the heap is implemented in an array and i refers to the i-th index of the array. If the heap tree has depth d (number of edges on the path from the root to the farthest leaf), then what is the time complexity to re-fix the heap efficiently after the removal of the element?\nChoices:\na) O(1)\nb) O(d) but not O(1)\nc) O(2d) but not O(d)\nd) O(d2^d) but not O(2d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the time complexity of searching for an element in a circular linked list?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(1)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity to insert an element into the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the time complexity for the initialization of top tree?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(log n)\nd) O(n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The time complexity of the code that determines the number of inversions in an array using self-balancing BST is lesser than that of the code that uses loops for the same purpose.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the worst case run-time complexity of binary search algorithm?\nChoices:\na) \u03b8(log n)\nb) \u03b8(n)\nc) \u03b8(n log n)\nd) \u03b8(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the worst case time complexity of inserting an element into the sorted array?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: In special case, the time complexity of inserting/deleting elements at the end of dynamic array is __________\nChoices:\na) O(n)\nb) O(sqrt(n))\nc) O(log n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the worst-case time complexity of an insertion operation in a hash table (n = number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following Binary Min Heap operation has the highest time complexity?\nChoices:\na) Inserting an item under the assumption that the heap has capacity to accommodate one more item\nb) Merging with another heap under the assumption that the heap has capacity to accommodate items of other heap\nc) Deleting an item from heap\nd) Decreasing value of a key\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In a circular linked list, how many nodes contain NULL as the address?\nChoices:\na) Only one node\nb) Only two nodes\nc) Every node\nd) None\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Time complexity to find if there is an edge between 2 particular vertices is __________\nChoices:\na) O(V)\nb) O(E)\nc) O(1)\nd) O(V + E)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is a time complexity for finding the longest substring that is repeated in a string?\nChoices:\na) O(log n!)\nb) \u03b8(n!)\nc) O(n^2 + n)\nd) \u03b8(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity of Ukkonen's algorithm?\nChoices:\na) O(log n!)\nb) O(n!)\nc) O(n^2)\nd) O(n log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the process of building a ternary heap called?\nChoices:\na) Heapify\nb) Hashing\nc) Linking\nd) Merging\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the time complexity of query operation if all the candidates are evenly spaced so that each bin has constant number of candidates? (k = number of bins query rectangle intersects)\nChoices:\na) O(1)\nb) O(k)\nc) O(k^2)\nd) O(log k)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Suppose there are two singly linked lists both of which intersect at some point and become a single linked list. The head or start pointers of both the lists are known, but the intersecting node and lengths of lists are not known. What is the worst-case time complexity of the optimal algorithm to find the intersecting node from two intersecting linked lists?\nChoices:\na) \u03b8(n*m)\nb) \u03b8(n^2), where m > n\nc) \u03b8(m+n)\nd) \u03b8(min(n, m))\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the worst case efficiency for a path compression algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In linked list implementation of queue, if only front pointer is maintained, which of the following operations take worst-case linear time?\nChoices:\na) Insertion\nb) Deletion\nc) To empty a queue\nd) Both Insertion and To empty a queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following algorithms to rotate an array has the maximum time complexity?\nChoices:\na) Rotate elements one by one\nb) Juggling algorithm\nc) Reversal algorithm\nd) Using a temporary array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity for finding the node at x position where n is the length of the rope?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Binary tree sort implemented using a self-balancing binary search tree takes O(n log n) time in the worst case but is still slower than Merge Sort.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Given an empty AVL tree, how would you construct an AVL tree when a set of numbers is given without performing any rotations?\nChoices:\na) Just build the tree with the given input\nb) Find the median of the set of elements given, make it as root and construct the tree\nc) Use trial and error\nd) Use dynamic programming to build the tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following asymptotic notations is the worst among all?\nChoices:\na) \u03b8(n + 9378)\nb) \u03b8(n^3)\nc) n^\u03b8(1)\nd) 2^\u03b8(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is the time complexity for finding the longest substring that is common in strings S1 and S2 (n1 and n2 are the string lengths of S1 and S2 respectively)?\nChoices:\na) O(log n!)\nb) \u03b8(n!)\nc) O(n^2 + n1)\nd) \u03b8(n1 + n2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the time complexity for finding the total length of all strings on all edges of a tree?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the time complexity of Bellman-Ford single-source shortest path algorithm on a complete graph of n vertices?\nChoices:\na) \u03b8(V^2)\nb) \u03b8(V^2 log V)\nc) \u03b8(V^3)\nd) \u03b8(V^3 log V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) Doubly linked list\nb) Circular linked list\nc) Singly linked list\nd) Binary trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What kind of linked list is best to answer questions like 'What is the item at position n?'\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Array implementation of linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the worst case time in searching minimum value in weak-heap?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity to delete an element from the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Time complexity of Depth First Traversal is __________\nChoices:\na) \u0398(|V| + |E|)\nb) \u0398(|V|)\nc) \u0398(|E|)\nd) \u0398(|V|*|E|)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The time complexity of calculating the sum of all leaf nodes in an n-node binary tree is __________\nChoices:\na) O(n^2)\nb) O(n + 1)\nc) O(1)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the best case complexity in building a heap?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n log^2 n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) O(k)\nb) O(n)\nc) O(k log k)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the value of the postfix expression 2 3 + 4 5 6 - - *?\nChoices:\na) 19\nb) 21\nc) -4\nd) 25\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Can operations like Find Next and Find Previous be implemented in ordered data structures like balanced trees or linked lists?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following is not an inherent application of stack?\nChoices:\na) Reversing a string\nb) Evaluation of postfix expression\nc) Implementation of recursion\nd) Job scheduling\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Stack\nb) Queue\nc) List\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What does the following function do for a given Linked List with first node as head?\nvoid fun1(struct node* head)\n{\n  if(head == NULL)\n    return;\n  \n  fun1(head->next);\n  printf(\"%d  \", head->data);\n}, \nChoices:\na) Prints all nodes of linked list\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which technique has the greatest number of probe sequences?\nChoices:\na) Linear probing\nb) Quadratic probing\nc) Double hashing\nd) Closed hashing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: In which of the following cases are dynamic arrays not preferred?\nChoices:\na) If the size of the array is unknown\nb) If the size of the array changes after few iterations\nc) If the memory reallocation is expensive\nd) If the array holds fewer elements\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What are implicit and explicit implementations of freelists?\nChoices:\na) Garbage collection and new/malloc respectively\nb) New/malloc and garbage collection respectively\nc) Implicit implementation is not favored\nd) Explicit implementation is not favored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Is insertion and deletion operation faster in rope than in an array?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A node will be rejected while inserting if the given node is already present in a triply linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A B-tree of order n is an order-n multiway tree in which each non-root node contains __________\nChoices:\na) at most (n - 1)/2 keys\nb) exactly (n - 1)/2 keys\nc) at least 2n keys\nd) at least (n - 1)/2 keys\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is buddy memory management of free lists?\nChoices:\na) Modified version of first fit\nb) Buddy allocation keeps several free lists, each one holds blocks which are of one particular size\nc) Modified version of best fit\nd) A tree representation of free lists\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array {\n\tpublic static void main(String args[]) {\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[5]);\n\t}\n}\nChoices:\na) 4\nb) 5\nc) ArrayIndexOutOfBoundsException\nd) InvalidInputException\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the amortized efficiency of skew merge?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which traversal strategy visits nodes level by level from top to bottom in a binary tree?\nChoices:\na) Depth-first traversal\nb) Breadth-first traversal\nc) Random traversal\nd) Priority traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: If the sequence of operations - push(1), push(2), pop, push(1), push(2), pop, pop, pop, push(2), pop - is performed on a stack, the sequence of popped out values is:\nChoices:\na) 2,2,1,1,2\nb) 2,2,1,2,2\nc) 2,1,2,2,1\nd) 2,1,2,2,2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which data structure can be used to test a palindrome?\nChoices:\na) Tree\nb) Heap\nc) Stack\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Given a prefix and a postfix notation, what is the difference between them?\nChoices:\na) The postfix equation is solved starting from the left whereas the prefix notation is solved from the right\nb) The postfix equation is solved starting from the right whereas the prefix notation is solved from the left\nc) Both equations are solved starting from the same side (right)\nd) Both equations are solved starting from the same side (left)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is __________\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is used in hash tables to determine the index of any input record?\nChoices:\na) Hash function\nb) Hash linked list\nc) Hash tree\nd) Hash chaining\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the condition for two elements arr[i] and arr[j] to form an inversion?\nChoices:\na) arr[i] < arr[j]\nb) i < j\nc) arr[i] < arr[j] and i < j\nd) arr[i] > arr[j] and i < j\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Linked list data structure offers considerable saving in __________\nChoices:\na) Computational Time\nb) Space Utilization\nc) Space Utilization and Computational Time\nd) Speed Utilization\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is an application of XOR-linked lists?\nChoices:\na) Implementing stacks\nb) Implementing queues\nc) Memory-efficient linked list representation\nd) Caching data structures\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the dynamic operations are used in Top Tree data structure implementation?\nChoices:\na) Link\nb) Cut\nc) Expose\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Disadvantages of linked list representation of binary trees over arrays?\nChoices:\na) Randomly accessing is not possible\nb) Extra memory for a pointer is needed with every element in the list\nc) Difficulty in deletion\nd) Random access is not possible and extra memory with every element\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Arrays\nd) List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Linked list is considered as an example of __________ type of memory allocation.\nChoices:\na) Dynamic\nb) Static\nc) Compile time\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What are the applications of dequeue?\nChoices:\na) A-Steal job scheduling algorithm\nb) Can be used as both stack and queue\nc) To find the maximum of all subarrays of size k\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is the disadvantage of sparse matrices over normal matrices?\nChoices:\na) Size\nb) Speed\nc) Easily compressible\nd) Algorithm complexity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the value of h(k) for the key 123456?\nGiven: p = 14, s = 2654435769, w = 32\nChoices:\na) 123\nb) 456\nc) 70\nd) 67\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which technique is used for finding similarity between two sets?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is an application of abstract syntax tree?\nChoices:\na) Static code analyzing\nb) Implement indexing in databases\nc) Used for dynamic memory allocation\nd) To represent networks of communication\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the special property of red-black trees and what should the root always be?\nChoices:\na) A color which is either red or black and root should always be black\nb) Height of the tree\nc) Pointer to next node\nd) A color which is either green or black\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: In which of the following cases is a Binary Decision Diagram used?\nChoices:\na) Representation of Boolean Functions\nb) String Matching\nc) Searching\nd) Sorting of numbers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following does the balancing symbols algorithm include?\nChoices:\na) Balancing double quotes\nb) Balancing single quotes\nc) Balancing operators and brackets\nd) Balancing parentheses, brackets and braces\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following graph traversals closely imitates level order traversal of a binary tree?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Depth & Breadth First Search\nd) Binary Search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A Priority-Queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements '1' and '7' are inserted in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 5, 3, 2, 1\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 3, 2, 1, 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: With V (greater than 1) vertices, how many edges at most can a Directed Acyclic Graph possess?\nChoices:\na) (V*(V-1))/2\nb) (V*(V+1))/2\nc) (V+1)C2\nd) (V-1)C2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Which of the following traversal outputs the data in sorted order in a BST?\nChoices:\na) Preorder\nb) Inorder\nc) Postorder\nd) Level order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Run-Length encoding is used to compress data in bit arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: The minimum number of stacks needed to implement a queue is:\nChoices:\na) 3\nb) 1\nc) 2\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Consider a single linked list where F and L are pointers to the first and last elements respectively of the linked list. The time for performing which of the given operations depends on the length of the linked list?\nChoices:\na) Delete the first element of the list\nb) Interchange the first two elements of the list\nc) Delete the last element of the list\nd) Add an element at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The prefix of (A+B)*(C-D)/E*F is:\nChoices:\na) /+-AB*CD\nb) /*+-ABCD*EF\nc) */*+AB-CDEF\nd) **AB+CD/EF\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of these best describes an array?\nChoices:\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialized\nd) Array is not a data structure\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) AVL tree\nb) B-tree\nc) Red-black tree\nd) Both AVL tree and Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which one of the following data structures is preferred in database-system implementation?\nChoices:\na) AVL tree\nb) B-tree\nc) B+ tree\nd) Splay tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from?\nChoices:\na) Leaf to root\nb) Root to node\nc) Root to leaf\nd) Left subtree to right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The roots of the elements of the subtrees are smaller than the root of the heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Given two processes (conversion of postfix to infix and prefix to infix), which of the following is easier to implement?\nChoices:\na) Both are easy to implement\nb) Postfix to infix is harder than prefix to infix\nc) Postfix to infix is easier than prefix to infix\nd) Insufficient data\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following represents the space complexity for an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many randomized binary search trees can be formed by the numbers (1, 3, 2)?\nChoices:\na) 2\nb) 3\nc) 6\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is the self-adjusting binary search tree?\nChoices:\na) AVL Tree\nb) Splay Tree\nc) Top Tree\nd) Ternary Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a full binary tree, if there are L leaves, then the total number of nodes N is?\nChoices:\na) N = 2*L\nb) N = L + 1\nc) N = L - 1\nd) N = 2*L - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Let s and t be two vertices in an undirected graph G = (V, E) with positive edge weights. Let [X, Y] be a partition of V such that s is an element of X and t is an element of Y. Consider the edge e having the minimum weight among all edges with one vertex in X and the other in Y. The edge e must definitely belong to:\nChoices:\na) The minimum weighted spanning tree of G\nb) The weighted shortest path from s to t\nc) Each path from s to t\nd) The weighted longest path from s to t\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A min-Heap is a complete binary tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Which of the following is a palindromic string?\nChoices:\na) \"APPLE\"\nb) \"ABCDE\"\nc) \"APPLA\"\nd) \"ABCCBA\"\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: How many hashes will be needed for calculating Jaccard index with an expected error less than or equal to 0.05?\nChoices:\na) 100\nb) 200\nc) 300\nd) 400\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the priority of a null node?\nChoices:\na) 1\nb) 0\nc) Random number\nd) Infinity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a bit array?\nChoices:\na) Data structure that compactly stores bits\nb) Data structure for representing arrays of records\nc) Array in which elements are not present in continuous locations\nd) An array in which most of the elements have the same value\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A complete binary tree with the property that the value at each node is at least as large as the values at its children is known as:\nChoices:\na) Binary search tree\nb) AVL tree\nc) Completely balanced tree\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Number of vertices with odd degrees in a graph having a Eulerian walk is __________\nChoices:\na) 0\nb) Can't be predicted\nc) 2\nd) Either 0 or 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) Not possible to reach the end\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Consider the following operation performed on a stack of size 5.\nPush(1);\nPop();\nPush(2);\nPush(3);\nPop();\nPush(4);\nPop();\nPop();\nPush(5);\nAfter the completion of all operations, the number of elements present in the stack is?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following helps keys to be mapped into addresses?\nChoices:\na) Hash function\nb) Separate chaining\nc) Open addressing\nd) Chaining using a linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The prefix form of A - B / (C * D ^ E) is?\nChoices:\na) -A/B*C^DE\nb) -A/BC*^DE\nc) -ABCD*^DE\nd) -/*^ACBDE\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Representation of data structure in memory is known as:\nChoices:\na) Recursive\nb) Abstract data type\nc) Storage structure\nd) File structure\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following data structures can provide efficient searching of the elements?\nChoices:\na) Unordered lists\nb) Binary search tree\nc) Treap\nd) 2-3 tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: The self-organizing list improves the efficiency of __________?\nChoices:\na) Binary search\nb) Jump search\nc) Sublist search\nd) Linear search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: You have two jars, one with 10 rings and another with none, stacked vertically. You want to remove the last ring from the first jar, but the second jar is weak and cannot store rings for long.\nChoices:\na) Empty the first jar one by one into the second jar\nb) Move rings to the second jar, then move them back one by one to the first\nc) There exists no possible way to do this\nd) Break the jar and remove the last one\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) Suffix array is always sorted\nb) Suffix array is used in string matching problems\nc) Suffix array is always unsorted\nd) Suffix array contains all the suffixes of the given string\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the postfix expression for the corresponding infix expression?\nChoices:\na) abc*+de*+\nb) abc+*de*+\nc) a+bc*de+*\nd) abc*+(de)*+\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following statements for a simple graph is correct?\nChoices:\na) Every path is a trail\nb) Every trail is a path\nc) Every trail is a path as well as every path is a trail\nd) Path and trail have no relation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following sequences of array elements forms a heap?\nChoices:\na) {23, 17, 14, 6, 13, 10, 1, 12, 7, 5}\nb) {23, 17, 14, 6, 13, 10, 1, 5, 7, 12}\nc) {23, 17, 14, 7, 13, 10, 1, 5, 6, 12}\nd) {23, 17, 14, 7, 13, 10, 1, 12, 5, 7}\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following methods performs poorly when elements are accessed in sequential order?\nChoices:\na) Count method\nb) Move to front method\nc) Transpose method\nd) Ordering method\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What will the below program print?\n// C++ program to find the length of string\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str = \"Hello Geeks\";\n    int i;\n    for (i = 0; str[i] != '\\0'; ++i);\n    cout << i;\n    return 0;\n}, \nChoices:\na) 0\nb) 1\nc) 5\nd) 11\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Assume +, -, * are usual arithmetic operators. * has the lowest precedence, + has the highest precedence, and - has medium. + and * are left-associative whereas - is right-associative. What is the value of the expression 3 - 8 + 2 - 9 * 3?\nChoices:\na) 4\nb) 6\nc) 8\nd) 20\ne) 20\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following program prints the index of every matching parenthesis?\nChoices:\na) First program with index output incremented\nb) Second program\nc) Third with reverse condition\nd) Fourth program with unmatched pairing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is not True about the 2-3 tree?\nChoices:\na) All leaves are at the same level\nb) It is perfectly balanced\nc) Postorder traversal yields elements in sorted order\nd) It is a B-tree of order 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following statements are True?\ni) XOR lists are used in environments with limited space, like embedded devices\nii) Garbage collectors may not support XOR lists\niii) Calculating next requires remembering previous node\niv) XOR lists are always more efficient than all alternatives\nChoices:\na) i, ii, iii, iv\nb) i, ii, iii\nc) i, ii\nd) i\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is the correct syntax to declare an ArrayList in Java?\nChoices:\na) ArrayList<String> al = new ArrayList<>();\nb) ArrayList al = new ArrayList[];\nc) ArrayList al() = new ArrayList();\nd) ArrayList al[] = new ArrayList[];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into EMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: How many stacks are required for reversing a word algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which node contains a pointer to its parent?\nChoices:\na) root node\nb) right most child\nc) left most child\nd) left sibling\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Consider the below program, and identify which operation is performed.\nint solve(struct Node* head)\n{\n    if (head == NULL)\n        return 1;\n    struct Node* ptr;\n    ptr = head->next;\n    while (ptr != NULL && ptr != head)\n        ptr = ptr->next;\n    return (ptr == head);\n}\nChoices:\na) Checking if list is empty or not\nb) Checking if the list is circular or not\nc) Counting the number of elements in the list\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Adjacency matrix of all graphs are symmetric.\nChoices:\na) False\nb) True\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which type of tree is tango tree?\nChoices:\na) Ternary Tree\nb) AVL Tree\nc) Binary Search Tree\nd) K-ary Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: A normal queue, if implemented using an array of size MAX_SIZE, gets full when?\nChoices:\na) Rear = MAX_SIZE - 1\nb) Front = (rear + 1) mod MAX_SIZE\nc) Front = rear + 1\nd) Rear = front\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What traversal over trie gives the lexicographical sorting of the set of the strings?\nChoices:\na) postorder\nb) preorder\nc) inorder\nd) level order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the depth of any tree if the union operation is performed by height?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following are used as an internal operation in Top tree?\nChoices:\na) Merge\nb) Cut\nc) Expose\nd) Link\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Consider the below program, and identify what the function is doing.\n#include <iostream>\n#include <queue>\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int item) {\n        data = item;\n        left = right = nullptr;\n    }\n};\nvoid function(Node* root) {\n    if (root == nullptr)\n        return;\n    std::queue<Node*> q;\n    q.push(root);\n    while (!q.empty()) {\n        Node* node = q.front();\n        q.pop();\n        std::cout << node->data << \" \";\n        if (node->left != nullptr)\n            q.push(node->left);\n        if (node->right != nullptr)\n            q.push(node->right);\n    }\n}\nChoices:\na) In order traversal of a tree\nb) Normal traversal of a tree\nc) Level order traversal of a tree\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Why is this heap named leftist heap?\nChoices:\na) only left subtrees exist\nb) the tree is biased to get deep down the left\nc) it is balanced\nd) right trees are unbalanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following traversing algorithm is not used to traverse in a tree?\nChoices:\na) Post order\nb) Pre order\nc) In order\nd) Randomized\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The running time for creating a heap of size n is?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is xor linked list?\nChoices:\na) uses of bitwise XOR operation to decrease storage requirements for doubly linked lists\nb) uses of bitwise XOR operation to decrease storage requirements for linked lists\nc) uses of bitwise operations to decrease storage requirements for doubly linked lists\nd) just another form of linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Who among the following provided the first suffix tree contribution for all alphabet?\nChoices:\na) Weiner\nb) Farach\nc) Ukkonen\nd) Alexander Morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The data structure required to check whether an expression contains balanced parenthesis is __________\nChoices:\na) Stack\nb) Queue\nc) Tree\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What does the following function do for a given Linked List with first node as head?\nvoid fun1(struct node* head)\n{\n    if(head == NULL)\n        return;\n    fun1(head->next);\n    printf(\"%d  \", head->data);\n}\nChoices:\na) Prints all nodes of linked lists\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the suffix array of the string 'engineering'?\nChoices:\na) 2 3 8 4 9 1 7 5 0 6 10\nb) 5 0 6 1 4 9 1 7 0 2 3 8\nc) 5 0 6 10 2 4 9 1 7 3 8\nd) 5 0 6 10 2 3 8 4 9 1 7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is identical to that of a separate chaining hash node?\nChoices:\na) Linked list\nb) Array\nc) Stack\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In a linked list with n nodes, the time taken to insert an element after an element pointed by some pointer is __________\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The minimum number of comparisons required to determine if an integer appears more than n/2 times in a sorted array of n integers is __________\nChoices:\na) \u0398(n)\nb) \u0398(log n)\nc) \u0398(n log n)\nd) \u0398(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Separate chaining is easier to implement as compared to open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: The And-Inverter Graph representation of a Boolean function is more efficient than the Binary Decision Diagram.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: AA Trees are implemented using?\nChoices:\na) Colors\nb) Levels\nc) Node size\nd) Heaps\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can a child node always be called a leaf node in a ternary tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Which of the following statement is a binary string?\nChoices:\na) \"ab\"\nb) \"121212\"\nc) \"01010101110\"\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following data clustering algorithms uses suffix trees in search engines?\nChoices:\na) Weiner's algorithm\nb) Farach's algorithm\nc) Lempel-Ziv-Welch's algorithm\nd) Suffix Tree Clustering\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many child nodes does each node of a ternary tree contain?\nChoices:\na) 4\nb) 6\nc) 5\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: All trees with n vertices consist of how many edges?\nChoices:\na) n\nb) n\u20112\nc) n+1\nd) n\u20111\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: A connected planar graph having 6 vertices and 7 edges contains how many regions?\nChoices:\na) 15\nb) 3\nc) 1\nd) 11\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The prefix form of A - B / (C * D ^ E) is:\nChoices:\na) -/*^ACBDE\nb) -ABCD*^DE\nc) -A/B*C^DE\nd) -A/BC*^DE\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many passes does the balancing symbols algorithm make through the input?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Given a hash table T with 25 slots that stores 2000 elements, the load factor \u03b1 for T is __________\n- A\n80\n- B\n0.0125\n- C\n8000\n- D\n1.25\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: The task of generating alternative indices for a node is called?\nChoices:\na) Collision handling\nb) Collision detection\nc) Collision recovery\nd) Closed hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is not the method to represent Sparse Matrix?\nChoices:\na) Dictionary of Keys\nb) Linked List\nc) Array\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What data structure can be used to check if syntax has balanced parenthesis?\nChoices:\na) Queue\nb) Tree\nc) List\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: The time required to delete a node x from a doubly linked list having n nodes is ________________\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the number of vertices of degree 2 in a path graph having n vertices, here n > 2?\nChoices:\na) n-2\nb) n\nc) 2\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is a self-balancing binary search tree?\nChoices:\na) 2-3 tree\nb) Threaded binary tree\nc) AA tree and Treap\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What happens if a node cannot fit an element in an unrolled linked list?\nChoices:\na) The element is discarded\nb) The elements are moved to the next node\nc) The node is discarded\nd) Error message is shown\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a bit array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) Array in which elements are not present in continuous locations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: When are the members of two sets more common relatively?\nChoices:\na) Jaccard Index is closer to 1\nb) Jaccard Index is closer to 0\nc) Jaccard Index is closer to -1\nd) Jaccard Index is farther from 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: The number of interchanges required to sort 5, 1, 6, 2, 4 in ascending order using Bubble Sort is\nChoices:\na) 6\nb) 5\nc) 7\nd) 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: For which of the following purpose a top pointer can be used?\nChoices:\na) Storing the address of the head pointer\nb) Storing the address of the previous node\nc) Storing the address of the next node\nd) Storing equal values on the same level\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following algorithm of data compression uses a suffix tree?\nChoices:\na) Weiner\u2019s algorithm\nb) Farach\u2019s algorithm\nc) Lempel\u2013Ziv\u2013Welch\u2019s algorithm\nd) Alexander Morse\u2019s algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A binary tree with n > 1 nodes has n\u2081, n\u2082 and n\u2083 nodes of degree one, two and three respectively. The degree of a node is defined as the number of its neighbors.\nStarting with the above tree, while there remains a node v of degree two in the tree, add an edge between the two neighbors of v and then remove v from the tree. How many edges will remain at the end of the process?\nChoices:\na) 2 * n\u2081 \u2013 3\nb) n\u2082 + 2 * n\u2081 \u2013 2\nc) n\u2083 \u2013 n\u2082\nd) n\u2082 + n\u2081 \u2013 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following schemes does quadratic probing come under?\nChoices:\na) rehashing\nb) extended hashing\nc) separate chaining\nd) open addressing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The postfix form of A*B+C/D is:\nChoices:\na) *AB/CD+\nb) AB*CD/+\nc) A*BC+/D\nd) ABCD+/*\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The height of a tree is the length of the longest root-to-leaf path in it. The maximum and minimum number of nodes in a binary tree of height 5 are:\nChoices:\na) 63 and 6, respectively\nb) 64 and 5, respectively\nc) 32 and 6, respectively\nd) 31 and 5, respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: An array of integers of size n can be converted into a heap by adjusting the heaps rooted at each internal node of the complete binary tree starting at the node floor((n - 1)/2), and doing this adjustment up to the root node. The time required to construct a heap in this manner is:\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) Linked List\nb) Array\nc) String\nd) Cord\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What does the following function do?\npublic Object some_func() throws emptyStackException {\n    if (isEmpty()) throw new emptyStackException(\"underflow\");\n    return first.getEle();\n}\nChoices:\na) pop\nb) delete the top-of-the-stack element\nc) retrieve the top-of-the-stack element\nd) push operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In linked list implementation of a queue, the important condition for a queue to be empty is?\nChoices:\na) FRONT is null\nb) REAR is null\nc) LINK is empty\nd) FRONT == REAR - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is the predefined function for array reversal in C++?\nChoices:\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the total time spent for N-1 merges in a dynamic equivalence problem?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The prefix form of an infix expression p + q - r * t is:\nChoices:\na) + pq - *rt\nb) - +pqr * t\nc) - +pq * rt\nd) - + * pqrt\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Efficiency of bin depends upon __________\nChoices:\na) size of query and candidates\nb) location of query and candidates\nc) location and size of query and candidates\nd) depends on the input\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is a drawback of an unrolled linked list?\nChoices:\na) Small memory overhead\nb) Cache management\nc) High overhead per node\nd) Slow insertion and deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Is the priority queue an abstract data type?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which data structure is commonly used to implement the event-driven simulation of complex systems, such as in computer network simulations or traffic simulations?\nChoices:\na) Stack\nb) Tree\nc) Array\nd) Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A binary tree is balanced if the difference between left and right subtree of every node is not more than 1\nChoices:\na) 1\nb) 3\nc) 2\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Following is a pseudo code of a function that takes a number as an argument, and uses a stack S to do processing.\ndef fun(n):\n    S = []  # Say it creates an empty stack S\n    while n > 0:\n        # This line pushes the value of n%2 to stack S\n        S.append(n % 2)\n        n = n // 2\n    # Run while Stack S is not empty\n    while S:\n        print(S.pop(), end=' ')\nChoices:\na) Prints binary representation of n in reverse order\nb) Prints binary representation of n\nc) Prints the value of log n\nd) Prints the value of log n in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Consider a sequence of numbers to have repetitions, how a cartesian tree can be constructed in such situations without violating any rules?\nChoices:\na) use any tie-breaking rule between repeated elements\nb) cartesian tree is impossible when repetitions are present\nc) construct a max heap in such cases\nd) construct a min heap in such cases\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Suffix array can be created by performing __________ traversal of a suffix tree.\nChoices:\na) breadth-first\nb) level order\nc) depth-first\nd) either breadth-first or level order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Advantages of linked list representation of binary trees over arrays?\nChoices:\na) dynamic size\nb) ease of insertion/deletion\nc) ease in randomly accessing a node\nd) both dynamic size and ease in insertion/deletion\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How is a bit vector better compared to a normal array for implementing the hash table?\nChoices:\na) It saves time\nb) It saves space\nc) It saves both time and space\nd) It reduces code complexity\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What are parallel arrays?\nChoices:\na) Arrays of the same size\nb) Arrays allocated one after the other\nc) Arrays of the same number of elements\nd) Arrays allocated dynamically\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which data structure is needed to convert infix notation to postfix notation?\nChoices:\na) Branch\nb) Queue\nc) Tree\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Assume that the operators +, -, * are left associative and ^ is right associative. The order of precedence (from highest to lowest) is ^, *, +, -. The postfix expression corresponding to the infix expression a + b * c - d ^ e ^ f is:\nChoices:\na) abc * + def ^ ^ -\nb) abc * + de ^ f ^ -\nc) ab + c * d - e ^ f ^\nd) - + a * bc ^ ^ def\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Consider the pseudo code:\nint avl(binarysearchtree root):\n     if(not root)\n       return 0\n     left_tree_height = avl(left_of_root)\n     if(left_tree_height== -1) \n       return left_tree_height\n     right_tree_height= avl(right_of_root)\n     if(right_tree_height==-1)\n       return right_tree_height\nDoes the above code check if a binary search tree is an AVL tree?\nChoices:\na) yes\nb) no\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How much time does construction of suffix tree take?\nChoices:\na) O(log M)\nb) O(M!)\nc) Exponential to Length of Tree\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The statement 'Fibonacci heap has better amortized running time compared to a binomial heap.'\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What will be the order of new heap created after union of heap H1 and H2 when created by the following code. Initially both are of the order n?\nChoices:\na) n+1\nb) n+n/2\nc) nlogn\nd) 2*n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following data structures can provide efficient searching of the elements?\nChoices:\na) binary search tree\nb) unordered lists\nc) 2-3 tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: In linear probing, the cost of an unsuccessful search can be used to compute the average cost of a successful search.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array {\n  public static void main(String args[]) {\n    int []arr = {1,2,3,4,5};\n    System.out.println(arr[2]);\n    System.out.println(arr[4]);\n  }\n}\nChoices:\na) 3 and 5\nb) 5 and 3\nc) 2 and 4\nd) 4 and 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is unbalanced and is a height balanced tree\nb) a tree which is balanced and is a height balanced tree\nc) a tree with at most 3 children\nd) a tree with three children\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which property should a ternary heap hold for execution?\nChoices:\na) Associative\nb) Commutative\nc) Tree\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Matrix A when multiplied with Matrix C gives the Identity matrix I. What is C?\nChoices:\na) Identity matrix\nb) Inverse of A\nc) Square of A\nd) Transpose of A\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Is a skip list like balanced tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which is the most appropriate data structure for reversing a word?\nChoices:\na) stack\nb) queue\nc) graph\nd) tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What are the disadvantages of arrays?\nChoices:\na) Data structure like queue or stack cannot be implemented\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Index value of an array can be negative\nd) Elements are sequentially accessed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What does this pseudo_code return?\nint myfun(heap_arr[]) {\n  int mini=INF;\n  for(int i=0;i<tot_node;i++)\n    mini=min(mini,heap_arr[i]);\n  return mini;\n}\nChoices:\na) Last added element to heap\nb) First element added to heap\nc) Root of the heap\nd) Leftmost node of the heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The largest element of an array index is called its __________.\nChoices:\na) lower bound.\nb) range.\nc) upper bound.\nd) All of these.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: For some sparse graph an adjacency list is more space efficient against an adjacency matrix.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following tree data structures is not a balanced binary tree?\nChoices:\na) AVL tree\nb) Red-black tree\nc) Splay tree\nd) B-tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Find the output of the following prefix expression:\n* + 2 - 2 1 / - 4 2 + - 5 3 1\nChoices:\na) 2\nb) 12\nc) 10\nd) 4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Consider a max heap, represented by the array: 40, 30, 20, 10, 15, 16, 17, 8, 4. Now consider that a value 35 is inserted into this heap. After insertion, the new heap is:\nChoices:\na) 40, 30, 20, 10, 15, 16, 17, 8, 4, 35\nb) 40, 35, 20, 10, 30, 16, 17, 8, 4, 15\nc) 40, 30, 20, 10, 35, 16, 17, 8, 4, 15\nd) 40, 35, 20, 10, 15, 16, 17, 8, 4, 30\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the reason for the efficiency of a pairing heap?\nChoices:\na) simplicity\nb) time-efficient\nc) space-efficient\nd) advanced\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The average depth of a binary tree is given as?\nChoices:\na) O(N)\nb) O(\u221aN)\nc) O(N\u00b2)\nd) O(log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The data structure required to evaluate a postfix expression is:\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Consider a singly linked list of the form where F is a pointer to the first element in the linked list and L is the pointer to the last element of the list. The time of which of the following operations depends on the length of the list?\nChoices:\na) Delete the last element of the list\nb) Delete the first element of the list\nc) Add an element after the last element of the list\nd) Interchange the first two elements of the list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 0?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NAND\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the advantage of the hash table over a linked list?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following tree data structures is not a balanced binary tree?\nChoices:\na) Splay tree\nb) B-tree\nc) AVL tree\nd) Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The following formula will produce: Fn = Fn-1 + Fn-2\nChoices:\na) Armstrong Number\nb) Fibonacci Series\nc) Euler Number\nd) Prime Number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Evaluation of infix expression is done based on precedence of operators.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following points is/are not True about Linked List data structure when compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) Access of elements in linked list takes less time than compared to arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What does the following piece of code do?\npublic void func(Tree root) {\n System.out.println(root.data());\n func(root.left());\n func(root.right());\n}\nChoices:\na) Preorder traversal\nb) Inorder traversal\nc) Postorder traversal\nd) Level order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many nodes does a leftist tree of rank r have at minimum?\nChoices:\na) 2<sup>r</sup>\nb) 2<sup>r</sup>-1\nc) r<sup>2</sup>\nd) r-1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following techniques is used for handling collisions in a hash table?\nChoices:\na) Open addressing\nb) Hashing\nc) Searching\nd) Hash function\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The extra key inserted at the end of the array is called a __________.\nChoices:\na) End key.\nb) Stop key.\nc) Sentinel.\nd) Transposition.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of different directed trees with 3 nodes are:\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Efficiency of finding the next record in B+ tree is __________\nChoices:\na) O(n)\nb) O(log n)\nc) O(nlog n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a binary min heap containing n elements, the largest element can be found in __________ time.\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: A graph with n vertices will definitely have a parallel edge or self loop if the total number of edges are __________.\nChoices:\na) more than n\nb) more than n+1\nc) more than (n+1)/2\nd) more than n(n-1)/2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: A characteristic of the data that binary search uses but linear search ignores is the __________.\nChoices:\na) Order of the elements of the list.\nb) Length of the list.\nc) Maximum value in list.\nd) Type of elements of the list.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a min-heap with n elements with the smallest element at the root, the 7th smallest element can be found in time:\nChoices:\na) \u03b8(nlogn)\nb) \u03b8(n)\nc) \u03b8(logn)\nd) \u03b8(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following is the simplest data structure that supports range searching?\nChoices:\na) Heaps\nb) binary search trees\nc) AA-trees\nd) K-d trees\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: A stable sorting algorithm:\nChoices:\na) does not crash.\nb) does not run out of memory.\nc) does not change the sequence of appearance of elements.\nd) does not exist.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: n elements of a Queue are to be reversed using another queue. The number of 'ADD' and 'REMOVE' operations required to do so is:\nChoices:\na) 2*n\nb) 4*n\nc) n\nd) The task cannot be accomplished\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the output of the following code?\n#include <iostream>\nusing namespace std;\nint main() {\n    int arr[] = {1,2,3,4,5,6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int d=4;\n    int temp[10];\n    for(int i=0;i<d;i++) temp[i]=arr[i];\n    int j=0;\n    for(int i=d;i<n;i++,j++) arr[j]=arr[i];\n    int k=0;\n    for(int i=n-d;i<n;i++,k++) arr[i]=temp[k];\n    for(int i=0;i<n;i++) cout<<arr[i]<<\" \";\n    return 0;\n}\nChoices:\na) 5 6 1 2 3 4\nb) 6 5 4 3 1 2\nc) 3 4 5 6 1 2\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The amortized time efficiency for performing deletion of a minimum element is?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N^2)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which is a simple form of hashing where the data is directly mapped to an index in a hash table?\nChoices:\na) Collision\nb) Index Mapping\nc) Functional Mapping\nd) Hash function\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Out of the following operators (^, *, +, &, $), the one having highest priority is __________\nChoices:\na) +\nb) $\nc) ^\nd) &\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by singly linked list?\nChoices:\na) Deleting a node whose location is given\nb) Searching an unsorted list for a given item\nc) Inverting a node after the node with a given location\nd) Traversing a list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: When converting the prefix notation into an infix notation, the first step to be followed is __________\nChoices:\na) Reverse the equation\nb) Push the equation to the stack\nc) Push the equation onto the queue\nd) Push the equation to the stack or queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following is the simplest data structure that supports range searching?\nChoices:\na) AA-trees\nb) K-d trees\nc) Heaps\nd) binary search trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What are the worst-case complexities of insertion and deletion of a key in a binary search tree?\nChoices:\na) \u03b8(logn) for both insertion and deletion\nb) \u03b8(n) for both insertion and deletion\nc) \u03b8(n) for insertion and \u03b8(logn) for deletion\nd) \u03b8(logn) for insertion and \u03b8(n) for deletion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a min-heap:\nChoices:\na) parent nodes have values greater than or equal to their children\nb) parent nodes have values less than or equal to their children\nc) both statements are True\nd) both statements are wrong\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: To create an adjacency list C++'s map container can be used.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a leftist heap, the null path length of a null node is defined as?\nChoices:\na) 0\nb) 1\nc) null\nd) -1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the complexity of the given function for insertion?\ninsert(int n) {\n  if(buffer_size()< max_buffer_size())\n    buffer_arr[ind] = n;\n  else\n    move_to_heap(buffer, buffer+max_buffer_size());\n}\nChoices:\na) O(logn)\nb) amortized O(1)\nc) O(n)\nd) O(n*logn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic Object function(int row_index, int col_index) {\n  if (row_index < 0 || col_index > N) {\n    System.out.println(\"column index out of bounds\");\n    return;\n  }\n  return (sparse_array[row_index].fetch(col_index));\n}\nChoices:\na) Store the element in the specified position\nb) Get the element from the specified position\nc) Alter the element in the specified position\nd) Remove the element from the specified position\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the code below trying to print?\nvoid print(tree *root, tree *node) {\n  if(root == null) return 0;\n  if(root->left == node || root->right == node || print(root->left,node) || print(root->right,node)) {\n    print(root->data);\n  }\n}\nChoices:\na) Just printing all nodes\nb) Not a valid logic to do any task\nc) Printing ancestors of a node passed as argument\nd) Printing nodes from leaf node to a node passed as argument\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: A Double-ended queue supports operations such as adding and removing items from both ends. You are given only stacks to implement this data structure. What are the total number of stacks required for this operation (you can reuse the stack)?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What data structure is used for depth-first traversal of a graph?\nChoices:\na) Queue\nb) Stack\nc) List\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is wrong with the below code for inorder traversal of a threaded binary tree?\ninordertraversal(threadedtreenode root):\n  threadedtreenode q = inorderpredecessor(root)\n  while(q != root):\n    q = inorderpredecessor(q)\n    print q.data\nChoices:\na) inorder successor instead of inorder predecessor must be used\nb) code is correct\nc) it is code for post order\nd) it is code for pre order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following sorting algorithms is stable?\nChoices:\na) Insertion sort\nb) Bubble sort\nc) Quick sort\nd) Heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What does 'stack overflow' refer to?\nChoices:\na) accessing item from an undefined stack\nb) adding items to a full stack\nc) removing items from an empty stack\nd) index out of bounds exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: In which case is an adjacency list preferred over an adjacency matrix?\nChoices:\na) Dense graph\nb) Sparse graph\nc) Adjacency list is always preferred\nd) Complete graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is a widely used form of the hash tree?\nChoices:\na) B+ - tree\nb) T tree\nc) Tiger tree hash\nd) Htree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by singly linked list?\nChoices:\na) Deleting a node whose location is given\nb) Searching of an unsorted list for a given item\nc) Inserting a new node after node whose location is given\nd) Traversing the list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What does the following Java code do?\npublic Object function() {\n if(isEmpty())\n   return -999;\n else {\n   Object high;\n   high = q[front];\n   return high;\n }\n}\nChoices:\na) Dequeue\nb) Enqueue\nc) Return the front element\nd) Return the last element\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: A hash table may become full in the case when we use open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: By implementing separate chaining using a list head we can reduce the number of collisions drastically.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Parse tree is constructed from the tokens produced by the lexical analyzer.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Consider a hash table with 100 slots. Collisions are resolved using chaining. Assuming simple uniform hashing, what is the probability that the first 3 slots are unfilled after the first 3 insertions?\nChoices:\na) (97 * 97 * 97)/100^3\nb) (99 * 98 * 97)/100^3\nc) (97 * 96 * 95)/100^3\nd) (97 * 96 * 95)/(3! * 100^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is not possible with an array in C programming language?\nChoices:\na) Declaration\nb) Definition\nc) Dynamic Allocation\nd) Array of strings\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which among the following is the pseudo code for post-order traversal?\nChoices:\na) Order(node):\n    if node is not null:\n       Order(node.left)\n       Order(node.right)\n       print node.value\nb) Order(node):\n    if node is not null:\n       Order(node.right)\n       Order(node.left)\n       print node.value\nc) Order(node):\n    if node is not null:\n       Order(node.left)\n       print node.value\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Graph Structured Stack finds its application in __________\nChoices:\na) Bogo Sort\nb) Tomita's Algorithm\nc) Todd-Coxeter algorithm\nd) Heap Sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The matrix contains m rows and n columns. The matrix is called a Sparse Matrix if __________\nChoices:\na) Total number of zero elements > (m*n)/2\nb) Total number of zero elements = m + n\nc) Total number of zero elements = m/n\nd) Total number of zero elements = m - n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The search technique for searching a sorted file that requires increased amount of space is __________.\nChoices:\na) Indexed sequential search\nb) Interpolation search\nc) Sequential search\nd) Tree search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: When does the ArrayIndexOutOfBoundsException occur?\nChoices:\na) Compile-time\nb) Run-time\nc) Not an error\nd) Not an exception at all\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many distinct binary search trees can be created out of 4 distinct keys?\nChoices:\na) 5\nb) 14\nc) 24\nd) 35\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: The searching technique that takes O(1) time to find data is:\nChoices:\na) Linear Search\nb) Binary Search\nc) Hashing\nd) Tree Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: For any two different vertices u and v of an Acyclic Directed Graph, if v is reachable from u, is u also reachable from v?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The order of a leaf node in a B+ tree is the maximum number of (value, data record pointer) pairs it can hold. Given that the block size is 1K bytes, data record pointer is 7 bytes, the value field is 9 bytes, and a block pointer is 6 bytes, what is the order of the leaf node?\nChoices:\na) 63\nb) 64\nc) 67\nd) 68\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many arguments are required by the predefined function rotate() in C++?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The postfix form of A*B+C/D is?\nChoices:\na) *AB/CD+\nb) AB*CD/+\nc) A*BC+/D\nd) ABCD+/*\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the number of moves required to solve Tower of Hanoi problem for k disks?\nChoices:\na) 2^k - 1\nb) 2^k + 1\nc) 2k + 1\nd) 2k - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Under what condition are the number of inversions in an array maximum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is a dequeue?\nChoices:\na) A queue with insert/delete defined for both front and rear ends of the queue\nb) A queue implemented with a doubly linked list\nc) A queue implemented with both singly and doubly linked lists\nd) A queue with insert/delete defined for front side of the queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: The five items: A, B, C, D, and E are pushed in a stack, one after another starting from A. The stack is popped four items and each element is inserted in a queue. Two elements are deleted from the queue and pushed back on the stack. Now one item is popped from the stack. The popped item is:\nChoices:\na) A\nb) B\nc) C\nd) D\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following BSTs is isometric with the 2-3 tree?\nChoices:\na) Splay tree\nb) AA tree\nc) Heap\nd) Red - Black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic int function(int data) {\n Node temp = head;\n int var = 0;\n while(temp != null) {\n   if(temp.getData() == data) {\n     return var;\n   }\n   var = var + 1;\n   temp = temp.getNext();\n }\n return Integer.MIN_VALUE;\n}\nChoices:\na) Find and delete a given element in the list\nb) Find and return the given element in the list\nc) Find and return the position of the given element in the list\nd) Find and insert a new element in the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following programs prints the index of every matching parenthesis?\nChoices:\na) Java code matching opening and closing brackets and printing indices\nb) Same with incorrect logic for index matching\nc) Logic reversed for ')' before '('\nd) Unmatched index misplacement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Assuming value of every weight to be greater than 10, in which of the following cases will the shortest path of a directed weighted graph from 2 vertices u and v never change?\nChoices:\na) add all values by 10\nb) subtract 10 from all the values\nc) multiply all values by 10\nd) in both the cases of multiplying and adding by 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Suffix array can be created in O(nlogn) time.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The leaf node for a heap of height h will be at which position?\nChoices:\na) h\nb) h-1\nc) h or h-1\nd) h-2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the basic operation performed in a pairing heap?\nChoices:\na) merge\nb) deletion\nc) insertion\nd) swapping\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: A Graph Structured Stack is a __________\nChoices:\na) Undirected Graph\nb) Directed Graph\nc) Directed Acyclic Graph\nd) Regular Graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: The minimum number of fields with each node of a doubly linked list is:\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following is an advantage of a balanced binary search tree, like an AVL tree, compared to a binary heap?\nChoices:\na) insertion takes less time\nb) deletion takes less time\nc) searching takes less time\nd) construction of the tree takes less time than binary heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Is the partitioning method used by the Tango Tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a hash function?\nChoices:\na) A function that allocates memory to keys\nb) A function that computes the location of the key in the array\nc) A function that creates an array\nd) A function that computes the location of the values in the array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: While evaluating a prefix expression, the string is read from?\nChoices:\na) left to right\nb) right to left\nc) center to right\nd) center to left to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is the name of the node having child nodes?\nChoices:\na) Brother\nb) Sister\nc) Mother\nd) Parent\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: An algorithm is made up of two independent time complexities f(n) and g(n). Then the complexity of the algorithm is in the order of:\nChoices:\na) f(n) * g(n)\nb) Max(f(n), g(n))\nc) Min(f(n), g(n))\nd) f(n) + g(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What should be the condition for the level of a left node?\nChoices:\na) It should be less than or equal to that of its parent\nb) It should be greater than that of its parent\nc) It should be strictly less than that of its parent\nd) The level should be equal to one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: A program P reads in 500 integers in the range [0..100] representing the scores of 500 students. It then prints the frequency of each score above 50. What would be the best way for P to store the frequencies?\nChoices:\na) An array of 50 numbers\nb) An array of 100 numbers\nc) An array of 500 numbers\nd) A dynamically allocated array of 550 numbers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is meant by physical size in a dynamic array?\nChoices:\na) The size allocated to elements\nb) The size extended to add new elements\nc) The size of the underlying array at the back-end\nd) The size visible to users\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the probability of selecting a tree uniformly at random?\nChoices:\na) Equal to Catalan Number\nb) Less than Catalan Number\nc) Greater than Catalan Number\nd) Reciprocal of Catalan Number\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the maximum height of any AVL-tree with 7 nodes? Assume that the height of a tree with a single node is 0.\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following pieces of code has the functionality of counting the number of elements in the list?\nChoices:\na) code that increments `size` inside a while loop with cur != null\nb) code that swaps the order of size++ and pointer movement\nc) code with no return value\nd) code that skips every second node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of nodes N are?\nChoices:\na) N = 2*I\nb) N = I + 1\nc) N = I - 1\nd) N = 2*I + 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which operation is used to break a preferred path into two sets of parts at a particular node?\nChoices:\na) Differentiate\nb) Cut\nc) Integrate\nd) Join\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: All undirected Multigraphs contain Eulerian cycles.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is missing in the given code?\n#include <bits/stdc++.h>\nusing namespace std;\nvoid reverseStr(string& str) {\n    for (int i = 0; i < n / 2; i++)\n        swap(str[i], str[n - i - 1]);\n}\nint main() {\n    string str = \"geeksforgeeks\";\n    reverseStr(str);\n    cout << str;\n    return 0;\n}\nChoices:\na) swap function is not defined\nb) string is not defined here.\nc) Variable n is not declared anywhere.\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which one of the following is a valid sequence of elements in an array representing a 3-ary max heap?\nChoices:\na) 1, 3, 5, 6, 8, 9\nb) 9, 6, 3, 1, 8, 5\nc) 9, 3, 6, 8, 5, 1\nd) 9, 5, 6, 8, 3, 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: When we have red-black trees and AVL trees that can perform most operations in logarithmic time, what is the need for splay trees?\nChoices:\na) no there is no special usage\nb) In real time it is estimated that 80% access is only to 20% data, hence most used ones must be easily available\nc) red-black and AVL are not up to mark\nd) they are just another type of self-balancing binary search trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will the following code do?\nvoid fun(int arr[], int n) {\n  for (int i = 0; i < n; i++) {\n    for (int j = i; j < n; j++) {\n      for (int k = i; k <= j; k++)\n        cout << arr[k] << \" \";\n      cout << endl;\n    }\n  }\n}\nChoices:\na) Prints the subsequence of the article.\nb) Prints the elements of the array\nc) Prints the subarray of the element.\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the space complexity of a linear queue having n elements?\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: For a given graph G having v vertices and e edges which is connected and has no cycles, which of the following statements is True?\nChoices:\na) v = e\nb) v = e + 1\nc) v + 1 = e\nd) v = e - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the contents of the list after the function completes execution (on list 1 to 7)?\nChoices:\na) 1,2,3,4,5,6,7\nb) 2,1,4,3,6,5,7\nc) 1,3,2,5,4,7,6\nd) 2,3,4,5,6,7,1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Suppose a circular queue of capacity (n - 1) elements is implemented with an array of n elements. What are the conditions for full and empty states?\nChoices:\na) Full: (REAR+1) mod n == FRONT, empty: REAR == FRONT\nb) Full: (REAR+1) mod n == FRONT, empty: (FRONT+1) mod n == REAR\nc) Full: REAR == FRONT, empty: (REAR+1) mod n == FRONT\nd) Full: (FRONT+1) mod n == REAR, empty: REAR == FRONT\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic int function() {\n Node temp = tail.getPrev();\n tail.setPrev(temp.getPrev());\n temp.getPrev().setNext(tail);\n size--;\n return temp.getItem();\n}\nChoices:\na) Return the element at the tail of the list but do not remove it\nb) Return the element at the tail of the list and remove it from the list\nc) Return the last but one element from the list but do not remove it\nd) Return the last but one element at the tail of the list and remove it from the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is a valid reverse Polish expression?\nChoices:\na) a op b\nb) op a b\nc) a b op\nd) both op a b and a b op\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: A BST is traversed in the following order recursively: Right, root, left. The output sequence will be in:\nChoices:\na) Ascending order\nb) Descending order\nc) Bitomic sequence\nd) No specific order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Identify the infix expression from the list of options given below:\nChoices:\na) a/b+(c-d)\nb) abc*+d+ab+cd+*ce-f-\nc) ab-c-\nd) +ab\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a binary tree with n nodes, every node has an odd number of descendants. Every node is considered to be its own descendant. What is the number of nodes in the tree that have exactly one child?\nChoices:\na) 0\nb) 1\nc) (n-1)/2\nd) n-1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Do ternary heaps have better memory cache behavior than binary heaps?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n}  \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) 5 1 4 3\nb) 3 5 1 4\nc) 5 3 4 1\nd) error\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: In __________ method, whenever a node is accessed, it might move to the head of the list if its number of accesses becomes greater than the records preceding it.\nChoices:\na) least recently used\nb) count\nc) transpose\nd) exchange\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Bin is an example of a range query data structure.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Select the incorrect statement. Binary search trees (regardless of the order in which the values are inserted into the tree):\nChoices:\na) Always have multiple links per node.\nb) Can be sorted efficiently.\nc) Always have the same shape for a particular set of data.\nd) Are nonlinear data structures.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which data structure is used to implement deque?\nChoices:\na) Stack\nb) Doubly linked list\nc) Circular array\nd) Both B and C\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Is Sparse Matrix also known as Dense Matrix?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is not an application of sorted array?\nChoices:\na) Commercial computing\nb) Priority Scheduling\nc) Discrete Mathematics\nd) Hash Tables\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: How many pointers are contained as data members in the nodes of a circular, doubly linked list of integers with five nodes?\nChoices:\na) 5\nb) 8\nc) 10\nd) 15\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A binary tree with n > 1 nodes has n1, n2, and n3 nodes of degree one, two, and three respectively. The degree of a node is defined as the number of its neighbors.\nn3 can be expressed as:\nChoices:\na) n1 + n2 - 1\nb) n1 - 2\nc) ((n1 + n2)/2)\nd) n2 - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: In open addressing, the hash table can never become full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the expected error by the estimator Chernoff bound on the samples performed without replacement?\nChoices:\na) O(log k!)\nb) O(k!)\nc) O(k^2)\nd) O(1/sqrt(k))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: While inserting the elements 71, 65, 84, 69, 67, 83 in an empty binary search tree (BST) in the sequence shown, the element in the lowest level is:\nChoices:\na) 65\nb) 67\nc) 69\nd) 83\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Select the code snippet which performs matrix multiplication (a and b are the two given matrices, resultant matrix is c):\nChoices:\na) correct nested-loop code for c[i][j] += a[i][k] * b[k][j]\nb) code that adds matrix values instead\nc) code that transposes the matrix\nd) code that just prints one matrix\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time per operation of merging, insertion, and deletion operations in a skew heap?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: To evaluate an expression without any embedded function calls:\nChoices:\na) As many stacks as the height of the expression tree are needed\nb) One stack is enough\nc) Two stacks are needed\nd) A Turing machine is needed in the general case\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Assuming int is of 4 bytes, what is the size of int arr[15]?\nChoices:\na) 15\nb) 19\nc) 11\nd) 60\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following is not an inherent application of stack?\nChoices:\na) Implementation of recursion\nb) Evaluation of a postfix expression\nc) Job scheduling\nd) Reverse a string\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: A mathematical model with a collection of operations defined on that model is called:\nChoices:\na) Data Structure\nb) Abstract Data Type\nc) Primitive Data Type\nd) Algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Unrolled linked-list requires more storage space for pointers compared to a singly linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Operations required for reversing a word or a string using stack are push() and pop().\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the depth of the root node of the ternary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Given a heap of n nodes. The maximum number of trees for building the heap is:\nChoices:\na) n\nb) n-1\nc) n/2\nd) logn\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What kind of deletion is implemented by hashing using open addressing?\nChoices:\na) active deletion\nb) standard deletion\nc) lazy deletion\nd) no deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is not an application of priority queue?\nChoices:\na) Huffman codes\nb) Interrupt handling in operating system\nc) Undo operation in text editors\nd) Bayesian spam filter\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The system throws an error if parentheses are encountered in an infix expression evaluation algorithm.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which data structure is based on the Last In First Out (LIFO) principle?\nChoices:\na) Tree\nb) Linked List\nc) Stack\nd) Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is a splay operation?\nChoices:\na) moving parent node to down of child\nb) moving a node to root\nc) moving root to leaf\nd) removing leaf node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: The optimal data structure used to solve Tower of Hanoi is __________\nChoices:\na) Tree\nb) Heap\nc) Priority queue\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Suppose we are given n keys, m hash table slots, and two simple uniform hash functions h1 and h2. Further, suppose our hashing scheme uses h1 for odd keys and h2 for even keys. What is the expected number of keys in a slot?\nChoices:\na) 2m/n\nb) m/n\nc) n/m\nd) m/2n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What happens if the null path length is not updated?\nChoices:\na) error occurs\nb) all null path lengths will be 0\nc) all null path lengths will be -1\nd) all null path lengths will be 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is a memory efficient double linked list?\nChoices:\na) Each node has only one pointer to traverse the list back and forth\nb) The list has breakpoints for faster traversal\nc) An auxiliary singly linked list acts as a helper list to traverse through the doubly linked list\nd) A doubly linked list that uses bitwise AND operator for storing addresses\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: An undirected graph G has n nodes. Its adjacency matrix is given by an n * n square matrix with (i) diagonal elements as 0s and (ii) non-diagonal elements as 1s. Which one of the following is TRUE?\nChoices:\na) Graph G has no minimum spanning tree (MST)\nb) Graph G has a unique MST of cost n-1\nc) Graph G has multiple distinct MSTs, each of cost n-1\nd) Graph G has multiple spanning trees of different costs\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a leftist heap, all the operations should be performed on?\nChoices:\na) left path\nb) centre path\nc) right path\nd) root\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Consider a weighted undirected graph with positive edge weights. Let u\u2013v be an edge. The shortest path from source s to u is 53, and to v is 65. Which one of the following statements is always True?\nChoices:\na) weight(u, v) < 12\nb) weight(u, v) \u2264 12\nc) weight(u, v) > 12\nd) weight(u, v) \u2265 12\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?\nChoices:\na) Priority queue\nb) Dequeue\nc) Circular queue\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient traversal\nb) to have efficient region query\nc) to have efficient deletion\nd) to have efficient insertion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: When is it appropriate to use direct addressing?\nChoices:\na) When the array is comparatively large\nb) When the universe U of keys is reasonably small\nc) When the universe U of keys is reasonably large\nd) When the array is comparatively small\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Suppose a stack implementation supports an instruction REVERSE, which reverses the order of elements on the stack, in addition to PUSH and POP. Which one of the following statements is TRUE with respect to this modified stack?\nChoices:\na) A queue cannot be implemented using this stack.\nb) A queue can be implemented where ENQUEUE takes a single instruction and DEQUEUE takes a sequence of two instructions.\nc) A queue can be implemented where ENQUEUE takes a sequence of three instructions and DEQUEUE takes a single instruction.\nd) A queue can be implemented where both ENQUEUE and DEQUEUE take a single instruction each.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is a full binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) Each node has exactly two children\nc) All the leaves are at the same level\nd) Each node has exactly one or two children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What data organization method is used in hash tables?\nChoices:\na) Stack\nb) Array\nc) Linked list\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How much space does construction of suffix tree takes?\nChoices:\na) O (log M)\nb) Exponential to Length of Tree\nc) O (M!)\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The result of evaluating the postfix expression 5, 4, 6, +, *, 4, 9, 3, /, +, * is?\nChoices:\na) 600\nb) 350\nc) 650\nd) 588\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Space complexity for storing only the edges in an adjacency list of an undirected graph is __________\nChoices:\na) O(V)\nb) O(E*E)\nc) O(E)\nd) O(E+V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The steps for finding post-order traversal are traverse the right subtree, traverse the left subtree or visit the current node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of leaf nodes in a complete binary tree of depth d is __________\nChoices:\na) 2d\nb) 2d-1+1\nc) 2d+1+1\nd) 2d+1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is not the self balancing binary search tree?\nChoices:\na) AVL Tree\nb) 2-3-4 Tree\nc) Red - Black Tree\nd) Splay Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Is it True that splay trees have O(logn) amortized complexity?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many binary trees with 3 nodes which when traversed in post order gives the sequence A, B, C is?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: In general, the index of the first element in an array is __________\nChoices:\na) 0\nb) -1\nc) 2\nd) 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Multiplication and division to find children and parents cannot be implemented in a d-heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the run time efficiency of an insertion algorithm in d-heap?\nChoices:\na) O(N)\nb) O(log N)\nc) O(logd N)\nd) O(Nd)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What data structure is used for breadth first traversal of a graph?\nChoices:\na) Queue\nb) Stack\nc) List\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Following is pseudo code of a function that takes a Queue as an argument, and uses a stack S to do processing.\nvoid fun(Queue *Q) {\n    Stack S;\n    while (!isEmpty(Q)) {\n        push(&S, deQueue(Q));\n    }\n    while (!isEmpty(&S)) {\n        enQueue(Q, pop(&S));\n    }\n}\nChoices:\na) Removes the last from Q\nb) Keeps the Q same as it was before the call\nc) Makes Q empty\nd) Reverses the Q\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) B-tree\nb) Red-black tree\nc) AVL tree\nd) Both AVL tree and Red-black tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following logical operation can't be implemented by polynomial time graph manipulation algorithms using Binary Decision Diagrams?\nChoices:\na) Conjunction\nb) Disjunction\nc) Negation\nd) Tautology Checking\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Consider a 13 element hash table for which f(key)=key mod 13 is used with integer keys. Assuming linear probing is used for collision resolution, at which location would the key 103 be inserted, if the keys 661, 182, 24 and 103 are inserted in that order?\nChoices:\na) 0\nb) 1\nc) 11\nd) 12\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Given only a single array of size 10 and no other memory is available. Which of the following operation is not feasible to implement (Given only push and pop operation)?\nChoices:\na) Push\nb) Pop\nc) Enqueue\nd) Returntop\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the maximum number of keys that a B+ -tree of order 3 and of height 3 have?\nChoices:\na) 3\nb) 80\nc) 27\nd) 26\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Let G be a directed graph whose vertex set is the set of numbers from 1 to 100. There is an edge from a vertex i to a vertex j if either j = i + 1 or j = 3i. The minimum number of edges in a path in G from vertex 1 to vertex 100 is\nChoices:\na) 4\nb) 7\nc) 23\nd) 99\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Stack is used for __________\nChoices:\na) CPU Resource Allocation\nb) Breadth First Traversal\nc) Recursion\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The balance factor of a node in a binary tree is defined as __________\nChoices:\na) addition of heights of left and right subtrees\nb) height of right subtree minus height of left subtree\nc) height of left subtree minus height of right subtree\nd) height of right subtree minus one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can leaf node be called child node in a ternary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following methods is the best choice for complex applications?\nChoices:\na) binary heap\nb) d-heap\nc) treap\nd) pairing heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Time complexities of three algorithms are given. Which should execute the slowest for large values of N?\nChoices:\na) O(N1/2)\nb) O(N)\nc) O(log N)\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: __________ is one of the earliest forms of a self-adjustment strategy used in splay trees, skew heaps.\nChoices:\na) Union by rank\nb) Equivalence function\nc) Dynamic function\nd) Path compression\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Is it possible to perform a split operation on a string in the rope if the split point is in the middle of the string?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a sorted array?\nChoices:\na) Arrays sorted in numerical order\nb) Arrays sorted in alphabetical order\nc) Elements of the array are placed at equally spaced addresses in the memory\nd) All of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the postfix form of the following prefix *+ab-cd?\nChoices:\na) ab+cd-*\nb) abc+*\nc) ab+*cd\nd) ab+*cd\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the reason behind the simplicity of a treap?\nChoices:\na) Each node has data and a pointer\nb) Each node is colored accordingly\nc) It is a binary search tree following heap principles\nd) Each node has a fixed priority field\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Suppose each set is represented as a linked list with elements in arbitrary order. Which of the operations among union, intersection, membership, cardinality will be the slowest? (GATE CS 2004)\nChoices:\na) union \nb)  membership\nc) cardinality\nd)  union, intersection\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the output of the code below?\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int arr[2] = { 1, 2 };\n    cout << arr[0] << \", \" << arr[1] << endl;\n    return 0;\n}\nChoices:\na) 1, 2\nb) Syntax error\nc) Run time error\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the time required for single variant hashing to maintain the minimum hash queue?\nChoices:\na) O (log n!)\nb) O (n!)\nc) O (n2)\nd) O (n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Given pointer to a node X in a singly linked list. Only one pointer is given, pointer to head node is not given, can we delete the node X from given linked list?\nChoices:\na) Possible if X is not last node. Use following two steps (a) Copy the data of next of X to X. (b)Update the pointer of node X to the node after the next node. Delete next of X.\nb) Possible if size of linked list is even.\nc) Possible if size of linked list is odd\nd) Possible if X is not first node. Use following two steps (a) Copy the data of next of X to X. (b) Delete next of X.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In general, the node content in a threaded binary tree is __________\nChoices:\na) leftchild_pointer, left_tag, data, right_tag, rightchild_pointer\nb) leftchild_pointer, left_tag\nc) leftchild_pointer, left_tag, right_tag, rightchild_pointer\nd) leftchild_pointer, left_tag, data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: How many types of the merge are available in skew heaps?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The following numbers are inserted into an empty binary search tree in the given order: 10, 1, 3, 5, 15, 12, 16. What is the height of the binary search tree (the height is the maximum distance of a leaf node from the root)? (GATE CS 2004)\nChoices:\na) 2\nb) 3\nc) 4\nd) 6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is an advantage of using variable-length arrays?\nChoices:\na) Deciding the length of an array at the time of execution\nb) Memory allocation at compile time\nc) Initializing array at compile time\nd) Faster execution of code\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of leaf nodes in a rooted tree of n nodes, with each node having 0 or 3 children is:\nChoices:\na) n/2\nb) (n-1)/3\nc) (n-1)/2\nd) (2n+1)/3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is?\nChoices:\na) Array\nb) Stack\nc) Tree\nd) Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: In a circular queue, how do you increment the rear end of the queue?\nChoices:\na) rear++\nb) (rear+1) % CAPACITY\nc) (rear % CAPACITY)+1\nd) rear-\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What datastructures can be used in implementing a free list?\nChoices:\na) only linked list\nb) linked list or sort trees\nc) arrays\nd) trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What are splay trees?\nChoices:\na) self adjusting binary search trees\nb) self adjusting binary trees\nc) a tree with strings\nd) a tree with probability distributions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Each level in a k-d tree corresponds to a split along?\nChoices:\na) a specific dimension\nb) node height\nc) node color\nd) number of children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int arr[], int n) \n{  \n int count[n]; \n memset(count, 0, sizeof(count)); \n \n for (int i=n-2; i>=0; i--) \n { \n  if (arr[i] >= n - i - 1) \n   count[i]++; \n \n  for (int j=i+1; j < n-1 && j <= arr[i] + i; j++) \n \n   if (count[j] != -1) \n    count[i] += count[j]; \n \n  if (count[i] == 0) \n   count[i] = -1; \n } \n \n for (int i=0; i<n; i++) \n  cout << count[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 3, 5, 8, 9}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, n); \n return 0; \n}\nChoices:\na) 3\nb) 4\nc) 4 4 2 1 0\nd) 4 2 2 0 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Array\nd) List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The following numbers are inserted into an empty binary search tree in the given order: 10, 1, 3, 5, 15, 12, 16 What is the height of the binary search tree?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Merging 4 sorted files containing 50, 10, 25 and 15 records will take __________ time\nChoices:\na) O(100)\nb) O(200)\nc) O(175)\nd) O(125)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The equivalent infix expression and value for the postfix form 1 2 + 3 * 4 5 * - will be __________\nChoices:\na) 1 + 2 * 3 - 4 * 5 and -13\nb) (2 + 1) * (3 - 4) * 5 and 13\nc) 1 + 2 * (3 - 4) * 5 and -11\nd) (1 + 2) * 3 - (4 * 5) and -11\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Consider a situation of writing a binary tree into a file with memory storage efficiency in mind, is array representation of tree is good?\nChoices:\na) yes because we are overcoming the need of pointers and so space efficiency\nb) yes because array values are indexable\nc) No it is not efficient in case of sparse trees and remaining cases it is fine\nd) No linked list representation of tree is only fine\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following option is not correct?\nChoices:\na) If the queue is implemented with a linked list, keeping track of a front pointer, Only rear pointer s will change during an insertion into an non-empty queue.\nb) Queue data structure can be used to implement least recently used (LRU) page fault algorithm and Quick short algorithm.\nc) Queue data structure can be used to implement Quick short algorithm but not least recently used (LRU) page fault algorithm.\nd) Both (A) and (C)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the space complexity of the in-order traversal in the recursive fashion? (d is the tree depth and n is the number of nodes)\nChoices:\na) O(1)\nb) O(nlogd)\nc) O(logd)\nd) O(d)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Travelling salesman problem is an example of __________\nChoices:\na) Dynamic Algorithm\nb) Greedy Algorithm\nc) Recursive Approach\nd) Divide & Conquer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Consider a two dimensional array A[20][10]. Assume 4 words per memory cell, the base address of array A is 100, elements are stored in row-major order and first element is A[0][0]. What is the address of A[11][5]?\nChoices:\na) 560\nb) 460\nc) 570\nd) 575\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is a disadvantage of dynamic arrays?\nChoices:\na) Locality of reference\nb) Data cache utilization\nc) Random access\nd) Memory leak\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is not True?\nChoices:\na) Trie requires less storage space than hashing\nb) Trie allows listing of all the words with same prefix\nc) Tries are collision free\nd) Trie is also known as prefix tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the formula to find the expected number of probes for an unsuccessful search in linear probing?\nChoices:\na) 1/2 * (1 + 1/(1-\u03b1))\nb) 1/2 * (1 + 1/(1-\u03b1)^2)\nc) 1/2 * (1 + 1/(1+\u03b1))\nd) 1/2 * (1 + 1/(1+\u03b1)(1-\u03b1))\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: If locality is a concern, you can use __________ to traverse the graph.\nChoices:\na) Breadth First Search\nb) Depth First Search\nc) Either BFS or DFS\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) 2-3 tree requires less storage than the BST\nb) lookup in 2-3 tree is more efficient than in BST\nc) 2-3 tree is shallower than BST\nd) 2-3 tree is a balanced tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How do you instantiate an array in Java?\nChoices:\na) int arr[] = new int(3);\nb) int arr[];\nc) int arr[] = new int[3];\nd) int arr() = new int(3);\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Does Van Emde Boas data structure perform all operation in O (log (log M)) time where M = 2^m?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: A queue is a\nChoices:\na) FIFO (First In First Out) list.\nb) LIFO (Last In First Out) list.\nc) Ordered array.\nd) Linear tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the complexity of adding an element to the heap?\nChoices:\na) O(log n)\nb) O(h)\nc) O(log n) & O(h)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can mathematical randomized tree be generated using beta distribution?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the space complexity of the code that uses merge sort for determining the number of inversions in an array?\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Consider the following function that takes reference to head of a Doubly Linked List as parameter. Assume that a node of doubly linked list has previous pointer as prev and next pointer as next.\nvoid fun(struct node **head_ref) {\n    struct node *temp = NULL;\n    struct node *current = *head_ref;\n    while (current != NULL) {\n        temp = current->prev;\n        current->prev = current->next;\n        current->next = temp;\n        current = current->prev;\n    }\n    if (temp != NULL)\n        *head_ref = temp->prev;\n}\nChoices:\na) 2 <--> 1 <--> 4 <--> 3 <--> 6 <-->5\nb) 5 <--> 4 <--> 3 <--> 2 <--> 1 <-->6.\nc) 6 <--> 5 <--> 4 <--> 3 <--> 2 <--> 1.\nd) 6 <--> 5 <--> 4 <--> 3 <--> 1 <--> 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following problems occur due to linear probing?\nChoices:\na) Primary clustering\nb) Secondary collision\nc) Separate chaining\nd) Extendible hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: An error is thrown if the character '\n' is pushed in to the character stack.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: It is not possible to reach the end of an array if starting element of the array is 0.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The associativity of an exponentiation operator ^ is right side.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time taken to delete a minimum element in a leftist heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Memory usage in triply linked list is higher than doubly linked list.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: The process of accessing data stored in a serial access memory is similar to manipulating data on a __________\nChoices:\na) heap\nb) queue\nc) stack\nd) binary tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Dynamic arrays overcome the limit of static arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is sparsity of a matrix?\nChoices:\na) The fraction of zero elements over the total number of elements\nb) The fraction of non-zero elements over the total number of elements\nc) The fraction of total number of elements over the zero elements\nd) The fraction of total number of elements over the non-zero elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is a dequeue?\nChoices:\na) A queue implemented with both singly and doubly linked lists\nb) A queue with insert/delete defined for front side of the queue\nc) A queue with insert/delete defined for both front and rear ends of the queue\nd) A queue implemented with a doubly linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the disadvantage of using splay trees?\nChoices:\na) height of a splay tree can be linear when accessing elements in non decreasing order.\nb) splay operations are difficult\nc) no significant disadvantage\nd) splay tree performs unnecessary splay when a node is only being read\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Is decrease priority operation performed more quickly in a ternary heap with respect to the binary heap?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: A technique for direct search is __________\nChoices:\na) Binary Search\nb) Linear Search\nc) Tree Search\nd) Hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What may be the pseudo code for finding the size of a tree?\nChoices:\na) find_size(root_node->left_node) + 1 + find_size(root_node->right_node)\nb) find_size(root_node->left_node) + find_size(root_node->right_node)\nc) find_size(root_node->right_node) - 1\nd) find_size(root_node->left_node + 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Hashing can be used in online spelling checkers.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: To rotate an array by using the algorithm of rotating its elements one by one is an in place algorithm.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Binary Decision Diagram is a type of __________\nChoices:\na) Multigraph\nb) Cyclic Graph\nc) Directed Acyclic Graph\nd) Directed Acyclic Word Graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following are components of Hashing?\nChoices:\na) Key\nb) Hash Function\nc) Hash Table\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the amortized cost per operation of a skew heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N\u00b2)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following array position will be occupied by a new element being pushed for a stack of size N elements (capacity of stack > N)?\nChoices:\na) S[N-1]\nb) S[N]\nc) S[1]\nd) S[0]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The nodes in a skip list may have many forward references. Their number is determined\nChoices:\na) probabilistically\nb) randomly\nc) sequentially\nd) orthogonally\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is the function present to sort a string in C++?\nChoices:\na) sort();\nb) sort(str.begin(), str.end());\nc) Sort_asec();\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the definition for Ackermann's function?\nChoices:\na) A(1,i) = i+1 for i>=1\nb) A(i,j) = i+j for i>=j\nc) A(i,j) = i+j for i = j\nd) A(1,i) = i+1 for i<1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following statement is incorrect with respect to infix to postfix conversion algorithm?\nChoices:\na) operand is always placed in the output\nb) operator is placed in the stack when the stack operator has lower precedence\nc) parenthesis are included in the output\nd) higher and equal priority operators follow the same condition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which among the following best represents the computational complexity of GLR parsing?\nChoices:\na) O(|G| x n)\nb) O(|G|2 x n)\nc) O(|G| x n2)\nd) O(|G|2 x n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: 2-3-4 trees are B-trees of order 4. They are an isometric of __________ trees.\nChoices:\na) AVL\nb) AA\nc) 2-3\nd) Red-Black\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Complete the given snippet of code for the adjacency list representation of a weighted directed graph.\nChoices:\na) vertex, vertex\nb) neighbor, vertex\nc) neighbor, neighbor\nd) vertex, neighbor\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What is a hash table?\nChoices:\na) A structure that maps values to keys\nb) A structure that maps keys to values\nc) A structure used for storage\nd) A structure used to implement stack and queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is an infix expression?\nChoices:\na) (a+b)*(c+d)\nb) ab+c*\nc) +ab\nd) abc+*\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Is the given statement ((A+B) + [C-D]] valid with respect to balancing of symbols?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many edges does a leaf cluster contain?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the run time efficiency of an insertion algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N\u00b2)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: In C programming, when we remove an item from bottom of the stack, then:\nChoices:\na) The stack will fall down.\nb) Stack will rearrange items.\nc) It will convert to LIFO\nd) This operation is not allowed.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is/are not applications of bit arrays?\nChoices:\na) Used by the Linux kernel\nb) For the allocation of memory pages\nc) Bloom filter\nd) Implementation of Vectors and Matrices\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the functionality of the following code? Choose the most appropriate answer.\nint function() {\n    if (head == null)\n        return Integer.MIN_VALUE;\n    int var;\n    Node temp = head;\n    while (temp.getNext() != head)\n        temp = temp.getNext();\n    if (temp == head) {\n        var = head.getItem();\n        head = null;\n        return var;\n    }\n    temp.setNext(head.getNext());\n    var = head.getItem();\n    head = head.getNext();\n    return var;\n}\nChoices:\na) Returns data from the end of the list\nb) Returns data and deletes the node at the end of the list\nc) Returns data from the beginning of the list\nd) Returns data and deletes the node from the beginning of the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is the following code segment doing?\nvoid fn() {\n  char c;\n  cin.get(c);\n  if (c != '\n') {\n    fn();\n    cout.put(c);\n  }\n}\nChoices:\na) The string entered is printed as it is.\nb) The string entered is printed in reverse order.\nc) It will go in an infinite loop.\nd) It will print an empty line.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What must be the missing logic in place of missing lines for finding sum of nodes of binary tree in alternate levels?\n// e.g.: for a complete binary tree of height 3: [1,2,3,4,5,6,7], sum = 1+4+5+6+7 = 23\nn = power(2,height)-1; // total nodes\nfor (i = 1; i <= n;) {\n  for (j = 1; j <= pow(2, currentlevel-1); j++) {\n    sum = sum + a[i];\n    i = i + 1;\n  }\n  i = i + pow(2, currentlevel); // skip alternate level\n  currentlevel = currentlevel + 2;\n}\nChoices:\na) i = i + pow(2, currentlevel); currentlevel = currentlevel + 2;\nb) i = i + pow(2, currentlevel-1); currentlevel = currentlevel + 1;\nc) i = i + pow(2, currentlevel); currentlevel = currentlevel + 1;\nd) currentlevel = currentlevel + 2;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the condition for priority of a node in a treap?\nChoices:\na) A node's priority should be greater than its parent\nb) A node's priority should be at least as large as its parent\nc) The priority is randomly assigned and can have any value\nd) A node's priority is always given in decreasing order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the disadvantage of hashing with chaining?\nChoices:\na) Not easy to implement\nb) Takes more space\nc) Quite sensitive to hash function\nd) Table gets filled up easily\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: In infix to postfix conversion algorithm, the operators are associated from?\nChoices:\na) Right to left\nb) Left to right\nc) Centre to left\nd) Centre to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The prefix form of A-B/ (C * D ^ E) is?\nChoices:\na) -/*A B C*D^E\nb) -ABCD*^DE\nc) -A/B*C^DE\nd) -A/BC*^DE\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: The essential condition which is checked before insertion in a linked queue is?\nChoices:\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The smallest element of an array's index is called its\nChoices:\na) lower bound\nb) upper bound\nc) range\nd) extraction\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What are the disadvantages of arrays?\nChoices:\na) Index value of an array can be negative\nb) Elements are sequentially accessed\nc) Data structure like queue or stack cannot be implemented\nd) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: A graph with all vertices having equal degree is known as a __________\nChoices:\na) Multi Graph\nb) Regular Graph\nc) Simple Graph\nd) Complete Graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of these best describes an array?\nChoices:\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialised\nd) Array is not a data structure\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The OS of a computer may periodically collect all the free memory space to form contiguous block of free space. This is called:\nChoices:\na) Concatenation\nb) Garbage collection\nc) Collision\nd) Dynamic Memory Allocation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following is difficult to determine the right path length?\nChoices:\na) Skew heaps\nb) Binomial tree\nc) Leftist heap\nd) d-heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The process of accessing data stored in a serial access memory is similar to manipulating data on a __________\nChoices:\na) Heap\nb) Binary Tree\nc) Array\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is indexed skip list?\nChoices:\na) It stores width of link in place of element\nb) It stores index values\nc) Array based linked list\nd) Indexed tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Hash tree is generalization of __________\nChoices:\na) Heap\nb) Hash list\nc) BST\nd) B - tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Of the following choices, which operator has the lowest precedence?\nChoices:\na) ^\nb) +\nc) /\nd) #\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Elements in a tree can be indexed by its position under the ordering of the keys and the ordinal position of an element can be determined, both with good efficiency.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: If there are c children of the root, how many calls to the merge procedure is required to reassemble the heap?\nChoices:\na) c\nb) c+1\nc) c-1\nd) 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the maximum possible number of edges in a directed graph with no self loops having 8 vertices?\nChoices:\na) 28\nb) 64\nc) 256\nd) 56\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: LLRB maintains 1-1 correspondence with 2-3 trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: An undirected graph G with n vertices and e edges is represented by adjacency list. What is the time required to generate all the connected components?\nChoices:\na) O(n)\nb) O(e)\nc) O(e+n)\nd) O(e2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which data structure is used to maintain a dynamic forest using a link or cut operation?\nChoices:\na) Top Tree\nb) Array\nc) Linked List\nd) Stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What will be the position of 5, when a max heap is constructed on the input elements 5, 70, 45, 7, 12, 15, 13, 65, 30, 25?\nChoices:\na) 5 will be at root\nb) 5 will be at last level\nc) 5 will be at second level\nd) 5 can be anywhere in heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Can the two edges that are coming out of a node have labels of string beginning with the same character?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Let G be a weighted graph with edge weights greater than one and G' be the graph constructed by squaring the weights of edges in G. Let T and T' be the minimum spanning trees of G and G', respectively, with total weights t and t'. Which of the following statements is TRUE?\nChoices:\na) T' = T with total weight t' = t2\nb) T' = T with total weight t' < t2\nc) T' != T but total weight t' = t2\nd) None of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Who among the following provided the first online contribution of Suffix Tree?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Ukkonen\nd) Alexander Morse\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many children does a binary tree have?\nChoices:\na) 2\nb) any number of children\nc) 0 or 1 or 2\nd) 0 or 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following technique stores data separately in case of a collision?\nChoices:\na) Open addressing\nb) Double hashing\nc) Quadratic probing\nd) Chaining using a binary tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Following code snippet is the function to insert a string in a trie. Find the missing line.\nprivate void insert(String str) {\n    TrieNode node = root;\n    for (int i = 0; i < length; i++) {\n        int index = key.charAt(i) - 'a';\n        if (node.children[index] == null)\n            node.children[index] = new TrieNode();\n        __________\n    }\n    node.isEndOfWord = True;\n}\nChoices:\na) node = node.children[index];\nb) node = node.children[str.charAt(i + 1)];\nc) node = node.children[index++];\nd) node = node.children[index++];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The extra key inserted at the end of the array is called a __________\nChoices:\na) End Key\nb) Stop Key\nc) Sentinel\nd) Transposition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the resulting array after reversing arr[]={3,5,4,2}?\nChoices:\na) 2,3,5,4\nb) 4,2,3,5\nc) 5,4,2,3\nd) 2,4,5,3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which type of data structure does rope represent?\nChoices:\na) Array\nb) Linked List\nc) Queue\nd) Binary Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What will be the height of the hash tree with branching factor 2 and with 8 records?\nChoices:\na) 3\nb) 5\nc) 4\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: In a Binary Decision Diagram, 0 values are represented by a __________ line and 1 values are represented by a __________ line.\nChoices:\na) dashed, bold\nb) bold, dashed\nc) dotted, bold\nd) dotted, dashed\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Quick sort is also known as __________\nChoices:\na) Merge sort\nb) Heap sort\nc) Bubble sort\nd) None of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the value of the Jaccard index when the two sets are disjoint?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as a __________\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A complete binary min-heap is made by including each integer in [1, 1023] exactly once. The depth of a node in the heap is the length of the path from the root of the heap to that node. Thus, the root is at depth 0. The maximum depth at which integer 9 can appear is __________\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) +*AB*CD\nb) *+AB*CD\nc) **AB+CD\nd) +*BA*CD\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which one of the following is an application of Queue Data Structure?\nChoices:\na) When a resource is shared among multiple consumers.\nb) When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes\nc) Load Balancing\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is not a technique to avoid a collision?\nChoices:\na) Make the hash function appear random\nb) Use the chaining method\nc) Use uniform hashing\nd) Increasing hash table size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Elements in an array are accessed __________\nChoices:\na) randomly\nb) sequentially\nc) exponentially\nd) logarithmically\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Choose the code snippet which inserts a node to the head of the list?\nChoices\na) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nNode cur = head;\nwhile(cur.getNext() != head)\n cur = cur.getNext();\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head);\n head = temp;\n cur.setNext(temp);\n}\nsize++;\n}\nb) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nwhile(cur != head)\n cur = cur.getNext();\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head.getNext());\n cur.setNext(temp);\n}\nsize++;\n}\nc) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head.getNext());\n head = temp;\n}\nsize++;\n}\nd) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nif(head == null)\n{\n head = temp;\n head.setNext(head.getNext());\n}\nelse\n{\n temp.setNext(head.getNext());\n head = temp;\n}\nsize++;\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A strictly binary tree with 10 leaves\nChoices:\na) cannot have more than 19 nodes\nb) has exactly 19 nodes\nc) has exactly 17 nodes\nd) has exactly 20 nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following techniques offer better cache performance?\nChoices:\na) Quadratic probing\nb) Linear probing\nc) Double hashing\nd) Rehashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following data structures can be used for parentheses matching?\nChoices:\na) n-ary tree\nb) queue\nc) priority queue\nd) stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Convert the following Infix expression to Postfix form using a stack.\nx + y * z + (p * q + r) * s, Follow usual precedence rule and assume that the expression is legal.\nChoices:\na) xyz*+pq*r+s*+\nb) xyz*+pq*r+s+*\nc) xyz+*pq*r+s*+\nd) xyzp+**qr+s*+\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Array is divided into two parts in __________\nChoices:\na) Hashed Array Tree\nb) Geometric Array\nc) Bounded-size dynamic array\nd) Sparse Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Elements in an array are accessed __________\nChoices:\na) randomly\nb) sequentially\nc) exponentially\nd) logarithmically\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: In balancing parentheses algorithm, the string is read from?\nChoices:\na) right to left\nb) left to right\nc) center to right\nd) center to left\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The pre-order and post order traversal of a Binary Tree generates the same output. The tree can have maximum __________\nChoices:\na) Three nodes\nb) Two nodes\nc) One node\nd) Any number of nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: The column sum in an incidence matrix for a directed graph having no self loop is __________\nChoices:\na) 0\nb) 1\nc) 2\nd) equal to the number of edges\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In postorder traversal of binary tree right subtree is traversed before visiting root.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many bits are needed to specify the single permutation by min-wise independent family?\nChoices:\na) O (log n!)\nb) O (n!)\nc) \u03a9 (n^2)\nd) \u03a9 (n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following array element will return the top-of-the-stack-element for a stack of size N elements (capacity of stack > N)?\nChoices:\na) S[N-1]\nb) S[N]\nc) S[N-2]\nd) S[N+1]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which one of the following array elements represents a binary min heap?\nChoices:\na) 12 10 8 25 14 17\nb) 8 10 12 25 14 17\nc) 25 17 14 12 10 8\nd) 14 17 25 10 12 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Auto complete and spell checkers can be implemented efficiently using the trie.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What data structure is used when converting an infix notation to prefix notation?\nChoices:\na) Stack\nb) Queue\nc) B-Trees\nd) Linked-list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How will you implement dynamic arrays in Java?\nChoices:\na) Set\nb) Map\nc) HashMap\nd) List\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the advantage of a hash table as a data structure?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the run time of finding the nearest neighbour in a k-d tree?\nChoices:\na) O(2+ log N)\nb) O( log N)\nc) O(2^d log N)\nd) O( N log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In order to get the contents of a Binary search tree in ascending order, one has to traverse it in __________\nChoices:\na) pre-order\nb) in-order\nc) post order\nd) not possible\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: For the given conditions, which of the following is in the correct order of increasing space requirement?\ni) Undirected, no weight\nii) Directed, no weight\niii) Directed, weighted\niv) Undirected, weighted\nChoices:\na) ii iii i iv\nb) i iii ii iv\nc) iv iii i ii\nd) i ii iii iv\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which data structure represents a waiting line and limits insertions to be made at the back of the data structure and limits removals to be made from the front?\nChoices:\na) Stack\nb) Queue\nc) Binary tree\nd) Linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which parsing approach is followed by syntax tree?\nChoices:\na) Top-down parsing\nb) Bottom-up parsing\nc) Predictive parsing\nd) Shift reduce parsing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: A queue follows __________\nChoices:\na) FIFO (First In First Out) principle\nb) LIFO (Last In First Out) principle\nc) Ordered array\nd) Linear tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Arbitrary expressions can be used while declaring variable-length arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: In quadratic probing, if the table size is prime, a new element cannot be inserted if the table is half full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: To partition an unsorted list, a pivot element is used in __________\nChoices:\na) Merge Sort\nb) Quick Sort\nc) Insertion Sort\nd) Selection Sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Determine the number of vertices for the given Graph or Multigraph?\nG is a 4-regular Graph having 12 edges.\nChoices:\na) 3\nb) 6\nc) 4\nd) Information given is insufficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which type of binary tree does rope require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Full\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many child nodes does each node of K-ary Tree contain?\nChoices:\na) 2\nb) 3\nc) more than k\nd) at most k\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A queue data-structure can be used for __________\nChoices:\na) expression parsing\nb) recursion\nc) resource allocation\nd) all of these\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following is the application of minimum ternary heap?\nChoices:\na) Prim's Algorithm\nb) Euclid's Algorithm\nc) Eight Queen Puzzle\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Let A be a square matrix of size n x n. Consider the following program. What is the expected output?\nChoices:\na) The matrix A itself\nb) Transpose of matrix A\nc) Adding 100 to the upper diagonal elements and subtracting 100 from diagonal elements of A\nd) Inverse of matrix A\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In binary heap, whenever the root is removed, the rightmost element of last level is replaced by the root. Why?\nChoices:\na) It is the easiest possible way.\nb) To make sure that it is still complete binary tree.\nc) Because left and right subtree might be missing.\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int left, int right) \n{ \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n} \n \nvoid func(int arr[], int d, int n) \n{ \n func1(arr, 0, d-1); \n func1(arr, d, n-1); \n func1(arr, 0, n-1); \n} \n \nvoid printArray(int arr[], int size) \n{ \n for (int i = 0; i < size; i++) \n cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 2, 3, 4, 5}; \n int n = sizeof(arr)/sizeof(arr[0]); \n int d = 2; \n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\nChoices:\na) 3 2 1 4 5\nb) 3 4 5 1 2\nc) 5 4 3 2 1\nd) error\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Consider you have a stack whose elements in it are as follows.\n5 4 3 2 << top\nWhere the top element is 2.\nYou need to get the following stack\n6 5 4 3 2 << top\nThe operations that needed to be performed are (You can perform only push and pop):\nChoices:\na) Push(pop()), push(6), push(pop())\nb) Push(pop()), push(6)\nc) Push(pop()), push(pop()), push(6)\nd) Push(6)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: In a hash table of size 10, where is element 7 placed?\nChoices:\na) 6\nb) 7\nc) 17\nd) 16\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the auxiliary space requirement of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n} \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of ways in which the numbers 1 to 7 can be inserted in an empty binary search tree to result in height 6 is:\nChoices:\na) 2\nb) 4\nc) 64\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Given the postorder: 8, 9, 6, 7, 4, 5, 2, 3, 1 and inorder: 8, 6, 9, 4, 7, 2, 5, 1, 3, what is the height of the binary tree?\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: If a stack S contains the integers 2, -3, 2, -1, 2 in order from bottom to top, what is f(S)?\nChoices:\na) 6\nb) 4\nc) 3\nd) 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Trie is also known as __________\nChoices:\na) Digital Tree\nb) Treap\nc) Binomial Tree\nd) 2-3 Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: A node can have a minimum of one child.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How will you remove a left horizontal link in an AA-tree?\nChoices:\na) by performing right rotation\nb) by performing left rotation\nc) by deleting both the elements\nd) by inserting a new element\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following trait of a hash function is most desirable?\nChoices:\na) it should cause less collisions\nb) it should cause more collisions\nc) it should occupy less space\nd) it should be easy to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a B+ tree, both the internal nodes and the leaves have keys.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: In binary search, average number of comparisons required for searching an element in a list of n numbers is:\nChoices:\na) log2 n\nb) n / 2\nc) n\nd) n - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: How much time does a heap take to Find Min/Max value?\nChoices:\na) O(logN)\nb) O(N)\nc) O(1)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a dynamic array?\nChoices:\na) A variable size data structure\nb) An array which is created at runtime\nc) The memory to the array is allocated at runtime\nd) An array which is reallocated every time whenever new elements have to be added\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Where does the GNU C compiler allocate memory for variable-length arrays?\nChoices:\na) Tree\nb) Stack\nc) Linked List\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Select the function which performs insertion at the front end of the dequeue?\nChoices:\na) Insert at the front end of the dequeue\nb) Insert at the rear end of the dequeue\nc) Fetch the element at the rear end of the dequeue\nd) Fetch the element at the front end of the dequeue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What should be done when an opening parentheses is read in a balancing symbols algorithm?\nChoices:\na) push it onto the stack\nb) throw an error\nc) ignore the parentheses\nd) pop the stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: For an undirected graph G with n vertices and e edges, the sum of the degrees of each vertex is __________\nChoices:\na) ne\nb) 2n\nc) 2e\nd) en\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Express -15 as a 6-bit signed binary number.\nChoices:\na) 001111\nb) 101111\nc) 101110\nd) 001110\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the time required to locate the occurrences of a pattern P of length m in a string of length n using a suffix array?\nChoices:\na) O(nm)\nb) O(n^2)\nc) O(mnlogn)\nd) O(mlogn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Reverse Polish Notation is the reverse of Polish Notation.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What are the disadvantages in implementing buddy system algorithm for free lists?\nChoices:\na) internal fragmentation\nb) it takes so much space\nc) we no more have the hole lists in order of memory address, so it is difficult to detect if 2 holes remain adjacent in memory and shall be merged into one hole\nd) both a and c are correct\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following types of expressions do not require precedence rules for evaluation?\nChoices:\na) fully parenthesised infix expression\nb) postfix expression\nc) partially parenthesised infix expression\nd) more than one of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Using what formula can a parent node be located in an array?\nChoices:\na) (i+1)/2\nb) (i-1)/2\nc) i/2\nd) 2i/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following data structures is preferred to have lesser search time when the list size is small?\nChoices:\na) search tree\nb) sorted list\nc) self organizing list\nd) linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: If the address of A[1][1] and A[2][1] are 1000 and 1010 respectively and each element occupies 2 bytes, then the array has been stored in __________ order.\nChoices:\na) row major\nb) column major\nc) matrix major\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In linked list implementation of a queue, from where is the item deleted?\nChoices:\na) At the head of link list\nb) At the centre position in the link list\nc) At the tail of the link list\nd) Node before the tail\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: On which data structure is a d-ary heap based?\nChoices:\na) stack\nb) queue\nc) linked list\nd) priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: General ordered tree can be encoded into binary trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array [89, 19, 50, 17, 12, 15, 2, 5, 7, 11, 6, 9, 100] into a max-heap is:\nChoices:\na) 4\nb) 5\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: We have a binary heap on n elements and wish to insert n more elements. What is the total time required?\nChoices:\na) \u03b8(logn)\nb) \u03b8(n)\nc) \u03b8(nlogn)\nd) \u03b8(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Circular queue is also called:\nChoices:\na) Ring Buffer\nb) Rectangular Buffer\nc) Square Buffer\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the space complexity of a treap algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the advantage of the multiplication method?\nChoices:\na) only 2 steps are involved\nb) using constant\nc) value of m not critical\nd) simple multiplication\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Bigger the query rectangle the better is the query efficiency.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many strategies are followed to solve a dynamic equivalence problem?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the upper bound for a tango tree if k is the number of interleaves?\nChoices:\na) k+2 O(log(log n))\nb) k O(log n)\nc) k^2 O(log n)\nd) k+1 O(log(log n))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The actual pairing heap implementation uses the right child and left child representation.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A node of the weight balanced tree has:\nChoices:\na) key, left and right pointers, size\nb) key, value\nc) key, size\nd) key\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Do all the nodes have at least two children in a suffix tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of edges from the root to a node is called __________ of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What do the other nodes of an expression tree (except leaves) contain?\nChoices:\na) only operands\nb) only operators\nc) both operands and operators\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Do the incidence matrix and adjacency matrix of a graph always have the same dimensions?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the postfix form of the following prefix expression -A/B*C$DE?\nChoices:\na) ABCDE$*/-\nb) A-BCDE$*/\nc) ABC$ED*/\nd) A-BCDE$*/\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array\n{\n\tpublic static void main(String args[])\n\t{\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[2]);\n\t\tSystem.out.println(arr[4]);\n\t}\n}\nChoices:\na) 4 and 2\nb) 2 and 4\nc) 5 and 3\nd) 3 and 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Skip lists are similar to which of the following data structures?\nChoices:\na) stack\nb) heap\nc) binary search tree\nd) balanced binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A sorting technique which uses the binary tree concept such that label of any node is larger than all the labels in the subtrees is called:\nChoices:\na) Selection sort\nb) Insertion sort\nc) Heap sort\nd) Quick sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which is the most appropriate data structure for reversing a word?\nChoices:\na) queue\nb) stack\nc) tree\nd) graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is an application of Red-black trees and why?\nChoices:\na) used to store strings efficiently\nb) used to store integers efficiently\nc) can be used in process schedulers, maps, sets\nd) for efficient sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following points is/are not True about Linked List data structure when compared with an array?\nChoices:\na) Random access is not allowed in a typical implementation of Linked Lists\nb) Access of elements in linked list takes less time than compared to arrays\nc) Arrays have better cache locality that can make them better in terms of performance\nd) It is easy to insert and delete elements in Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which operation finds the value associated with a given key?\nChoices:\na) Insert\nb) Find Next\nc) Look up\nd) Delete\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Is tango tree represented as a tree of trees?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many bits would a succinct binary tree occupy?\nChoices:\na) n + o(n)\nb) 2n + o(n)\nc) n/2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following statements is True?\nChoices:\na) A simple graph with 10 vertices can have min degree 0 and max degree 9\nb) A multigraph with 10 vertices can have min degree 0 and max degree 9\nc) Both multigraph and simple graph can satisfy the condition\nd) None of the mentioned\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: How many basic operations can be performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array\n{\n\tpublic static void main(String args[])\n\t{\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[2]);\n\t\tSystem.out.println(arr[4]);\n\t}\n}\nChoices:\na) 3 and 5\nb) 5 and 3\nc) 2 and 4\nd) 4 and 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the value of m' if the value of m is 19?\nChoices:\na) 11\nb) 18\nc) 17\nd) 15\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Comparing the speed of execution of Red-Black trees and AA-trees, which one has the faster search time?\nChoices:\na) AA-tree\nb) Red-Black tree\nc) Both have an equal search time\nd) It depends\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?\nChoices:\na) Queue\nb) Circular queue\nc) Dequeue\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What does the number of inversions in an array indicate?\nChoices:\na) mean value of the elements of array\nb) measure of how close or far the array is from being sorted\nc) the distribution of values in the array\nd) median value of the elements of array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Hash tree is used in effective data verification in distributed systems.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the auxiliary space complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int n) \n{ \n int k = arr[0], i; \n for (i = 0; i < n - 1; i++) \n  arr[i] = arr[i + 1]; \n \n arr[i] = k; \n} \n \nvoid func(int arr[], int d, int n) \n{ \n for (int i = 0; i < d; i++) \n  func1(arr, n); \n} \n \nvoid printArray(int arr[], int n) \n{ \n for (int i = 0; i < n; i++) \n  cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = { 1, 2, 3, 4, 5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n \n    int d = 3;\n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: For which type of graph will the given program not run infinitely?\nChoices:\na) All Fully Connected Graphs\nb) All Empty Graphs\nc) All Bipartite Graphs\nd) All simple graphs\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which one of the below is not a divide and conquer approach?\nChoices:\na) Quick Sort\nb) Merge Sort\nc) Shell Sort\nd) Heap Sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is not the type of queue?\nChoices:\na) Ordinary queue\nb) Single ended queue\nc) Circular queue\nd) Priority queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A full binary tree with 'n' non-leaf nodes contains __________\nChoices:\na) log2 n nodes\nb) n+1 nodes\nc) 2n nodes\nd) 2n+1 nodes\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which data structure is needed to convert infix notation to postfix notation?\nChoices:\na) Branch\nb) Tree\nc) Queue\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many comparisons will occur while performing a delete-min operation?\nChoices:\na) d\nb) d-1\nc) d+1\nd) 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a binomial heap the root value is greater than left child and less than right child.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a ternary heap?\nChoices:\na) An array with three elements\nb) Linked list with three elements\nc) Tree with three children\nd) Heap with all nodes having three children\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is not an advantage of trees?\nChoices:\na) Hierarchical structure\nb) Faster search\nc) Router algorithms\nd) Undo/Redo operations in a notepad\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: e = 2n+i\nChoices:\na) e = i+n\nb) e = i+2n or 2n+i\nc) e = 2i+n\nd) e = n-i\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Size of an And Inverter Graph is the number of __________ gates and the number of logic levels is the number of __________ gates on the __________ path from a primary input to a primary output.\nChoices:\na) AND, AND, average\nb) AND, OR, longest\nc) OR, OR, shortest\nd) AND, AND, longest\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In Linked List implementation, a node carries information regarding __________\nChoices:\na) Data\nb) Link\nc) Data and Link\nd) Node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: An adjacency matrix representation of a graph cannot contain information of:\nChoices:\na) nodes\nb) edges\nc) direction of edges\nd) parallel edges\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Given the intervals [(1, 4), (3, 6), (5, 7), (8, 9)], what would be the output of a job scheduling algorithm?\nChoices:\na) [(1, 4), (5, 7), (8, 9)]\nb) [(1, 4), (3, 6), (8, 9)]\nc) [(1, 4), (3, 6)]\nd) [(1, 4), (3, 6), (5, 7)]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: For the adjacency matrix of a directed graph the row sum is the __________ degree and the column sum is the __________ degree.\nChoices:\na) in, out\nb) out, in\nc) in, total\nd) total, out\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the average running time of a treap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The concatenation of two lists is to be performed in O(1) time. Which of the following implementations of a list should be used?\nChoices:\na) singly linked list\nb) doubly linked list\nc) circular doubly linked list\nd) array implementation of lists\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the output of the following code?\ncout << \"GFG!\"[0] <<\" \"<<\"GFG!\"[3];\nChoices:\na) Error\nb) G !\nc) F !\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: How many stacks are required for applying evaluation of infix expression algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following is a HyperGraph, where V is the set of vertices, E is the set of edges?\nChoices:\na) V = {v1, v2, v3} E = {e1, e2} = {{v2, v3}, {v1, v3}}\nb) V = {v1, v2} E = {e1} = {{v1, v2}}\nc) V = {v1, v2, v3} E = {e1, e2, e3} = {{v2, v3}, {v3, v1}, {v2, v1}}\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which type of tree does Van Emde Boas require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Non-Binary\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Two or more And Inverter Graphs can represent the same function.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the table size when the value of p is 7 in the multiplication method of creating hash functions?\nChoices:\na) 14\nb) 128\nc) 49\nd) 127\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is the correct function definition for linear probing?\nChoices:\na) F(i)= 1\nb) F(i)=i\nc) F(i)=i^2\nd) F(i)=i+1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Who developed the concept of tango tree?\nChoices:\na) Erik Demaine\nb) Mihai Patrascu\nc) John Iacono\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What technique is used in the Transpose method?\nChoices:\na) searched node is swapped with its predecessor\nb) node with highest access count is moved to head of the list\nc) searched node is swapped with the head of list\nd) searched nodes are rearranged based on proximity to the head node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the efficiency of merge used in leftist heaps?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(M log N)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The leaves of an expression tree always contain?\nChoices:\na) operators\nb) operands\nc) null\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: The case in which a key other than the desired one is kept at the identified location is called?\nChoices:\na) Hashing\nb) Collision\nc) Chaining\nd) Open addressing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What are the applications of weight balanced tree?\nChoices:\na) dynamic sets, dictionaries, sequences, maps\nb) heaps\nc) sorting\nd) storing strings\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the parent for a node 'w' of a complete binary tree in an array representation when w is not 0?\nChoices:\na) floor((w-1)/2)\nb) ceil((w-1)/2)\nc) (w-1)/2\nd) w/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Who invented d-ary heap?\nChoices:\na) Carl Rick\nb) Alan Turing\nc) Donald Johnson\nd) Euclid\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is a data structure?\nChoices:\na) A programming language\nb) A collection of algorithms\nc) A way to store and organize data\nd) A type of computer hardware\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A doubly linked list is declared as:\nstruct Node {\n  int Value;\n  struct Node *Fwd;\n  struct Node *Bwd;\n};\nChoices:\na) X->Bwd->Fwd = X->Fwd; X->Fwd->Bwd = X->Bwd ;\nb) X->Bwd.Fwd = X->Fwd ; X.Fwd->Bwd = X->Bwd ;\nc) X.Bwd->Fwd = X.Bwd ; X->Fwd.Bwd = X.Bwd ;\nd) X->Bwd->Fwd = X->Bwd ; X->Fwd->Bwd = X->Fwd;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The concatenation of two lists can be performed in O(1) time. Which of the following variation of the linked list can be used?\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular doubly linked list\nd) Array implementation of list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a file with 1 million records and tree order 100, what is the max number of nodes accessed in a B+ tree index?\nChoices:\na) 5\nb) 4\nc) 3\nd) 10\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: The maximum degree of any vertex in a simple graph with n vertices is:\nChoices:\na) n-1\nb) n+1\nc) 2n-1\nd) n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Select the code snippet which performs in-order traversal.\nChoices:\na) \npublic void inorder(Tree root)\n{\n System.out.println(root.data);\n inorder(root.left);\n inorder(root.right);\n}\nb) \npublic void inorder(Tree root)\n{\n inorder(root.left);\n System.out.println(root.data);\n inorder(root.right);\n}\nc) \npublic void inorder(Tree root)\n{\n System.out.println(root.data);\n inorder(root.right);\n inorder(root.left);\n}\nd) \npublic void inorder(Tree root)\n{\n inorder(root.right);\n inorder(root.left);\n System.out.println(root.data);\n}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the advantage of using a doubly linked list for chaining over singly linked list?\nChoices:\na) it takes less memory\nb) it is easy to implement\nc) it makes the process of insertion and deletion faster\nd) it causes less collisions\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 1?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NOR\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Using division method, in a given hash table of size 157, the key of value 172 will be placed at position __________\nChoices:\na) 19\nb) 72\nc) 15\nd) 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which property makes top tree a binary tree?\nChoices:\na) Nodes as Cluster\nb) Leaves as Edges\nc) Root is Tree Itself\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A binary tree is a rooted tree but not an ordered tree.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Are the below statements True about skip lists?\n1. Find closest element in O(log n)\n2. Count elements in range in O(log n)\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which tree provides a linear time solution for substring operation?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: One can convert a binary tree into its mirror image by traversing it in:\nChoices:\na) in-order\nb) pre-order\nc) post-order\nd) any order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What are the dimensions of an incidence matrix?\nChoices:\na) Number of edges * number of edges\nb) Number of edges * number of vertices\nc) Number of vertices * number of vertices\nd) Number of edges * ((1/2) * number of vertices)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is a complete binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) Completely filled tree, bottom filled right to left\nc) Completely filled tree, bottom filled left to right\nd) A tree in which all nodes have degree 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: If the tree is not a complete binary tree, what changes can be made for easy access of children of a node in the array?\nChoices:\na) every node stores data saying which of its children exist in the array\nb) no need of any changes, continue with 2w and 2w+1\nc) keep a separate table telling children of a node\nd) use another array parallel to the tree array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: With what data structure can a priority queue be implemented?\nChoices:\na) Array\nb) List\nc) Heap\nd) Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of these is not an application of a linked list?\nChoices:\na) To implement file systems\nb) For separate chaining in hash-tables\nc) To implement non-binary trees\nd) Random Access of elements\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which application of stack is used to ensure that the pair of parentheses is properly nested?\nChoices:\na) Balancing symbols\nb) Reversing a stack\nc) Conversion of an infix to postfix expression\nd) Conversion of an infix to prefix expression\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Is Treap a randomized tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the value of the sum of the minimum in-degree and maximum out-degree of a Directed Acyclic Graph?\nChoices:\na) Depends on the graph\nb) Will always be zero\nc) Will always be greater than zero\nd) May be zero or greater than zero\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Maximum number of nodes in a binary tree with height k (root at height 0) is:\nChoices:\na) 2^k - 1\nb) 2^(k+1) - 1\nc) 2^(k-1) + 1\nd) 2^k + 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the probability of a collision when hashing n keys into a hash table of size m?\nChoices:\na) O(1/n)\nb) O(n/m)\nc) O(log n)\nd) O(m/n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the space used by programs when we use HashMap in our program?\nChoices:\na) O(1)\nb) O(Log N)\nc) O(N)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of these operations have the same complexities?\nChoices:\na) Insertion, find_min\nb) Find_min, union\nc) Union, Insertion\nd) Deletion, Find_max\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which one of the below mentioned is a linear data structure?\nChoices:\na) Queue\nb) Stack\nc) Arrays\nd) All of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: If BFS starts at root and visits vertex t at distance 4, what's the max value of t in the BFS traversal?\nChoices:\na) 15\nb) 16\nc) 31\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following properties are obeyed by all three tree traversals?\nChoices:\na) Left subtrees are visited before right subtrees\nb) Right subtrees are visited before left subtrees\nc) Root node is visited before left subtree\nd) Root node is visited before right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which process forms the randomized binary search tree?\nChoices:\na) Stochastic Process\nb) Branching Process\nc) Diffusion Process\nd) Aggregation Process\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of these algorithmic approaches tries to achieve a localized optimum solution?\nChoices:\na) Greedy approach\nb) Divide and conquer approach\nc) Dynamic approach\nd) All of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How does implicit free lists (garbage collection) work when adding memory to the free list?\nChoices:\na) Whichever comes last will be added to free list\nb) Whichever comes first will be added to free list\nc) Certain blocks can be freed if there are no pointers to them\nd) Makes a probabilistic guess\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Both dynamic array and dynamically memory allocated array are the same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Re-balancing of AVL tree costs __________\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: The average stack-life of an element in a stack where push and pop take X seconds, and there's Y seconds between operations, is:\nChoices:\na) n(X + Y)\nb) 3Y + 2X\nc) n(X + Y) - X\nd) Y + 2X\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following statements is incorrect?\nChoices:\na) Postfix operators use value to their right\nb) Postfix operators use value to their left\nc) Prefix operators use value to their right\nd) In postfix expression, operands are followed by operators\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Choose the option with functions having same complexity for a Fibonacci heap:\nChoices:\na) Insertion, Union\nb) Insertion, Deletion\nc) extract_min, insertion\nd) Union, delete\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the maximum number of nodes in a binary tree of height h?\nChoices:\na) 2^h - 1\nb) 2^h\nc) 2^(h+1) - 1\nd) 2^(h+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following techniques stores data in the hash table itself in case of a collision?\nChoices:\na) Open addressing\nb) Chaining using linked list\nc) Chaining using doubly linked list\nd) Chaining using binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Which of these methods of class String is used to obtain the length of the String object?\nChoices:\na) get()\nb) Sizeof()\nc) lengthof()\nd) length()\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the average number of key comparisons in a successful sequential search in a list of length n?\nChoices:\na) log n\nb) (n - 1)/2\nc) n/2\nd) (n + 1)/2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Possible number of labeled simple Directed, Pseudo, and Multigraphs with 2 vertices?\nChoices:\na) 3, Infinite, 4\nb) 4, 3, Infinite\nc) 4, Infinite, Infinite\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which one of the following hash functions distributes keys most uniformly over 10 buckets for i from 0 to 2020?\nChoices:\na) h(i) = (12 * i) mod 10\nb) h(i) = (11 * i^2) mod 10\nc) h(i) = i^3 mod 10\nd) h(i) = i^2 mod 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: In a Binary Decision Diagram, how many types of terminal nodes exist?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the advantage of a hash table as a data structure?\nChoices:\na) easy to implement\nb) faster access of data\nc) exhibit good locality of reference\nd) very efficient for fewer entries\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What are the application(s) of linked list?\nChoices:\na) Implementation of stacks and queues.\nb) Maintaining a directory of names\nc) None of the above\nd) Both a and b\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is defined as the ratio of total elements of intersection and union of two sets?\nChoices:\na) Rope Tree\nb) Jaccard Coefficient Index\nc) Tango Tree\nd) MinHash Coefficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What does Hamming weight/population count mean in bit arrays?\nChoices:\na) Finding the number of 1 bits in a bit array\nb) Finding the number of 0 bits in a bit array\nc) Finding the sum of bits in a bit array\nd) Finding the average number of 1s and 0s\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: If a simple graph G has n vertices and m edges, how many edges are in its complement G'?\nChoices:\na) (n^2 - n - 2m)/2\nb) (n^2 + n + 2m)/2\nc) n(n-1)/2\n d) (n^2 - n + 2m)/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: How many of the following statements are correct?\ni) All cyclic graphs are complete graphs.\nii) All complete graphs are cyclic graphs.\niii) All paths are bipartite.\niv) All cyclic graphs are bipartite.\nv) There are cyclic graphs which are complete.\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What can be the value of m in the division method?\nChoices:\na) Any prime number\nb) Any even number\nc) 2^p - 1\nd) 2^p\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following concepts make extensive use of arrays?\nChoices:\na) Binary trees\nb) Scheduling of processes\nc) Caching\nd) Spatial locality\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A B-tree of order 4 and of height 3 will have a maximum of __________ keys.\nChoices:\na) 255\nb) 63\nc) 127\nd) 188\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: In a simple graph, the number of edges is equal to twice the sum of the degrees of the vertices.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The growth factor of ArrayList in Java is __________\nChoices:\na) 1\nb) 1.5\nc) 2\nd) 0\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a binary heap with n elements stored from index 1 to n, the parent of element at index i is:\nChoices:\na) i - 1\nb) floor(i/2)\nc) ceiling(i/2)\nd) (i + 1)/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Consider the stack:\n| 5 |\n| 4 |\n| 3 |\n| 2 |\nIf '*' is encountered, what operation is performed?\nChoices:\na) 5*4=20 is pushed\nb) * is pushed\nc) 2*3=6 is pushed\nd) * is ignored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the speciality of cartesian sorting?\nChoices:\na) sorts partially sorted data quickly\nb) uses cartesian product\nc) sorts in less than O(log n)\nd) it is a self-balancing tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the fundamental operation performed in skew heaps?\nChoices:\na) intersection\nb) difference\nc) merging\nd) sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following variant of a hash table has the best cache performance?\nChoices:\na) hash table using a linked list for separate chaining\nb) hash table using binary search tree for separate chaining\nc) hash table using open addressing\nd) hash table using a doubly linked list for separate chaining\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: After which city is tango tree named?\nChoices:\na) Vatican City\nb) Buenos Aires\nc) New York\nd) California\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Several other operations like union, set difference, and intersection can be done in treaps.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Would using arrays and swapping elements instead of XOR linked lists be more efficient?\nChoices:\na) no not all\nb) yes arrays would have been better than XOR lists\nc) both would be same in efficiency\nd) can't say\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Minimum number of queues to implement stack is __________\nChoices:\na) 3\nb) 4\nc) 1\nd) 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: A relation R on a set S is defined such that x R y if and only if y R x. This is an example of?\nChoices:\na) reflexive relation\nb) symmetric relation\nc) transitive relation\nd) invalid relation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: For a binary tree, is the first node visited in in-order and post-order traversal the same?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the run time efficiency of delete-min operation?\nChoices:\na) O(log N)\nb) O(logd N)\nc) O(d logd N)\nd) O(d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following statements are not correct with respect to Singly and Doubly Linked Lists?\nChoices:\na) Insertion/deletion is O(n) in SLL and O(1) in DLL\nb) SLL uses less memory per node than DLL\nc) DLL allows better backward traversal than SLL\nd) Number of node fields in SLL is more than DLL\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Interpret the string 'pt' as an integer in suitable radix notation.\nChoices:\na) 14963\nb) 14392\nc) 12784\nd) 14452\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is a difference between vectors and arrays?\nChoices:\na) Access to any element using [] operator\nb) Stored in contiguous memory blocks\nc) The ability to change size dynamically\nd) Efficient direct access to any element\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following arrays are used in the implementation of the list data type in Python?\nChoices:\na) Bit array\nb) Dynamic arrays\nc) Sparse arrays\nd) Parallel arrays\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In the following min-heap function, what is the missing condition?\nChoices:\na) if A[m] > A[parent(m)] then swap A[m], A[parent(m)]\nb) if A[m] > A[parent(m)] then swap A[i], A[parent(m)]\nc) if A[m] < A[parent(m)] then swap A[m], A[parent(m)]\nd) if A[m] > A[parent(m)] then swap A[i], A[parent(m)]\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What data structure would you most likely see in a non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked list\nc) Queue\nd) Trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following traversal pairs can uniquely build a binary tree?\nChoices:\na) post-order and pre-order\nb) post-order and in-order\nc) post-order and level-order\nd) level-order and preorder\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the location of a parent node for any arbitrary node i?\nChoices:\na) (i/2) position\nb) (i+1)/2 position\nc) floor(i/2) position\nd) ceil(i/2) position\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Two directed graphs G and H are isomorphic if and only if A = PBP^-1, where A and B are their adjacency matrices.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: 2-3 tree is a specific form of __________\nChoices:\na) B-tree\nb) B+ tree\nc) AVL tree\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: On which abstract data type does van Emde Boas tree perform operations?\nChoices:\na) Tree\nb) Linked List\nc) Heap\nd) Associative Array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Several kinds of queries are possible on a k-d tree, one of which is?\nChoices:\na) partial queries\nb) range queries\nc) neighbor queries\nd) search queries\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What is the set of stack operations to get the output \"cat\"?\nChoices:\na) push(t), push(a), push(c), pop(), pop(), pop()\nb) push(c), pop(), push(a), pop(), push(t), pop()\nc) pop(c), pop(a), pop(t)\nd) push(c), push(a), pop(t)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What can be the maximum depth of a trie with n strings, each of length up to m?\nChoices:\na) log2n\nb) log2m\nc) n\nd) m\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What operations can be performed on a weight-balanced tree?\nChoices:\na) all basic operations and set intersection, set union, subset test\nb) only basic operations\nc) only set operations\nd) only insertion and deletion\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Recursion is memory-intensive because:\nChoices:\na) Recursive functions declare many local variables.\nb) Previous calls remain open and occupy space on the stack.\nc) Many copies of function code are created.\nd) It requires large data values.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: The number of undirected graphs with self-loops (no multi-edges) and n vertices is:\nChoices:\na) 2^((n(n-1))/2)\nb) 2^((n(n+1))/2)\nc) 2^(((n-1)^2)/2)\nd) 2^((n*n)/2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the maximum number of edges in a simple directed acyclic graph with 7 vertices?\nChoices:\na) 21\nb) 7\nc) 6\nd) 49\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Assume +, -, *, / are usual arithmetic operators. + has highest precedence and is right-associative, others are left-associative. What is the output of the expression 23 * 3 - 6 + 11 - 2 * 8 / 4?\nChoices:\na) 110\nb) 100\nc) 130\nd) 120\nAnswer: 110"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which special balanced binary search tree is used to store the nodes of an auxiliary tree?\nChoices:\na) Red - Black Tree\nb) Red - Brown Tree\nc) Red - Yellow Tree\nd) Red - Tango Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a sparse array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) An array in which memory is allocated at run time\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What does the following function check for?\nif (s->top == -1)\n    return 1;\nelse\n    return 0;\nChoices:\na) Full stack\nb) Invalid index\nc) Empty stack\nd) Infinite stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: d-heap is shallower than a binary heap.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What type of expression places the operator after its operands?\nChoices:\na) Infix Expression\nb) Prefix Expression\nc) Postfix Expression\nd) Both Prefix and Postfix Expressions\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What does 'stack underflow' refer to?\nChoices:\na) Accessing an item from an undefined stack\nb) Adding items to a full stack\nc) Removing items from an empty stack\nd) Index out of bounds exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What essential condition must be checked before deleting from a linked queue?\nChoices:\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Given preorder = [15, 10, 12, 11, 20, 18, 16, 19], what is the postorder traversal?\nChoices:\na) 10, 11, 12, 15, 16, 18, 19, 20\nb) 11, 12, 10, 16, 19, 18, 20, 15\nc) 20, 19, 18, 16, 15, 12, 11, 10\nd) 19, 16, 18, 20, 11, 12, 10, 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many types of insertion can be performed in a binary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the minimum number of multiplications and additions required to evaluate the polynomial P = 4x^3 + 3x^2 - 15x + 45?\nChoices:\na) 6 & 3\nb) 4 & 2\nc) 3 & 3\nd) 8 & 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following is not an application of a stack?\nChoices:\na) Data transfer between two asynchronous processes\nb) Compiler syntax analyzer\nc) Tracking local variables at runtime\nd) Parentheses balancing program\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: How many steps are involved in creating a hash function using the multiplication method?\nChoices:\na) 1\nb) 4\nc) 3\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Parentheses are simply ignored in infix to postfix conversion.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A treap is a combination of a tree and a heap.\nChoices:\na) False\nb) True\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: How many properties does a leftist heap support?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the time complexity for operations in a balanced binary tree?\nChoices:\na) O(n^0.5)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is the correct way to declare a multidimensional array in Java?\nChoices:\na) int[] arr;\nb) int arr[[]];\nc) int[][] arr;\nd) int[[]] arr;\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What are the two different operations done in an AA-Tree?\nChoices:\na) shift and color\nb) skew and split\nc) zig and zag\nd) enqueue and dequeue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: The deque which stores elements in strictly increasing or strictly decreasing order is called __________.\nChoices:\na) Priority Queue\nb) Double-ended Queue\nc) Monotonic Deque\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the number of nodes of rank r in a union-find data structure?\nChoices:\na) N\nb) N/2\nc) N/2^r\nd) Nr\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In a linked list, each node contains at least two fields. One is data. What is the other?\nChoices:\na) Pointer to character\nb) Pointer to integer\nc) Pointer to node\nd) Node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Reducing search space by eliminating irrelevant trees is known as?\nChoices:\na) pruning\nb) partial results\nc) freeing space\nd) traversing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Given preorder traversal: 30, 20, 10, 15, 25, 23, 39, 35, 42. What is the postorder traversal?\nChoices:\na) 10, 20, 15, 23, 25, 35, 42, 39, 30\nb) 15, 10, 25, 23, 20, 42, 35, 39, 30\nc) 15, 20, 10, 23, 25, 42, 35, 39, 30\nd) 15, 10, 23, 25, 20, 35, 42, 39, 30\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: In a basic array implementation of a queue, which index is typically used for the front?\nChoices:\na) q[0]\nb) q[1]\nc) q[9]\nd) q[10]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the necessary condition for a tree to be a heap?\nChoices:\na) Only complete tree\nb) Only heap property\nc) Complete tree and heap property\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What data structure is commonly used in non-recursive implementations of recursive algorithms?\nChoices:\na) Linked List\nb) Stack\nc) Queue\nd) Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is a disadvantage of implementing a tree using arrays?\nChoices:\na) Difficult to access children\nb) Difficult to find parent\nc) Maximum nodes must be known in advance\nd) Hard to implement\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a full binary tree with L leaves, what is the total number of nodes N?\nChoices:\na) 2*L\nb) L + 1\nc) L - 1\nd) 2*L - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Given a directed graph with equal-weight edges, which algorithm efficiently finds the shortest path from source to destination?\nChoices:\na) Breadth First Traversal\nb) Dijkstra's Algorithm\nc) Neither BFS nor Dijkstra's\nd) Depth First Search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Bit fields and Bit arrays are the same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the advantage of using a singly linked list over a doubly linked list for chaining in hash tables?\nChoices:\na) It takes less memory\nb) It causes more collisions\nc) It makes the process of insertion and deletion faster\nd) It causes fewer collisions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The preorder and inorder traversals of a binary tree are T M L N P O Q and L M N T O P Q. What is the postorder traversal?\nChoices:\na) L N M O Q P T\nb) N M O P O L T\nc) L M N O P Q T\nd) O P L M N Q T\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the hash function used in Double Hashing?\nChoices:\na) (h1(k) - i*h2(k)) mod m\nb) h1(k) + h2(k)\nc) (h1(k) + i*h2(k)) mod m\nd) (h1(k) + h2(k)) mod m\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Convert the following infix expression to postfix: (A + B \u2227 D)/(E - F) + G\nChoices:\na) A B D \u2227 + E F - / G +\nb) A B D + \u2227 E F - / G +\nc) A B D \u2227 + E F - / - G +\nd) A B D E F + \u2227 / - G +\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: AVL trees are more balanced than Red-black trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What are the time complexities of finding the 8th element from the beginning and from the end in a singly linked list (n > 8)?\nChoices:\na) O(1) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(n) and O(n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: If elements 'A', 'B', 'C', and 'D' are placed in a queue, in what order are they removed?\nChoices:\na) ABCD\nb) DCBA\nc) DCAB\nd) ABDC\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the other name for Suffix Tree?\nChoices:\na) Array\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of edges from the node to the deepest leaf is called __________ of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: If a node in a BST has two children, then its in-order predecessor has __________.\nChoices:\na) no left child\nb) no right child\nc) two children\nd) no child\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A Binary Search Tree (BST) stores values in the range 37 to 573. Consider the following sequence of keys:\nI. 81, 537, 102, 439, 285, 376, 305\nII. 52, 97, 121, 195, 242, 381, 472\nIII. 142, 248, 520, 386, 345, 270, 307\nIV. 550, 149, 507, 395, 463, 402, 270\nWhich of the following statements is TRUE?\nChoices:\na) I, II and IV are inorder sequences of three different BSTs\nb) I is a preorder sequence of some BST with 439 as the root\nc) II is an inorder sequence of some BST where 121 is the root and 52 is a leaf\nd) IV is a postorder sequence of some BST with 149 as the root\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Does there exist a heap with seven distinct elements so that the Inorder traversal gives the elements in sorted order?\nChoices:\na) Yes\nb) No\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following don't use matrices?\nChoices:\na) In solving linear equations\nb) Image processing\nc) Graph theory\nd) Sorting numbers\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Consider the function f defined below:\n#include <iostream>\nstruct item {\n int data;\n struct item *next;\n};\nint f(struct item *p) {\n return ((p == NULL) || (p->next == NULL) || ((p->data <= p->next->data) && f(p->next)));\n}\nWhat does this function check?\nChoices:\na) Not all elements have the same data value\nb) Elements are sorted in non-decreasing order\nc) Elements are sorted in non-increasing order\nd) None of them\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Every Directed Acyclic Graph has at least one sink vertex.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Interpolation search is an improved variant of binary search. What is necessary for this algorithm to work?\nChoices:\na) Data collection should be in sorted form and equally distributed\nb) Data collection should be sorted but not equally distributed\nc) Data collection should be equally distributed but not sorted\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is False about a binary search tree?\nChoices:\na) The left child is always lesser than its parent\nb) The right child is always greater than its parent\nc) The left and right sub-trees should also be binary search trees\nd) In order sequence gives decreasing order of elements\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Should leaves in ternary heap be distributed from left to right.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The size value of various nodes in a weight balanced tree are\nleaf - zero\ninternal node - size of it's two children\nis this True?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Min heap can be used to implement selection sort.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which type of data structure is a ternary heap?\nChoices:\na) Array\nb) Hash\nc) Priority Queue\nd) Priority Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: The self organizing list improves __________\nChoices:\na) average access time\nb) insertion\nc) deletion\nd) binary search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: __________ is a self-adjusting version of a leftist heap.\nChoices:\na) Rightist heap\nb) Skew heap\nc) d-heap\nd) Binary heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: How many secondary operations are performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Given an adjacency matrix A = [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ], The total no. of ways in which every vertex can walk to itself using 2 edges is __________\nChoices:\na) 2\nb) 4\nc) 6\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the correct notation for a load factor?\nChoices:\na) \u03a9\nb) \u221e\nc) \u03a3\nd) \u03bb\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the use of a hash function?\nChoices:\na) to calculate and return the index of corresponding data\nb) to store data\nc) to erase data\nd) to change data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Is the following statement valid? A Red-Black Tree which is also a perfect Binary Tree can have all black nodes\nChoices:\na) Yes\nb) No\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A B+ -tree index is to be built on the Name attribute of the relation STUDENT. Assume that all student names are of length 8 bytes, disk block are size 512 bytes, and index pointers are of size 4 bytes. Given this scenario, what would be the best choice of the degree (i.e. the number of pointers per node) of the B+ -tree?\nChoices:\na) 16\nb) 42\nc) 43\nd) 44\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A leftist heap is also said to be a binary heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) push it on to the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can suffix tree be used in string problems occurring in a text editor?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Is the following statement valid?\nGiven a weighted graph where weights of all edges are unique (no two edges have the same weights), there is always a unique shortest path from a source to destination in such a graph.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which data structure is used in the syntax analysis phase of the compiler?\nChoices:\na) Tree\nb) Stack\nc) Linked List\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following code snippet is used to convert decimal to binary numbers?\nChoices:\na) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[index++] = num%2;\n num = num/2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nb) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[++index] = num%2;\n num = num/2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nc) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[index++] = num/2;\n num = num%2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nd)\npublic void convertBinary(int num)\n {\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[++index] = num/2;\n num = num%2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n }\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Recursion uses more memory space than iteration because __________\nChoices:\na) it uses stack instead of queue.\nb) every recursive call has to be stored.\nc) both A & B are True.\nd) None of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Time required to merge two sorted lists of size m and n, is __________\nChoices:\na) O(m | n)\nb) O(m + n)\nc) O(m log n)\nd) O(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of pointer is called?\nChoices:\na) Linked list\nb) Node list\nc) Primitive list\nd) Unordered list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Let G be a complete undirected graph on 4 vertices, having 6 edges with weights being 1, 2, 3, 4, 5, and 6. The maximum possible weight that a minimum weight spanning tree of G can have is:\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Symbol tables during compilation of program is efficiently implemented using __________\nChoices:\na) a singly linked list\nb) a doubly linked list\nc) a self organizing list\nd) an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Time required to merge two sorted lists of size m and n, is __________\nChoices:\na) O(m | n)\nb) O(m + n)\nc) O(m log n)\nd) O(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Hash tree is also known as __________\nChoices:\na) Merkle tree\nb) T-tree\nc) Hash table\nd) Bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: How do you calculate the pointer difference in a memory-efficient doubly linked list?\nChoices:\na) head xor tail\nb) pointer to previous node xor pointer to next node\nc) pointer to previous node - pointer to next node\nd) pointer to next node - pointer to previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) Push it directly onto the stack\nb) Pop 2 operands, evaluate them, and push the result onto the stack\nc) Pop the entire stack\nd) Ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the condition for a tree to be weight-balanced, where a is a factor and n is a node?\nChoices:\na) weight[n.left] >= aweight[n] and weight[n.right] >= aweight[n]\nb) weight[n.left] >= aweight[n.right] and weight[n.right] >= aweight[n]\nc) weight[n.left] >= aweight[n.left] and weight[n.right] >= aweight[n]\nd) weight[n] is a non-zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is not a disadvantage to the usage of array?\nChoices:\na) Fixed size\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Insertion based on position\nd) Accessing elements at specified positions\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Collision is caused due to the presence of two keys having the same value.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Min heap is a complete binary tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A treap is a cartesian tree with __________\nChoices:\na) additional value, which is a priority value to the key generated randomly\nb) additional value, which is a priority value to the key generated sequentially\nc) additional heap rule\nd) additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Suppose you are given an implementation of a queue of integers.\nConsider the following function:\nvoid f(queue<int> &Q) {\n int i;\n if (!Q.empty()) {\n i = Q.front();\n Q.pop();\n f(Q);\n Q.push(i);\n }\n}\nChoices:\na) Leaves the queue Q unchanged\nb) Reverses the order of the elements in the queue Q\nc) Deletes the element at the front of the queue Q and inserts it at the rear keeping the other elements in the same order\nd) Empties the queue Q\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is:\nChoices:\na) 10\nb) 11\nc) 12\nd) 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the result of the following postfix expression?\nabcd+ where a=2, b=2, c=3, d=4.\nChoices:\na) 16\nb) 12\nc) 14\nd) 10\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: MultiGraphs having self-loops are called PseudoGraphs?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What value does function mystery return when called with a value of 4?\nint mystery ( int number ) {\n if ( number <= 1 )\n return 1;\n else\n return number * mystery( number - 1 );\n}\nChoices:\na) 0\nb) 1\nc) 4\nd) 24\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: In how many different ways can we reach the end of the array arr[]={1,3,5,8,9}?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1)/2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: AA-Trees make more rotations than a red-black tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: When array reversal and rotation are applied to the same array, the output produced will also be the same every time.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A full binary tree with n leaf nodes contains how many total nodes?\nChoices:\na) n nodes\nb) log 2 n nodes\nc) 2n -1 node\nd) 2 n nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Where is the hash tree used?\nChoices:\na) in digital currency\nb) in sorting of large data\nc) for indexing in databases\nd) in encryption of data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The relationship of skew heaps to leftist heaps is analogous to that of?\nChoices:\na) Splay tree and AVL tree\nb) Red black tree and AVL tree\nc) Binary tree and Splay tree\nd) Binary tree and Red black tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A balanced binary tree with n items allows the lookup of an item in __________ worst-case time.\nChoices:\na) O(log n)\nb) O(nlog 2)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How do you initialize an array in C?\nChoices:\na) int arr[3] = (1,2,3);\nb) int arr(3) = {1,2,3};\nc) int arr[3] = {1,2,3};\nd) int arr(3) = (1,2,3);\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the largest integer m such that every simple connected graph with n vertices and n edges contains at least m different spanning trees?\nChoices:\na) 1\nb) 2\nc) 3\nd) n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the hash function used in linear probing?\nChoices:\na) H(x)= key mod table size\nb) H(x)= (key+ F(i2)) mod table size\nc) H(x)= (key+ F(i)) mod table size\nd) H(x)= X mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Let A[1...n] be an array of n distinct numbers. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. What is the expected number of inversions in any permutation on n elements?\nChoices:\na) n(n-1)/2\nb) n(n-1)/4\nc) n(n+1)/4\nd) 2n[logn]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In skew heaps, certain constraints are to be met in order to perform swapping.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The total comparisons in finding both smallest and largest elements are:\nChoices:\na) 2*n + 2\nb) n + ((n+1)/2) - 2\nc) n + logn\nd) n^2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What does the following piece of code do?\npublic void func(Tree root)\n{\n func(root.left());\n func(root.right());\n System.out.println(root.data());\n}\nChoices:\na) Preorder traversal\nb) Inorder traversal\nc) Postorder traversal\nd) Level order traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Given a plane graph, G having 2 connected components, 6 vertices, 7 edges and 4 regions, what will be the number of connected components?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) cord\nb) string\nc) array\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Two balanced binary trees are given with m and n elements respectively. They can be merged into a balanced binary search tree in __________ time.\nChoices:\na) o(m+n)\nb) o(mn)\nc) o(m)\nd) o(mlog n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of leaves L are?\nChoices:\na) l = 2i\nb) l = i + 1\nc) l = i - 1\nd) l = 2i - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What are the time complexities of finding 8th element from beginning and 8th element from end in a singly linked list? Let n be the number of nodes in linked list, you may assume that n > 8.\nChoices:\na) o(n) and o(n)\nb) o(1) and o(1)\nc) o(n) and o(1)\nd) o(1) and o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is false?\nChoices:\na) compared to b-tree, b+ -tree has larger fanout\nb) deletion in b-tree is more complicated than in b+ -tree\nc) b+ -tree has greater depth than corresponding b-tree\nd) both b-tree and b+ -tree have same search and insertion efficiencies\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many different shapes does maintenance of AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which tree allows fast implementation of string operation?\nChoices:\na) rope tree\nb) suffix tree\nc) tango tree\nd) top tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining using linked lists?\nChoices:\na) it requires many pointers\nb) it requires linked lists\nc) it uses array\nd) it does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many edges are present in edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the below statements are true?\ni. cartesian tree is not a height balanced tree\nii. cartesian tree of a sequence of unique numbers can be uniquely generated\nChoices:\na) both statements are true\nb) only i. is true\nc) only ii. is true\nd) both are false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What happens when you pop from an empty stack while implementing using the stack adt in java?\nChoices:\na) undefined error\nb) compiler displays a warning\nc) emptystackexception is thrown\nd) nostackexception is thrown\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log3(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the difference between a normal (naive) array and a sparse array?\nChoices:\na) sparse array can hold more elements than a normal array\nb) sparse array is memory efficient\nc) sparse array is dynamic\nd) a naive array is more efficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What does the following piece of code do?\nfor(int i = 0; i < row; i++)\n{ \n for(int j = 0; j < column; j++)\n {\n if(i == j)\n sum = sum + (array[i][j]);\n }\n}\nSystem.out.println(sum);\nChoices:\na) normal of a matrix\nb) trace of a matrix\nc) square of a matrix\nd) transpose of a matrix\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What should be the load factor for separate chaining hashing?\nChoices:\na) 0.5\nb) 1\nc) 1.5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?\nChoices:\na) 2, 1, 3, 4, 5\nb) 3, 4, 5, 1, 2\nc) 4, 5, 1, 2, 3\nd) 1, 2, 3, 5, 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) hashing by division\nb) hashing by multiplication\nc) universal hashing\nd) open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is false about a doubly linked list?\nChoices:\na) we can navigate in both the directions\nb) it requires more space than a singly linked list\nc) the insertion and deletion of a node take a bit longer\nd) implementing a doubly linked list is easier than singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following algorithms can be used to efficiently calculate single source shortest paths in a directed acyclic graph?\nChoices:\na) dijkstra\nb) bellman-ford\nc) topological sort\nd) strongly connected component\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What data structure would you most likely see in non-recursive implementation of a recursive algorithm?\nChoices:\na) stack\nb) linked list\nc) tree\nd) queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) only front pointer\nb) only rear pointer\nc) both front and rear pointer\nd) no pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Circular Queue is also known as __________\nChoices:\na) ring buffer\nb) square buffer\nc) rectangle buffer\nd) curve buffer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: If the elements 'A', 'B', 'C' and 'D' are placed in a stack and are deleted one at a time, what is the order of removal?\nChoices:\na) abcd\nb) dcba\nc) dcab\nd) abdc\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Left child of parent node has value lesser than the parent node.\nChoices:\na) true\nb) false\nc) only in binary search trees\nd) only in heaps\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) leaf node\nb) first node of left sub tree\nc) root node\nd) first node of right sub tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which algorithm is used in the top tree data structure?\nChoices:\na) divide and conquer\nb) greedy\nc) backtracking\nd) branch\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A full binary tree with n leaves contains __________.\nChoices:\na) n nodes\nb) log n2 nodes\nc) 2n - 1 nodes\nd) 2n nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: An error is reported when the stack is not empty at the end.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: An Inverter Graph is a type of __________\nChoices:\na) multigraph\nb) cyclic graph\nc) directed acyclic graph\nd) directed acyclic word graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Linked lists are best suited __________\nChoices:\na) for relatively permanent collections of data.\nb) for the size of the structure and the data in the structure are constantly changing.\nc) data structure\nd) for none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: In case of insertion into a linked queue, a node borrowed from the __________ list is inserted in the queue.\nChoices:\na) avail\nb) front\nc) rear\nd) null\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Given Adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0} {0,1}}\nii) {{0,1} {1,0}}\niii) {{0,0,1} {0,1,0} {1,0,0}}\nChoices:\na) only i\nb) ii and iii\nc) i and iii\nd) i, ii, and iii\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Any decision tree that sorts n elements has height\nChoices:\na) \u03a9(n)\nb) \u03a9(log n)\nc) \u03a9(n log n)\nd) \u03a9(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the degree sequence of the given HyperGraph, in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3,2,1,1,1,1\nb) 3,2,2,2,1,1\nc) 3,2,2,2,2,1\nd) 3,2,2,1,1,1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) cubic\nb) quadratic\nc) linear\nd) logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many distinct binary search trees can be created out of 4 distinct keys?\nChoices:\na) 4\nb) 14\nc) 24\nd) 42\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is the type of priority queue?\nChoices:\na) ascending order priority queue\nb) descending order priority queue\nc) deque\nd) both a and b\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: One can determine whether a binary tree is a binary search tree by traversing it in __________.\nChoices:\na) pre-order\nb) in-order\nc) post-order\nd) any of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: In DNA sequence alignment, which string-matching algorithm is commonly used to identify similarities between two DNA sequences efficiently?\nChoices:\na) rabin-karp algorithm\nb) knuth-morris-pratt algorithm\nc) z function\nd) none of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following points is/are not true about linked list data structure when it is compared with an array?\nChoices:\na) arrays have better cache locality that can make them better in terms of performance\nb) it is easy to insert and delete elements in linked list\nc) random access is not allowed in a typical implementation of linked lists\nd) access of elements in linked list takes less time than compared to arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is a skip list?\nChoices:\na) a linked list with size value in nodes\nb) a linked list that allows faster search within an ordered sequence\nc) a linked list that allows slower search within an ordered sequence\nd) a tree which is in the form of linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What are the advantages of arrays?\nChoices:\na) objects of mixed data types can be stored\nb) elements in an array cannot be sorted\nc) index of first element of an array is 1\nd) easier to store elements of same data type\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How will you find the maximum element in a binary search tree?\nChoices:\na) \npublic void max(Tree root)\n{\n while(root.left() != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nb)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nc)\npublic void max(Tree root)\n{\n while(root.right() != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nd)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Why prefer red-black trees over AVL trees?\nChoices:\na) because red-black is more rigidly balanced\nb) avl tree stores balance factor in every node which costs space\nc) avl tree fails at scale\nd) red-black is more efficient\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Is the following statement valid about shortest paths? Given a graph, suppose we have calculated shortest path from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains same, only the total weight of path changes.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: All graphs have unique representation on paper.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following operations are done in a hash table?\nChoices:\na) Insert only\nb) Search only\nc) Insert and search\nd) Replace\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which class in Java can be used to represent bit array?\nChoices:\na) bitset\nb) bitvector\nc) bitarray\nd) bitstream\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is correct with respect to a parse tree for a given grammar?\nChoices:\na) n parse tree = n leftmost derivation tree = n rightmost derivation tree\nb) n parse tree = n leftmost derivation tree\nc) n parse tree = n rightmost derivation tree\nd) n parse tree = n non-terminals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is a palindromic string?\nChoices:\na) the string of length 0\nb) the string having a special character\nc) the string having an uppercase letter\nd) the string whose reversed string is equal to the original string\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Is the following statement valid?\nGiven a graph where all edges have positive weights, the shortest paths produced by Dijkstra and Bellman-Ford algorithms may be different, but the path weight would always be the same.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In a doubly linked list, the number of pointers affected for an insertion operation will be:\nChoices:\na) 5\nb) 0\nc) 1\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the functionality of the following code?\npublic void function(Node node)\n{\n if(size == 0)\n  head = node;\n else\n {\n  Node temp, cur;\n  for(cur = head; (temp = cur.getNext()) != null; cur = temp);\n  cur.setNext(node);\n }\n size++;\n}\nChoices:\na) Inserting a node at the beginning of the list\nb) Deleting a node at the beginning of the list\nc) Inserting a node at the end of the list\nd) Deleting a node at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Why prefer splay trees?\nChoices:\na) easier to program\nb) space efficiency\nc) easier to program and faster access to recently accessed items\nd) quick searching\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the height of a K-ary tree having only a root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Let A be a matrix of size n x n. Consider the following program. What is the expected output?\nvoid fun(int A[][N])\n{\n    for (int i = 0; i < N; i++)\n        for (int j = i + 1; j < N; j++)\n            swap(A[i][j], A[j][i]);\n}\nChoices:\na) matrix a\nb) diagonal of matrix a\nc) transpose of matrix a\nd) none\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Hashing can be used to encrypt and decrypt digital signatures.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) \u03b8(log\u2099 h * t)\nb) \u03b8(log\u209c n * h)\nc) \u03b8(log\u2095 n)\nd) \u03b8(log\u209c n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which node has the lowest priority in a treap?\nChoices:\na) Root node\nb) Leaf node\nc) Null node\nd) Centre node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of these operators have the highest order of precedence?\nChoices:\na) '(' and ')'\nb) '*' and '/'\nc) '~' and '^'\nd) '+' and '-'\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: If a comparison-based sorting algorithm is used to construct the suffix array, what will be the time required to construct the suffix array?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n^2 log n)\nd) O(n^3)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K), where K is an integer key chosen by the implementation. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys chosen are in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Insertion into a 2-d tree is a trivial extension of insertion into a binary search tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Using the evaluation of prefix algorithm, evaluate +-9 2 7.\nChoices:\na) 10\nb) 4\nc) 17\nd) -14\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following points is/are True about Linked List data structure when it is compared with array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance.\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) The size of array has to be pre-decided, linked lists can change their size any time\ne) All of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the order of the resultant heap after merging two trees of order k?\nChoices:\na) 2*k\nb) k+1\nc) k*k\nd) k+logk\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which hash function satisfies the condition of simple uniform hashing?\nChoices:\na) h(k) = lowerbound(km)\nb) h(k) = upperbound(mk)\nc) h(k) = lowerbound(k)\nd) h(k) = upperbound(k)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: When the corresponding end bracket/braces/parentheses is not found, what happens?\nChoices:\na) The stack is popped\nb) Ignore the parentheses\nc) An error is reported\nd) It is treated as an exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: A good hash approach is to derive the hash value that is expected to be dependent on any patterns that might exist in the data.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) 3 2 1 4 5\nb) 5 4 3 2 1\nc) 1 2 5 4 3\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the maximum height of an AVL tree with p nodes?\nChoices:\na) p\nb) log(p)\nc) log(p)/2\nd) p/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10};\nWhat would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is __________\nChoices:\na) O(E)\nb) O(V*V)\nc) O(E + V)\nd) O(V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The data structure required to check whether an expression contains a balanced parenthesis is?\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Heap exhibits the property of a binary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: It is easier for a computer to process a postfix expression than an infix expression.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) Every node stores the XOR of addresses of previous and next nodes\nb) Actual memory address of the next node\nc) Every node stores the XOR of addresses of previous and next two nodes\nd) Every node stores XOR of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What output does the below pseudo code produce?\nTree_node function(Tree_node x)\n{\n    Tree_node y = x.left;\n    x.left = y.right;\n    y.right = x;\n    return y;\n}\nChoices:\na) Right rotation of subtree\nb) Left rotation of subtree\nc) Zig-zag operation\nd) Zig-zig operation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) a|&bc\nb) &|abc\nc) |a&bc\nd) ab&|c\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Who invented the vEB tree, also known as the van Emde Boas Tree?\nChoices:\na) Peter Van Emde Boas\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the other name of a weak heap?\nChoices:\na) min-heap\nb) max-heap\nc) relaxed-heap\nd) leonardo heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) Priority queue\nb) Circular queue\nc) Single-ended queue\nd) Ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. The level-order traversal of the heap after the insertion of the elements is:\nChoices:\na) 10, 8, 5, 7, 2, 1, 3\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A descending priority queue can be implemented using __________\nChoices:\na) Max heap\nb) Min heap\nc) Min-max heap\nd) Trie\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is:\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: On what value does the probe sequence depend?\nChoices:\na) c1\nb) k\nc) c2\nd) m\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in a min-heap take __________\nChoices:\na) constant and linear time respectively\nb) constant and linear time respectively\nc) constant and quadratic time respectively\nd) constant and logarithmic time respectively\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Consider the following definition in C programming language:\nstruct node\n{\n    int data;\n    struct node * next;\n};\ntypedef struct node NODE;\nNODE *ptr;\nWhich of the following C code is used to create a new node?\nChoices:\na) ptr = (NODE*)malloc(sizeof(NODE));\nb) ptr = (NODE*)malloc(NODE);\nc) ptr = (NODE*)malloc(sizeof(NODE*));\nd) ptr = (NODE)malloc(sizeof(NODE));\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: You are on a planet where computational power is slow. You have an array of size 10. You want to enqueue an element using only push and pop operations (each takes 1 second). What is the total time required to perform the enqueue operation?\nChoices:\na) 20\nb) 40\nc) 42\nd) 43\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Consider a hash function that distributes keys uniformly. The hash table size is 20. After hashing how many keys will the probability that any new key collides with an existing one exceed 0.5?\nChoices:\na) 5\nb) 6\nc) 7\nd) 10\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) Not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many top trees are there in a tree with a single vertex?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The number of nodes of height h in any n-element heap is __________.\nChoices:\na) h\nb) 2h\nc) ceil(n/2h)\nd) ceil(n/2^(h+1))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Where does a triply linked list contain an extra pointer in comparison to a doubly linked list?\nChoices:\na) top of the node\nb) bottom of the node\nc) before the node\nd) after the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the height of the root node of a ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Is MinHash used as a tool for association rule learning?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which traversal's pseudo code is written here?\nChoices:\na) level order\nb) pre-order\nc) post-order\nd) in-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which operation is used to combine two auxiliary trees?\nChoices:\na) join\nb) combinatorial\nc) add\nd) concatenation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of a pointer is called __________.\nChoices:\na) linked list\nb) node list\nc) primitive list\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What are different ways of implementing free lists and which is simple among them?\nChoices:\na) best fit, first fit, worst fit; first fit is simplest\nb) best fit, first fit, worst fit; best fit is simplest\nc) best fit, first fit, worst fit; worst fit is simplest\nd) first fit, best fit, worst fit; worst fit is simplest\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: A single array A[1..MAXSIZE] is used to implement two stacks growing from opposite ends. If top1 and top2 point to the top elements of each stack and top1 < top2, what is the condition for 'stack full'?\nChoices:\na) (top1 = MAXSIZE/2) and (top2 = MAXSIZE/2+1)\nb) top1 + top2 + 1 = MAXSIZE\nc) (top1 = MAXSIZE/2) or (top2 = MAXSIZE)\nd) top1 = top2 - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the maximum number of children that a binary tree node can have?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Out of the following given options, which is the fastest algorithm?\nChoices:\na) fibonacci heap\nb) pairing heap\nc) d-ary heap\nd) binary heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: An expression tree is a kind of?\nChoices:\na) binary search tree\nb) fibonacci tree\nc) binary tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Given that the line `delete newPtr;` just executed, what can you conclude?\nChoices:\na) the memory referenced by newPtr is released only if it is needed by the system.\nb) the pointer newPtr is of type void *.\nc) the pointer newPtr only exists if there was an error freeing the memory.\nd) the pointer newPtr still exists.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: To implement a stack using queues (with only enqueue and dequeue operations), how many queues will you need?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The prefix expression of the postfix expression AB+CD-* is __________\nChoices:\na) (A+B)*(C-D)\nb) +ab*-cd\nc) a+*bcd-\nd) *+ab-cd\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which is the most appropriate data structure for applying the balancing of symbols algorithm?\nChoices:\na) stack\nb) queue\nc) tree\nd) graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Suffix array is space efficient compared to the suffix tree.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: All paths and cyclic graphs are bipartite graphs.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The size of the dynamic array is deallocated if the array size is less than __________% of the backend physical size.\nChoices:\na) 30\nb) 40\nc) 10\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Time taken in decreasing the node value in a binomial heap is:\nChoices:\na) o(n)\nb) o(1)\nc) o(log n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What determines the order of evaluation of a prefix expression?\nChoices:\na) precedence and associativity\nb) precedence only\nc) associativity only\nd) depends on the parser\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: One can convert an infix expression to a postfix expression using a __________.\nChoices:\na) stack\nb) queue\nc) deque\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What are the applications of linear probing?\nChoices:\na) databases\nb) caching\nc) compiler design\nd) all of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of unused pointers in a complete binary tree of depth 5 is:\nChoices:\na) 4\nb) 8\nc) 16\nd) 32\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following real-world scenarios would you associate with a stack data structure?\nChoices:\na) piling up of chairs one above the other\nb) people standing in a line to be serviced at a counter\nc) offer services based on the priority of the customer\nd) tatkal ticket booking in irctc\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which hashing scheme provides good performance?\nChoices:\na) open addressing\nb) universal hashing\nc) hashing by division\nd) hashing by multiplication\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the space complexity for deleting a linked list?\nChoices:\na) o(1)\nb) o(n)\nc) either o(1) or o(n)\nd) o(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many prime concepts are available in nearest neighbor search in a kd tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a two-dimensional search tree, the root is arbitrarily chosen to be?\nChoices:\na) even\nb) odd\nc) depends on subtrees\nd) random node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In general, linked lists allow:\nChoices:\na) insertions and removals anywhere.\nb) insertions and removals only at one end.\nc) insertions at the back and removals from the front.\nd) none of the above.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Consider the array representation of a binary min-heap containing 1023 elements. The minimum number of comparisons required to find the maximum in the heap is:\nChoices:\na) 510\nb) 511\nc) 512\nd) 255\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: When executing a sequence of Unions, a node of rank r must have at least 2^r descendants.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the maximum number of possible non-zero values in an adjacency matrix of a simple graph with n vertices?\nChoices:\na) (n*(n-1))/2\nb) (n*(n+1))/2\nc) n*(n-1)\nd) n*(n+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A binary tree can be converted into its mirror image by traversing it in __________.\nChoices:\na) in-order\nb) pre-order\nc) post-order\nd) any order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Level order traversal of a tree is formed with the help of:\nChoices:\na) breadth-first search\nb) depth-first search\nc) dijkstra's algorithm\nd) prim's algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is a disadvantage of parallel arrays over traditional arrays?\nChoices:\na) when a language does not support records, parallel arrays can be used\nb) increased locality of reference\nc) ideal cache behaviour\nd) insertion and deletion becomes tedious\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the height of the root node of a K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the output of the following function if start is pointing to the first node of the linked list 1->2->3->4->5->6?\n#include <iostream>\nusing namespace std;\nstruct Node {\n    int data;\n    Node* next;\n    Node() { data = 0; next = nullptr; } \n};\nvoid fun(Node* start) {\n    if (start == nullptr)\n        return;\n    cout << start->data << \"  \";\n    \n    if (start->next != nullptr)\n        fun(start->next->next);\n    cout << start->data << \"  \";\n}\nChoices:\na) 1 4 6 6 4 1\nb) 1 3 5 1 3 5\nc) 1 2 3 5\nd) 1 3 5 5 3 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Let G be a connected undirected graph with 100 vertices and 300 edges. The weight of a minimum spanning tree of G is 500. When the weight of each edge of G is increased by five, the weight of a minimum spanning tree becomes __________.\nChoices:\na) 1000\nb) 995\nc) 2000\nd) 1995\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) push it onto the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can a suffix tree be used in string problems occurring in a text editor?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Is the following statement valid?\nGiven a weighted graph where weights of all edges are unique, there is always a unique shortest path from a source to destination.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Recursion uses more memory space than iteration because __________.\nChoices:\na) it uses stack instead of queue.\nb) every recursive call has to be stored.\nc) both a & b are true.\nd) none of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A binary tree of depth 'd' is an almost complete binary tree if:\nChoices:\na) each leaf in the tree is either at level 'd' or at level 'd-1'\nb) for any node 'n' in the tree with a right descendant at level 'd', all the left descendants of 'n' that are leaves, are also at level 'd'\nc) both (a) & (b)\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Time required to merge two sorted lists of size m and n is __________.\nChoices:\na) \u03b8(m | n)\nb) \u03b8(m + n)\nc) \u03b8(m log n)\nd) \u03b8(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Let G be a complete undirected graph on 4 vertices, having 6 edges with weights 1, 2, 3, 4, 5, and 6. What is the weight of the minimum spanning tree of G?\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Symbol tables during compilation of a program are efficiently implemented using __________\nChoices:\na) a singly linked list\nb) a doubly linked list\nc) a self-organizing list\nd) an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: A hash tree is also known as __________\nChoices:\na) merkle tree\nb) t-tree\nc) hash table\nd) bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: How do you calculate the pointer difference in a memory-efficient doubly linked list?\nChoices:\na) head xor tail\nb) pointer to previous node xor pointer to next node\nc) pointer to previous node - pointer to next node\nd) pointer to next node - pointer to previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) push it directly onto the stack\nb) pop 2 operands, evaluate them and push the result onto the stack\nc) pop the entire stack\nd) ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the condition for a tree to be weight balanced, where 'a' is a factor and 'n' is a node?\nChoices:\na) weight[n.left] >= a * weight[n] and weight[n.right] >= a * weight[n]\nb) weight[n.left] >= a * weight[n.right] and weight[n.right] >= a * weight[n]\nc) weight[n.left] >= a * weight[n.left] and weight[n.right] >= a * weight[n]\nd) weight[n] is a non-zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: A treap is a Cartesian tree with __________\nChoices:\na) additional value, which is a priority value to the key generated randomly\nb) additional value, which is a priority value to the key generated sequentially\nc) additional heap rule\nd) additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is:\nChoices:\na) 10\nb) 11\nc) 12\nd) 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What value does function mystery return when called with a value of 4?\nint mystery (int number) {\n    if (number <= 1)\n        return 1;\n    else\n        return number * mystery(number - 1);\n}\nChoices:\na) 0\nb) 1\nc) 4\nd) 24\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1) / 2\nb) n / 2\nc) (n / 2) - 1\nd) (n + 1) / 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The sorting technique where the array to be sorted is partitioned again and again in such a way that all elements less than or equal to the partitioning element appear before it and those which are greater appear after it is called __________.\nChoices:\na) merge sort\nb) quick sort\nc) selection sort\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A balanced binary tree with n items allows the lookup of an item in __________ worst-case time.\nChoices:\na) o(log n)\nb) o(n log 2)\nc) o(n)\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the hash function used in linear probing?\nChoices:\na) h(x) = key mod table size\nb) h(x) = (key + f(i^2)) mod table size\nc) h(x) = (key + f(i)) mod table size\nd) h(x) = x mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Queues serve a major role in __________\nChoices:\na) simulation of recursion\nb) simulation of arbitrary linked list\nc) simulation of limited resource allocation\nd) simulation of heap sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A binary tree T has 20 leaves. The number of nodes in T having two children is:\nChoices:\na) 18\nb) 19\nc) 17\nd) any number between 10 and 20\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: In Postfix expressions, the operators come after the operands.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is also known as the Rope data structure?\nChoices:\na) cord\nb) string\nc) array\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a full binary tree, if the number of internal nodes is I, then the number of leaves L is?\nChoices:\na) l = 2* i\nb) l = i + 1\nc) l = i - 1\nd) l = 2* i - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What are the time complexities of finding the 8th element from the beginning and 8th element from the end in a singly linked list? Let n > 8.\nChoices:\na) O(n) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(1) and O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many different shapes does maintenance of an AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which tree allows fast implementation of string operations?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining with linked lists?\nChoices:\na) it requires many pointers\nb) it requires linked lists\nc) it uses array\nd) it does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many edges are present in an edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log\u2083(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Suppose we have a balanced binary search tree T holding n numbers. We are given two numbers L and H and wish to sum up all the numbers in T that lie between L and H. Suppose there are m such numbers in T. If the tightest upper bound on the time to compute the sum is O(n^a log^b n + m*c log^d n), the value of a + 10b + 100c + 1000d is __________.\nChoices:\na) 60\nb) 110\nc) 210\nd) 50\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) Hashing by division\nb) Hashing by multiplication\nc) Universal hashing\nd) Open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is False about a doubly linked list?\nChoices:\na) We can navigate in both directions\nb) It requires more space than a singly linked list\nc) The insertion and deletion of a node take a bit longer\nd) Implementing a doubly linked list is easier than a singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What data structure would you most likely see in a non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked List\nc) Tree\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In a linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Left child of a parent node has value lesser than the parent node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) Leaf node\nb) First node of left subtree\nc) Root node\nd) First node of right subtree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Linked lists are best suited __________.\nChoices:\na) For relatively permanent collections of data.\nb) For the size of the structure and the data in the structure are constantly changing.\nc) Data structure\nd) For none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Given adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0}, {0,1}}\nii) {{0,1}, {1,0}}\niii) {{0,0,1}, {0,1,0}, {1,0,0}}\nChoices:\na) only i)\nb) ii) and iii)\nc) i) and iii)\nd) i), ii), and iii)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Any decision tree that sorts n elements has height:\nChoices:\na) \u03a9(n)\nb) \u03a9(log n)\nc) \u03a9(n log n)\nd) \u03a9(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the degree sequence of the given hypergraph in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3, 2, 1, 1, 1, 1\nb) 3, 2, 2, 2, 1, 1\nc) 3, 2, 2, 2, 2, 1\nd) 3, 2, 2, 1, 1, 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) Cubic\nb) Quadratic\nc) Linear\nd) Logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following points is/are not True about the linked list data structure when compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in linked lists\nc) Random access is not allowed in a typical implementation of linked lists\nd) Access of elements in a linked list takes less time than in arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is a skip list?\nChoices:\na) A linked list with size value in nodes\nb) A linked list that allows faster search within an ordered sequence\nc) A linked list that allows slower search within an ordered sequence\nd) A tree which is in the form of a linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Is the following statement valid about shortest paths?\nGiven a graph, suppose we have calculated shortest paths from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains the same--only the total weight of the path changes.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the height of a K-ary tree having only the root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) \u03b8(log n h * t)\nb) \u03b8(log t n * h)\nc) \u03b8(log h n)\nd) \u03b8(log t n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Of the following rules that are followed by an AA-tree, which of the following is incorrect?\n1. Only right children can be red\n2. Procedures are coded recursively\n3. Instead of storing colors, the level of a node is stored\n4. There should not be any left children\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K) where K is a key. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys should be in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following points is/are true about the Linked List data structure when compared with arrays?\nChoices:\na) arrays have better cache locality that can make them better in terms of performance\nb) it is easy to insert and delete elements in linked list\nc) random access is not allowed in a typical implementation of linked lists\nd) the size of array has to be pre-decided, linked lists can change their size any time\ne) all of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10}; What would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) every node stores the xor of addresses of previous and next nodes\nb) actual memory address of next node\nc) every node stores the xor of addresses of previous and next two nodes\nd) every node stores xor of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Who invented the vEB tree, also known as Van Emde Boas Tree?\nChoices:\na) peter van emde boas\nb) samuel f. b. morse\nc) friedrich clemens gerke\nd) alexander morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) priority queue\nb) circular queue\nc) single ended queue\nd) ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\n```\na b c\nd e f\ng h i\n```\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 3, 2, 1, 5\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Associative arrays can be implemented using __________\nChoices:\na) b-tree\nb) a doubly linked list\nc) a single linked list\nd) a self balancing binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In parse trees, every internal node represents a non-terminal and every leaf node represents a terminal.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the other name for a postfix expression?\nChoices:\na) normal polish notation\nb) reverse polish notation\nc) warsaw notation\nd) infix notation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following is the implementation of the ternary tree?\nChoices:\na) avl tree\nb) ternary heap\nc) hash table\nd) dictionary\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the expected error for estimating the Jaccard index using MinHash scheme for k different hash functions?\nChoices:\na) o (log k!)\nb) o (k!)\nc) o (k^2)\nd) o (1/\u221ak)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The maximum number of binary trees that can be formed with three unlabelled nodes is:\nChoices:\na) 1\nb) 5\nc) 4\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Abstract syntax tree is an input to which phase of compiler?\nChoices:\na) lexical analysis\nb) syntax analysis\nc) semantic analysis\nd) intermediate code generation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Who invented the MinHash technique?\nChoices:\na) weiner\nb) samuel f. b. morse\nc) friedrich clemens gerke\nd) andrei broder\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Consider a linked list of n elements. What is the time taken to insert an element after an element pointed by some pointer?\nChoices:\na) o(1)\nb) o(log2 n)\nc) o(n)\nd) o(n log2 n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A program to search a contact from phone directory can be implemented efficiently using __________\nChoices:\na) a bst\nb) a trie\nc) a balanced bst\nd) a binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the other name or Van Emde Boas Tree data structure?\nChoices:\na) van emde boas array\nb) van emde boas stack\nc) van emde boas priority queue\nd) van emde boas heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: An adaptive sorting algorithm __________\nChoices:\na) adapts to new computers\nb) takes advantage of already sorted elements\nc) takes input which is already sorted\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is not a disadvantage of bit array?\nChoices:\na) without compression, they might become sparse\nb) accessing individual bits is expensive\nc) compressing bit array to byte/word array, the machine also has to support byte/word addressing\nd) storing and manipulating in the register set for long periods of time\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: B Trees are generally\nChoices:\na) very deep and narrow\nb) very wide and shallow\nc) very deep and very wide\nd) cannot say\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is balanced and is a height balanced tree\nb) a tree which is unbalanced and is a height balanced tree\nc) a tree with three children\nd) a tree with atmost 3 children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient insertion\nb) to have efficient deletion\nc) to have efficient region query\nd) to have efficient traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: To convert the postfix expression into the infix expression we use stack and scan the postfix expression from left to right.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the load factor?\nChoices:\na) average array size\nb) average key size\nc) average chain length\nd) average hash table length\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which pattern is used to evaluate abstract syntax tree?\nChoices:\na) visitor pattern\nb) singleton pattern\nc) proxy pattern\nd) adapter pattern\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is an advantage of parallel arrays?\nChoices:\na) poor locality of reference for non-sequential access\nb) very little direct language support\nc) expensive to shrink or grow\nd) increased locality of reference\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Recursive procedures are implemented by   using __________ data structure.\nChoices:\na) queues\nb) stacks\nc) linked lists\nd) strings\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can child node be always called Leaf node in the K-ary tree?\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A balance factor in AVL tree is used to check __________\nChoices:\na) what rotation to make\nb) if all child nodes are at same level\nc) when the last rotation occurred\nd) if the tree is unbalanced\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Quick sort running time depends on the   selection of __________\nChoices:\na) size of array\nb) pivot element\nc) sequence of values\nd) none of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which type of binary search tree is imitated for construction of tango tree?\nChoices:\na) complete binary search tree\nb) perfect binary search tree\nc) balanced binary search tree\nd) degenerate binary search tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In order traversal of binary search tree will produce __________\nChoices:\na) unsorted list\nb) reverse of input\nc) sorted list\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Reversing a word using stack can be used to find if the given word is a palindrome or not.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The number of items used by the dynamic array contents is its __________\nChoices:\na) physical size\nb) capacity\nc) logical size\nd) random size\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: __________ is not a theoretical problem but actually occurs in real implementations of probing.\nChoices:\na) hashing\nb) clustering\nc) rehashing\nd) collision\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which of the following has search efficiency of \u03a9(1)?\nChoices:\na) tree\nb) heap\nc) hash table\nd) linked-list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Dijkstra's Algorithm will work for both negative and positive weights?\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the auxiliary space complexity of the code to rotate an array by using the reversal algorithm (d = number of rotations)?\nChoices:\na) o(1)\nb) o(n)\nc) o(d)\nd) o(n*d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Is Top tree used for maintaining Dynamic set of trees called forest.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Consider an implementation of unsorted single linked list. Suppose it has its representation with a head and a tail pointer (i.e. pointers to the first and last nodes of the linked list). Given the representation, which of the following operation can not be implemented in O(1) time ?\nChoices:\na) insertion at the front of the linked list.\nb) insertion at the end of the linked list.\nc) deletion of the front node of the linked list.\nd) deletion of the last node of the linked list.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the given statement is True?\nChoices:\na) all acyclic directed graphs have topological sortings and all cyclic directed graphs have none\nb) all cyclic directed graphs have topological sortings\nc) all directed graphs have topological sortings\nd) none of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) Distinct array position for every possible key\nb) Fewer array positions than keys\nc) Fewer keys than array positions\nd) Same array position for all keys\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the range of \u03b2 in finding the length of the longest path in a randomized binary search tree?\nChoices:\na) (-1, 0)\nb) (1, 0)\nc) (0, 5)\nd) (0, 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following properties does a simple graph not hold?\nChoices:\na) must be connected\nb) must be unweighted\nc) must have no loops or multiple edges\nd) must be undirected\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can leaf node be called child node in a K-ary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Given a queue with a linked list implementation. the Rear pointer points to the rear node of the queue. and the front node of the queue points to the front node of the queue, Which of the following operations is impossible to do in O(1) time?\nChoices:\na) delete the front item from the list.\nb) delete the rear from the list.\nc) insert at the front of the list.\nd) none\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: How many stacks are required for evaluation of prefix expression?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In an AA-tree, we process split first, followed by a skew.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Path Compression algorithm performs in which of the following operations?\nChoices:\na) Create operation\nb) Insert operation\nc) Find operation\nd) Delete operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Given an array of element 5, 7, 9, 1, 3, 10, 8, 4. Which of the following are the correct sequences of elements after inserting all the elements in a min-heap?\nChoices:\na) 1,3,4,5,7,8,9,10\nb) 1,4,3,9,8,5,7,10\nc) 1,3,4,5,8,7,9,10\nd) 1,3,8,4,5,10,9,7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What are the methods to handle collision:\nChoices:\na) separate chaining\nb) open addressing\nc) both of the above\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is not the rearranging method used to implement self-organizing lists?\nChoices:\na) count method\nb) move to front method\nc) ordering method\nd) least frequently used\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: When do you use a sparse array?\nChoices:\na) when there are unique elements in the array\nb) when the array has more occurrence of zero elements\nc) when the data type of elements differ\nd) when elements are sorted\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: If a connected Graph (G) contains n vertices what would be the rank of its incidence matrix?\nChoices:\na) n-1\nb) values greater than n are possible\nc) values less than n-1 are possible\nd) insufficient information is given\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the average retrieval time when n keys hash to the same slot?\nChoices:\na) \u0398(n)\nb) \u0398(n\u00b2)\nc) \u0398(n log n)\nd) o(n\u00b2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is the predefined function for array reversal in javascript?\nChoices:\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: For an undirected graph with n vertices and e   edges, the sum of the degree of each vertex is equal   to:\nChoices:\na) 2n\nb) (2n-1)/2\nc) 2e\nd) e2/2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A weight-balanced tree is a binary tree in which for each node the number of nodes in the left subtree is at least half and at most twice the number of nodes in the right subtree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on n nodes is best described by which of the following?\nChoices:\na) log_2 n\nb) log_{4/3} n\nc) log_3 n\nd) log_{3/2} n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: The number of elements in the adjacency matrix of a graph having 7 vertices is __________\nChoices:\na) 7\nb) 14\nc) 36\nd) 49\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: The goal of hashing is to produce a search that   takes __________\nChoices:\na) o(1) time\nb) o(n2) time\nc) o(log n) time\nd) o(n log n) time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: B+ Trees are considered BALANCED because\nChoices:\na) the lengths of the paths from the root to all leaf nodes are all equal.\nb) the lengths of the paths from the root to all leaf nodes differ from each other by at most 1.\nc) the number of children of any two non-leaf sibling nodes differ by at most 1.\nd) the number of records in any two leaf nodes differ by at most 1.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Linked list search complexity is __________\nChoices:\na) \u03a9(1)\nb) \u03a9(n)\nc) \u03a9(log n)\nd) \u03a9(log log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is the limitation of the array?\nChoices:\na) elements can be accessed from anywhere.\nb) the size of the array is fixed.\nc) indexing starts from zero.\nd) memory waste if an array's elements are smaller than the size allotted to them\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: Which of the following is an advantage of matrices?\nChoices:\na) internal complexity\nb) searching through a matrix is complex\nc) not space efficient\nd) constant-time edge lookup\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is the efficient data structure for searching words in dictionaries?\nChoices:\na) bst\nb) linked list\nc) balanced bst\nd) trie\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following is not an application of stack?\nChoices:\na) evaluation of postfix expression\nb) conversion of infix to postfix expression\nc) balancing symbols\nd) line at ticket counter\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In linked list implementation of a queue, where does a new element be inserted?\nChoices:\na) at the head of the linked list\nb) at the centre position in the linked list\nc) at the tail of the linked list\nd) at any position in the linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: A priority queue can efficiently implemented using which of the following data structures? Assume that the number of insert and peek (operation to see the current highest priority item) and extraction (remove the highest priority item) operations are almost same.\nChoices:\na) array\nb) linked list\nc) heap data structures like binary heap, fibonacci heap\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A B-tree of order 4 is built from scratch by 10 successive insertions. What is the maximum number of node splitting operations that may take place?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The ascending heap property is __________\nChoices:\na) a[parent(i)] = a[i]\nb) a[parent(i)] <= a[i]\nc) a[parent(i)] >= a[i]\nd) a[parent(i)] > 2 * a[i]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: The column sum in an incidence matrix for a simple graph is __________\nChoices:\na) depends on number of edges\nb) always greater than 2\nc) equal to 2\nd) equal to the number of edges\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Double hashing is one of the best methods available for open addressing.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is NOT a common operation in a queue data structure?\nChoices:\na) enqueue\nb) dequeue\nc) peek\nd) shuffle\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following form inversion in the array arr = {1,5,4,2}?\nChoices:\na) (5,4), (5,2)\nb) (5,4), (5,2), (4,2)\nc) (1,5), (1,4), (1,2)\nd) (1,5)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is a Cartesian tree?\nChoices:\na) a skip list in the form of tree\nb) a tree which obeys cartesian product\nc) a tree which obeys heap property and whose inorder traversal yields the given sequence\nd) a tree which obeys heap property only\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In what time can a leftist heap be built?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(log n)\nd) o(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Who among the following algorithm is used in external memory and compression of the suffix tree?\nChoices:\na) weiner's algorithm\nb) farach's algorithm\nc) ukkonen's algorithm\nd) alexander morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: A self - balancing binary search tree can be used to implement __________\nChoices:\na) priority queue\nb) hash table\nc) heap sort\nd) priority queue and heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following statements about stacks   is incorrect?\nChoices:\na) stacks can be implemented using linked lists.\nb) stacks are first-in, first-out (FIFO) data structures.\nc) new nodes can only be added to the top of the stack.\nd) the last node (at the bottom) of a stack has a null (0) link.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: AVL trees provide better insertion than 2-3 trees.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: In a Propositional Directed Acyclic Graph Leaves maybe labelled with a boolean variable.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In __________, the difference between the height of   the left sub tree and height of the right tree, for each   node, is almost one.\nChoices:\na) Binary search tree\nb) AVL - tree\nc) Complete tree\nd) Threaded binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: The complexity of searching an element from a   set of n elements using Binary search algorithm is __________\nChoices:\na) O(n)\nb) O(log n)\nc) O(n2)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A full binary tree can be generated using __________\nChoices:\na) post-order and pre-order traversal\nb) pre-order traversal\nc) post-order traversal\nd) in-order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: How is a pairing heap represented?\nChoices:\na) binary tree\nb) fibonacci tree\nc) heap ordered tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many nodes in a tree have no ancestors?\nChoices:\na) 0\nb) 1\nc) 2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the worst-case running time of unions done by size and path compression?\nChoices:\na) o(n)\nb) o(logn)\nc) o(n logn)\nd) o(m logn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In an abstract syntax tree, each internal node represents an operand and each leaf node represents an operator.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Insertion and deletion are much faster in an unrolled linked list than in a singly linked list.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What must be the ideal size of array if the height of tree is 'l'?\nChoices:\na) 2^l - 1\nb) l - 1\nc) l\nd) 2^l\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A full binary tree with 2n+1 nodes contain __________.\nChoices:\na) n leaf nodes\nb) n non-leaf nodes\nc) n-1 leaf nodes\nd) n-1 non-leaf nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Only infix expression can be made into an expression tree.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following technique stores data in a separate entity in case of a collision?\nChoices:\na) open addressing\nb) chaining using doubly linked list\nc) linear probing\nd) double hashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: How many distinct BSTs can be constructed with 3 distinct keys?\nChoices:\na) 4\nb) 5\nc) 6\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following hash functions is most likely to cause clustering in a hash table? Here k is the input key value and m is hash table size. You may assume that all four hash functions generate valid indexes in the hash table.\nChoices:\na) h(k) = k % m\nb) h(k) = floor(m * (k mod 1))\nc) h(k) = k\nd) h(k) = ((k / m) + k * m) + k % m\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which technique was firstly used clustering documents using the similarity of two words or strings?\nChoices:\na) minhash\nb) stack\nc) priority queue\nd) pat tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following bitwise operations will you use to toggle a particular bit?\nChoices:\na) or\nb) and\nc) xor\nd) not\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which technique was firstly used to remove duplicate web pages from search results in AltaVista search engine?\nChoices:\na) minhash\nb) stack\nc) priority queue\nd) pat tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In which of the following self-balancing binary search trees is the recently accessed element moved to the root for quick future access?\nChoices:\na) avl tree\nb) aa tree\nc) splay tree\nd) red-black tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is not a collision resolution technique?\nChoices:\na) separate chaining\nb) linear probing\nc) quadratic probing\nd) hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following statement is incorrect with respect to balancing symbols algorithm?\nChoices:\na) {[()]}\nb) ([ )]\nc) {( )}\nd) {[ ]}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Linear search is highly inefficient compared to binary search when dealing with:\nChoices:\na) small, unsorted arrays\nb) small, sorted arrays\nc) large, unsorted arrays\nd) large, sorted arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is the hashing function for separate chaining?\nChoices:\na) h(x) = (hash(x) + f(i)) mod table size\nb) h(x) = hash(x) + i^2 mod table size\nc) h(x) = x mod table size\nd) h(x) = x mod (table size * 2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Identify the reason which doesn't play a key role to use threaded binary trees?\nChoices:\na) the storage required by stack and queue is more\nb) the pointers in most of nodes of a binary tree are null\nc) it is difficult to find a successor node\nd) they occupy less size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: In simple uniform hashing, what is the search complexity?\nChoices:\na) o(n)\nb) o(logn)\nc) o(nlogn)\nd) o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Collisions can be reduced by choosing a hash function randomly in a way that is independent of the keys that are actually to be stored.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: If row-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Under what condition the number of inversions in an array are minimum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: To restore the AVL property after inserting an element, we start at the insertion point and move towards the root of the tree. Is this statement true?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is?\nChoices:\na) stack\nb) array\nc) queue\nd) tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: If binary trees are represented in arrays, what formula can be used to locate a left child, if the node has an index i?\nChoices:\na) 2i+1\nb) 2i+2\nc) 2i\nd) 4i\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: How many probes are required on average for insertion and successful search?\nChoices:\na) 4 and 10\nb) 2 and 6\nc) 2.5 and 1.5\nd) 3.5 and 1.5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) effective usage of memory\nb) easier computations\nc) to delete elements based on priority\nd) implement LIFO principle in queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: One can determine whether an infix expression has balanced parenthesis or not by using __________\nChoices:\na) array\nb) queue\nc) stack\nd) tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Heap can be used as __________\nChoices:\na) priority queue\nb) stack\nc) a decreasing order array\nd) normal array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is the correct function definition for quadratic probing?\nChoices:\na) f(i)=i^2\nb) f(i)=i\nc) f(i)=i+1\nd) f(i)=i^2+1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Which of these methods from the String class is used to extract a single character from an object of String?\nChoices:\na) CHARAT()\nb) charAt()\nc) CharAt()\nd) charAT()\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which statement is correct of suffix tree with a string of length n?\nChoices:\na) The tree has n leaves.\nb) The tree has n roots\nc) Height of tree is n\nd) Depth of tree is n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: In which of the following case does a Propositional Directed Acyclic Graph is used for?\nChoices:\na) representation of boolean functions\nb) string matching\nc) searching\nd) sorting of number\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: When to choose Red-Black tree, AVL tree and B-trees?\nChoices:\na) many inserts, many searches and when managing more items respectively\nb) many searches, when managing more items respectively and many inserts respectively\nc) sorting, sorting and retrieval respectively\nd) retrieval, sorting and retrieval respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is a weight balanced tree?\nChoices:\na) a binary tree that stores the sizes of subtrees in nodes\nb) a binary tree with an additional attribute of weight\nc) a height balanced binary tree\nd) a normal binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The number of trees in a binomial heap with n nodes is\nChoices:\na) log n\nb) n\nc) n log n\nd) n/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by linear linked list?\nChoices:\na) deleting a node whose location is given\nb) searching an unsorted list for a given item\nc) inserting a node after the node with a given location\nd) traversing the list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: When an operand is read, which of the following is done?\nChoices:\na) it is placed on to the output\nb) it is placed in operator stack\nc) it is ignored\nd) operator stack is emptied\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What are the conditions for an optimal binary search tree and what is its advantage?\nChoices:\na) the tree should not be modified and you should know how often the keys are accessed, it improves the lookup cost\nb) you should know the frequency of access of the keys, improves the lookup time\nc) the tree can be modified and you should know the number of elements in the tree before hand, it improves the deletion time\nd) the tree should be just modified and improves the lookup time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: It is not possible to find the minimum number of steps to reach the end of an array in linear time.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The spanning tree of connected graph with 10 vertices contains __________\nChoices:\na) 9 edges\nb) 11 edges\nc) 10 edges\nd) 9 vertices\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Overflow condition in linked list may occur when attempting to __________\nChoices:\na) create a node when free space pool is empty.\nb) traverse the nodes when free space pool is empty.\nc) create a node when linked list is empty.\nd) none of these.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: To search for an element in a sorted array, which searching technique can be used?\nChoices:\na) linear search\nb) jump search\nc) binary search\nd) fibonacci search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Hashing is the problem of finding an appropriate mapping of keys into addresses.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Can a tree stored in an array using either one of inorder or post order or pre order traversals be again reformed?\nChoices:\na) yes just traverse through the array and form the tree\nb) no we need one more traversal to form a tree\nc) no in case of sparse trees\nd) yes by using both inorder and array elements\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: If two string s are identical, then strcmp() functions returns __________\nChoices:\na) -1\nb) 1\nc) yes\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the expected number of leaves in a randomized binary search tree?\nChoices:\na) n + 1\nb) (n + 1)/3\nc) (n + 1)/2\nd) n + 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following statement(s) about stack data structure is/are NOT correct?\nChoices:\na) linked list are used for implementing stacks\nb) top of the stack always contain the new node\nc) stack is the fifo data structure\nd) null link is present in the last node at the bottom of the stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: What is the number of edges present in a complete graph having n vertices?\nChoices:\na) (n*(n+1))/2\nb) (n*(n-1))/2\nc) n\nd) information given is insufficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which of the following is not an advantage of bit array?\nChoices:\na) exploit bit level parallelism\nb) maximal use of data cache\nc) can be stored and manipulated in the register set for long periods of time\nd) accessing individual elements is easy\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the expected depth of a node in a randomized binary search tree?\nChoices:\na) log n\nb) n!\nc) n\u00b2\nd) 2 log n + o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What are double and single threaded trees?\nChoices:\na) when both left, right nodes are having null pointers and only right node is null pointer respectively\nb) having 2 and 1 node\nc) using single and double linked lists\nd) using heaps and priority queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a k-d tree, k originally meant?\nChoices:\na) number of dimensions\nb) size of tree\nc) length of node\nd) weight of node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Cartesian trees are most suitable for?\nChoices:\na) searching\nb) finding nth element\nc) minimum range query and lowest common ancestors\nd) self balancing a tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: LCP array and __________ is used to construct suffix tree.\nChoices:\na) hash tree\nb) hash trie\nc) suffix array\nd) balanced tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: In a min heap:\nChoices:\na) minimum values are stored.\nb) child nodes have less value than parent nodes.\nc) parent nodes have less value than child nodes.\nd) maximum value is contained by the root node.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Can suffix tree be used in bioinformatics problems and solutions.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the longest length path for a node x in random binary search tree for the insertion process?\nChoices:\na) log x\nb) x\u00b2\nc) x!\nd) 4.311 log x\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time complexity of searching in a heap?\nChoices:\na) o(logn)\nb) o(n)\nc) o(1)\nd) o(nlogn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What are the applications of the heap data structure?\nChoices:\na) medical applications\nb) file compression\nc) stock market\nd) all of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The complexity of multiplying two matrices of order m*n and n*p is __________.\nChoices:\na) mnp\nb) mp\nc) mn\nd) np\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is/are advantages of circular queue?\nChoices:\na) memory management\nb) traffic system\nc) cpu scheduling\nd) all of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) distinct array position for every possible key\nb) fewer array positions than keys\nc) fewer keys than array positions\nd) distinct array positions for keys based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is not a disadvantage of priority scheduling in operating systems?\nChoices:\na) a low priority process might have to wait indefinitely for the cpu\nb) if the system crashes, the low priority systems may be lost permanently\nc) interrupt handling\nd) indefinite blocking\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) easier computations\nb) implement lifo principle in queues\nc) effective usage of memory\nd) to delete elements based on priority\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the speciality about the inorder traversal of a binary search tree?\nChoices:\na) it traverses in a non increasing order\nb) it traverses in an increasing order\nc) it traverses in a random fashion\nd) it traverses based on priority of the node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is computational geometry?\nChoices:\na) study of geometry using a computer\nb) study of geometry\nc) study of algorithms\nd) study of algorithms related to geometry\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?\nChoices:\na) operand is pushed on to the stack\nb) if the precedence of operator is higher, pop two operands and evaluate\nc) if the precedence of operator is lower, pop two operands and evaluate\nd) the result is pushed on to the operand stack\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: An AVL tree is a self - balancing binary search tree, in which the heights of the two child sub trees of any node differ by __________\nChoices:\na) at least one\nb) at most one\nc) two\nd) at most two\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: In a binary search tree, which of the following traversals would print the numbers in the ascending order?\nChoices:\na) level-order traversal\nb) pre-order traversal\nc) post-order traversal\nd) in-order traversal\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Why do we need a height-balanced binary tree?\nChoices:\na) to avoid formation of skew trees\nb) to save memory\nc) to attain faster memory access\nd) to simplify storing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is not a collision resolution strategy for open addressing?\nChoices:\na) linear probing\nb) quadratic probing\nc) double hashing\nd) rehashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A B+ tree can contain a maximum of 7 pointers in a node. What is the minimum number of keys in leaves?\nChoices:\na) 6\nb) 3\nc) 4\nd) 7\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: While evaluating the parse tree, which traversal technique is used to give the original input string?\nChoices:\na) pre-order traversal\nb) in-order traversal\nc) post-order traversal\nd) breadth-first traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The maximum number of nodes in a binary tree of depth 5 is __________\nChoices:\na) 31\nb) 16\nc) 32\nd) 15\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The 2d search tree has the simple property that branching on odd levels is done with respect to the first key.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What will be the height of a balanced full binary tree with 8 leaves?\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The minimum height of self balancing binary search tree with n nodes is __________\nChoices:\na) log2(n)\nb) n\nc) 2n + 1\nd) 2n - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is not a random tree?\nChoices:\na) treap\nb) random binary tree\nc) uniform spanning tree\nd) avl tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Is it possible to create a doubly linked list using only one pointer with every node.\nChoices:\na) not possible\nb) yes, possible by storing xor of addresses of previous and next nodes\nc) yes, possible by storing xor of current node and next node\nd) yes, possible by storing xor of current node and previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which one of the following is a special sparse matrix?\nChoices:\na) band matrix\nb) skew matrix\nc) null matrix\nd) unit matrix\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What do the first and last nodes of an XOR linked list contain? (let the addresses of the first and last nodes be A and B)\nChoices:\na) null xor a and b xor null\nb) null and null\nc) a and b\nd) null xor a and b\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is simple uniform hashing?\nChoices:\na) every element has equal probability of hashing into any of the slots\nb) a weighted probabilistic method is used to hash elements into the slots\nc) elements have random probability of hashing into array slots\nd) elements are hashed based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following special type of trie is used for fast searching of the full texts?\nChoices:\na) ctrie\nb) hash tree\nc) suffix tree\nd) t tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the term for inserting into a full queue known as?\nChoices:\na) overflow\nb) underflow\nc) null pointer exception\nd) program won't be compiled\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: An expression tree's nodes can be deleted by calling?\nChoices:\na) malloc\nb) calloc\nc) delete\nd) free\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Naive merge cannot be done in a skew merge.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an even number?\nChoices:\na) (n-1) / 2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following data structures can be efficiently implemented using height balanced binary search tree?\nChoices:\na) sets\nb) priority queue\nc) heap\nd) both sets and priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the fundamental operation on leftist heap?\nChoices:\na) insertion\nb) merging\nc) deletion\nd) swapping\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: How many orders of traversal are applicable to a binary tree (In General)?\nChoices:\na) 1\nb) 4\nc) 2\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the depth of the root node of K-ary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The average depth of a binary tree is given as?\nChoices:\na) O(N)\nb) O(log N)\nc) O(M log N)\nd) O(sqrt(N))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: A B-tree of minimum degree t can maximum __________ pointers in a node.\nChoices:\na) t-1\nb) 2t-1\nc) 2t\nd) t\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: The time required to search an element in a linked list of length n is\nChoices:\na) O(log n)\nb) O(n)\nc) O(1)\nd) O(n\u00b2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following options is an application of splay trees?\nChoices:\na) cache implementation\nb) networks\nc) send values\nd) receive values\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as __________\nChoices:\na) queue\nb) stack\nc) tree\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: If a node having two children is deleted from a binary tree, it is replaced by its __________\nChoices:\na) in-order predecessor\nb) in-order successor\nc) pre-order predecessor\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Which of the following is not an advantage of a priority queue?\nChoices:\na) easy to implement\nb) processes with different priority can be efficiently handled\nc) applications with differing requirements\nd) easy to delete elements in any case\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Why is heap implemented using array representations than tree(linked list) representations though both tree representations and heaps have same complexities?\nThen why go with array representation when both are having same values ?\nChoices:\na) arrays can store trees which are complete and heaps are not complete\nb) lists representation takes more memory hence memory efficiency is less and go with arrays and arrays have better caching\nc) lists have better caching\nd) in lists insertion and deletion is difficult\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is an advantage of open addressing over separate chaining?\nChoices:\na) it is simpler to implement\nb) table never gets full\nc) it is less sensitive to hash function\nd) it has better cache performance\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What are null nodes filled with in a threaded binary tree?\nChoices:\na) inorder predecessor for left node and inorder successor for right node information\nb) right node with inorder predecessor and left node with inorder successor information\nc) they remain null\nd) some other values randomly\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Which operation is not efficiently performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) merge\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A circularly linked list is used to represent a Queue. A single variable p is used to access the Queue. To which node should p point such that both the operations enQueue and deQueue can be performed in constant time? (GATE 2004) \nChoices:\na) rear node\nb) front node\nc) not possible with a single pointer\nd) node next to front\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The main distinguishable characterstic of a binomial heap from a binary heap is that\nChoices:\na) it allows union operations very efficiently\nb) it does not allow union operations that could easily be implemented in binary heap\nc) the heap structure is not similar to complete binary tree\nd) the location of child node is not fixed i.e child nodes could be at level (h-2) or (h-3), where h is height of heap and h>4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The maximum number of nodes in a tree for which post-order and pre-order traversals may be equal is __________\nChoices:\na) 3\nb) 1\nc) 2\nd) any number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: If there are more than 1 topological sorting of a DAG is possible, which of the following is True.\nChoices:\na) many Hamiltonian paths are possible\nb) no Hamiltonian path is possible\nc) exactly 1 Hamiltonian path is possible\nd) given information is insufficient to comment anything\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is True\nChoices:\na) the avl trees are more balanced compared to red black trees, but they may cause more rotations during insertion and deletion.\nb) heights of avl and red-black trees are generally same, but avl trees may cause more rotations during insertion and deletion.\nc) red black trees are more balanced compared to avl trees, but may cause more rotations during insertion and deletion.\nd) heights of avl and red-black trees are generally same, but red black trees may cause more rotations during insertion and deletion.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which of the following is True for a Hash tree?\nChoices:\na) hashing is used for sequential access\nb) indexing is used for direct access\nc) hash tree allows only sequential access\nd) hashing is used for direct access\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is True about a triply linked list?\nChoices:\na) dynamic in nature\nb) allows random access\nc) less memory wastage\nd) reverse traversing is difficult\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs consist of vertices connected by edges, representing networks; algorithms vary in complexity based on representation and traversal.",
        "target_text": "Question: Which of the following is True?\nChoices:\na) a graph may contain no edges and many vertices\nb) a graph may contain many edges and no vertices\nc) a graph may contain no edges and no vertices\nd) a graph may contain no vertices and many edges\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Choose the correct function from the following which determines the number of inversions in an array?\nChoices:\na) using bubble sort comparisons\nb) using merge sort with inversion count logic\nc) using simple count of unequal elements\nd) using linear scan for each element\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is True?\nChoices:\na) b+ tree allows only the rapid random access\nb) b+ tree allows only the rapid sequential access\nc) b+ tree allows rapid random access as well as rapid sequential access\nd) b+ tree allows rapid random access and slower sequential access\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: Minimum number of queues required for priority queue implementation?\nChoices:\na) 5\nb) 4\nc) 3\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Evaluate the following and choose the correct answer.\na/b+c*d where a=4, b=2, c=2, d=1.\nChoices:\na) 1\nb) 4\nc) 5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is True about linked list implementation of queue?\nChoices:\na) In push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end\nb) In push operation, if new nodes are inserted at the beginning, then in pop operation, nodes must be removed from the beginning\nc) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from end\nd) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from beginning\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 1+2*3-2\nChoices:\na) 3\nb) 6\nc) 5\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: In delete operation of BST, we need inorder successor (or predecessor) of a node when the node to be deleted has both left and right child as non-empty. Which of the following is True about inorder successor needed in delete operation?\nChoices:\na) Inorder successor is always a leaf node\nb) Inorder successor is always either a leaf node or a node with empty left child\nc) Inorder successor may be an ancestor of the node\nd) Inorder successor is always either a leaf node or a node with empty right child\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following is True about the Move-To-Front Method for rearranging nodes?\nChoices:\na) node with highest access count is moved to head of the list\nb) requires extra storage\nc) may over-reward infrequently accessed nodes\nd) requires a counter for each node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is TRUE?\nChoices:\na) The cost of searching an AVL tree is \u03b8 (log n) but that of a binary search tree is O(n)\nb) The cost of searching an AVL tree is \u03b8 (log n) but that of a complete binary tree is \u03b8 (n log n)\nc) The cost of searching a binary search tree is O (log n ) but that of an AVL tree is \u03b8(n)\nd) The cost of searching an AVL tree is \u03b8 (n log n) but that of a binary search tree is O(n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following is True about linked list implementation of queue?\nChoices:\na) in push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end.\nb) in push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from the beginning.\nc) both of the above\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is True?\nChoices:\na) larger the order of b-tree, less frequently the split occurs\nb) larger the order of b-tree, more frequently the split occurs\nc) smaller the order of b-tree, more frequently the split occurs\nd) smaller the order of b-tree, less frequently the split occurs\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: Which of the following is True about the trie?\nChoices:\na) root is letter a\nb) path from root to the leaf yields the string\nc) children of nodes are randomly ordered\nd) each node stores the associated keys\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What are the disadvantages of normal binary tree traversals?\nChoices:\na) there are many pointers which are null and thus useless\nb) there is no traversal which is efficient\nc) complexity in implementing\nd) improper traversals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: Which of the following is True about Binary Trees?\nChoices:\na) every binary tree is either complete or full\nb) every complete binary tree is also a full binary tree\nc) every full binary tree is also a complete binary tree\nd) no binary tree is both complete and full\ne) none of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 4*2+3-5/5\nChoices:\na) 10\nb) 11\nc) 16\nd) 12\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Choose the correct properties of weak-heap.\nChoices:\na) every node has value greater than the value of child node\nb) every right child of node has greater value than parent node\nc) every left child of node has greater value than parent node\nd) every left and right child of node has same value as parent node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What is a threaded binary tree traversal?\nChoices:\na) a binary tree traversal using stacks\nb) a binary tree traversal using queues\nc) a binary tree traversal using stacks and queues\nd) a binary tree traversal without using stacks and queues\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: An algorithm performs (logN)^1/2 find operations, N insert operations, (logN)^1/2 delete operations, and (logN)^1/2 decrease-key operations on a set of data items with keys drawn from a linearly ordered set. For a delete operation, a pointer is provided to the record that must be deleted. For the decrease-key operation, a pointer is provided to the record that has its key decreased. Which one of the following data structures is the most suited for the algorithm to use, if the goal is to achieve the best total asymptotic complexity considering all the operations?\nChoices:\na) unsorted array\nb) min-heap\nc) sorted array\nd) sorted doubly linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the time complexity of delete function in the hash table using list head?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the worst case analysis of an AA-Tree?\nChoices:\na) o(n)\nb) o(log n)\nc) o(n log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(3 log n / log 3)\nc) o(n)\nd) o(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the time complexity of searching for an element in a circular linked list?\nChoices:\na) o(n)\nb) o(nlogn)\nc) o(1)\nd) o(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is a time complexity for finding all the tandem repeats?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) o(n log n + z)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Self - balancing binary search trees have a much better average-case time complexity than hash tables.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is a time complexity for finding the longest palindromic substring in a string by using the generalized suffix tree?\nChoices:\na) linear time\nb) exponential time\nc) logarithmic time\nd) cubic time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the time complexity of inserting at the end in dynamic arrays?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) either o(1) or o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the time complexity of search function in a hash table using list head?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the minimum possible time complexity to find the number of steps to reach the end of an array?\nChoices:\na) o(n)\nb) o(n^2)\nc) o(n^{3/2})\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Which among the following is the worst-case time complexity for appending an element in a variable-length array?\nChoices:\na) o(n)\nb) o(1)\nc) o(n^2)\nd) o(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the time complexity for storing the maximum number of elements in Van Emde Boas tree if M is the maximum number of elements?\nChoices:\na) o(log m)\nb) o(m!)\nc) o(m)\nd) o(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time complexity for inserting a new item in a ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(n!)\nc) o(n)\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Why is implementation of stack operations on queues not feasible for a large dataset (Assume the number of elements in the stack to be n)?\nChoices:\na) because of its time complexity o(n)\nb) because of its time complexity o(log(n))\nc) extra memory is not required\nd) there are no problems\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Which of the following sorting algorithms does not have a worst case running time of O(n^2) ?\nChoices:\na) insertion sort\nb) merge sort\nc) quick sort\nd) bubble sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What would be the asymptotic time complexity to find an element in the linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(n^2)\nd) o(n^4)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What would be the asymptotic time complexity to insert an element at the second position in the linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(n^2)\nd) o(n^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Let H be a binary min-heap consisting of n elements implemented as an array. What is the worst case time complexity of an optimal algorithm to find the maximum element in H?\nChoices:\na) \u03b8(1)\nb) \u03b8(log n)\nc) \u03b8(n)\nd) \u03b8(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the worst case search time of a hashing using separate chaining algorithm?\nChoices:\na) O(n log n)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the time complexity of Build Heap operation? \n(Build Heap is used to build a max(or min) binary heap from a given array. Build Heap is used in Heap Sort as a first step for sorting.)\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the time complexity of insert function in a hash table using a binary tree?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the worst case time complexity of inserting n^2 elements into an AVL-tree with n elements initially ?\nChoices:\na) \u03b8(n^4)\nb) \u03b8(n^2)\nc) \u03b8(n^2 log n)\nd) \u03b8(n^3)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: How do you count the number of elements in the circular linked list?\nChoices:\na) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\nb) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != null)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\nc) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp != null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\nd) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp == null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity of level order traversal?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Why red-black trees are preferred over hash tables though hash tables have constant time complexity?\nChoices:\na) no they are not preferred\nb) because of resizing issues of hash table and better ordering in red-black trees\nc) because they can be implemented using trees\nd) because they are balanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the disadvantage of BST over the hash table?\nChoices:\na) bst is easier to implement\nb) bst can get the keys sorted by just performing inorder traversal\nc) bst can perform range query easily\nd) time complexity of hash table in inserting, searching and deleting is less than that of bst\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(m!)\nc) o(m^2)\nd) o(log log m)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the time complexity improvement of skip lists from linked lists in insertion and deletion?\nChoices:\na) o(n) to o(log n) where n is number of elements\nb) o(n) to o(1) where n is number of elements\nc) no change\nd) o(n) to o(n^2) where n is number of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\nChoices:\na) o(1)\nb) o(n)\nc) \u03b8(n)\nd) both o(n) and \u03b8(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Suppose we are sorting an array of eight integers using heapsort, and we have just finished some heapify (either maxheapify or minheapify) operations. The array now looks like this: 16 14 15 10 12 27 28. How many heapify operations have been performed on root of heap?\nChoices:\na) 1\nb) 2\nc) 3 or 4\nd) 5 or 6\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the worst case time complexity for search, insert and delete operations in a general Binary Search Tree for a skewed tree ?\nChoices:\na) O(n) for all\nb) O(log n) for all\nc) O(log n) for search and insert, and O(n) for delete\nd) O(log n) for search, and O(n) for insert and delete\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the best case height of a B-tree of order n and which has k keys?\nChoices:\na) log\u2099(k+1) - 1\nb) nk\nc) log\u2096(n+1) - 1\nd) k log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: A circular linked list can be used for __________\nChoices:\na) stack\nb) queue\nc) both stack & queue\nd) neither stack or queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Is O(n) the worst case time complexity for addition of two sparse matrices?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: Reversal algorithm and juggling algorithm for array rotation have the same time complexity.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the time complexity to count the number of elements in the linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is a time complexity for finding the longest prefix that is common between suffix in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) o(log n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Given two max heaps of size n each, what is the minimum possible time complexity to make a one max-heap of size from elements of two max heaps?\nChoices:\na) o(n^2)\nb) o(n log log n)\nc) o(n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The worst case running time of all operations in a skew heap is given as?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(n^2)\nd) o(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the worst case time complexity of query operation (n is the number of candidates)?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) singly linked list\nb) doubly linked list\nc) circular linked list\nd) binary trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: The worst case complexity of binary search matches with __________\nChoices:\na) interpolation search\nb) linear search\nc) merge sort\nd) none of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the time complexity of for achieving competitive ratio by tango tree?\nChoices:\na) o(log n)\nb) o(n^2)\nc) o(n!)\nd) o(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Time complexity to check if an edge exists between two vertices would be __________\nChoices:\na) o(v^2)\nb) o(v + e)\nc) o(1)\nd) o(e)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: The worst case complexity of deleting any arbitrary node value element from heap is __________\nChoices:\na) o(log n)\nb) o(n)\nc) o(n log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the time complexity of insertion operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) o(1)\nb) o(m)\nc) o(m^2)\nd) o(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is a time complexity for inserting an alphabet in the tree using hash maps?\nChoices:\na) o(log n!)\nb) o(n!)\nc) o(n^2)\nd) o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: The quick sort algorithm exploit __________ design technique.\nChoices:\na) greedy\nb) dynamic programming\nc) divide and conquer\nd) backtracking\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity for deleting a key or integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(log log m)\nc) o(m!)\nd) o(m^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: What is the time complexity of reversing a word using stack algorithm?\nChoices:\na) o(n log n)\nb) o(n^2)\nc) o(n)\nd) o(m log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is the time complexity for inserting the string and forming a new string in the rope data structure?\nChoices:\na) o(log n)\nb) o(n!)\nc) o(n^2)\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following sorting algorithms can be used to sort a random linked list with minimum time complexity?\nChoices:\na) insertion sort\nb) quick sort\nc) heap sort\nd) merge sort\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the worst case time complexity of insert function in the hash table when the list head is used for chaining?\nChoices:\na) o(1)\nb) o(n log n)\nc) o(log n)\nd) o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the time complexity of enqueue operation?\nChoices:\na) o(log n)\nb) o(n log n)\nc) o(n)\nd) o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What will be the time complexity of delete operation if all the candidates are evenly spaced so that each bin has constant number of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) o(1)\nb) o(m)\nc) o(m^2)\nd) o(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: An advantage of chained hash table (external hashing) over the open addressing scheme is\nChoices:\na) worst case complexity of search operations is less\nb) space used is less\nc) deletion is easier\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is the time complexity for deleting the string to form a new string in the rope data structure?\nChoices:\na) o(n^2)\nb) o(n!)\nc) o(log n)\nd) o(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the time complexity to insert a node based on position in a priority queue?\nChoices:\na) o(n log n)\nb) o(log n)\nc) o(n)\nd) o(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the advantage of a hash table over BST?\nChoices:\na) hash table has a better average time complexity for performing insert, delete and search operations\nb) hash table requires less space\nc) range query is easy with hash table\nd) easier to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Which of the sorting techniques has highest best-case runtime complexity?\nChoices:\na) quick sort\nb) selection sort\nc) insertion sort\nd) bubble sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) undo operation\nb) recursive function calls\nc) allocating cpu to resources\nd) implement hash tables\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the average case time complexity for finding the height of the binary tree?\nChoices:\na) h = O(log log n)\nb) h = O(n log n)\nc) h = O(n)\nd) h = O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the time complexity of the delete function in the hash table using a binary tree?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Hash tree is used in data synchronisation. In the worst case the data synchronisation takes __________ time.\nChoices:\na) o(log n)\nb) o(n^2)\nc) o(n log n)\nd) o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time complexity for deleting root key in a ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(3 log n / log 3)\nc) o(n)\nd) o(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The binary tree sort implemented using a self-balancing binary search tree takes __________ time in worst case.\nChoices:\na) o(n log n)\nb) o(n)\nc) o(n^2)\nd) o(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: In a circular linked list:\nChoices:\na) components are all linked together in some sequential manner.\nb) there is no beginning and no end.\nc) components are arranged hierarchically.\nd) forward and backward traversal within the list is permitted.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: The worst case running time of a linear search on the self-organizing list is __________\nChoices:\na) o(1)\nb) o(log n)\nc) o(n)\nd) o(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the worst case time complexity of linear search algorithm?\nChoices:\na) \u03b8(1)\nb) \u03b8(n)\nc) \u03b8(log n)\nd) \u03b8(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time complexity for increasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: The worst case of quick sort has order __________.\nChoices:\na) O(n^2)\nb) O(n)\nc) O(n log^2 n)\nd) O(log^2 n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the advantage of hashing with chaining?\nChoices:\na) cache performance is good\nb) uses less space\nc) less sensitive to hash function\nd) has a time complexity of O(n) in the worst case\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: B-tree and AVL tree have the same worst case time complexity for insertion and deletion.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the time complexity of the juggling algorithm to rotate an array?\nChoices:\na) o(1)\nb) o(n)\nc) o(d)\nd) o(n*d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity of an infix to postfix conversion algorithm?\nChoices:\na) o(n log n)\nb) o(n)\nc) o(n^2)\nd) o(m log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the worst case time complexity of inserting a node in a doubly linked list?\nChoices:\na) o(n log n)\nb) o(log n)\nc) o(n)\nd) o(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is a time complexity for finding frequently occurring substring of minimum length in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) o(n^2 + n)\nd) o(log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: The worst case running time to search for an element in a balanced binary search tree with n = 2^k elements is:\nChoices:\na) \u03b8(n log n)\nb) \u03b8(n*2\u207f)\nc) \u03b8(n)\nd) \u03b8(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is the time complexity to reverse a string?\nChoices:\na) O(n^2)\nb) O(1)\nc) O(log n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity for creating a new node and then performing concatenation in the rope data structure?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Consider that n elements are to be sorted. What is the worst case time complexity of Bubble sort?\nChoices:\na) O(1)\nb) O(log^2 n)\nc) O(n)\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following Statement is correct about Circular Linked List?\nChoices:\na) only p4\nb) only p1\nc) p1 and p2\nd) p1 and p4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays store elements in contiguous memory locations, allowing O(1) access but costly insertions/deletions at arbitrary positions.",
        "target_text": "Question: What is the time complexity of pop() operation when the stack is implemented using an array?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity to insert a node at the beginning of the list?\nChoices:\na) o(log n)\nb) o(n)\nc) o(1)\nd) none\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the time complexity of insert function in a hash table using a doubly linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the worst case possible height of AVL tree?\nChoices:\na) 2 log n (assume base of log is 2)\nb) 1.44 log n (assume base of log is 2)\nc) depends upon implementation\nd) \u03b8(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the worst case time complexity of the insertion in the hash tree?\nChoices:\na) O(log\u2096(n))\nb) O(n^2)\nc) O(n log\u2096(n))\nd) O(k*n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: For what size of nodes, the worst case of usage of space in suffix tree seen?\nChoices:\na) n nodes\nb) 2n nodes\nc) 2n nodes\nd) n! nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time complexity for increasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(3 log n / log 3)\nc) o(n)\nd) o(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Which of the following uses memorization?\nChoices:\na) Greedy approach\nb) Divide and conquer approach\nc) Dynamic programming approach\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity for finding a maximum and minimum integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(m!)\nc) o(1)\nd) o(log log m)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is a time complexity for finding all the maximal palindrome in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) \u03b8(log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: If the data collection is in sorted form and equally distributed then the run time complexity of interpolation search is __________\nChoices:\na) \u03b8(n)\nb) \u03b8(1)\nc) \u03b8(log n)\nd) \u03b8(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which among the following is the time complexity for inserting at the beginning of a triply linked list?\nChoices:\na) o(n)\nb) o(1)\nc) o(log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String algorithms process sequences of characters, often involving pattern matching, searching, and manipulation operations.",
        "target_text": "Question: What is the time complexity for splitting the string into two new strings in the rope data structure?\nChoices:\na) O(n^2)\nb) O(n!)\nc) O(log n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is a time complexity for x pattern occurrence of length n?\nChoices:\na) o(log n!)\nb) \u03b8(n!)\nc) o(n^2)\nd) \u03b8(n + x)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: Quick sort algorithm is an example of __________.\nChoices:\na) greedy approach\nb) improved binary search\nc) dynamic programming\nd) divide and conquer\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the best case time complexity of deleting a node in a Singly Linked list?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the worst case time complexity of delete operation (n is the number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the time complexity of search function in a hash table using a doubly linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle, with push and pop operations typically performed in O(1) time.",
        "target_text": "Question: Why would a recursive implementation fail in skew heaps?\nChoices:\na) skew heaps are self adjusting\nb) efficiency gets reduced\nc) lack of stack space\nd) time complexity\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What are the operations that could be performed in O(log n) time complexity by red-black tree?\nChoices:\na) insertion, deletion, finding predecessor, successor\nb) only insertion\nc) only finding predecessor, successor\nd) for sorting\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: How are free blocks linked together mostly and in what addressing order?\nChoices:\na) circular linked list and increasing addressing order\nb) linked list and decreasing addressing order\nc) linked list and in no addressing order\nd) none of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: n items are stored in a sorted doubly linked list. For a delete operation, a pointer is provided to the record to be deleted. For a decrease-key operation, a pointer is provided to the record on which the operation is to be performed. An algorithm performs the following operations on the list in this order: \u03b8(n) delete, \u03b8(log n) insert, \u03b8(log n) find, and \u03b8(n) decrease-key. What is the time complexity of all these operations put together?\nChoices:\na) \u03b8(log\u00b2 n)\nb) \u03b8(n)\nc) \u03b8(n log n)\nd) \u03b8(n\u00b2 log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) recursive function calls\nb) undo operation in a text editor\nc) implement hash tables\nd) allocating cpu to resources\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the worst case time complexity of finding the nearest neighbour?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(log n)\nd) o(n^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What is the time complexity for maintaining a dynamic set of weighted trees?\nChoices:\na) o(n)\nb) o(n^2)\nc) o(log n)\nd) o(n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What differentiates a circular linked list from a normal linked list?\nChoices:\na) you cannot have the 'next' pointer point to null in a circular linked list\nb) it is faster to traverse the circular linked list\nc) in a circular linked list, each node points to the previous node instead of the next node\nd) head node is known in circular linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: Which among the following is the time complexity for inserting an element in an unrolled linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues follow the First-In-First-Out (FIFO) principle, with enqueue and dequeue operations typically performed in O(1) time in linked list or circular array implementations.",
        "target_text": "Question: What is the time complexity to insert a node based on key in a priority queue?\nChoices:\na) o(n log n)\nb) o(log n)\nc) o(n)\nd) o(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heaps are complete binary trees used primarily for priority queues, supporting insert and delete-min/max in O(log n) time.",
        "target_text": "Question: Pairing heaps time complexity was inspired by that of?\nChoices:\na) splay tree\nb) treap\nc) red-black tree\nd) avl tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: What is the time complexity of insert function in a hash table using list head?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms locate elements within a dataset, with performance depending on data structure and algorithm type.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) o(m!)\nb) o(log m!)\nc) o(log log m)\nd) o(m^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing maps keys to indices in a table for near-constant-time lookups, though collisions require resolution strategies.",
        "target_text": "Question: Which searching technique takes O(1) time complexity for searching the data?\nChoices:\na) binary search\nb) linear search\nc) avl tree search\nd) hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a specific order, with time complexities ranging from O(n) to O(n log n) or worse.",
        "target_text": "Question: In worst case Quick Sort has order __________.\nChoices:\na) o(n log n)\nb) o(n^2/2)\nc) o(log n)\nd) o(n^2/4)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists consist of nodes connected via pointers, enabling efficient insertions/deletions but slower O(n) access times.",
        "target_text": "Question: What is the worst case time complexity of inserting n elements into an empty linked list, if the linked list needs to be maintained in sorted order?\nChoices:\na) \u03b8(n)\nb) \u03b8(n log n)\nc) \u03b8(n\u00b2)\nd) \u03b8(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The time complexity of converting a prefix notation to infix notation is __________\nChoices:\na) o(n) where n is the length of the equation\nb) o(n) where n is number of operands\nc) o(1)\nd) o(log n) where n is length of the equation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: Program with highest run-time complexity is __________\nChoices:\na) tower of hanoi\nb) fibonacci series\nc) prime number series\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity for inserting a key or integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(m!)\nc) o(m^2)\nd) o(log log m)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The \u03b8 notation in asymptotic evaluation represents __________\nChoices:\na) base case\nb) average case\nc) worst case\nd) null case\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: When would it be optimal to prefer Red-black trees over AVL trees?\nChoices:\na) when there are more insertions or deletions\nb) when more search is needed\nc) when tree must be balanced\nd) when log(nodes) time complexity is needed\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: What is the time complexity of evaluation of postfix expression algorithm?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(n^2)\nd) o(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The Floyd-Warshall algorithm for all-pair shortest paths computation is based on:\nChoices:\na) greedy paradigm\nb) divide-and-conquer paradigm\nc) dynamic programming paradigm\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Theoretical concepts in data structures cover abstract properties, computational complexities, and design trade-offs.",
        "target_text": "Question: The worst case analysis for a naive merge is given as?\nChoices:\na) o(n)\nb) o(log n)\nc) o(n log n)\nd) o(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees are hierarchical structures with a root and child nodes, supporting efficient searches, insertions, and deletions depending on type.",
        "target_text": "Question: What are the worst case and average case complexities of a binary search tree?\nChoices:\na) o(n), o(n)\nb) o(log n), o(log n)\nc) o(log n), o(n)\nd) o(n), o(log n)\nAnswer: d"
    }
]