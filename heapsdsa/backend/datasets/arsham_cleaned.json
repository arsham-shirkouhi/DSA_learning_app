[
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: If implemented using a circular array, both ENQUEUE and DEQUEUE operations in a queue can be performed in constant time O(1).",
        "target_text": "Question: A queue is implemented using an array such that ENQUEUE and DEQUEUE operations are performed efficiently. Which one of the following statements is CORRECT (n refers to the number of items in the queue)?\nChoices:\na) Both operations can be performed in O(1) time\nb) At most one operation can be performed in O(1) time but the worst case time for the other operation will be Ω(n)\nc) The worst case time complexity for both operations will be Ω(n)\nd) Worst case time complexity for both operations will be Ω(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Dijkstra's algorithm implemented using a binary heap and adjacency list has a time complexity of O((|E| + |V|) log |V|).",
        "target_text": "Question: Let G(V, E) be an undirected graph with positive edge weights. Dijkstra's single-source shortest path algorithm can be implemented using the binary heap data structure with time complexity:\nChoices:\na) O(|V|^2)\nb) O(|E| + |V| log |V|)\nc) O(|V| log |V|)\n d)O((|E| + |V|) log |V|)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Circular linked lists are ideal for applications like CPU scheduling in operating systems, where processes are managed in a circular queue-like structure.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) Undo operation in a text editor\nb) Recursive function calls\nc) Allocating CPU to resources\nd) Implement Hash Tables\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inserting or deleting at the beginning of an array requires shifting all elements, resulting in a time complexity of O(n).",
        "target_text": "Question: What is the time complexity for inserting/deleting at the beginning of the array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In most queue implementations (especially circular arrays or linked lists), DEQUEUE (removal from the front) is a constant-time O(1) operation.",
        "target_text": "Question: Which of the following operations on a queue data structure have a time complexity of O(1)?\nChoices:\na) Enqueue and Clear\nb) Dequeue and Peek\nc) Enqueue and Peek\nd) Clear only\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: If a hash table uses a balanced binary tree for chaining (instead of a linked list), the average search time is O(log n), but if it's incorrectly assumed the key is always at the root, the worst-case could be O(n). However, under ideal conditions and assuming direct access, some sources may still classify it as O(1).",
        "target_text": "Question: What is the time complexity of the search function in a hash table using a binary tree?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Deleting a node at index i in a binary heap may require both upward and downward heapify operations. The time complexity is O(d), where d is the depth of the heap.",
        "target_text": "Question: An operator delete(i) for a binary heap data structure is to be designed to delete the item in the i-th node. Assume that the heap is implemented in an array and i refers to the i-th index of the array. If the heap tree has depth d (number of edges on the path from the root to the farthest leaf), then what is the time complexity to re-fix the heap efficiently after the removal of the element?\nChoices:\na) O(1)\nb) O(d) but not O(1)\nc) O(2d) but not O(d)\nd) O(d2^d) but not O(2d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, the time to search for an element is O(n) in the worst case as each node might have to be visited.",
        "target_text": "Question: What is the time complexity of searching for an element in a circular linked list?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(1)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In direct address tables, insertion takes O(1) time as each key maps directly to a slot based on its value.",
        "target_text": "Question: What is the time complexity to insert an element into the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The top tree is a dynamic tree structure. Initializing it requires constructing subtrees for each node, which takes O(n) time.",
        "target_text": "Question: What is the time complexity for the initialization of top tree?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(log n)\nd) O(n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Using a self-balancing BST to count inversions in an array reduces the time complexity from O(n^2) in nested loops to O(n log n).",
        "target_text": "Question: The time complexity of the code that determines the number of inversions in an array using self-balancing BST is lesser than that of the code that uses loops for the same purpose.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Binary search divides the search space in half at each step, resulting in a worst-case time complexity of θ(log n), not θ(n). The original answer may be incorrect.",
        "target_text": "Question: What is the worst case run-time complexity of binary search algorithm?\nChoices:\na) θ(log n)\nb) θ(n)\nc) θ(n log n)\nd) θ(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inserting into a sorted array in the worst case requires shifting all elements after the insertion point, resulting in O(n) time complexity.",
        "target_text": "Question: What is the worst case time complexity of inserting an element into the sorted array?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In the worst case, inserting or deleting elements at the end of a dynamic array requires resizing, which takes O(n) time. However, this is amortized and not typical.",
        "target_text": "Question: In special case, the time complexity of inserting/deleting elements at the end of dynamic array is __________\nChoices:\na) O(n)\nb) O(sqrt(n))\nc) O(log n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the best-case and average-case scenarios, inserting into a hash table or direct address table is O(1). Thus, the worst-case insertion can still be O(1) under ideal hashing.",
        "target_text": "Question: What is the worst-case time complexity of an insertion operation in a hash table (n = number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary min heap, operations like insert, delete, and decrease-key are O(log n), but merging with another heap is costlier and takes O(n) if not using specialized structures.",
        "target_text": "Question: Which of the following Binary Min Heap operation has the highest time complexity?\nChoices:\na) Inserting an item under the assumption that the heap has capacity to accommodate one more item\nb) Merging with another heap under the assumption that the heap has capacity to accommodate items of other heap\nc) Deleting an item from heap\nd) Decreasing value of a key\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, nodes form a cycle and none of them point to NULL; instead, the last node points to the head.",
        "target_text": "Question: In a circular linked list, how many nodes contain NULL as the address?\nChoices:\na) Only one node\nb) Only two nodes\nc) Every node\nd) None\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: When a graph is represented by an adjacency list, checking whether an edge exists between two vertices may require scanning through the adjacency list, which takes O(V) in the worst case.",
        "target_text": "Question: Time complexity to find if there is an edge between 2 particular vertices is __________\nChoices:\na) O(V)\nb) O(E)\nc) O(1)\nd) O(V + E)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Finding the longest repeated substring in a string using suffix arrays or suffix trees can be done in linear time O(n).",
        "target_text": "Question: What is a time complexity for finding the longest substring that is repeated in a string?\nChoices:\na) O(log n!)\nb) θ(n!)\nc) O(n^2 + n)\nd) θ(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Ukkonen's algorithm constructs a suffix tree in O(n log n) time in the worst case, though it performs better in practice and is often considered linear.",
        "target_text": "Question: What is the time complexity of Ukkonen's algorithm?\nChoices:\na) O(log n!)\nb) O(n!)\nc) O(n^2)\nd) O(n log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Building a heap is called heapifying. This process organizes the array into a heap by applying the heapify function from the bottom up.",
        "target_text": "Question: What is the process of building a ternary heap called?\nChoices:\na) Heapify\nb) Hashing\nc) Linking\nd) Merging\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: When candidates are evenly distributed in bins and a query operation intersects k bins, the total time complexity is O(k).",
        "target_text": "Question: What will be the time complexity of query operation if all the candidates are evenly spaced so that each bin has constant number of candidates? (k = number of bins query rectangle intersects)\nChoices:\na) O(1)\nb) O(k)\nc) O(k^2)\nd) O(log k)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The optimal algorithm to find the intersection node of two linked lists runs in θ(m+n) by aligning the traversal length of both lists.",
        "target_text": "Question: Suppose there are two singly linked lists both of which intersect at some point and become a single linked list. The head or start pointers of both the lists are known, but the intersecting node and lengths of lists are not known. What is the worst-case time complexity of the optimal algorithm to find the intersecting node from two intersecting linked lists?\nChoices:\na) θ(n*m)\nb) θ(n^2), where m > n\nc) θ(m+n)\nd) θ(min(n, m))\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Path compression optimizes disjoint set operations. When combined with union by rank, its worst-case time complexity becomes O(M log N) where M is the number of operations.",
        "target_text": "Question: What is the worst case efficiency for a path compression algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: If only the front pointer is maintained in a queue implemented using a linked list, insertion (at rear) and emptying the queue both require O(n) time.",
        "target_text": "Question: In linked list implementation of queue, if only front pointer is maintained, which of the following operations take worst-case linear time?\nChoices:\na) Insertion\nb) Deletion\nc) To empty a queue\nd) Both Insertion and To empty a queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Rotating elements one by one involves shifting the entire array multiple times, making it the most expensive among rotation algorithms with time complexity O(n*d).",
        "target_text": "Question: Which of the following algorithms to rotate an array has the maximum time complexity?\nChoices:\na) Rotate elements one by one\nb) Juggling algorithm\nc) Reversal algorithm\nd) Using a temporary array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In rope data structures, each operation like finding a character at index x or splitting a string is supported in O(log n) time due to the tree-based representation.",
        "target_text": "Question: What is the time complexity for finding the node at x position where n is the length of the rope?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Although binary tree sort with self-balancing BSTs achieves O(n log n) complexity in the worst case, it can be slower than Merge Sort due to higher constant factors and tree rotations.",
        "target_text": "Question: Binary tree sort implemented using a self-balancing binary search tree takes O(n log n) time in the worst case but is still slower than Merge Sort.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To construct an AVL tree without rotations, one can sort the input, find the median as root, and build the tree recursively to maintain balance.",
        "target_text": "Question: Given an empty AVL tree, how would you construct an AVL tree when a set of numbers is given without performing any rotations?\nChoices:\na) Just build the tree with the given input\nb) Find the median of the set of elements given, make it as root and construct the tree\nc) Use trial and error\nd) Use dynamic programming to build the tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In asymptotic notation, expressions with exponential growth (e.g., 2^f(n)) dominate polynomial or linear terms, making 2^θ(n) worse than θ(n^3), θ(n + 9378), or n^θ(1).",
        "target_text": "Question: Which of the following asymptotic notations is the worst among all?\nChoices:\na) θ(n + 9378)\nb) θ(n^3)\nc) n^θ(1)\nd) 2^θ(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Finding the longest common substring between two strings S1 and S2 can be done using dynamic programming or suffix automata in θ(n1 + n2) time.",
        "target_text": "Question: What is the time complexity for finding the longest substring that is common in strings S1 and S2 (n1 and n2 are the string lengths of S1 and S2 respectively)?\nChoices:\na) O(log n!)\nb) θ(n!)\nc) O(n^2 + n1)\nd) θ(n1 + n2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To compute the total length of strings on all edges of a tree (like a suffix tree), we may need to traverse each node and sum string lengths, which can result in O(n^2) in the worst case.",
        "target_text": "Question: What is the time complexity for finding the total length of all strings on all edges of a tree?\nChoices:\na) θ(n)\nb) θ(n!)\nc) θ(1)\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Bellman-Ford algorithm has a time complexity of θ(V*E). In a complete graph, E = V(V-1) = θ(V^2), so the total becomes θ(V*V^2) = θ(V^3).",
        "target_text": "Question: What is the time complexity of Bellman-Ford single-source shortest path algorithm on a complete graph of n vertices?\nChoices:\na) θ(V^2)\nb) θ(V^2 log V)\nc) θ(V^3)\nd) θ(V^3 log V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In simple chaining used in hash tables, doubly linked lists are often preferred as they simplify deletion of elements by allowing backward traversal.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) Doubly linked list\nb) Circular linked list\nc) Singly linked list\nd) Binary trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: If frequent random access by position is needed, an array-based representation of a linked list provides constant-time O(1) access.",
        "target_text": "Question: What kind of linked list is best to answer questions like 'What is the item at position n?'\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Array implementation of linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In weak heaps, the minimum element is usually stored at the root. Thus, searching for the minimum value takes constant time O(1).",
        "target_text": "Question: What is the worst case time in searching minimum value in weak-heap?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Direct address tables map keys directly to an index in an array. Deleting an element requires only overwriting the index, so time complexity is O(1).",
        "target_text": "Question: What is the time complexity to delete an element from the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Depth First Traversal (DFS) visits each vertex and edge once in a graph. Its time complexity is Θ(|V| + |E|), where V is the number of vertices and E is the number of edges.",
        "target_text": "Question: Time complexity of Depth First Traversal is __________\nChoices:\na) Θ(|V| + |E|)\nb) Θ(|V|)\nc) Θ(|E|)\nd) Θ(|V|*|E|)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To calculate the sum of all leaf nodes in a binary tree, we must traverse each node at least once. Thus, the time complexity is O(n).",
        "target_text": "Question: The time complexity of calculating the sum of all leaf nodes in an n-node binary tree is __________\nChoices:\na) O(n^2)\nb) O(n + 1)\nc) O(1)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The optimal Build Heap operation uses a bottom-up approach, which has a linear time complexity of O(n) instead of O(n log n).",
        "target_text": "Question: What is the best case complexity in building a heap?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n log^2 n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The code reverses the first k elements of an array, which takes O(k) time since it performs k/2 swaps.",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) O(k)\nb) O(n)\nc) O(k log k)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The postfix expression 2 3 + 4 5 6 - - * evaluates as: 2 + 3 = 5, 5 - 6 = -1, 4 - (-1) = 5, 5 * 5 = 25.",
        "target_text": "Question: What is the value of the postfix expression 2 3 + 4 5 6 - - *?\nChoices:\na) 19\nb) 21\nc) -4\nd) 25\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operations like Find Next and Find Previous are often supported in ordered data structures like balanced search trees or linked lists with additional pointers.",
        "target_text": "Question: Can operations like Find Next and Find Previous be implemented in ordered data structures like balanced trees or linked lists?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks are inherently used for operations such as expression evaluation, recursion, and reversing strings. Job scheduling typically involves queues or priority queues.",
        "target_text": "Question: Which of the following is not an inherent application of stack?\nChoices:\na) Reversing a string\nb) Evaluation of postfix expression\nc) Implementation of recursion\nd) Job scheduling\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Recursion is implemented via a function call stack. Internally, this stack is often implemented using an array-based structure or a True stack data structure.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Stack\nb) Queue\nc) List\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Most infix expression evaluation algorithms convert the input to postfix or prefix and evaluate in a single pass using a stack. Thus, one pass is sufficient.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Most infix expression evaluation algorithms convert the input to postfix or prefix and evaluate in a single pass using a stack. Thus, one pass is sufficient.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The given recursive function prints a linked list in reverse order using post-order traversal logic.",
        "target_text": "Question: What does the following function do for a given Linked List with first node as head?\nvoid fun1(struct node* head)\n{\n  if(head == NULL)\n    return;\n  \n  fun1(head->next);\n  printf(\"%d  \", head->data);\n}, \nChoices:\na) Prints all nodes of linked list\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Double hashing generates more probe sequences than linear or quadratic probing due to the use of two hash functions.",
        "target_text": "Question: Which technique has the greatest number of probe sequences?\nChoices:\na) Linear probing\nb) Quadratic probing\nc) Double hashing\nd) Closed hashing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Dynamic arrays perform poorly when reallocation is costly and the array size is small. In such cases, the overhead of dynamic resizing isn't worth the benefit.",
        "target_text": "Question: In which of the following cases are dynamic arrays not preferred?\nChoices:\na) If the size of the array is unknown\nb) If the size of the array changes after few iterations\nc) If the memory reallocation is expensive\nd) If the array holds fewer elements\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In memory allocation, freelists can be implemented implicitly via garbage collection or explicitly via calls to malloc/new.",
        "target_text": "Question: What are implicit and explicit implementations of freelists?\nChoices:\na) Garbage collection and new/malloc respectively\nb) New/malloc and garbage collection respectively\nc) Implicit implementation is not favored\nd) Explicit implementation is not favored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The rope data structure allows for efficient insertion and deletion due to its tree-like structure, often outperforming arrays.",
        "target_text": "Question: Is insertion and deletion operation faster in rope than in an array?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A triply linked list does not inherently prevent the insertion of duplicate nodes. Nodes with identical data can still be added.",
        "target_text": "Question: A node will be rejected while inserting if the given node is already present in a triply linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B-tree of order n, each non-root node must contain at least ceil(n/2) - 1 keys, which simplifies to at least (n-1)/2 keys for simplicity.",
        "target_text": "Question: A B-tree of order n is an order-n multiway tree in which each non-root node contains __________\nChoices:\na) at most (n - 1)/2 keys\nb) exactly (n - 1)/2 keys\nc) at least 2n keys\nd) at least (n - 1)/2 keys\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Buddy memory allocation manages free memory blocks by dividing memory into powers of two and maintaining multiple free lists, each for a specific block size.",
        "target_text": "Question: What is buddy memory management of free lists?\nChoices:\na) Modified version of first fit\nb) Buddy allocation keeps several free lists, each one holds blocks which are of one particular size\nc) Modified version of best fit\nd) A tree representation of free lists\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Accessing an index beyond the bounds of an array in Java throws an ArrayIndexOutOfBoundsException, as shown in the given code.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array {\n\tpublic static void main(String args[]) {\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[5]);\n\t}\n}\nChoices:\na) 4\nb) 5\nc) ArrayIndexOutOfBoundsException\nd) InvalidInputException\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Skew merging is an efficient variant of merge used in skew heaps. It has amortized logarithmic time complexity due to its adaptive merging.",
        "target_text": "Question: What is the amortized efficiency of skew merge?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Binary trees can be traversed using strategies like depth-first (pre-order, in-order, post-order) or breadth-first (level order).",
        "target_text": "Question: Which traversal strategy visits nodes level by level from top to bottom in a binary tree?\nChoices:\na) Depth-first traversal\nb) Breadth-first traversal\nc) Random traversal\nd) Priority traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Tracking a stack operation sequence helps identify the order of elements popped. The correct answer must reflect the final stack state after each operation.",
        "target_text": "Question: If the sequence of operations - push(1), push(2), pop, push(1), push(2), pop, pop, pop, push(2), pop - is performed on a stack, the sequence of popped out values is:\nChoices:\na) 2,2,1,1,2\nb) 2,2,1,2,2\nc) 2,1,2,2,1\nd) 2,1,2,2,2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack operations such as reversing strings, evaluating expressions, and simulating recursion are inherent. Job scheduling typically uses queues or heaps.",
        "target_text": "Question: Which data structure can be used to test a palindrome?\nChoices:\na) Tree\nb) Heap\nc) Stack\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix expressions are evaluated from right to left, while postfix expressions are evaluated from left to right.",
        "target_text": "Question: Given a prefix and a postfix notation, what is the difference between them?\nChoices:\na) The postfix equation is solved starting from the left whereas the prefix notation is solved from the right\nb) The postfix equation is solved starting from the right whereas the prefix notation is solved from the left\nc) Both equations are solved starting from the same side (right)\nd) Both equations are solved starting from the same side (left)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Breadth-First Search (BFS) uses a queue to explore all neighboring nodes before moving to the next level. Thus, a queue is required for BFS.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is __________\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Hash tables rely on a hash function to compute the index where an input record should be stored in the underlying array.",
        "target_text": "Question: Which of the following is used in hash tables to determine the index of any input record?\nChoices:\na) Hash function\nb) Hash linked list\nc) Hash tree\nd) Hash chaining\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: An inversion is a pair (i, j) such that i < j and arr[i] > arr[j]. It's used to count disorder in an array.",
        "target_text": "Question: What is the condition for two elements arr[i] and arr[j] to form an inversion?\nChoices:\na) arr[i] < arr[j]\nb) i < j\nc) arr[i] < arr[j] and i < j\nd) arr[i] > arr[j] and i < j\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists offer better memory management and efficient insertion/deletion over arrays, saving both space and time under many circumstances.",
        "target_text": "Question: Linked list data structure offers considerable saving in __________\nChoices:\na) Computational Time\nb) Space Utilization\nc) Space Utilization and Computational Time\nd) Speed Utilization\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: XOR-linked lists use XOR operations instead of traditional pointers, offering a memory-efficient way to store links with a single field.",
        "target_text": "Question: Which of the following is an application of XOR-linked lists?\nChoices:\na) Implementing stacks\nb) Implementing queues\nc) Memory-efficient linked list representation\nd) Caching data structures\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Top Trees are used for maintaining dynamic trees and support operations like link, cut, and expose, which help in manipulating subtrees efficiently.",
        "target_text": "Question: Which of the dynamic operations are used in Top Tree data structure implementation?\nChoices:\na) Link\nb) Cut\nc) Expose\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The array-based representation of binary trees supports random access, whereas linked representations lack this feature and require extra space for pointers.",
        "target_text": "Question: Disadvantages of linked list representation of binary trees over arrays?\nChoices:\na) Randomly accessing is not possible\nb) Extra memory for a pointer is needed with every element in the list\nc) Difficulty in deletion\nd) Random access is not possible and extra memory with every element\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Recursion is implemented using the call stack. Hence, stack is the underlying data structure used for implementing recursion.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Arrays\nd) List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists allocate memory dynamically at runtime, making them an example of dynamic memory allocation.",
        "target_text": "Question: Linked list is considered as an example of __________ type of memory allocation.\nChoices:\na) Dynamic\nb) Static\nc) Compile time\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A dequeue (double-ended queue) has many applications including job scheduling, flexible data access (like stacks and queues), and efficient sliding window computations.",
        "target_text": "Question: What are the applications of dequeue?\nChoices:\na) A-Steal job scheduling algorithm\nb) Can be used as both stack and queue\nc) To find the maximum of all subarrays of size k\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Sparse matrices store only non-zero values, which reduces storage and improves speed. However, algorithms for sparse matrices are often more complex.",
        "target_text": "Question: Which of the following is the disadvantage of sparse matrices over normal matrices?\nChoices:\na) Size\nb) Speed\nc) Easily compressible\nd) Algorithm complexity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Multiplicative hashing computes h(k) = floor(p * (k * s mod 2^w) / 2^w). For the key 123456 and given parameters, h(k) = 67.",
        "target_text": "Question: What is the value of h(k) for the key 123456?\nGiven: p = 14, s = 2654435769, w = 32\nChoices:\na) 123\nb) 456\nc) 70\nd) 67\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: MinHash is a technique used in hashing-based approaches to estimate similarity between sets (like Jaccard similarity).",
        "target_text": "Question: Which technique is used for finding similarity between two sets?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Abstract Syntax Trees (ASTs) are widely used in compilers and static analyzers to represent the syntactic structure of code.",
        "target_text": "Question: Which of the following is an application of abstract syntax tree?\nChoices:\na) Static code analyzing\nb) Implement indexing in databases\nc) Used for dynamic memory allocation\nd) To represent networks of communication\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In red-black trees, each node is colored either red or black, and the root node is always black to maintain balance properties.",
        "target_text": "Question: What is the special property of red-black trees and what should the root always be?\nChoices:\na) A color which is either red or black and root should always be black\nb) Height of the tree\nc) Pointer to next node\nd) A color which is either green or black\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Binary Decision Diagrams (BDDs) are used to represent Boolean functions efficiently in computational logic and verification tasks.",
        "target_text": "Question: In which of the following cases is a Binary Decision Diagram used?\nChoices:\na) Representation of Boolean Functions\nb) String Matching\nc) Searching\nd) Sorting of numbers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The algorithm to balance symbols in code typically includes checks for parentheses (), brackets [], and braces {}, using a stack to ensure proper nesting.",
        "target_text": "Question: Which of the following does the balancing symbols algorithm include?\nChoices:\na) Balancing double quotes\nb) Balancing single quotes\nc) Balancing operators and brackets\nd) Balancing parentheses, brackets and braces\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Breadth-First Search (BFS) visits nodes level by level, similar to level order traversal in a binary tree.",
        "target_text": "Question: Which of the following graph traversals closely imitates level order traversal of a binary tree?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Depth & Breadth First Search\nd) Binary Search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a max-heap, new elements are inserted and then bubbled up to maintain heap order. After inserting 1 and 7 into the heap [10, 8, 5, 3, 2], the result is [10, 8, 7, 3, 2, 1, 5].",
        "target_text": "Question: A Priority-Queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements '1' and '7' are inserted in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 5, 3, 2, 1\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 3, 2, 1, 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A Directed Acyclic Graph (DAG) with V vertices can have at most V(V-1)/2 edges while still maintaining its acyclic property.",
        "target_text": "Question: With V (greater than 1) vertices, how many edges at most can a Directed Acyclic Graph possess?\nChoices:\na) (V*(V-1))/2\nb) (V*(V+1))/2\nc) (V+1)C2\nd) (V-1)C2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a Binary Search Tree (BST), in-order traversal visits nodes in ascending order and hence yields sorted output.",
        "target_text": "Question: Which of the following traversal outputs the data in sorted order in a BST?\nChoices:\na) Preorder\nb) Inorder\nc) Postorder\nd) Level order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Run-Length Encoding (RLE) is a form of lossless data compression used to encode sequences of repeated values in bit arrays.",
        "target_text": "Question: Run-Length encoding is used to compress data in bit arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: To implement a queue using stacks, the minimum number required is two--one for enqueue and another for dequeue operations.",
        "target_text": "Question: The minimum number of stacks needed to implement a queue is:\nChoices:\na) 3\nb) 1\nc) 2\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, deleting the last element requires traversal from the head to find the node before the last one, leading to time complexity dependent on list length.",
        "target_text": "Question: Consider a single linked list where F and L are pointers to the first and last elements respectively of the linked list. The time for performing which of the given operations depends on the length of the linked list?\nChoices:\na) Delete the first element of the list\nb) Interchange the first two elements of the list\nc) Delete the last element of the list\nd) Add an element at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting infix expressions like (A+B)*(C-D)/E*F into prefix notation requires proper operator ordering. The correct prefix form is * / * + A B - C D E F.",
        "target_text": "Question: The prefix of (A+B)*(C-D)/E*F is:\nChoices:\na) /+-AB*CD\nb) /*+-ABCD*EF\nc) */*+AB-CDEF\nd) **AB+CD/EF\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An array is a collection of elements stored in contiguous memory locations, all of the same data type.",
        "target_text": "Question: Which of these best describes an array?\nChoices:\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialized\nd) Array is not a data structure\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B-trees are widely used in databases and file systems for external memory storage due to their balanced structure and efficient disk I/O.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) AVL tree\nb) B-tree\nc) Red-black tree\nd) Both AVL tree and Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In database systems, B+ trees are preferred because they support range queries efficiently and store data in leaves in sorted order.",
        "target_text": "Question: Which one of the following data structures is preferred in database-system implementation?\nChoices:\na) AVL tree\nb) B-tree\nc) B+ tree\nd) Splay tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In the Union-Find (Disjoint Set) data structure, path compression leads to ranks increasing from the leaves up toward the root.",
        "target_text": "Question: In the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from?\nChoices:\na) Leaf to root\nb) Root to node\nc) Root to leaf\nd) Left subtree to right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap or min-heap, the root is the largest or smallest element. Subtree roots can still be larger/smaller than the overall root, so the statement is False.",
        "target_text": "Question: The roots of the elements of the subtrees are smaller than the root of the heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting a postfix expression to infix is generally easier to implement compared to prefix because postfix evaluation uses a straightforward stack approach.",
        "target_text": "Question: Given two processes (conversion of postfix to infix and prefix to infix), which of the following is easier to implement?\nChoices:\na) Both are easy to implement\nb) Postfix to infix is harder than prefix to infix\nc) Postfix to infix is easier than prefix to infix\nd) Insufficient data\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: An unrolled linked list stores elements in blocks, and the space complexity is O(n) since each element must be stored explicitly.",
        "target_text": "Question: Which of the following represents the space complexity for an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of different randomized binary search trees that can be formed from a given permutation of (1,3,2) is determined by unique insertion orders.",
        "target_text": "Question: How many randomized binary search trees can be formed by the numbers (1, 3, 2)?\nChoices:\na) 2\nb) 3\nc) 6\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees are self-adjusting binary search trees that perform access operations and restructuring in logarithmic amortized time.",
        "target_text": "Question: Which of the following is the self-adjusting binary search tree?\nChoices:\na) AVL Tree\nb) Splay Tree\nc) Top Tree\nd) Ternary Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a full binary tree, the total number of nodes N is always 2*L - 1, where L is the number of leaf nodes.",
        "target_text": "Question: In a full binary tree, if there are L leaves, then the total number of nodes N is?\nChoices:\na) N = 2*L\nb) N = L + 1\nc) N = L - 1\nd) N = 2*L - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: According to the cut property in graph theory, the minimum weight edge crossing a cut must be included in the Minimum Spanning Tree (MST).",
        "target_text": "Question: Let s and t be two vertices in an undirected graph G = (V, E) with positive edge weights. Let [X, Y] be a partition of V such that s is an element of X and t is an element of Y. Consider the edge e having the minimum weight among all edges with one vertex in X and the other in Y. The edge e must definitely belong to:\nChoices:\na) The minimum weighted spanning tree of G\nb) The weighted shortest path from s to t\nc) Each path from s to t\nd) The weighted longest path from s to t\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A min-heap is a complete binary tree where each node's value is less than or equal to its children's values. It satisfies the heap property and is always complete.",
        "target_text": "Question: A min-Heap is a complete binary tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: A palindrome is a string that reads the same backward as forward. For example, \"ABCCBA\" is a palindrome.",
        "target_text": "Question: Which of the following is a palindromic string?\nChoices:\na) \"APPLE\"\nb) \"ABCDE\"\nc) \"APPLA\"\nd) \"ABCCBA\"\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Jaccard similarity approximation using MinHashing, the number of hash functions required for an error rate ε is approximately 1/ε^2. For ε <= 0.05, around 400 hashes are needed.",
        "target_text": "Question: How many hashes will be needed for calculating Jaccard index with an expected error less than or equal to 0.05?\nChoices:\na) 100\nb) 200\nc) 300\nd) 400\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Null nodes in trees, such as in Treaps or certain binary trees, are often treated as having infinite priority to ensure proper rotations and balancing.",
        "target_text": "Question: What is the priority of a null node?\nChoices:\na) 1\nb) 0\nc) Random number\nd) Infinity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A bit array is a compact data structure used for storing individual bits efficiently, often used in Bloom filters and bitmap indexing.",
        "target_text": "Question: What is a bit array?\nChoices:\na) Data structure that compactly stores bits\nb) Data structure for representing arrays of records\nc) Array in which elements are not present in continuous locations\nd) An array in which most of the elements have the same value\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A heap is a complete binary tree where each parent node is greater (max-heap) or smaller (min-heap) than its children, depending on the heap type.",
        "target_text": "Question: A complete binary tree with the property that the value at each node is at least as large as the values at its children is known as:\nChoices:\na) Binary search tree\nb) AVL tree\nc) Completely balanced tree\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a graph with a Eulerian walk, the number of vertices with odd degrees must be either 0 (Eulerian circuit) or 2 (Eulerian path).",
        "target_text": "Question: Number of vertices with odd degrees in a graph having a Eulerian walk is __________\nChoices:\na) 0\nb) Can't be predicted\nc) 2\nd) Either 0 or 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The minimum number of jumps problem finds the minimum steps to reach the end of an array, given that each element represents the maximum jump length from that position.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) Not possible to reach the end\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack operations like push and pop modify the content and size of the stack. Tracing each operation can determine the final count of elements.",
        "target_text": "Question: Consider the following operation performed on a stack of size 5.\nPush(1);\nPop();\nPush(2);\nPush(3);\nPop();\nPush(4);\nPop();\nPop();\nPush(5);\nAfter the completion of all operations, the number of elements present in the stack is?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A hash function is a key component in hashing, which maps keys to addresses for storage or retrieval in hash tables.",
        "target_text": "Question: Which of the following helps keys to be mapped into addresses?\nChoices:\na) Hash function\nb) Separate chaining\nc) Open addressing\nd) Chaining using a linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation (Polish notation) places operators before operands. The prefix form of A - B / (C * D ^ E) is -A/B*C^DE.",
        "target_text": "Question: The prefix form of A - B / (C * D ^ E) is?\nChoices:\na) -A/B*C^DE\nb) -A/BC*^DE\nc) -ABCD*^DE\nd) -/*^ACBDE\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: An Abstract Data Type (ADT) is a model for a data structure that specifies the behavior from the point of view of a user, particularly its storage structure in memory.",
        "target_text": "Question: Representation of data structure in memory is known as:\nChoices:\na) Recursive\nb) Abstract data type\nc) Storage structure\nd) File structure\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: 2-3 trees are balanced search trees that provide efficient searching by maintaining sorted keys and having 2 or 3 children per node.",
        "target_text": "Question: Which of the following data structures can provide efficient searching of the elements?\nChoices:\na) Unordered lists\nb) Binary search tree\nc) Treap\nd) 2-3 tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Self-organizing lists improve the performance of linear search by reordering elements to reflect frequency of access.",
        "target_text": "Question: The self-organizing list improves the efficiency of __________?\nChoices:\na) Binary search\nb) Jump search\nc) Sublist search\nd) Linear search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The problem describes a variation of stack operations with constraints. Moving elements between two containers and returning them simulates stack behavior.",
        "target_text": "Question: You have two jars, one with 10 rings and another with none, stacked vertically. You want to remove the last ring from the first jar, but the second jar is weak and cannot store rings for long.\nChoices:\na) Empty the first jar one by one into the second jar\nb) Move rings to the second jar, then move them back one by one to the first\nc) There exists no possible way to do this\nd) Break the jar and remove the last one\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array is a sorted array of all suffixes of a string. It is commonly used in string matching problems and must be sorted for efficient access.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) Suffix array is always sorted\nb) Suffix array is used in string matching problems\nc) Suffix array is always unsorted\nd) Suffix array contains all the suffixes of the given string\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In postfix expressions, operators follow their operands. The postfix form of an infix expression depends on operator precedence and associativity.",
        "target_text": "Question: What is the postfix expression for the corresponding infix expression?\nChoices:\na) abc*+de*+\nb) abc+*de*+\nc) a+bc*de+*\nd) abc*+(de)*+\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In graph theory, every path is also a trail, and every trail is a path when all edges and vertices are distinct.",
        "target_text": "Question: Which of the following statements for a simple graph is correct?\nChoices:\na) Every path is a trail\nb) Every trail is a path\nc) Every trail is a path as well as every path is a trail\nd) Path and trail have no relation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A heap is a binary tree-based structure where parent nodes follow a specific order relative to their children. A valid max-heap has each parent greater than its children.",
        "target_text": "Question: Which of the following sequences of array elements forms a heap?\nChoices:\na) {23, 17, 14, 6, 13, 10, 1, 12, 7, 5}\nb) {23, 17, 14, 6, 13, 10, 1, 5, 7, 12}\nc) {23, 17, 14, 7, 13, 10, 1, 5, 6, 12}\nd) {23, 17, 14, 7, 13, 10, 1, 12, 5, 7}\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The move-to-front method performs poorly for sequential access patterns because it constantly moves elements to the front, disrupting the natural access order.",
        "target_text": "Question: Which of the following methods performs poorly when elements are accessed in sequential order?\nChoices:\na) Count method\nb) Move to front method\nc) Transpose method\nd) Ordering method\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: The C++ program iterates through the string \"Hello Geeks\" to count characters until the null terminator, returning the total character length.",
        "target_text": "Question: What will the below program print?\n// C++ program to find the length of string\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str = \"Hello Geeks\";\n    int i;\n    for (i = 0; str[i] != '\\0'; ++i);\n    cout << i;\n    return 0;\n}, \nChoices:\na) 0\nb) 1\nc) 5\nd) 11\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Given custom operator precedence and associativity, arithmetic expressions can be evaluated differently than usual conventions.",
        "target_text": "Question: Assume +, -, * are usual arithmetic operators. * has the lowest precedence, + has the highest precedence, and - has medium. + and * are left-associative whereas - is right-associative. What is the value of the expression 3 - 8 + 2 - 9 * 3?\nChoices:\na) 4\nb) 6\nc) 8\nd) 20\ne) 20\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The provided Java method uses a stack to identify and print matching parentheses by tracking their indices.",
        "target_text": "Question: Which of the following program prints the index of every matching parenthesis?\nChoices:\na) First program with index output incremented\nb) Second program\nc) Third with reverse condition\nd) Fourth program with unmatched pairing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-3 tree is a balanced search tree where all leaves are at the same level. However, postorder traversal does not yield sorted elements—only inorder does.",
        "target_text": "Question: Which of the following is not True about the 2-3 tree?\nChoices:\na) All leaves are at the same level\nb) It is perfectly balanced\nc) Postorder traversal yields elements in sorted order\nd) It is a B-tree of order 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: XOR linked lists are memory-efficient doubly linked lists used in constrained environments, but come with certain trade-offs for usability.",
        "target_text": "Question: Which of the following statements are True?\ni) XOR lists are used in environments with limited space, like embedded devices\nii) Garbage collectors may not support XOR lists\niii) Calculating next requires remembering previous node\niv) XOR lists are always more efficient than all alternatives\nChoices:\na) i, ii, iii, iv\nb) i, ii, iii\nc) i, ii\nd) i\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, ArrayLists are dynamic arrays. The correct syntax uses the generic type and constructor to instantiate the list.",
        "target_text": "Question: Which of the following is the correct syntax to declare an ArrayList in Java?\nChoices:\na) ArrayList<String> al = new ArrayList<>();\nb) ArrayList al = new ArrayList[];\nc) ArrayList al() = new ArrayList();\nd) ArrayList al[] = new ArrayList[];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a queue implemented using a linked list, both front and rear pointers are used to track the beginning and end. Inserting into an empty queue requires updating both pointers.",
        "target_text": "Question: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into EMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: The word reversal algorithm using stacks requires one stack to hold the input and one to reverse the output.",
        "target_text": "Question: How many stacks are required for reversing a word algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In tree-based data structures, leaf and internal nodes may hold pointers. The rightmost child in certain trees may retain a parent pointer.",
        "target_text": "Question: Which node contains a pointer to its parent?\nChoices:\na) root node\nb) right most child\nc) left most child\nd) left sibling\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In circular linked lists, nodes loop back to the head. The given program checks if a list loops back to its head node.",
        "target_text": "Question: Consider the below program, and identify which operation is performed.\nint solve(struct Node* head)\n{\n    if (head == NULL)\n        return 1;\n    struct Node* ptr;\n    ptr = head->next;\n    while (ptr != NULL && ptr != head)\n        ptr = ptr->next;\n    return (ptr == head);\n}\nChoices:\na) Checking if list is empty or not\nb) Checking if the list is circular or not\nc) Counting the number of elements in the list\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The adjacency matrix of a graph is symmetric only for undirected graphs. For directed graphs, it is not symmetric.",
        "target_text": "Question: Adjacency matrix of all graphs are symmetric.\nChoices:\na) False\nb) True\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tango trees are binary search trees that adaptively restructure to access patterns, maintaining search tree properties.",
        "target_text": "Question: Which type of tree is tango tree?\nChoices:\na) Ternary Tree\nb) AVL Tree\nc) Binary Search Tree\nd) K-ary Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In array-based queue implementations, the queue becomes full when the rear index reaches the array's maximum size minus one.",
        "target_text": "Question: A normal queue, if implemented using an array of size MAX_SIZE, gets full when?\nChoices:\na) Rear = MAX_SIZE - 1\nb) Front = (rear + 1) mod MAX_SIZE\nc) Front = rear + 1\nd) Rear = front\nAnswer: a"
    }
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Lexicographical order of strings stored in a trie is achieved by performing an inorder traversal over the trie.",
        "target_text": "Question: What traversal over trie gives the lexicographical sorting of the set of the strings?\nChoices:\na) postorder\nb) preorder\nc) inorder\nd) level order\nAnswer: c"
    }
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Union-find with union by height optimizes disjoint-set structures. The depth of any tree in this scheme is logarithmic in size.",
        "target_text": "Question: What is the depth of any tree if the union operation is performed by height?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In Top trees, various operations such as link, cut, expose, and merge are used. Among these, 'merge' is commonly used as an internal operation to combine parts of the tree.",
        "target_text": "Question: Which of the following are used as an internal operation in Top tree?\nChoices:\na) Merge\nb) Cut\nc) Expose\nd) Link\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: The function in the provided C++ code performs a breadth-first traversal of a binary tree, visiting nodes level by level using a queue.",
        "target_text": "Question: Consider the below program, and identify what the function is doing.\n#include <iostream>\n#include <queue>\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int item) {\n        data = item;\n        left = right = nullptr;\n    }\n};\nvoid function(Node* root) {\n    if (root == nullptr)\n        return;\n    std::queue<Node*> q;\n    q.push(root);\n    while (!q.empty()) {\n        Node* node = q.front();\n        q.pop();\n        std::cout << node->data << \" \";\n        if (node->left != nullptr)\n            q.push(node->left);\n        if (node->right != nullptr)\n            q.push(node->right);\n    }\n}\nChoices:\na) In order traversal of a tree\nb) Normal traversal of a tree\nc) Level order traversal of a tree\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A leftist heap is structured so that the shortest path to a leaf is always on the right, making it biased or deeper on the left.",
        "target_text": "Question: Why is this heap named leftist heap?\nChoices:\na) only left subtrees exist\nb) the tree is biased to get deep down the left\nc) it is balanced\nd) right trees are unbalanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tree traversals include preorder, inorder, and postorder. Randomized traversal is not a standard algorithm used in trees.",
        "target_text": "Question: Which of the following traversing algorithm is not used to traverse in a tree?\nChoices:\na) Post order\nb) Pre order\nc) In order\nd) Randomized\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The heap can be constructed in linear time, O(n), using bottom-up heapify techniques.",
        "target_text": "Question: The running time for creating a heap of size n is?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: XOR linked lists reduce memory usage by storing the XOR of previous and next pointers in each node, acting as a space-efficient doubly linked list.",
        "target_text": "Question: What is xor linked list?\nChoices:\na) uses of bitwise XOR operation to decrease storage requirements for doubly linked lists\nb) uses of bitwise XOR operation to decrease storage requirements for linked lists\nc) uses of bitwise operations to decrease storage requirements for doubly linked lists\nd) just another form of linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Farach provided the first suffix tree construction for all alphabets in linear time, significantly improving previous algorithms like Weiner's and Ukkonen's.",
        "target_text": "Question: Who among the following provided the first suffix tree contribution for all alphabet?\nChoices:\na) Weiner\nb) Farach\nc) Ukkonen\nd) Alexander Morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: To determine whether an expression contains balanced parentheses, a stack is commonly used because of its LIFO structure.",
        "target_text": "Question: The data structure required to check whether an expression contains balanced parenthesis is __________\nChoices:\na) Stack\nb) Queue\nc) Tree\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The given function prints the linked list nodes in reverse order by using recursion.",
        "target_text": "Question: What does the following function do for a given Linked List with first node as head?\nvoid fun1(struct node* head)\n{\n    if(head == NULL)\n        return;\n    fun1(head->next);\n    printf(\"%d  \", head->data);\n}\nChoices:\na) Prints all nodes of linked lists\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array lists the starting positions of suffixes of a string sorted in lexicographical order.",
        "target_text": "Question: What will be the suffix array of the string 'engineering'?\nChoices:\na) 2 3 8 4 9 1 7 5 0 6 10\nb) 5 0 6 1 4 9 1 7 0 2 3 8\nc) 5 0 6 10 2 4 9 1 7 3 8\nd) 5 0 6 10 2 3 8 4 9 1 7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Separate chaining is a collision resolution technique in hash tables that uses linked lists to store multiple values that hash to the same index.",
        "target_text": "Question: Which of the following is identical to that of a separate chaining hash node?\nChoices:\na) Linked list\nb) Array\nc) Stack\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Inserting an element after a given pointer in a linked list takes constant time as it only involves pointer manipulation.",
        "target_text": "Question: In a linked list with n nodes, the time taken to insert an element after an element pointed by some pointer is __________\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: a",
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: For a sorted array, binary search can be used to find if an element appears more than n/2 times in Θ(log n) time.",
        "target_text": "Question: The minimum number of comparisons required to determine if an integer appears more than n/2 times in a sorted array of n integers is __________\nChoices:\na) Θ(n)\nb) Θ(log n)\nc) Θ(n log n)\nd) Θ(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Separate chaining and open addressing are common collision resolution strategies in hashing. Separate chaining is generally simpler to implement.",
        "target_text": "Question: Separate chaining is easier to implement as compared to open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: AND-Inverter Graphs (AIGs) are a compact and efficient representation of Boolean functions and are often more efficient than Binary Decision Diagrams (BDDs).",
        "target_text": "Question: The And-Inverter Graph representation of a Boolean function is more efficient than the Binary Decision Diagram.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: AA Trees are a type of balanced binary search tree. They use a concept called 'levels' instead of colors (as in Red-Black trees) to maintain balance.",
        "target_text": "Question: AA Trees are implemented using?\nChoices:\na) Colors\nb) Levels\nc) Node size\nd) Heaps\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a ternary tree, child nodes can be internal nodes or leaf nodes. Not all child nodes are necessarily leaf nodes.",
        "target_text": "Question: Can a child node always be called a leaf node in a ternary tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: A binary string consists only of characters '0' and '1'. Any other characters make it non-binary.",
        "target_text": "Question: Which of the following statement is a binary string?\nChoices:\na) \"ab\"\nb) \"121212\"\nc) \"01010101110\"\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix Tree Clustering (STC) is a data clustering algorithm used in search engines to group similar results by matching phrases via suffix trees.",
        "target_text": "Question: Which of the following data clustering algorithms uses suffix trees in search engines?\nChoices:\na) Weiner's algorithm\nb) Farach's algorithm\nc) Lempel-Ziv-Welch's algorithm\nd) Suffix Tree Clustering\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A ternary tree is a tree data structure in which each node can have up to three children.",
        "target_text": "Question: How many child nodes does each node of a ternary tree contain?\nChoices:\na) 4\nb) 6\nc) 5\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A fundamental property of trees in graph theory is that a tree with n vertices has exactly n‑1 edges.",
        "target_text": "Question: All trees with n vertices consist of how many edges?\nChoices:\na) n\nb) n‑2\nc) n+1\nd) n‑1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: For a connected planar graph, Euler’s formula states V - E + F = 2, where V is vertices, E is edges, and F is regions (faces).",
        "target_text": "Question: A connected planar graph having 6 vertices and 7 edges contains how many regions?\nChoices:\na) 15\nb) 3\nc) 1\nd) 11\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In expression conversion, prefix (Polish) notation requires placing the operator before its operands. Parentheses are eliminated by using the order of operators.",
        "target_text": "Question: The prefix form of A - B / (C * D ^ E) is:\nChoices:\na) -/*^ACBDE\nb) -ABCD*^DE\nc) -A/B*C^DE\nd) -A/BC*^DE\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The balancing symbols algorithm is used in compilers and interpreters to ensure proper nesting of brackets, parentheses, and braces. It operates in a single linear pass.",
        "target_text": "Question: How many passes does the balancing symbols algorithm make through the input?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Load factor in hashing is defined as the number of elements divided by the number of slots in the table. A higher load factor indicates more collisions and reduced performance.",
        "target_text": "Question: Given a hash table T with 25 slots that stores 2000 elements, the load factor α for T is __________\n- A\n80\n- B\n0.0125\n- C\n8000\n- D\n1.25\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: When a collision occurs in a hash table, alternative indices must be generated to place the colliding key. This process is known as collision resolution or handling.",
        "target_text": "Question: The task of generating alternative indices for a node is called?\nChoices:\na) Collision handling\nb) Collision detection\nc) Collision recovery\nd) Closed hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Sparse matrices are matrices with a large number of zero elements. Efficient representations like Dictionary of Keys and Linked Lists are used to store only non-zero entries.",
        "target_text": "Question: Which of the following is not the method to represent Sparse Matrix?\nChoices:\na) Dictionary of Keys\nb) Linked List\nc) Array\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Balanced parentheses in expressions can be checked using stacks, where each opening bracket is pushed and matched with a corresponding closing one popped from the stack.",
        "target_text": "Question: What data structure can be used to check if syntax has balanced parenthesis?\nChoices:\na) Queue\nb) Tree\nc) List\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a doubly linked list, each node points to both its previous and next node. Deleting a node is done in constant time O(1), provided a pointer to the node is already known.",
        "target_text": "Question: The time required to delete a node x from a doubly linked list having n nodes is ________________\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a path graph, only the internal nodes have degree 2. The two end nodes have degree 1, so a path with n > 2 vertices has (n - 2) nodes of degree 2.",
        "target_text": "Question: What is the number of vertices of degree 2 in a path graph having n vertices, here n > 2?\nChoices:\na) n-2\nb) n\nc) 2\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Self-balancing binary search trees automatically adjust their structure after insertions and deletions to maintain a balanced height and ensure logarithmic operations.",
        "target_text": "Question: Which of the following is a self-balancing binary search tree?\nChoices:\na) 2-3 tree\nb) Threaded binary tree\nc) AA tree and Treap\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In an unrolled linked list, each node contains an array of elements. When an element can't fit, data is moved to the next node to preserve efficiency and structure.",
        "target_text": "Question: What happens if a node cannot fit an element in an unrolled linked list?\nChoices:\na) The element is discarded\nb) The elements are moved to the next node\nc) The node is discarded\nd) Error message is shown\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A bit array (or bit vector) is a data structure used to efficiently store and manipulate bits, often used in bitmap indexing and space-efficient algorithms.",
        "target_text": "Question: What is a bit array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) Array in which elements are not present in continuous locations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The Jaccard Index measures similarity between two sets. The closer the value is to 1, the more similar the sets are.",
        "target_text": "Question: When are the members of two sets more common relatively?\nChoices:\na) Jaccard Index is closer to 1\nb) Jaccard Index is closer to 0\nc) Jaccard Index is closer to -1\nd) Jaccard Index is farther from 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Bubble sort compares adjacent elements and swaps them if out of order. The number of swaps (interchanges) depends on the initial ordering of elements.",
        "target_text": "Question: The number of interchanges required to sort 5, 1, 6, 2, 4 in ascending order using Bubble Sort is\nChoices:\na) 6\nb) 5\nc) 7\nd) 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In data structures, a top pointer is typically used in stack implementations to keep track of the element at the top. In tree or heap representations, 'top' may also refer to the root or level-based organization.",
        "target_text": "Question: For which of the following purpose a top pointer can be used?\nChoices:\na) Storing the address of the head pointer\nb) Storing the address of the previous node\nc) Storing the address of the next node\nd) Storing equal values on the same level\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Data compression algorithms like LZW (Lempel-Ziv-Welch) use structures like suffix trees to represent repeated patterns and efficiently encode them. Suffix trees are useful for searching repeated substrings.",
        "target_text": "Question: Which of the following algorithm of data compression uses a suffix tree?\nChoices:\na) Weiner’s algorithm\nb) Farach’s algorithm\nc) Lempel–Ziv–Welch’s algorithm\nd) Alexander Morse’s algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The degree of a node is the number of its edges. A transformation that removes degree-2 nodes while connecting their neighbors alters the tree structure, and the final edge count can be derived based on degrees.",
        "target_text": "Question: A binary tree with n > 1 nodes has n₁, n₂ and n₃ nodes of degree one, two and three respectively. The degree of a node is defined as the number of its neighbors.\nStarting with the above tree, while there remains a node v of degree two in the tree, add an edge between the two neighbors of v and then remove v from the tree. How many edges will remain at the end of the process?\nChoices:\na) 2 * n₁ – 3\nb) n₂ + 2 * n₁ – 2\nc) n₃ – n₂\nd) n₂ + n₁ – 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Quadratic probing is a collision resolution strategy in open addressing. It uses a quadratic function to compute the next index in the probe sequence to avoid clustering.",
        "target_text": "Question: Which of the following schemes does quadratic probing come under?\nChoices:\na) rehashing\nb) extended hashing\nc) separate chaining\nd) open addressing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix (Reverse Polish) notation represents expressions without parentheses by placing operators after operands. It is used in stack-based expression evaluation.",
        "target_text": "Question: The postfix form of A*B+C/D is:\nChoices:\na) *AB/CD+\nb) AB*CD/+\nc) A*BC+/D\nd) ABCD+/*\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The height of a binary tree is the length of the longest path from the root to a leaf. The minimum number of nodes corresponds to a linear tree, and the maximum corresponds to a full binary tree.",
        "target_text": "Question: The height of a tree is the length of the longest root-to-leaf path in it. The maximum and minimum number of nodes in a binary tree of height 5 are:\nChoices:\na) 63 and 6, respectively\nb) 64 and 5, respectively\nc) 32 and 6, respectively\nd) 31 and 5, respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A heap can be constructed in O(n) time using a bottom-up approach by heapifying each internal node in reverse level order, starting from the last non-leaf node.",
        "target_text": "Question: An array of integers of size n can be converted into a heap by adjusting the heaps rooted at each internal node of the complete binary tree starting at the node floor((n - 1)/2), and doing this adjustment up to the root node. The time required to construct a heap in this manner is:\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A rope (cord) is a binary tree data structure used to store and manipulate large strings efficiently by splitting them into smaller chunks.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) Linked List\nb) Array\nc) String\nd) Cord\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack underflow occurs when attempting to pop from an empty stack. This function checks for an empty stack and retrieves the top element if available.",
        "target_text": "Question: What does the following function do?\npublic Object some_func() throws emptyStackException {\n    if (isEmpty()) throw new emptyStackException(\"underflow\");\n    return first.getEle();\n}\nChoices:\na) pop\nb) delete the top-of-the-stack element\nc) retrieve the top-of-the-stack element\nd) push operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In the linked list implementation of a queue, the queue is empty when there are no nodes. This is typically indicated by a null front pointer.",
        "target_text": "Question: In linked list implementation of a queue, the important condition for a queue to be empty is?\nChoices:\na) FRONT is null\nb) REAR is null\nc) LINK is empty\nd) FRONT == REAR - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: C++ provides built-in algorithms in the STL (Standard Template Library), including `reverse()`, which is used to reverse elements in a container such as an array or vector.",
        "target_text": "Question: Which of the following is the predefined function for array reversal in C++?\nChoices:\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the dynamic equivalence problem (e.g., union-find), N-1 merges are performed using union operations. If optimized with union by rank and path compression, the time complexity becomes O(N log N).",
        "target_text": "Question: What is the total time spent for N-1 merges in a dynamic equivalence problem?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation (also called Polish notation) places operators before operands. Converting infix to prefix involves reversing the expression and adjusting parentheses and precedence.",
        "target_text": "Question: The prefix form of an infix expression p + q - r * t is:\nChoices:\na) + pq - *rt\nb) - +pqr * t\nc) - +pq * rt\nd) - + * pqrt\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In spatial indexing and data retrieval, bin structures are influenced by both the size and location of queries and candidates. These factors affect the accuracy and efficiency of results.",
        "target_text": "Question: Efficiency of bin depends upon __________\nChoices:\na) size of query and candidates\nb) location of query and candidates\nc) location and size of query and candidates\nd) depends on the input\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Unrolled linked lists reduce pointer overhead by storing multiple elements per node. However, this increases per-node memory usage and management complexity.",
        "target_text": "Question: Which of the following is a drawback of an unrolled linked list?\nChoices:\na) Small memory overhead\nb) Cache management\nc) High overhead per node\nd) Slow insertion and deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A priority queue is an abstract data type in which each element is associated with a priority. Elements are served based on priority rather than just the order they arrive.",
        "target_text": "Question: Is the priority queue an abstract data type?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Event-driven simulations use queues to manage events sorted by time. Priority queues or min-heaps are common to ensure the earliest event is processed first.",
        "target_text": "Question: Which data structure is commonly used to implement the event-driven simulation of complex systems, such as in computer network simulations or traffic simulations?\nChoices:\na) Stack\nb) Tree\nc) Array\nd) Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree is said to be height-balanced if the difference in height between the left and right subtrees of any node is at most one. This ensures O(log n) operations.",
        "target_text": "Question: A binary tree is balanced if the difference between left and right subtree of every node is not more than 1\nChoices:\na) 1\nb) 3\nc) 2\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: The given pseudo-code converts a decimal number to binary using a stack. Each remainder from dividing by 2 is pushed onto the stack, then popped in reverse order to print binary.",
        "target_text": "Question: Following is a pseudo code of a function that takes a number as an argument, and uses a stack S to do processing.\ndef fun(n):\n    S = []  # Say it creates an empty stack S\n    while n > 0:\n        # This line pushes the value of n%2 to stack S\n        S.append(n % 2)\n        n = n // 2\n    # Run while Stack S is not empty\n    while S:\n        print(S.pop(), end=' ')\nChoices:\na) Prints binary representation of n in reverse order\nb) Prints binary representation of n\nc) Prints the value of log n\nd) Prints the value of log n in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A Cartesian tree is a binary tree derived from a sequence of numbers. When elements are repeated, a tie-breaking rule (e.g., index order) is used to maintain heap and in-order properties.",
        "target_text": "Question: Consider a sequence of numbers to have repetitions, how a cartesian tree can be constructed in such situations without violating any rules?\nChoices:\na) use any tie-breaking rule between repeated elements\nb) cartesian tree is impossible when repetitions are present\nc) construct a max heap in such cases\nd) construct a min heap in such cases\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array is built from a suffix tree using a depth-first traversal. This allows efficient construction and lexicographical sorting of suffixes.",
        "target_text": "Question: Suffix array can be created by performing __________ traversal of a suffix tree.\nChoices:\na) breadth-first\nb) level order\nc) depth-first\nd) either breadth-first or level order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Binary trees can be implemented using arrays or linked lists. The linked list method supports dynamic size and easier insertion/deletion.",
        "target_text": "Question: Advantages of linked list representation of binary trees over arrays?\nChoices:\na) dynamic size\nb) ease of insertion/deletion\nc) ease in randomly accessing a node\nd) both dynamic size and ease in insertion/deletion\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A bit vector is a space-efficient data structure often used to track presence/absence of elements in sets, including for hash tables. It typically uses less space than arrays.",
        "target_text": "Question: How is a bit vector better compared to a normal array for implementing the hash table?\nChoices:\na) It saves time\nb) It saves space\nc) It saves both time and space\nd) It reduces code complexity\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Parallel arrays are separate arrays where corresponding elements across arrays represent related data. They are often used to avoid struct types in lower-level programming.",
        "target_text": "Question: What are parallel arrays?\nChoices:\na) Arrays of the same size\nb) Arrays allocated one after the other\nc) Arrays of the same number of elements\nd) Arrays allocated dynamically\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Converting infix expressions to postfix requires use of a stack to temporarily hold operators and enforce precedence and associativity.",
        "target_text": "Question: Which data structure is needed to convert infix notation to postfix notation?\nChoices:\na) Branch\nb) Queue\nc) Tree\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: To evaluate or convert infix to postfix expressions, operator precedence and associativity rules must be followed. In postfix, operands appear in order followed by operators.",
        "target_text": "Question: Assume that the operators +, -, * are left associative and ^ is right associative. The order of precedence (from highest to lowest) is ^, *, +, -. The postfix expression corresponding to the infix expression a + b * c - d ^ e ^ f is:\nChoices:\na) abc * + def ^ ^ -\nb) abc * + de ^ f ^ -\nc) ab + c * d - e ^ f ^\nd) - + a * bc ^ ^ def\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AVL trees are height-balanced binary search trees. The code recursively computes left and right subtree heights and checks balance at every node.",
        "target_text": "Question: Consider the pseudo code:\nint avl(binarysearchtree root):\n     if(not root)\n       return 0\n     left_tree_height = avl(left_of_root)\n     if(left_tree_height== -1) \n       return left_tree_height\n     right_tree_height= avl(right_of_root)\n     if(right_tree_height==-1)\n       return right_tree_height\nDoes the above code check if a binary search tree is an AVL tree?\nChoices:\na) yes\nb) no\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees are compressed tries of all suffixes of a string. With efficient algorithms like Ukkonen's, a suffix tree can be constructed in linear time relative to the string length.",
        "target_text": "Question: How much time does construction of suffix tree take?\nChoices:\na) O(log M)\nb) O(M!)\nc) Exponential to Length of Tree\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A Fibonacci heap offers improved amortized performance over a binomial heap for operations like decrease-key and delete, due to its more relaxed structure and lazy operations.",
        "target_text": "Question: The statement 'Fibonacci heap has better amortized running time compared to a binomial heap.'\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: When performing a union operation on two Fibonacci heaps of order n, the resulting heap's order increases by 1 due to the merging of root lists and potential structural changes.",
        "target_text": "Question: What will be the order of new heap created after union of heap H1 and H2 when created by the following code. Initially both are of the order n?\nChoices:\na) n+1\nb) n+n/2\nc) nlogn\nd) 2*n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: 2-3 trees are balanced search trees that maintain sorted order and support efficient insertions, deletions, and searches in logarithmic time.",
        "target_text": "Question: Which of the following data structures can provide efficient searching of the elements?\nChoices:\na) binary search tree\nb) unordered lists\nc) 2-3 tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: In linear probing, clustering affects performance. The expected cost of a successful search is based on the cost of an unsuccessful one, because probing continues until a match or an empty slot is found.",
        "target_text": "Question: In linear probing, the cost of an unsuccessful search can be used to compute the average cost of a successful search.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, arrays use zero-based indexing. Printing arr[2] and arr[4] from the array {1,2,3,4,5} will return the third and fifth elements respectively.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array {\n  public static void main(String args[]) {\n    int []arr = {1,2,3,4,5};\n    System.out.println(arr[2]);\n    System.out.println(arr[4]);\n  }\n}\nChoices:\na) 3 and 5\nb) 5 and 3\nc) 2 and 4\nd) 4 and 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An AVL tree is a self-balancing binary search tree. It maintains a balance factor to ensure that the height difference between left and right subtrees is at most 1.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is unbalanced and is a height balanced tree\nb) a tree which is balanced and is a height balanced tree\nc) a tree with at most 3 children\nd) a tree with three children\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A ternary heap is a variation of a binary heap where each node has up to three children. It must still maintain the heap property, either min-heap or max-heap.",
        "target_text": "Question: Which property should a ternary heap hold for execution?\nChoices:\na) Associative\nb) Commutative\nc) Tree\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: If multiplying matrix A with matrix C results in the identity matrix, then matrix C is the inverse of A by definition of matrix inverse.",
        "target_text": "Question: Matrix A when multiplied with Matrix C gives the Identity matrix I. What is C?\nChoices:\na) Identity matrix\nb) Inverse of A\nc) Square of A\nd) Transpose of A\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Skip lists are probabilistic data structures that allow fast search, insertion, and deletion. They use multiple layers to emulate balanced trees.",
        "target_text": "Question: Is a skip list like balanced tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks operate on a LIFO principle and are ideal for reversing sequences like strings or words, since the last character pushed will be the first one popped.",
        "target_text": "Question: Which is the most appropriate data structure for reversing a word?\nChoices:\na) stack\nb) queue\nc) graph\nd) tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays have a fixed size once declared. If fewer elements are inserted, unused space leads to memory inefficiency.",
        "target_text": "Question: What are the disadvantages of arrays?\nChoices:\na) Data structure like queue or stack cannot be implemented\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Index value of an array can be negative\nd) Elements are sequentially accessed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap, the root node always contains the minimum (min-heap) or maximum (max-heap) value. A linear scan of heap array for minimum will still return the root.",
        "target_text": "Question: What does this pseudo_code return?\nint myfun(heap_arr[]) {\n  int mini=INF;\n  for(int i=0;i<tot_node;i++)\n    mini=min(mini,heap_arr[i]);\n  return mini;\n}\nChoices:\na) Last added element to heap\nb) First element added to heap\nc) Root of the heap\nd) Leftmost node of the heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The upper bound of an array is the highest valid index. It represents the maximum index that can be accessed safely in the array.",
        "target_text": "Question: The largest element of an array index is called its __________.\nChoices:\na) lower bound.\nb) range.\nc) upper bound.\nd) All of these.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Adjacency lists use space proportional to the number of edges, making them more efficient than adjacency matrices for sparse graphs.",
        "target_text": "Question: For some sparse graph an adjacency list is more space efficient against an adjacency matrix.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B-tree is a general-purpose balanced search tree, not necessarily a binary tree. AVL, red-black, and splay trees are all types of self-balancing binary trees.",
        "target_text": "Question: Which of the following tree data structures is not a balanced binary tree?\nChoices:\na) AVL tree\nb) Red-black tree\nc) Splay tree\nd) B-tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Evaluating prefix expressions involves scanning from right to left and applying operations to operands. This example is a complex prefix computation.",
        "target_text": "Question: Find the output of the following prefix expression:\n* + 2 - 2 1 / - 4 2 + - 5 3 1\nChoices:\na) 2\nb) 12\nc) 10\nd) 4\nAnswer: a",
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: When inserting a new value into a max heap, the value is added at the end and then bubbled up to maintain the heap property. This results in a reordering of elements.",
        "target_text": "Question: Consider a max heap, represented by the array: 40, 30, 20, 10, 15, 16, 17, 8, 4. Now consider that a value 35 is inserted into this heap. After insertion, the new heap is:\nChoices:\na) 40, 30, 20, 10, 15, 16, 17, 8, 4, 35\nb) 40, 35, 20, 10, 30, 16, 17, 8, 4, 15\nc) 40, 30, 20, 10, 35, 16, 17, 8, 4, 15\nd) 40, 35, 20, 10, 15, 16, 17, 8, 4, 30\nAnswer: b",
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Pairing heaps are simple yet efficient heap structures. Their performance benefits stem from their simple operations, particularly meld, which allow fast amortized performance.",
        "target_text": "Question: What is the reason for the efficiency of a pairing heap?\nChoices:\na) simplicity\nb) time-efficient\nc) space-efficient\nd) advanced\nAnswer: a",
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The average depth of a binary tree refers to the average distance from the root to all nodes. For a randomly built tree, this depth is approximately O(sqrt(N)).",
        "target_text": "Question: The average depth of a binary tree is given as?\nChoices:\na) O(N)\nb) O(√N)\nc) O(N²)\nd) O(log N)\nAnswer: b",
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Postfix expressions are evaluated using a stack where operands are pushed and operators cause the last operands to be popped and evaluated.",
        "target_text": "Question: The data structure required to evaluate a postfix expression is:\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Linked List\nAnswer: b",
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, deleting the last element requires traversing the entire list to find the node before the last one, making the operation O(n).",
        "target_text": "Question: Consider a singly linked list of the form where F is a pointer to the first element in the linked list and L is the pointer to the last element of the list. The time of which of the following operations depends on the length of the list?\nChoices:\na) Delete the last element of the list\nb) Delete the first element of the list\nc) Add an element after the last element of the list\nd) Interchange the first two elements of the list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: To set a specific bit to 0 in bitwise operations, the AND operator is used with a bitmask that has 0 in the desired bit position and 1 elsewhere.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 0?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NAND\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Hash tables provide average constant time access using keys, unlike linked lists which require linear time search.",
        "target_text": "Question: What is the advantage of the hash table over a linked list?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Balanced binary trees include AVL, red-black, and splay trees. B-trees are multi-way trees typically used for disk storage and are not binary.",
        "target_text": "Question: Which of the following tree data structures is not a balanced binary tree?\nChoices:\na) Splay tree\nb) B-tree\nc) AVL tree\nd) Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The recurrence relation Fn = Fn-1 + Fn-2 defines the Fibonacci sequence, where each number is the sum of the two preceding ones.",
        "target_text": "Question: The following formula will produce: Fn = Fn-1 + Fn-2\nChoices:\na) Armstrong Number\nb) Fibonacci Series\nc) Euler Number\nd) Prime Number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Infix expressions follow standard operator precedence and associativity rules. Evaluating such expressions requires a correct understanding of these rules.",
        "target_text": "Question: Evaluation of infix expression is done based on precedence of operators.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Linked lists offer better performance for insertion/deletion, while arrays support better cache locality and constant-time random access. Accessing elements in a linked list is slower.",
        "target_text": "Question: Which of the following points is/are not True about Linked List data structure when compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) Access of elements in linked list takes less time than compared to arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Preorder traversal visits the root node first, then recursively visits the left and right subtrees. The function prints the node before visiting its children.",
        "target_text": "Question: What does the following piece of code do?\npublic void func(Tree root) {\n System.out.println(root.data());\n func(root.left());\n func(root.right());\n}\nChoices:\na) Preorder traversal\nb) Inorder traversal\nc) Postorder traversal\nd) Level order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A leftist tree is a priority queue implemented using a binary tree that satisfies the leftist property. For a tree of rank r, it must have at least 2<sup>r</sup>-1 nodes.",
        "target_text": "Question: How many nodes does a leftist tree of rank r have at minimum?\nChoices:\na) 2<sup>r</sup>\nb) 2<sup>r</sup>-1\nc) r<sup>2</sup>\nd) r-1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Open addressing is one of the methods for handling collisions in hash tables. It searches for the next available slot when a collision occurs.",
        "target_text": "Question: Which of the following techniques is used for handling collisions in a hash table?\nChoices:\na) Open addressing\nb) Hashing\nc) Searching\nd) Hash function\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sentinel is a dummy value placed at the end of a data structure (like an array) to mark the end and simplify algorithms like linear search.",
        "target_text": "Question: The extra key inserted at the end of the array is called a __________.\nChoices:\na) End key.\nb) Stop key.\nc) Sentinel.\nd) Transposition.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A directed tree with n nodes has n-1 edges. The number of structurally unique directed trees with 3 nodes is 3, considering all possible root-child configurations.",
        "target_text": "Question: The number of different directed trees with 3 nodes are:\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B+ tree, leaf nodes are linked for sequential access. Once a leaf is found, accessing the next record is done in constant time using the sibling pointer.",
        "target_text": "Question: Efficiency of finding the next record in B+ tree is __________\nChoices:\na) O(n)\nb) O(log n)\nc) O(nlog n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary min heap, the smallest element is at the root, but the largest element is not in a fixed location. To find it, a full scan is needed.",
        "target_text": "Question: In a binary min heap containing n elements, the largest element can be found in __________ time.\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A simple undirected graph with n vertices can have at most n(n-1)/2 edges. Any more will necessarily create a parallel edge or self-loop.",
        "target_text": "Question: A graph with n vertices will definitely have a parallel edge or self loop if the total number of edges are __________.\nChoices:\na) more than n\nb) more than n+1\nc) more than (n+1)/2\nd) more than n(n-1)/2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Binary search assumes the list is sorted, whereas linear search does not. This makes element order critical for binary search.",
        "target_text": "Question: A characteristic of the data that binary search uses but linear search ignores is the __________.\nChoices:\na) Order of the elements of the list.\nb) Length of the list.\nc) Maximum value in list.\nd) Type of elements of the list.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a min-heap, the 7th smallest element is not necessarily at a specific location. Finding it requires traversing the heap selectively, taking O(log n) in optimized approaches.",
        "target_text": "Question: In a min-heap with n elements with the smallest element at the root, the 7th smallest element can be found in time:\nChoices:\na) θ(nlogn)\nb) θ(n)\nc) θ(logn)\nd) θ(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: K-d trees are spatial data structures that allow efficient range searching and nearest neighbor queries. They are simpler than advanced multidimensional structures.",
        "target_text": "Question: Which of the following is the simplest data structure that supports range searching?\nChoices:\na) Heaps\nb) binary search trees\nc) AA-trees\nd) K-d trees\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: A sorting algorithm is stable if it maintains the relative order of records with equal keys. This is useful when multiple keys are involved.",
        "target_text": "Question: A stable sorting algorithm:\nChoices:\na) does not crash.\nb) does not run out of memory.\nc) does not change the sequence of appearance of elements.\nd) does not exist.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Reversing a queue using another queue is not feasible with queue-only operations, as queues do not support reverse-order access natively like stacks.",
        "target_text": "Question: n elements of a Queue are to be reversed using another queue. The number of 'ADD' and 'REMOVE' operations required to do so is:\nChoices:\na) 2*n\nb) 4*n\nc) n\nd) The task cannot be accomplished\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The code rotates an array left by 4 positions using temporary storage. The output is a rotated array where elements from the start are moved to the end.",
        "target_text": "Question: What will be the output of the following code?\n#include <iostream>\nusing namespace std;\nint main() {\n    int arr[] = {1,2,3,4,5,6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int d=4;\n    int temp[10];\n    for(int i=0;i<d;i++) temp[i]=arr[i];\n    int j=0;\n    for(int i=d;i<n;i++,j++) arr[j]=arr[i];\n    int k=0;\n    for(int i=n-d;i<n;i++,k++) arr[i]=temp[k];\n    for(int i=0;i<n;i++) cout<<arr[i]<<\" \";\n    return 0;\n}\nChoices:\na) 5 6 1 2 3 4\nb) 6 5 4 3 1 2\nc) 3 4 5 6 1 2\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Amortized analysis gives average performance over a sequence of operations. For heaps, deleting the minimum element takes O(log N) time in amortized complexity.",
        "target_text": "Question: The amortized time efficiency for performing deletion of a minimum element is?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N^2)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Index mapping is a simple hashing approach where data values directly map to positions in the hash table without needing complex hash functions.",
        "target_text": "Question: Which is a simple form of hashing where the data is directly mapped to an index in a hash table?\nChoices:\na) Collision\nb) Index Mapping\nc) Functional Mapping\nd) Hash function\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operator precedence determines the order of evaluation in expressions. Among the listed operators, exponentiation (^) has the highest precedence.",
        "target_text": "Question: Out of the following operators (^, *, +, &, $), the one having highest priority is __________\nChoices:\na) +\nb) $\nc) ^\nd) &\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In doubly linked lists, deleting a node when its address is known is efficient due to backward traversal capability, unlike singly linked lists which require full traversal.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by singly linked list?\nChoices:\na) Deleting a node whose location is given\nb) Searching an unsorted list for a given item\nc) Inverting a node after the node with a given location\nd) Traversing a list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When converting prefix to infix expressions, the first step is to reverse the prefix string to start processing from the end.",
        "target_text": "Question: When converting the prefix notation into an infix notation, the first step to be followed is __________\nChoices:\na) Reverse the equation\nb) Push the equation to the stack\nc) Push the equation onto the queue\nd) Push the equation to the stack or queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: K-d trees are efficient for range searching in multidimensional space. They are simpler than AA-trees and more effective than binary heaps for this use.",
        "target_text": "Question: Which of the following is the simplest data structure that supports range searching?\nChoices:\na) AA-trees\nb) K-d trees\nc) Heaps\nd) binary search trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In an unbalanced binary search tree, the insertion and deletion operations can degrade to linear time O(n) in the worst case (e.g., skewed trees).",
        "target_text": "Question: What are the worst-case complexities of insertion and deletion of a key in a binary search tree?\nChoices:\na) θ(logn) for both insertion and deletion\nb) θ(n) for both insertion and deletion\nc) θ(n) for insertion and θ(logn) for deletion\nd) θ(logn) for insertion and θ(n) for deletion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a min-heap, each parent node is less than or equal to its children. This property ensures that the root is the smallest element.",
        "target_text": "Question: In a min-heap:\nChoices:\na) parent nodes have values greater than or equal to their children\nb) parent nodes have values less than or equal to their children\nc) both statements are True\nd) both statements are wrong\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: C++'s `map` container is a key-value associative container that can be used to implement adjacency lists for graph representations.",
        "target_text": "Question: To create an adjacency list C++'s map container can be used.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A leftist heap is a variant of a binary heap that maintains balance using null path length (NPL), which for a null node is defined as -1.",
        "target_text": "Question: In a leftist heap, the null path length of a null node is defined as?\nChoices:\na) 0\nb) 1\nc) null\nd) -1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: This function buffers insertions and only pushes to the heap when full. Such buffering makes average insertion time constant (amortized O(1)).",
        "target_text": "Question: What is the complexity of the given function for insertion?\ninsert(int n) {\n  if(buffer_size()< max_buffer_size())\n    buffer_arr[ind] = n;\n  else\n    move_to_heap(buffer, buffer+max_buffer_size());\n}\nChoices:\na) O(logn)\nb) amortized O(1)\nc) O(n)\nd) O(n*logn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: This Java function fetches a value from a sparse array using row and column indices. It includes bounds checking before access.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic Object function(int row_index, int col_index) {\n  if (row_index < 0 || col_index > N) {\n    System.out.println(\"column index out of bounds\");\n    return;\n  }\n  return (sparse_array[row_index].fetch(col_index));\n}\nChoices:\na) Store the element in the specified position\nb) Get the element from the specified position\nc) Alter the element in the specified position\nd) Remove the element from the specified position\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The function checks whether a node is a child of any ancestor and prints that ancestor, effectively printing the ancestors of a given node.",
        "target_text": "Question: What is the code below trying to print?\nvoid print(tree *root, tree *node) {\n  if(root == null) return 0;\n  if(root->left == node || root->right == node || print(root->left,node) || print(root->right,node)) {\n    print(root->data);\n  }\n}\nChoices:\na) Just printing all nodes\nb) Not a valid logic to do any task\nc) Printing ancestors of a node passed as argument\nd) Printing nodes from leaf node to a node passed as argument\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A deque can be implemented using two stacks by reversing the order between stacks to support operations on both ends.",
        "target_text": "Question: A Double-ended queue supports operations such as adding and removing items from both ends. You are given only stacks to implement this data structure. What are the total number of stacks required for this operation (you can reuse the stack)?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Depth-first traversal of a graph uses a stack either explicitly or via recursion to explore nodes as deep as possible before backtracking.",
        "target_text": "Question: What data structure is used for depth-first traversal of a graph?\nChoices:\na) Queue\nb) Stack\nc) List\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In inorder threaded binary trees, inorder traversal should use the inorder successor, not predecessor, to move through the tree efficiently.",
        "target_text": "Question: What is wrong with the below code for inorder traversal of a threaded binary tree?\ninordertraversal(threadedtreenode root):\n  threadedtreenode q = inorderpredecessor(root)\n  while(q != root):\n    q = inorderpredecessor(q)\n    print q.data\nChoices:\na) inorder successor instead of inorder predecessor must be used\nb) code is correct\nc) it is code for post order\nd) it is code for pre order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Insertion sort is a stable sorting algorithm, meaning it preserves the relative order of elements with equal keys. Heap and quick sort are unstable.",
        "target_text": "Question: Which of the following sorting algorithms is stable?\nChoices:\na) Insertion sort\nb) Bubble sort\nc) Quick sort\nd) Heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A stack overflow occurs when pushing an element onto a full stack, typically when the allocated memory for the stack is exhausted.",
        "target_text": "Question: What does 'stack overflow' refer to?\nChoices:\na) accessing item from an undefined stack\nb) adding items to a full stack\nc) removing items from an empty stack\nd) index out of bounds exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In sparse graphs, an adjacency list is preferred over a matrix because it uses less memory and offers faster iteration over neighbors.",
        "target_text": "Question: In which case is an adjacency list preferred over an adjacency matrix?\nChoices:\na) Dense graph\nb) Sparse graph\nc) Adjacency list is always preferred\nd) Complete graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: The Tiger tree hash is a type of hash tree structure commonly used in cryptographic applications to verify data integrity.",
        "target_text": "Question: Which of the following is a widely used form of the hash tree?\nChoices:\na) B+ - tree\nb) T tree\nc) Tiger tree hash\nd) Htree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Doubly linked lists allow bidirectional traversal, which makes operations like deleting a known node more efficient than singly linked lists.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by singly linked list?\nChoices:\na) Deleting a node whose location is given\nb) Searching of an unsorted list for a given item\nc) Inserting a new node after node whose location is given\nd) Traversing the list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: The provided Java function checks if the queue is empty and returns the front element without removing it. This is typically a peek operation.",
        "target_text": "Question: What does the following Java code do?\npublic Object function() {\n if(isEmpty())\n   return -999;\n else {\n   Object high;\n   high = q[front];\n   return high;\n }\n}\nChoices:\na) Dequeue\nb) Enqueue\nc) Return the front element\nd) Return the last element\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Open addressing in hash tables can lead to a situation where all slots are filled, causing the table to be considered full even if not all keys are stored.",
        "target_text": "Question: A hash table may become full in the case when we use open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Separate chaining stores multiple elements in the same hash slot using linked lists, but using just the list head doesn't reduce collisions--it organizes them.",
        "target_text": "Question: By implementing separate chaining using a list head we can reduce the number of collisions drastically.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A parse tree represents the syntactic structure of code based on tokens generated by the lexical analyzer during compilation.",
        "target_text": "Question: Parse tree is constructed from the tokens produced by the lexical analyzer.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Under simple uniform hashing with chaining, the probability of avoiding the first few slots is calculated by raising the complement of their probabilities.",
        "target_text": "Question: Consider a hash table with 100 slots. Collisions are resolved using chaining. Assuming simple uniform hashing, what is the probability that the first 3 slots are unfilled after the first 3 insertions?\nChoices:\na) (97 * 97 * 97)/100^3\nb) (99 * 98 * 97)/100^3\nc) (97 * 96 * 95)/100^3\nd) (97 * 96 * 95)/(3! * 100^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In C, arrays support declaration and definition but do not support dynamic allocation natively without using pointers and malloc.",
        "target_text": "Question: Which of the following is not possible with an array in C programming language?\nChoices:\na) Declaration\nb) Definition\nc) Dynamic Allocation\nd) Array of strings\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Post-order traversal visits the left child, right child, and then the root. This order is crucial for operations like deleting trees or evaluating expressions.",
        "target_text": "Question: Which among the following is the pseudo code for post-order traversal?\nChoices:\na) Order(node):\n    if node is not null:\n       Order(node.left)\n       Order(node.right)\n       print node.value\nb) Order(node):\n    if node is not null:\n       Order(node.right)\n       Order(node.left)\n       print node.value\nc) Order(node):\n    if node is not null:\n       Order(node.left)\n       print node.value\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A Graph Structured Stack is a variant used in Tomita's parsing algorithm to manage multiple parsing paths efficiently in natural language processing.",
        "target_text": "Question: Graph Structured Stack finds its application in __________\nChoices:\na) Bogo Sort\nb) Tomita's Algorithm\nc) Todd-Coxeter algorithm\nd) Heap Sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A sparse matrix is one in which the number of zero elements is more than half the total number of elements, optimizing storage and computation.",
        "target_text": "Question: The matrix contains m rows and n columns. The matrix is called a Sparse Matrix if __________\nChoices:\na) Total number of zero elements > (m*n)/2\nb) Total number of zero elements = m + n\nc) Total number of zero elements = m/n\nd) Total number of zero elements = m - n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Indexed sequential search combines the speed of binary search with the simplicity of sequential search but requires additional space for the index.",
        "target_text": "Question: The search technique for searching a sorted file that requires increased amount of space is __________.\nChoices:\na) Indexed sequential search\nb) Interpolation search\nc) Sequential search\nd) Tree search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Direct addressing uses the key as the index in an array, allowing constant-time O(1) access when the universe of keys is small.",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: ArrayIndexOutOfBoundsException in Java occurs at runtime when trying to access an index outside the array bounds.",
        "target_text": "Question: When does the ArrayIndexOutOfBoundsException occur?\nChoices:\na) Compile-time\nb) Run-time\nc) Not an error\nd) Not an exception at all\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of distinct binary search trees with n distinct keys is given by the nth Catalan number. For n=4, it is 14.",
        "target_text": "Question: How many distinct binary search trees can be created out of 4 distinct keys?\nChoices:\na) 5\nb) 14\nc) 24\nd) 35\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing allows O(1) average time complexity for searches using direct access via hash functions, assuming ideal distribution and no collisions.",
        "target_text": "Question: The searching technique that takes O(1) time to find data is:\nChoices:\na) Linear Search\nb) Binary Search\nc) Hashing\nd) Tree Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an Acyclic Directed Graph (DAG), if v is reachable from u, it does not imply the reverse. This is due to the directed nature and absence of cycles.",
        "target_text": "Question: For any two different vertices u and v of an Acyclic Directed Graph, if v is reachable from u, is u also reachable from v?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B+ tree, leaf nodes store key-value pairs and data pointers. Their order is the maximum number of such pairs that fit in a block, calculated based on block size and field sizes.",
        "target_text": "Question: The order of a leaf node in a B+ tree is the maximum number of (value, data record pointer) pairs it can hold. Given that the block size is 1K bytes, data record pointer is 7 bytes, the value field is 9 bytes, and a block pointer is 6 bytes, what is the order of the leaf node?\nChoices:\na) 63\nb) 64\nc) 67\nd) 68\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The `rotate()` function in C++ STL takes three arguments: the beginning, the middle (new start), and the end iterator. It rotates the range.",
        "target_text": "Question: How many arguments are required by the predefined function rotate() in C++?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting infix to postfix respects operator precedence and associativity. The correct postfix form is obtained by traversing the expression accordingly.",
        "target_text": "Question: The postfix form of A*B+C/D is?\nChoices:\na) *AB/CD+\nb) AB*CD/+\nc) A*BC+/D\nd) ABCD+/*\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Tower of Hanoi problem has a well-known recurrence relation where the number of moves required is 2^k - 1 for k disks.",
        "target_text": "Question: What is the number of moves required to solve Tower of Hanoi problem for k disks?\nChoices:\na) 2^k - 1\nb) 2^k + 1\nc) 2k + 1\nd) 2k - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inversions represent the number of pairs in an array where the order is incorrect. Reverse-sorted arrays have the maximum number of inversions.",
        "target_text": "Question: Under what condition are the number of inversions in an array maximum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A dequeue (double-ended queue) supports insertions and deletions at both ends, and is often implemented using doubly linked lists.",
        "target_text": "Question: What is a dequeue?\nChoices:\na) A queue with insert/delete defined for both front and rear ends of the queue\nb) A queue implemented with a doubly linked list\nc) A queue implemented with both singly and doubly linked lists\nd) A queue with insert/delete defined for front side of the queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: This problem tests stack and queue manipulation. The operations require simulating the data movements carefully to track the resulting top of stack.",
        "target_text": "Question: The five items: A, B, C, D, and E are pushed in a stack, one after another starting from A. The stack is popped four items and each element is inserted in a queue. Two elements are deleted from the queue and pushed back on the stack. Now one item is popped from the stack. The popped item is:\nChoices:\na) A\nb) B\nc) C\nd) D\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: AA trees are a form of balanced binary search trees that mimic the structure of 2-3 trees and maintain logarithmic height.",
        "target_text": "Question: Which of the following BSTs is isometric with the 2-3 tree?\nChoices:\na) Splay tree\nb) AA tree\nc) Heap\nd) Red - Black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: This function iterates through a linked list and returns the index (position) of a node with a matching value. If not found, it returns Integer.MIN_VALUE.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic int function(int data) {\n Node temp = head;\n int var = 0;\n while(temp != null) {\n   if(temp.getData() == data) {\n     return var;\n   }\n   var = var + 1;\n   temp = temp.getNext();\n }\n return Integer.MIN_VALUE;\n}\nChoices:\na) Find and delete a given element in the list\nb) Find and return the given element in the list\nc) Find and return the position of the given element in the list\nd) Find and insert a new element in the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: This Java function uses a stack to match each closing parenthesis with its corresponding opening one, printing their indices.",
        "target_text": "Question: Which of the following programs prints the index of every matching parenthesis?\nChoices:\na) Java code matching opening and closing brackets and printing indices\nb) Same with incorrect logic for index matching\nc) Logic reversed for ')' before '('\nd) Unmatched index misplacement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a weighted graph, multiplying edge weights by a constant factor preserves relative path costs, so the shortest path remains unchanged. Adding/subtracting does not preserve path relationships.",
        "target_text": "Question: Assuming value of every weight to be greater than 10, in which of the following cases will the shortest path of a directed weighted graph from 2 vertices u and v never change?\nChoices:\na) add all values by 10\nb) subtract 10 from all the values\nc) multiply all values by 10\nd) in both the cases of multiplying and adding by 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Suffix arrays are efficient structures for string processing and can be constructed in O(nlogn) time using sorting-based approaches.",
        "target_text": "Question: Suffix array can be created in O(nlogn) time.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary heap of height h, the leaf nodes can appear at height h or h-1 due to the complete binary tree structure.",
        "target_text": "Question: The leaf node for a heap of height h will be at which position?\nChoices:\na) h\nb) h-1\nc) h or h-1\nd) h-2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The basic operation in a pairing heap is merging, which allows efficient support for insertions, deletions, and decrease-key operations.",
        "target_text": "Question: What is the basic operation performed in a pairing heap?\nChoices:\na) merge\nb) deletion\nc) insertion\nd) swapping\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A Graph Structured Stack (GSS) used in parsing algorithms like Tomita's is represented as a Directed Acyclic Graph (DAG).",
        "target_text": "Question: A Graph Structured Stack is a __________\nChoices:\na) Undirected Graph\nb) Directed Graph\nc) Directed Acyclic Graph\nd) Regular Graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Each node in a doubly linked list typically contains three fields: data, pointer to the next node, and pointer to the previous node.",
        "target_text": "Question: The minimum number of fields with each node of a doubly linked list is:\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Balanced BSTs like AVL trees allow faster searching (O(log n)) compared to binary heaps which only guarantee fast access to the min/max.",
        "target_text": "Question: Which of the following is an advantage of a balanced binary search tree, like an AVL tree, compared to a binary heap?\nChoices:\na) insertion takes less time\nb) deletion takes less time\nc) searching takes less time\nd) construction of the tree takes less time than binary heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tango trees use a partitioning technique to group access paths efficiently, improving access time for dynamic search trees.",
        "target_text": "Question: Is the partitioning method used by the Tango Tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A hash function computes an index (or location) for storing or retrieving a value in a hash table based on the key.",
        "target_text": "Question: What is a hash function?\nChoices:\na) A function that allocates memory to keys\nb) A function that computes the location of the key in the array\nc) A function that creates an array\nd) A function that computes the location of the values in the array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Prefix expressions are evaluated by scanning the expression from right to left using a stack for operand management.",
        "target_text": "Question: While evaluating a prefix expression, the string is read from?\nChoices:\na) left to right\nb) right to left\nc) center to right\nd) center to left to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In tree data structures, a node with child nodes is referred to as the parent node. Its immediate descendants are called children.",
        "target_text": "Question: Which of the following is the name of the node having child nodes?\nChoices:\na) Brother\nb) Sister\nc) Mother\nd) Parent\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: When an algorithm has two independent time complexities, the overall complexity is determined by the slower-growing function, i.e., the maximum of the two.",
        "target_text": "Question: An algorithm is made up of two independent time complexities f(n) and g(n). Then the complexity of the algorithm is in the order of:\nChoices:\na) f(n) * g(n)\nb) Max(f(n), g(n))\nc) Min(f(n), g(n))\nd) f(n) + g(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In tree structures such as Leftist trees or AVL trees, left children often have levels less than their parents to ensure balance or heap properties.",
        "target_text": "Question: What should be the condition for the level of a left node?\nChoices:\na) It should be less than or equal to that of its parent\nb) It should be greater than that of its parent\nc) It should be strictly less than that of its parent\nd) The level should be equal to one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: To efficiently count scores above a threshold, only relevant values are stored. For scores above 50, only 51-100 need to be tracked.",
        "target_text": "Question: A program P reads in 500 integers in the range [0..100] representing the scores of 500 students. It then prints the frequency of each score above 50. What would be the best way for P to store the frequencies?\nChoices:\na) An array of 50 numbers\nb) An array of 100 numbers\nc) An array of 500 numbers\nd) A dynamically allocated array of 550 numbers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In dynamic arrays, the physical size is the size of the underlying memory allocation (often larger than the logical size to accommodate growth).",
        "target_text": "Question: What is meant by physical size in a dynamic array?\nChoices:\na) The size allocated to elements\nb) The size extended to add new elements\nc) The size of the underlying array at the back-end\nd) The size visible to users\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The probability of selecting a tree uniformly from a set of Catalan-number-generated trees is 1/Catalan(n), where Catalan(n) is the total number of such trees.",
        "target_text": "Question: What is the probability of selecting a tree uniformly at random?\nChoices:\na) Equal to Catalan Number\nb) Less than Catalan Number\nc) Greater than Catalan Number\nd) Reciprocal of Catalan Number\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The maximum height of an AVL tree with n nodes is based on the balance factor constraint. For 7 nodes, the maximum height is 3.",
        "target_text": "Question: What is the maximum height of any AVL-tree with 7 nodes? Assume that the height of a tree with a single node is 0.\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Counting the number of elements in a linked list involves iterating through the list until the end and incrementing a counter at each node.",
        "target_text": "Question: Which of the following pieces of code has the functionality of counting the number of elements in the list?\nChoices:\na) code that increments `size` inside a while loop with cur != null\nb) code that swaps the order of size++ and pointer movement\nc) code with no return value\nd) code that skips every second node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a full binary tree, each internal node has exactly two children. The total number of nodes N is 2 * I + 1, where I is the number of internal nodes.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of nodes N are?\nChoices:\na) N = 2*I\nb) N = I + 1\nc) N = I - 1\nd) N = 2*I + 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In splay trees and other dynamic tree structures, a 'cut' operation is used to break a preferred path or subtree at a specific node.",
        "target_text": "Question: Which operation is used to break a preferred path into two sets of parts at a particular node?\nChoices:\na) Differentiate\nb) Cut\nc) Integrate\nd) Join\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Not all undirected multigraphs contain Eulerian cycles. The necessary condition is that all vertices have even degree and the graph is connected.",
        "target_text": "Question: All undirected Multigraphs contain Eulerian cycles.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: The code attempts to reverse a string but uses an undeclared variable `n` for loop control. Declaring and initializing `n` as the string's length is essential.",
        "target_text": "Question: What is missing in the given code?\n#include <bits/stdc++.h>\nusing namespace std;\nvoid reverseStr(string& str) {\n    for (int i = 0; i < n / 2; i++)\n        swap(str[i], str[n - i - 1]);\n}\nint main() {\n    string str = \"geeksforgeeks\";\n    reverseStr(str);\n    cout << str;\n    return 0;\n}\nChoices:\na) swap function is not defined\nb) string is not defined here.\nc) Variable n is not declared anywhere.\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A 3-ary max heap allows three children per node and is represented using an array. The parent must be greater than all its children to maintain the max-heap property.",
        "target_text": "Question: Which one of the following is a valid sequence of elements in an array representing a 3-ary max heap?\nChoices:\na) 1, 3, 5, 6, 8, 9\nb) 9, 6, 3, 1, 8, 5\nc) 9, 3, 6, 8, 5, 1\nd) 9, 5, 6, 8, 3, 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees offer amortized efficiency for frequently accessed elements. They are useful in applications where a small subset of data is accessed repeatedly.",
        "target_text": "Question: When we have red-black trees and AVL trees that can perform most operations in logarithmic time, what is the need for splay trees?\nChoices:\na) no there is no special usage\nb) In real time it is estimated that 80% access is only to 20% data, hence most used ones must be easily available\nc) red-black and AVL are not up to mark\nd) they are just another type of self-balancing binary search trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: This code generates all subarrays of an array. Each subarray is printed by iterating over a range starting from index i to j.",
        "target_text": "Question: What will the following code do?\nvoid fun(int arr[], int n) {\n  for (int i = 0; i < n; i++) {\n    for (int j = i; j < n; j++) {\n      for (int k = i; k <= j; k++)\n        cout << arr[k] << \" \";\n      cout << endl;\n    }\n  }\n}\nChoices:\na) Prints the subsequence of the article.\nb) Prints the elements of the array\nc) Prints the subarray of the element.\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a linear queue implemented using an array, the space complexity is O(n) since memory for n elements is preallocated.",
        "target_text": "Question: What is the space complexity of a linear queue having n elements?\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A connected acyclic graph with v vertices and e edges must have e = v - 1. This defines the properties of a tree.",
        "target_text": "Question: For a given graph G having v vertices and e edges which is connected and has no cycles, which of the following statements is True?\nChoices:\na) v = e\nb) v = e + 1\nc) v + 1 = e\nd) v = e - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The function swaps adjacent elements in a singly linked list by manipulating the values, not pointers. It alters the data, not structure.",
        "target_text": "Question: What will be the contents of the list after the function completes execution (on list 1 to 7)?\nChoices:\na) 1,2,3,4,5,6,7\nb) 2,1,4,3,6,5,7\nc) 1,3,2,5,4,7,6\nd) 2,3,4,5,6,7,1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a circular queue of size n holding up to n-1 elements, the full condition is (REAR+1) mod n == FRONT; the empty condition is REAR == FRONT.",
        "target_text": "Question: Suppose a circular queue of capacity (n - 1) elements is implemented with an array of n elements. What are the conditions for full and empty states?\nChoices:\na) Full: (REAR+1) mod n == FRONT, empty: REAR == FRONT\nb) Full: (REAR+1) mod n == FRONT, empty: (FRONT+1) mod n == REAR\nc) Full: REAR == FRONT, empty: (REAR+1) mod n == FRONT\nd) Full: (FRONT+1) mod n == REAR, empty: REAR == FRONT\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: This code removes the second-to-last node in a doubly linked list and returns its value. It updates both previous and next links.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic int function() {\n Node temp = tail.getPrev();\n tail.setPrev(temp.getPrev());\n temp.getPrev().setNext(tail);\n size--;\n return temp.getItem();\n}\nChoices:\na) Return the element at the tail of the list but do not remove it\nb) Return the element at the tail of the list and remove it from the list\nc) Return the last but one element from the list but do not remove it\nd) Return the last but one element at the tail of the list and remove it from the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Reverse Polish Notation (RPN) is postfix form where the operator comes after its operands. The valid format is operand operand operator.",
        "target_text": "Question: Which of the following is a valid reverse Polish expression?\nChoices:\na) a op b\nb) op a b\nc) a b op\nd) both op a b and a b op\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In a BST, traversing right -> root -> left produces elements in descending order due to the inherent structure of BSTs.",
        "target_text": "Question: A BST is traversed in the following order recursively: Right, root, left. The output sequence will be in:\nChoices:\na) Ascending order\nb) Descending order\nc) Bitomic sequence\nd) No specific order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Infix expressions place the operator between operands. Recognizing correct infix notation involves checking for balanced operators and operands.",
        "target_text": "Question: Identify the infix expression from the list of options given below:\nChoices:\na) a/b+(c-d)\nb) abc*+d+ab+cd+*ce-f-\nc) ab-c-\nd) +ab\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: If each node in a binary tree has an odd number of descendants (including itself), it implies that no node can have exactly one child.",
        "target_text": "Question: In a binary tree with n nodes, every node has an odd number of descendants. Every node is considered to be its own descendant. What is the number of nodes in the tree that have exactly one child?\nChoices:\na) 0\nb) 1\nc) (n-1)/2\nd) n-1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Ternary heaps (3-ary heaps) have more children per node compared to binary heaps, leading to fewer levels and improved cache behavior.",
        "target_text": "Question: Do ternary heaps have better memory cache behavior than binary heaps?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The code reverses an array using two-pointer swapping from both ends. The output reflects a full reverse.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n}  \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) 5 1 4 3\nb) 3 5 1 4\nc) 5 3 4 1\nd) error\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the 'count' heuristic, frequently accessed nodes move forward in a list as their access count increases, improving future access time.",
        "target_text": "Question: In __________ method, whenever a node is accessed, it might move to the head of the list if its number of accesses becomes greater than the records preceding it.\nChoices:\na) least recently used\nb) count\nc) transpose\nd) exchange\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Range query structures like bins group values by intervals for quick access in searching and filtering.",
        "target_text": "Question: Bin is an example of a range query data structure.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The structure of a BST depends on the insertion order. Different orders yield different shapes, even with the same data set.",
        "target_text": "Question: Select the incorrect statement. Binary search trees (regardless of the order in which the values are inserted into the tree):\nChoices:\na) Always have multiple links per node.\nb) Can be sorted efficiently.\nc) Always have the same shape for a particular set of data.\nd) Are nonlinear data structures.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A deque (double-ended queue) supports insertion/deletion at both ends and can be implemented using a doubly linked list or a circular array.",
        "target_text": "Question: Which data structure is used to implement deque?\nChoices:\na) Stack\nb) Doubly linked list\nc) Circular array\nd) Both B and C\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Sparse matrices are those in which most elements are zero. They are the opposite of dense matrices, which are mostly non-zero.",
        "target_text": "Question: Is Sparse Matrix also known as Dense Matrix?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Sorted arrays are efficient in scenarios involving ordered data, such as in commercial computing or scheduling. Hash tables do not rely on order and are thus not a typical application.",
        "target_text": "Question: Which of the following is not an application of sorted array?\nChoices:\na) Commercial computing\nb) Priority Scheduling\nc) Discrete Mathematics\nd) Hash Tables\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A circular, doubly linked list node contains two pointers (prev and next). For 5 nodes, total pointers = 5 * 2 = 10.",
        "target_text": "Question: How many pointers are contained as data members in the nodes of a circular, doubly linked list of integers with five nodes?\nChoices:\na) 5\nb) 8\nc) 10\nd) 15\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary tree, nodes with degree 1, 2, or 3 correspond to the number of their neighbors. For each configuration, relationships can be derived based on degree constraints.",
        "target_text": "Question: A binary tree with n > 1 nodes has n1, n2, and n3 nodes of degree one, two, and three respectively. The degree of a node is defined as the number of its neighbors.\nn3 can be expressed as:\nChoices:\na) n1 + n2 - 1\nb) n1 - 2\nc) ((n1 + n2)/2)\nd) n2 - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In open addressing, if all slots are probed and none is empty, the table is considered full. Hence, it can become full despite available slots due to probing strategy.",
        "target_text": "Question: In open addressing, the hash table can never become full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Chernoff bound provides exponential bounds on tail distributions. For sampling without replacement, the expected error decreases as O(1/sqrt(k)).",
        "target_text": "Question: What is the expected error by the estimator Chernoff bound on the samples performed without replacement?\nChoices:\na) O(log k!)\nb) O(k!)\nc) O(k^2)\nd) O(1/sqrt(k))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The lowest-level element in a BST is the one farthest from the root. This depends on the insertion order and tree balancing.",
        "target_text": "Question: While inserting the elements 71, 65, 84, 69, 67, 83 in an empty binary search tree (BST) in the sequence shown, the element in the lowest level is:\nChoices:\na) 65\nb) 67\nc) 69\nd) 83\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Matrix multiplication involves nested loops for multiplying rows of the first matrix by columns of the second. Valid code performs this with proper indexing.",
        "target_text": "Question: Select the code snippet which performs matrix multiplication (a and b are the two given matrices, resultant matrix is c):\nChoices:\na) correct nested-loop code for c[i][j] += a[i][k] * b[k][j]\nb) code that adds matrix values instead\nc) code that transposes the matrix\nd) code that just prints one matrix\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a skew heap, all three major operations--merge, insert, delete--are based on merge operations, and each takes amortized O(log N) time.",
        "target_text": "Question: What is the time per operation of merging, insertion, and deletion operations in a skew heap?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A single stack is sufficient to evaluate a postfix expression using a simple algorithm that processes operators and operands in one pass.",
        "target_text": "Question: To evaluate an expression without any embedded function calls:\nChoices:\na) As many stacks as the height of the expression tree are needed\nb) One stack is enough\nc) Two stacks are needed\nd) A Turing machine is needed in the general case\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The size of an array is calculated by multiplying the number of elements with the size of each element. If int is 4 bytes, int arr[15] occupies 60 bytes.",
        "target_text": "Question: Assuming int is of 4 bytes, what is the size of int arr[15]?\nChoices:\na) 15\nb) 19\nc) 11\nd) 60\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Job scheduling is not inherently stack-based. Stacks are used in recursion, expression evaluation, and reversing operations.",
        "target_text": "Question: Which of the following is not an inherent application of stack?\nChoices:\na) Implementation of recursion\nb) Evaluation of a postfix expression\nc) Job scheduling\nd) Reverse a string\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: An Abstract Data Type (ADT) defines a data model and operations that can be performed on it, without specifying implementation details.",
        "target_text": "Question: A mathematical model with a collection of operations defined on that model is called:\nChoices:\na) Data Structure\nb) Abstract Data Type\nc) Primitive Data Type\nd) Algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Unrolled linked lists optimize space by grouping multiple elements in a node, reducing the pointer overhead compared to traditional singly linked lists.",
        "target_text": "Question: Unrolled linked-list requires more storage space for pointers compared to a singly linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Reversing a string using a stack involves pushing each character and then popping to retrieve them in reverse order.",
        "target_text": "Question: Operations required for reversing a word or a string using stack are push() and pop().\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In any tree, the root node is defined to be at depth 0. Depth increases by one at each level of the tree.",
        "target_text": "Question: What is the depth of the root node of the ternary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In the process of building a heap with n elements, a maximum of n nodes must be arranged using heapify operations.",
        "target_text": "Question: Given a heap of n nodes. The maximum number of trees for building the heap is:\nChoices:\na) n\nb) n-1\nc) n/2\nd) logn\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In open addressing, deletion is typically handled lazily by marking entries as deleted rather than physically removing them.",
        "target_text": "Question: What kind of deletion is implemented by hashing using open addressing?\nChoices:\na) active deletion\nb) standard deletion\nc) lazy deletion\nd) no deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Priority queues are used in tasks like Huffman coding and interrupt handling. Undo operations are not typically modeled with priority queues.",
        "target_text": "Question: Which of the following is not an application of priority queue?\nChoices:\na) Huffman codes\nb) Interrupt handling in operating system\nc) Undo operation in text editors\nd) Bayesian spam filter\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Infix expressions are valid even with parentheses. A proper evaluation algorithm handles them without error.",
        "target_text": "Question: The system throws an error if parentheses are encountered in an infix expression evaluation algorithm.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The LIFO (Last In First Out) principle is implemented using a stack. While linked lists allow flexible data management, the LIFO principle specifically defines stack behavior.",
        "target_text": "Question: Which data structure is based on the Last In First Out (LIFO) principle?\nChoices:\na) Tree\nb) Linked List\nc) Stack\nd) Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A splay operation in splay trees moves a recently accessed node to the root using tree rotations, improving future access time for frequently used elements.",
        "target_text": "Question: What is a splay operation?\nChoices:\na) moving parent node to down of child\nb) moving a node to root\nc) moving root to leaf\nd) removing leaf node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: The Tower of Hanoi problem is optimally solved using a stack, as it naturally fits the recursive movement and backtracking needed.",
        "target_text": "Question: The optimal data structure used to solve Tower of Hanoi is __________\nChoices:\na) Tree\nb) Heap\nc) Priority queue\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In uniform hashing, the expected number of keys per slot is the load factor, n/m. Dividing the total keys by the total number of slots provides the expected value.",
        "target_text": "Question: Suppose we are given n keys, m hash table slots, and two simple uniform hash functions h1 and h2. Further, suppose our hashing scheme uses h1 for odd keys and h2 for even keys. What is the expected number of keys in a slot?\nChoices:\na) 2m/n\nb) m/n\nc) n/m\nd) m/2n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Null path length (NPL) is a measure used in leftist heaps and other tree structures. If it's not updated properly, its value remains at the default (usually 0).",
        "target_text": "Question: What happens if the null path length is not updated?\nChoices:\na) error occurs\nb) all null path lengths will be 0\nc) all null path lengths will be -1\nd) all null path lengths will be 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A memory-efficient doubly linked list reduces space by storing XOR of previous and next pointers in a single field, minimizing pointer storage.",
        "target_text": "Question: What is a memory efficient double linked list?\nChoices:\na) Each node has only one pointer to traverse the list back and forth\nb) The list has breakpoints for faster traversal\nc) An auxiliary singly linked list acts as a helper list to traverse through the doubly linked list\nd) A doubly linked list that uses bitwise AND operator for storing addresses\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A fully connected undirected graph with all non-diagonal elements as 1 forms a complete graph. The number of MSTs depends on how edges are selected, all with equal weight.",
        "target_text": "Question: An undirected graph G has n nodes. Its adjacency matrix is given by an n * n square matrix with (i) diagonal elements as 0s and (ii) non-diagonal elements as 1s. Which one of the following is TRUE?\nChoices:\na) Graph G has no minimum spanning tree (MST)\nb) Graph G has a unique MST of cost n-1\nc) Graph G has multiple distinct MSTs, each of cost n-1\nd) Graph G has multiple spanning trees of different costs\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a leftist heap, the right path contains the shortest path to a leaf. All operations (merge, insert, delete) are performed via this right path.",
        "target_text": "Question: In a leftist heap, all the operations should be performed on?\nChoices:\na) left path\nb) centre path\nc) right path\nd) root\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: By the triangle inequality, if shortest paths s->u=53 and s->v=65, then u->v must be ≥12 to maintain valid path lengths.",
        "target_text": "Question: Consider a weighted undirected graph with positive edge weights. Let u–v be an edge. The shortest path from source s to u is 53, and to v is 65. Which one of the following statements is always True?\nChoices:\na) weight(u, v) < 12\nb) weight(u, v) ≤ 12\nc) weight(u, v) > 12\nd) weight(u, v) ≥ 12\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A deque (double-ended queue) supports insertions and deletions at both ends, but not in the middle. It is a generalization of stacks and queues.",
        "target_text": "Question: A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?\nChoices:\na) Priority queue\nb) Dequeue\nc) Circular queue\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Bin data structures are used for organizing data spatially, and they are commonly applied in range or region query problems (e.g., graphics, GIS).",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient traversal\nb) to have efficient region query\nc) to have efficient deletion\nd) to have efficient insertion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Direct addressing is suitable when the universe of keys is small, allowing direct access using an array index with no hashing needed.",
        "target_text": "Question: When is it appropriate to use direct addressing?\nChoices:\na) When the array is comparatively large\nb) When the universe U of keys is reasonably small\nc) When the universe U of keys is reasonably large\nd) When the array is comparatively small\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A stack with PUSH, POP, and REVERSE can simulate queue operations. ENQUEUE may require multiple instructions, while DEQUEUE can often be done with one.",
        "target_text": "Question: Suppose a stack implementation supports an instruction REVERSE, which reverses the order of elements on the stack, in addition to PUSH and POP. Which one of the following statements is TRUE with respect to this modified stack?\nChoices:\na) A queue cannot be implemented using this stack.\nb) A queue can be implemented where ENQUEUE takes a single instruction and DEQUEUE takes a sequence of two instructions.\nc) A queue can be implemented where ENQUEUE takes a sequence of three instructions and DEQUEUE takes a single instruction.\nd) A queue can be implemented where both ENQUEUE and DEQUEUE take a single instruction each.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a special type of binary tree in which every node has either zero or two children. This structure ensures balanced depth and predictable traversal patterns.",
        "target_text": "Question: What is a full binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) Each node has exactly two children\nc) All the leaves are at the same level\nd) Each node has exactly one or two children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Hash tables commonly use arrays for storage, where a hash function maps keys to specific array indices. Collisions are often handled using techniques like chaining or open addressing.",
        "target_text": "Question: What data organization method is used in hash tables?\nChoices:\na) Stack\nb) Array\nc) Linked list\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A suffix tree is a compressed trie of all the suffixes of a given text. Efficient algorithms allow for its construction in linear time and space relative to the length of the input string, often O(M), where M is the string length.",
        "target_text": "Question: How much space does construction of suffix tree takes?\nChoices:\na) O (log M)\nb) Exponential to Length of Tree\nc) O (M!)\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix expressions (Reverse Polish Notation) are evaluated using a stack. Operands are pushed onto the stack, and operators pop the required operands to apply the operation. This method avoids the need for parentheses.",
        "target_text": "Question: The result of evaluating the postfix expression 5, 4, 6, +, *, 4, 9, 3, /, +, * is?\nChoices:\na) 600\nb) 350\nc) 650\nd) 588\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an adjacency list representation of an undirected graph, each edge is stored twice--once in the list for each of its endpoints. The space complexity is proportional to the number of edges E.",
        "target_text": "Question: Space complexity for storing only the edges in an adjacency list of an undirected graph is __________\nChoices:\na) O(V)\nb) O(E*E)\nc) O(E)\nd) O(E+V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In post-order traversal of a binary tree, the correct sequence is to first traverse the left subtree, then the right subtree, and finally visit the root node.",
        "target_text": "Question: The steps for finding post-order traversal are traverse the right subtree, traverse the left subtree or visit the current node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a complete binary tree of depth d, the number of leaf nodes is given by 2^d, as all levels are completely filled.",
        "target_text": "Question: The number of leaf nodes in a complete binary tree of depth d is __________\nChoices:\na) 2d\nb) 2d-1+1\nc) 2d+1+1\nd) 2d+1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Self-balancing binary search trees maintain logarithmic height using rotations. Common examples include AVL Trees, Red-Black Trees, and Splay Trees. A 2-3-4 Tree is a multiway search tree and not a binary tree.",
        "target_text": "Question: Which of the following is not the self balancing binary search tree?\nChoices:\na) AVL Tree\nb) 2-3-4 Tree\nc) Red - Black Tree\nd) Splay Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees are a type of self-adjusting binary search tree. They provide amortized O(log n) time complexity for basic operations by splaying recently accessed nodes to the root.",
        "target_text": "Question: Is it True that splay trees have O(logn) amortized complexity?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: For post-order traversal to produce a specific sequence, the structure of the tree must align with the traversal rules (left-right-root). With 3 labeled nodes, there are a limited number of binary trees that satisfy a given post-order sequence.",
        "target_text": "Question: How many binary trees with 3 nodes which when traversed in post order gives the sequence A, B, C is?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are zero-indexed data structures in most programming languages. This means the first element is accessed at index 0, which is a common source of off-by-one errors.",
        "target_text": "Question: In general, the index of the first element in an array is __________\nChoices:\na) 0\nb) -1\nc) 2\nd) 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a d-ary heap, each node can have up to d children. Despite this generalization from binary heaps, parent and child indices can still be calculated using multiplication and division.",
        "target_text": "Question: Multiplication and division to find children and parents cannot be implemented in a d-heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a d-heap, inserting an element may involve bubbling it up the tree to restore the heap property. The time complexity of insertion depends on the logarithm base d of the number of elements.",
        "target_text": "Question: What is the run time efficiency of an insertion algorithm in d-heap?\nChoices:\na) O(N)\nb) O(log N)\nc) O(logd N)\nd) O(Nd)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: While depth-first traversal of graphs typically uses stacks, breadth-first traversal relies on queues to process nodes level by level.",
        "target_text": "Question: What data structure is used for breadth first traversal of a graph?\nChoices:\na) Queue\nb) Stack\nc) List\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Reversing a queue can be done by transferring its elements to a stack and then back to the queue. This uses the LIFO property of stacks to reverse the order.",
        "target_text": "Question: Following is pseudo code of a function that takes a Queue as an argument, and uses a stack S to do processing.\nvoid fun(Queue *Q) {\n    Stack S;\n    while (!isEmpty(Q)) {\n        push(&S, deQueue(Q));\n    }\n    while (!isEmpty(&S)) {\n        enQueue(Q, pop(&S));\n    }\n}\nChoices:\na) Removes the last from Q\nb) Keeps the Q same as it was before the call\nc) Makes Q empty\nd) Reverses the Q\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B-trees and their variants like B+-trees are optimized for systems that read and write large blocks of data. B+-trees are commonly used in databases and file systems.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) B-tree\nb) Red-black tree\nc) AVL tree\nd) Both AVL tree and Red-black tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Binary Decision Diagrams (BDDs) are used in graph-based representations of Boolean functions. Some logical operations like tautology checking may not be efficiently solvable in polynomial time using BDDs.",
        "target_text": "Question: Which of the following logical operation can't be implemented by polynomial time graph manipulation algorithms using Binary Decision Diagrams?\nChoices:\na) Conjunction\nb) Disjunction\nc) Negation\nd) Tautology Checking\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing is a collision resolution technique in open addressing where, if a key's hashed location is occupied, subsequent slots are checked sequentially until an empty one is found.",
        "target_text": "Question: Consider a 13 element hash table for which f(key)=key mod 13 is used with integer keys. Assuming linear probing is used for collision resolution, at which location would the key 103 be inserted, if the keys 661, 182, 24 and 103 are inserted in that order?\nChoices:\na) 0\nb) 1\nc) 11\nd) 12\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: When limited to a single array and basic stack operations, implementing queue operations like enqueue is not feasible without additional memory or logic for handling order.",
        "target_text": "Question: Given only a single array of size 10 and no other memory is available. Which of the following operation is not feasible to implement (Given only push and pop operation)?\nChoices:\na) Push\nb) Pop\nc) Enqueue\nd) Returntop\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B+-tree of order d and height h can store a maximum of d^h keys. This property is useful in indexing for databases and file systems, where large amounts of data must be accessed efficiently.",
        "target_text": "Question: What is the maximum number of keys that a B+ -tree of order 3 and of height 3 have?\nChoices:\na) 3\nb) 80\nc) 27\nd) 26\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In graph theory, finding the shortest path from one node to another in a directed graph can involve various path constraints. When edges are defined with specific functions like j = i+1 or j = 3i, techniques such as BFS help compute minimum edge counts.",
        "target_text": "Question: Let G be a directed graph whose vertex set is the set of numbers from 1 to 100. There is an edge from a vertex i to a vertex j if either j = i + 1 or j = 3i. The minimum number of edges in a path in G from vertex 1 to vertex 100 is\nChoices:\na) 4\nb) 7\nc) 23\nd) 99\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow the Last-In-First-Out (LIFO) principle. They are widely used in recursion, where function calls are pushed onto the call stack and popped off upon return.",
        "target_text": "Question: Stack is used for __________\nChoices:\na) CPU Resource Allocation\nb) Breadth First Traversal\nc) Recursion\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary tree, the balance factor of a node is calculated as the height of its left subtree minus the height of its right subtree. This is important in AVL trees to maintain balance.",
        "target_text": "Question: The balance factor of a node in a binary tree is defined as __________\nChoices:\na) addition of heights of left and right subtrees\nb) height of right subtree minus height of left subtree\nc) height of left subtree minus height of right subtree\nd) height of right subtree minus one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A leaf node is a node with no children. In any tree, including ternary trees, a leaf node is also considered a child of its parent node.",
        "target_text": "Question: Can leaf node be called child node in a ternary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Pairing heaps are simple and practical self-adjusting heaps that perform well in applications with frequent decrease-key operations. They often outperform binary and d-heaps in practice.",
        "target_text": "Question: Which of the following methods is the best choice for complex applications?\nChoices:\na) binary heap\nb) d-heap\nc) treap\nd) pairing heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Time complexity expresses how the runtime of an algorithm scales with input size N. Among O(N), O(N^0.5), and O(log N), the linear O(N) grows the fastest and is slowest for large N.",
        "target_text": "Question: Time complexities of three algorithms are given. Which should execute the slowest for large values of N?\nChoices:\na) O(N1/2)\nb) O(N)\nc) O(log N)\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Path compression is a technique used in the union-find data structure to flatten the tree structure, improving efficiency. It inspired self-adjusting strategies in data structures like skew heaps and splay trees.",
        "target_text": "Question: __________ is one of the earliest forms of a self-adjustment strategy used in splay trees, skew heaps.\nChoices:\na) Union by rank\nb) Equivalence function\nc) Dynamic function\nd) Path compression\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: A rope is a binary tree used to store and manipulate long strings. It supports efficient operations like splitting and concatenation at arbitrary positions in the string.",
        "target_text": "Question: Is it possible to perform a split operation on a string in the rope if the split point is in the middle of the string?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sorted array can be in numeric or alphabetical order. The array's elements may also reside in contiguous memory blocks, but sorting refers specifically to element order, not memory layout.",
        "target_text": "Question: What is a sorted array?\nChoices:\na) Arrays sorted in numerical order\nb) Arrays sorted in alphabetical order\nc) Elements of the array are placed at equally spaced addresses in the memory\nd) All of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix expressions (Polish notation) can be converted to postfix (Reverse Polish notation) using a stack-based approach or by recursively parsing and rearranging the operators and operands.",
        "target_text": "Question: What is the postfix form of the following prefix *+ab-cd?\nChoices:\na) ab+cd-*\nb) abc+*\nc) ab+*cd\nd) ab+*cd\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A treap is a data structure that combines binary search tree properties with heap properties. Each node has a priority, and this priority helps maintain a randomized balance, making the structure simple yet efficient.",
        "target_text": "Question: What is the reason behind the simplicity of a treap?\nChoices:\na) Each node has data and a pointer\nb) Each node is colored accordingly\nc) It is a binary search tree following heap principles\nd) Each node has a fixed priority field\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In linked lists representing sets, operations like union and intersection require element comparisons, which take longer than simple operations like membership checks or counting elements (cardinality).",
        "target_text": "Question: Suppose each set is represented as a linked list with elements in arbitrary order. Which of the operations among union, intersection, membership, cardinality will be the slowest? (GATE CS 2004)\nChoices:\na) union \nb)  membership\nc) cardinality\nd)  union, intersection\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In C++, arrays can be initialized using brace-enclosed lists. Outputting the elements using `cout` prints their values in order. This basic syntax is error-free if used correctly.",
        "target_text": "Question: What will be the output of the code below?\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int arr[2] = { 1, 2 };\n    cout << arr[0] << \", \" << arr[1] << endl;\n    return 0;\n}\nChoices:\na) 1, 2\nb) Syntax error\nc) Run time error\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Single variant hashing helps maintain a priority queue structure called a minimum hash queue. It offers a fast and efficient O(n) time complexity for insertion and access.",
        "target_text": "Question: What is the time required for single variant hashing to maintain the minimum hash queue?\nChoices:\na) O (log n!)\nb) O (n!)\nc) O (n2)\nd) O (n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: When the head of a singly linked list is not given, deleting a node is only possible if it is not the last node. This is done by copying the data from the next node and updating the pointer to skip over it.",
        "target_text": "Question: Given pointer to a node X in a singly linked list. Only one pointer is given, pointer to head node is not given, can we delete the node X from given linked list?\nChoices:\na) Possible if X is not last node. Use following two steps (a) Copy the data of next of X to X. (b)Update the pointer of node X to the node after the next node. Delete next of X.\nb) Possible if size of linked list is even.\nc) Possible if size of linked list is odd\nd) Possible if X is not first node. Use following two steps (a) Copy the data of next of X to X. (b) Delete next of X.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A threaded binary tree stores null pointers as links to in-order predecessors or successors to facilitate fast traversal without recursion or a stack. Node structure includes tag bits and pointers.",
        "target_text": "Question: In general, the node content in a threaded binary tree is __________\nChoices:\na) leftchild_pointer, left_tag, data, right_tag, rightchild_pointer\nb) leftchild_pointer, left_tag\nc) leftchild_pointer, left_tag, right_tag, rightchild_pointer\nd) leftchild_pointer, left_tag, data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Skew heaps use a merging strategy that helps keep the structure balanced. There are two merge operations: one for the initial comparison and another for recursively combining subtrees.",
        "target_text": "Question: How many types of the merge are available in skew heaps?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The height of a binary search tree is the longest path from the root to any leaf node. The structure depends on the insertion order of elements and affects search time.",
        "target_text": "Question: The following numbers are inserted into an empty binary search tree in the given order: 10, 1, 3, 5, 15, 12, 16. What is the height of the binary search tree (the height is the maximum distance of a leaf node from the root)? (GATE CS 2004)\nChoices:\na) 2\nb) 3\nc) 4\nd) 6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Variable-length arrays (VLAs) allow programmers to define arrays whose size is determined at runtime instead of compile time. This adds flexibility in memory usage based on user input or other runtime conditions.",
        "target_text": "Question: Which of the following is an advantage of using variable-length arrays?\nChoices:\na) Deciding the length of an array at the time of execution\nb) Memory allocation at compile time\nc) Initializing array at compile time\nd) Faster execution of code\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a rooted tree where each node has 0 or 3 children, a mathematical relationship exists between the total number of nodes and the number of leaf nodes. The number of leaves in such ternary trees can be derived using a formula.",
        "target_text": "Question: The number of leaf nodes in a rooted tree of n nodes, with each node having 0 or 3 children is:\nChoices:\na) n/2\nb) (n-1)/3\nc) (n-1)/2\nd) (2n+1)/3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Breadth First Traversal (BFS) requires a queue to manage nodes level by level. While arrays can represent data structures, they don't provide the dynamic behavior required by BFS like a queue does.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is?\nChoices:\na) Array\nb) Stack\nc) Tree\nd) Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a circular queue, the rear and front pointers wrap around when they reach the end of the array. This wrapping is achieved using modulo arithmetic to stay within bounds.",
        "target_text": "Question: In a circular queue, how do you increment the rear end of the queue?\nChoices:\na) rear++\nb) (rear+1) % CAPACITY\nc) (rear % CAPACITY)+1\nd) rear-\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Free lists are used in dynamic memory allocation to keep track of free memory blocks. They are often implemented using linked lists or balanced trees for efficiency in merging and splitting blocks.",
        "target_text": "Question: What datastructures can be used in implementing a free list?\nChoices:\na) only linked list\nb) linked list or sort trees\nc) arrays\nd) trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees are a type of self-adjusting binary search tree that move frequently accessed elements closer to the root, improving access times for non-uniform access patterns.",
        "target_text": "Question: What are splay trees?\nChoices:\na) self adjusting binary search trees\nb) self adjusting binary trees\nc) a tree with strings\nd) a tree with probability distributions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A k-d tree is a space-partitioning data structure used for organizing points in a k-dimensional space. Each level in the tree corresponds to splitting along a specific dimension.",
        "target_text": "Question: Each level in a k-d tree corresponds to a split along?\nChoices:\na) a specific dimension\nb) node height\nc) node color\nd) number of children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: This C++ program uses an array and calculates a count array based on conditional comparisons. It prints the final count array. Understanding of loops, memory initialization, and logical indexing is essential to interpret the output.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int arr[], int n) \n{  \n int count[n]; \n memset(count, 0, sizeof(count)); \n \n for (int i=n-2; i>=0; i--) \n { \n  if (arr[i] >= n - i - 1) \n   count[i]++; \n \n  for (int j=i+1; j < n-1 && j <= arr[i] + i; j++) \n \n   if (count[j] != -1) \n    count[i] += count[j]; \n \n  if (count[i] == 0) \n   count[i] = -1; \n } \n \n for (int i=0; i<n; i++) \n  cout << count[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 3, 5, 8, 9}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, n); \n return 0; \n}\nChoices:\na) 3\nb) 4\nc) 4 4 2 1 0\nd) 4 2 2 0 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Recursion is typically implemented using a stack to manage function calls. Although arrays can store data, stacks are necessary for tracking the call-return mechanism.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Array\nd) List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The height of a binary search tree (BST) depends on the order of inserted elements. A balanced BST has logarithmic height, while skewed trees can have linear height.",
        "target_text": "Question: The following numbers are inserted into an empty binary search tree in the given order: 10, 1, 3, 5, 15, 12, 16 What is the height of the binary search tree?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Merging sorted files involves comparing elements in each file. The time complexity is proportional to the total number of records across all files, making it O(n) for merging n records.",
        "target_text": "Question: Merging 4 sorted files containing 50, 10, 25 and 15 records will take __________ time\nChoices:\na) O(100)\nb) O(200)\nc) O(175)\nd) O(125)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting postfix expressions to infix requires understanding the order of operations and operator precedence. Evaluating the expression yields its numerical result.",
        "target_text": "Question: The equivalent infix expression and value for the postfix form 1 2 + 3 * 4 5 * - will be __________\nChoices:\na) 1 + 2 * 3 - 4 * 5 and -13\nb) (2 + 1) * (3 - 4) * 5 and 13\nc) 1 + 2 * (3 - 4) * 5 and -11\nd) (1 + 2) * 3 - (4 * 5) and -11\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Array representation of trees is memory efficient for complete or dense trees. However, for sparse trees, this leads to wasted space due to empty indices.",
        "target_text": "Question: Consider a situation of writing a binary tree into a file with memory storage efficiency in mind, is array representation of tree is good?\nChoices:\na) yes because we are overcoming the need of pointers and so space efficiency\nb) yes because array values are indexable\nc) No it is not efficient in case of sparse trees and remaining cases it is fine\nd) No linked list representation of tree is only fine\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues are used in a variety of algorithms. LRU (Least Recently Used) uses a queue to track recent usage, while Quick Sort is not implemented with queues.",
        "target_text": "Question: Which of the following option is not correct?\nChoices:\na) If the queue is implemented with a linked list, keeping track of a front pointer, Only rear pointer s will change during an insertion into an non-empty queue.\nb) Queue data structure can be used to implement least recently used (LRU) page fault algorithm and Quick short algorithm.\nc) Queue data structure can be used to implement Quick short algorithm but not least recently used (LRU) page fault algorithm.\nd) Both (A) and (C)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Recursive in-order traversal of a binary tree visits the left child, root, and then right child. The space complexity depends on the depth of recursion, which is equal to the depth of the tree.",
        "target_text": "Question: What is the space complexity of the in-order traversal in the recursive fashion? (d is the tree depth and n is the number of nodes)\nChoices:\na) O(1)\nb) O(nlogd)\nc) O(logd)\nd) O(d)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Travelling Salesman Problem (TSP) is a classic example of a problem solved using dynamic programming. It seeks the shortest path visiting all nodes exactly once and returning to the origin.",
        "target_text": "Question: Travelling salesman problem is an example of __________\nChoices:\na) Dynamic Algorithm\nb) Greedy Algorithm\nc) Recursive Approach\nd) Divide & Conquer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In row-major order, multi-dimensional arrays are stored row-by-row in memory. The formula for address calculation is: Base + [(i * number_of_columns) + j] * word_size.",
        "target_text": "Question: Consider a two dimensional array A[20][10]. Assume 4 words per memory cell, the base address of array A is 100, elements are stored in row-major order and first element is A[0][0]. What is the address of A[11][5]?\nChoices:\na) 560\nb) 460\nc) 570\nd) 575\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Dynamic arrays resize themselves automatically, offering flexibility. However, they can suffer from memory leaks if allocation and deallocation are mismanaged.",
        "target_text": "Question: Which of the following is a disadvantage of dynamic arrays?\nChoices:\na) Locality of reference\nb) Data cache utilization\nc) Random access\nd) Memory leak\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Tries, or prefix trees, allow fast lookup and storage of strings. Unlike hashing, tries are collision-free and support prefix-based search but often use more space.",
        "target_text": "Question: Which of the following is not True?\nChoices:\na) Trie requires less storage space than hashing\nb) Trie allows listing of all the words with same prefix\nc) Tries are collision free\nd) Trie is also known as prefix tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: In linear probing, the expected number of probes for an unsuccessful search is calculated using load factor α. The formula involves analyzing probe sequences and probability.",
        "target_text": "Question: What is the formula to find the expected number of probes for an unsuccessful search in linear probing?\nChoices:\na) 1/2 * (1 + 1/(1-α))\nb) 1/2 * (1 + 1/(1-α)^2)\nc) 1/2 * (1 + 1/(1+α))\nd) 1/2 * (1 + 1/(1+α)(1-α))\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Depth First Search (DFS) explores paths as deeply as possible before backtracking, which enhances locality and cache efficiency during traversal.",
        "target_text": "Question: If locality is a concern, you can use __________ to traverse the graph.\nChoices:\na) Breadth First Search\nb) Depth First Search\nc) Either BFS or DFS\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-3 tree is a balanced search tree where all leaves are at the same depth. It requires more complex node structures but enables more efficient search compared to traditional BSTs.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) 2-3 tree requires less storage than the BST\nb) lookup in 2-3 tree is more efficient than in BST\nc) 2-3 tree is shallower than BST\nd) 2-3 tree is a balanced tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, arrays must be instantiated using the `new` keyword. The correct syntax uses square brackets and specifies the size explicitly.",
        "target_text": "Question: How do you instantiate an array in Java?\nChoices:\na) int arr[] = new int(3);\nb) int arr[];\nc) int arr[] = new int[3];\nd) int arr() = new int(3);\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Van Emde Boas tree is a priority queue data structure that performs operations like insert, delete, and search in O(log log M) time, where M = 2^m.",
        "target_text": "Question: Does Van Emde Boas data structure perform all operation in O (log (log M)) time where M = 2^m?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A queue is a linear data structure that follows the FIFO (First In First Out) principle. It differs from stacks and lists in access patterns.",
        "target_text": "Question: A queue is a\nChoices:\na) FIFO (First In First Out) list.\nb) LIFO (Last In First Out) list.\nc) Ordered array.\nd) Linear tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Adding an element to a binary heap involves inserting at the end and bubbling up. Time complexity is O(log n), which is also equal to the height of the heap (O(h)).",
        "target_text": "Question: What is the complexity of adding an element to the heap?\nChoices:\na) O(log n)\nb) O(h)\nc) O(log n) & O(h)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Randomized trees can be generated using probabilistic distributions. Beta distribution is one such method used in randomized modeling and tree simulations.",
        "target_text": "Question: Can mathematical randomized tree be generated using beta distribution?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Merge sort is a divide-and-conquer algorithm often used to count inversions in arrays. Although it has O(n log n) time complexity, it requires additional O(n) space for temporary arrays.",
        "target_text": "Question: What is the space complexity of the code that uses merge sort for determining the number of inversions in an array?\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Reversing a doubly linked list involves swapping the next and prev pointers for each node. After traversal, the updated head becomes the previous tail node.",
        "target_text": "Question: Consider the following function that takes reference to head of a Doubly Linked List as parameter. Assume that a node of doubly linked list has previous pointer as prev and next pointer as next.\nvoid fun(struct node **head_ref) {\n    struct node *temp = NULL;\n    struct node *current = *head_ref;\n    while (current != NULL) {\n        temp = current->prev;\n        current->prev = current->next;\n        current->next = temp;\n        current = current->prev;\n    }\n    if (temp != NULL)\n        *head_ref = temp->prev;\n}\nChoices:\na) 2 <--> 1 <--> 4 <--> 3 <--> 6 <-->5\nb) 5 <--> 4 <--> 3 <--> 2 <--> 1 <-->6.\nc) 6 <--> 5 <--> 4 <--> 3 <--> 2 <--> 1.\nd) 6 <--> 5 <--> 4 <--> 3 <--> 1 <--> 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing is a collision resolution technique in open addressing. It often leads to primary clustering, where groups of occupied slots form and grow.",
        "target_text": "Question: Which of the following problems occur due to linear probing?\nChoices:\na) Primary clustering\nb) Secondary collision\nc) Separate chaining\nd) Extendible hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks can hold any type of data, including characters like newline '\n'. There is no inherent restriction unless enforced by application logic.",
        "target_text": "Question: An error is thrown if the character '\n' is pushed in to the character stack.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In certain problems like Jump Game, a value of 0 at the starting index means no forward movement is possible, which can make reaching the end impossible.",
        "target_text": "Question: It is not possible to reach the end of an array if starting element of the array is 0.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Exponentiation (^) is typically right-associative in most programming languages, meaning the expression evaluates from right to left, like in a^b^c = a^(b^c).",
        "target_text": "Question: The associativity of an exponentiation operator ^ is right side.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Leftist heaps are binary trees that maintain a heap property and a distance (null path length) value. Deletion of the minimum element takes O(log N) time due to recursive merging.",
        "target_text": "Question: What is the time taken to delete a minimum element in a leftist heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Triply linked lists use three pointers (prev, next, and possibly an additional one like random or auxiliary), increasing their memory consumption compared to doubly linked lists.",
        "target_text": "Question: Memory usage in triply linked list is higher than doubly linked list.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Serial access memory is accessed sequentially, much like the Last-In-First-Out (LIFO) behavior of a stack, where the most recent element is accessed first.",
        "target_text": "Question: The process of accessing data stored in a serial access memory is similar to manipulating data on a __________\nChoices:\na) heap\nb) queue\nc) stack\nd) binary tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Unlike static arrays which have a fixed size at compile time, dynamic arrays can grow or shrink at runtime, overcoming the limitation of fixed storage.",
        "target_text": "Question: Dynamic arrays overcome the limit of static arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Sparsity measures how many zero values are present in a matrix. It is defined as the ratio of zero elements to the total number of elements in the matrix.",
        "target_text": "Question: What is sparsity of a matrix?\nChoices:\na) The fraction of zero elements over the total number of elements\nb) The fraction of non-zero elements over the total number of elements\nc) The fraction of total number of elements over the zero elements\nd) The fraction of total number of elements over the non-zero elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A dequeue (double-ended queue) allows insertion and deletion from both the front and rear ends, and can be implemented using doubly linked lists for flexibility.",
        "target_text": "Question: What is a dequeue?\nChoices:\na) A queue implemented with both singly and doubly linked lists\nb) A queue with insert/delete defined for front side of the queue\nc) A queue with insert/delete defined for both front and rear ends of the queue\nd) A queue implemented with a doubly linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: One drawback of splay trees is that accessing elements in sorted or nearly sorted order can result in a tree with linear height, reducing performance.",
        "target_text": "Question: What is the disadvantage of using splay trees?\nChoices:\na) height of a splay tree can be linear when accessing elements in non decreasing order.\nb) splay operations are difficult\nc) no significant disadvantage\nd) splay tree performs unnecessary splay when a node is only being read\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap, each node has three children. This structure allows for faster heap operations like decrease-key due to fewer comparisons per level compared to binary heaps.",
        "target_text": "Question: Is decrease priority operation performed more quickly in a ternary heap with respect to the binary heap?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing provides direct access to data using a hash function. It is a common technique used in direct search applications for fast data retrieval.",
        "target_text": "Question: A technique for direct search is __________\nChoices:\na) Binary Search\nb) Linear Search\nc) Tree Search\nd) Hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The size of a binary tree can be calculated recursively using the formula: size(left subtree) + 1 (for the current node) + size(right subtree).",
        "target_text": "Question: What may be the pseudo code for finding the size of a tree?\nChoices:\na) find_size(root_node->left_node) + 1 + find_size(root_node->right_node)\nb) find_size(root_node->left_node) + find_size(root_node->right_node)\nc) find_size(root_node->right_node) - 1\nd) find_size(root_node->left_node + 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used in online spell checkers to quickly verify the presence of words in a dictionary by hashing input strings and matching them against stored hashes.",
        "target_text": "Question: Hashing can be used in online spelling checkers.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An in-place algorithm uses a constant amount of additional memory and modifies the input directly. Rotating an array element-by-element does not require extra space, making it in-place.",
        "target_text": "Question: To rotate an array by using the algorithm of rotating its elements one by one is an in place algorithm.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Binary Decision Diagrams (BDDs) represent Boolean functions using Directed Acyclic Graphs (DAGs). They are used in formal verification, model checking, and circuit design.",
        "target_text": "Question: Binary Decision Diagram is a type of __________\nChoices:\na) Multigraph\nb) Cyclic Graph\nc) Directed Acyclic Graph\nd) Directed Acyclic Word Graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing involves mapping keys to values using a hash function and storing them in a hash table. All three--key, hash function, and hash table--are essential components.",
        "target_text": "Question: Which of the following are components of Hashing?\nChoices:\na) Key\nb) Hash Function\nc) Hash Table\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Skew heaps are self-adjusting heaps that do not maintain strict structure. Their amortized cost per operation, such as insert or merge, is O(log N).",
        "target_text": "Question: What is the amortized cost per operation of a skew heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N²)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In stack implementation using arrays, the next free position after N elements is S[N], assuming zero-based indexing and that capacity > N.",
        "target_text": "Question: Which of the following array position will be occupied by a new element being pushed for a stack of size N elements (capacity of stack > N)?\nChoices:\na) S[N-1]\nb) S[N]\nc) S[1]\nd) S[0]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Skip lists are probabilistic data structures that use random levels to achieve fast search times. The number of forward pointers in a node is typically determined probabilistically.",
        "target_text": "Question: The nodes in a skip list may have many forward references. Their number is determined\nChoices:\na) probabilistically\nb) randomly\nc) sequentially\nd) orthogonally\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: In C++, the `sort()` function from the `<algorithm>` header can be used to sort strings by passing iterators to the beginning and end of the string, i.e., `sort(str.begin(), str.end())`.",
        "target_text": "Question: What is the function present to sort a string in C++?\nChoices:\na) sort();\nb) sort(str.begin(), str.end());\nc) Sort_asec();\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The Ackermann function is a classic example of a recursive function that grows extremely rapidly and is not primitive recursive. It is defined such that A(1, i) = i + 1 for i >= 1.",
        "target_text": "Question: What is the definition for Ackermann's function?\nChoices:\na) A(1,i) = i+1 for i>=1\nb) A(i,j) = i+j for i>=j\nc) A(i,j) = i+j for i = j\nd) A(1,i) = i+1 for i<1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In infix-to-postfix conversion, operands are output directly, and parentheses are not included in the final postfix result. Operators are pushed based on precedence rules.",
        "target_text": "Question: Which of the following statement is incorrect with respect to infix to postfix conversion algorithm?\nChoices:\na) operand is always placed in the output\nb) operator is placed in the stack when the stack operator has lower precedence\nc) parenthesis are included in the output\nd) higher and equal priority operators follow the same condition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Generalized LR (GLR) parsing handles ambiguous grammars and has time complexity O(|G| * n), where |G| is the grammar size and n is the input length.",
        "target_text": "Question: Which among the following best represents the computational complexity of GLR parsing?\nChoices:\na) O(|G| x n)\nb) O(|G|2 x n)\nc) O(|G| x n2)\nd) O(|G|2 x n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-3-4 tree is a B-tree of order 4 and is isometric to a red-black tree, meaning they maintain the same structure and balancing logic under different representations.",
        "target_text": "Question: 2-3-4 trees are B-trees of order 4. They are an isometric of __________ trees.\nChoices:\na) AVL\nb) AA\nc) 2-3\nd) Red-Black\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In adjacency list representation of a weighted directed graph, each vertex stores a list of its neighbors along with edge weights. The pair is usually (neighbor, weight).",
        "target_text": "Question: Complete the given snippet of code for the adjacency list representation of a weighted directed graph.\nChoices:\na) vertex, vertex\nb) neighbor, vertex\nc) neighbor, neighbor\nd) vertex, neighbor\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A hash table is a data structure that maps keys to values using a hash function. It is not used for stack or queue operations.",
        "target_text": "Question: What is a hash table?\nChoices:\na) A structure that maps values to keys\nb) A structure that maps keys to values\nc) A structure used for storage\nd) A structure used to implement stack and queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Infix notation places the operator between operands. It is the most familiar notation for humans, unlike prefix and postfix used in computation.",
        "target_text": "Question: Which of the following is an infix expression?\nChoices:\na) (a+b)*(c+d)\nb) ab+c*\nc) +ab\nd) abc+*\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Balanced expressions require that all types of brackets are properly opened and closed. An extra closing or unmatched symbol breaks this rule.",
        "target_text": "Question: Is the given statement ((A+B) + [C-D]] valid with respect to balancing of symbols?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In graph theory, a leaf cluster is a group of nodes connected in such a way that only one node connects to the rest of the graph. This typically means it has zero internal edges.",
        "target_text": "Question: How many edges does a leaf cluster contain?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The runtime efficiency of an insertion algorithm depends on the data structure used. In unsorted arrays or linked lists, insertion at the end or front generally takes O(N) in the worst case.",
        "target_text": "Question: What is the run time efficiency of an insertion algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N²)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks follow LIFO order and do not allow removal from the bottom. Such operations violate stack constraints and are generally not permitted in standard implementations.",
        "target_text": "Question: In C programming, when we remove an item from bottom of the stack, then:\nChoices:\na) The stack will fall down.\nb) Stack will rearrange items.\nc) It will convert to LIFO\nd) This operation is not allowed.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Bit arrays are memory-efficient structures used in low-level system tasks like memory page tracking or Bloom filters, but not typically used for implementing vector/matrix operations.",
        "target_text": "Question: Which of the following is/are not applications of bit arrays?\nChoices:\na) Used by the Linux kernel\nb) For the allocation of memory pages\nc) Bloom filter\nd) Implementation of Vectors and Matrices\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The given function performs deletion from the beginning of a circular linked list by updating the head and deleting the original first node.",
        "target_text": "Question: What is the functionality of the following code? Choose the most appropriate answer.\nint function() {\n    if (head == null)\n        return Integer.MIN_VALUE;\n    int var;\n    Node temp = head;\n    while (temp.getNext() != head)\n        temp = temp.getNext();\n    if (temp == head) {\n        var = head.getItem();\n        head = null;\n        return var;\n    }\n    temp.setNext(head.getNext());\n    var = head.getItem();\n    head = head.getNext();\n    return var;\n}\nChoices:\na) Returns data from the end of the list\nb) Returns data and deletes the node at the end of the list\nc) Returns data from the beginning of the list\nd) Returns data and deletes the node from the beginning of the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: The given recursive C++ function reads a string and uses recursion to delay printing each character until after the call stack unwinds, effectively reversing the string.",
        "target_text": "Question: What is the following code segment doing?\nvoid fn() {\n  char c;\n  cin.get(c);\n  if (c != '\n') {\n    fn();\n    cout.put(c);\n  }\n}\nChoices:\na) The string entered is printed as it is.\nb) The string entered is printed in reverse order.\nc) It will go in an infinite loop.\nd) It will print an empty line.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To compute the sum of nodes at alternate levels in a binary tree, you skip levels while summing values. This often involves toggling a level flag or skipping iterations.",
        "target_text": "Question: What must be the missing logic in place of missing lines for finding sum of nodes of binary tree in alternate levels?\n// e.g.: for a complete binary tree of height 3: [1,2,3,4,5,6,7], sum = 1+4+5+6+7 = 23\nn = power(2,height)-1; // total nodes\nfor (i = 1; i <= n;) {\n  for (j = 1; j <= pow(2, currentlevel-1); j++) {\n    sum = sum + a[i];\n    i = i + 1;\n  }\n  i = i + pow(2, currentlevel); // skip alternate level\n  currentlevel = currentlevel + 2;\n}\nChoices:\na) i = i + pow(2, currentlevel); currentlevel = currentlevel + 2;\nb) i = i + pow(2, currentlevel-1); currentlevel = currentlevel + 1;\nc) i = i + pow(2, currentlevel); currentlevel = currentlevel + 1;\nd) currentlevel = currentlevel + 2;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A treap is a combination of a binary search tree and a heap. The priority values determine heap order, and the condition is that a node's priority must be at least as large as its parent.",
        "target_text": "Question: What is the condition for priority of a node in a treap?\nChoices:\na) A node's priority should be greater than its parent\nb) A node's priority should be at least as large as its parent\nc) The priority is randomly assigned and can have any value\nd) A node's priority is always given in decreasing order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In hashing with chaining, each table slot points to a linked list of entries that hash to the same slot. Although it handles collisions well, it increases space usage.",
        "target_text": "Question: What is the disadvantage of hashing with chaining?\nChoices:\na) Not easy to implement\nb) Takes more space\nc) Quite sensitive to hash function\nd) Table gets filled up easily\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In infix to postfix conversion, operators are typically associated based on their precedence. Most binary operators (like +, -, *, /) associate from left to right unless otherwise specified.",
        "target_text": "Question: In infix to postfix conversion algorithm, the operators are associated from?\nChoices:\na) Right to left\nb) Left to right\nc) Centre to left\nd) Centre to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation places operators before their operands. Conversion from infix to prefix involves reversing the expression and applying operator precedence.",
        "target_text": "Question: The prefix form of A-B/ (C * D ^ E) is?\nChoices:\na) -/*A B C*D^E\nb) -ABCD*^DE\nc) -A/B*C^DE\nd) -A/BC*^DE\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a linked queue implementation, overflow must be checked before inserting a new element, especially in cases where memory allocation might fail.",
        "target_text": "Question: The essential condition which is checked before insertion in a linked queue is?\nChoices:\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The smallest index value in an array is called its lower bound. In most programming languages, this value is 0 unless otherwise specified.",
        "target_text": "Question: The smallest element of an array's index is called its\nChoices:\na) lower bound\nb) upper bound\nc) range\nd) extraction\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays can lead to inefficient memory usage if allocated size exceeds actual data. This static allocation causes wasted memory when not fully utilized.",
        "target_text": "Question: What are the disadvantages of arrays?\nChoices:\na) Index value of an array can be negative\nb) Elements are sequentially accessed\nc) Data structure like queue or stack cannot be implemented\nd) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A graph is called regular if every vertex has the same degree. These graphs have uniform structure and are useful in network topology and theoretical analysis.",
        "target_text": "Question: A graph with all vertices having equal degree is known as a __________\nChoices:\na) Multi Graph\nb) Regular Graph\nc) Simple Graph\nd) Complete Graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are data structures used to store elements of the same type in contiguous memory locations. They allow indexed access and are foundational in many algorithms.",
        "target_text": "Question: Which of these best describes an array?\nChoices:\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialised\nd) Array is not a data structure\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operating systems may periodically perform garbage collection to reclaim unused memory and consolidate it into contiguous blocks, improving performance and memory usage.",
        "target_text": "Question: The OS of a computer may periodically collect all the free memory space to form contiguous block of free space. This is called:\nChoices:\na) Concatenation\nb) Garbage collection\nc) Collision\nd) Dynamic Memory Allocation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Skew heaps are self-adjusting heaps with no structural constraints. Due to their irregular nature, it is harder to determine right path lengths compared to structured heaps like leftist or binomial.",
        "target_text": "Question: Which of the following is difficult to determine the right path length?\nChoices:\na) Skew heaps\nb) Binomial tree\nc) Leftist heap\nd) d-heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Serial access memory (SAM) stores data in a linear format and can be accessed sequentially, similar to a stack, which also operates on LIFO principles.",
        "target_text": "Question: The process of accessing data stored in a serial access memory is similar to manipulating data on a __________\nChoices:\na) Heap\nb) Binary Tree\nc) Array\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An indexed skip list optimizes search time by storing metadata such as widths or levels instead of elements. This improves efficiency over basic linked lists.",
        "target_text": "Question: What is indexed skip list?\nChoices:\na) It stores width of link in place of element\nb) It stores index values\nc) Array based linked list\nd) Indexed tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A hash tree, or Merkle tree, generalizes a hash list by using a hierarchical tree structure where each parent node is a hash of its children.",
        "target_text": "Question: Hash tree is generalization of __________\nChoices:\na) Heap\nb) Hash list\nc) BST\nd) B - tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operator precedence defines the order in which operations are performed. Custom or uncommon operators like # are typically assigned the lowest precedence in parsing.",
        "target_text": "Question: Of the following choices, which operator has the lowest precedence?\nChoices:\na) ^\nb) +\nc) /\nd) #\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: With augmented trees or segment trees, it is possible to track the ordinal position and ordering of keys, allowing efficient indexing and range queries.",
        "target_text": "Question: Elements in a tree can be indexed by its position under the ordering of the keys and the ordinal position of an element can be determined, both with good efficiency.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: When reconstructing a heap, merging sub-heaps involves combining c children. Using pairwise merges requires c - 1 merge operations to fully reassemble the heap.",
        "target_text": "Question: If there are c children of the root, how many calls to the merge procedure is required to reassemble the heap?\nChoices:\na) c\nb) c+1\nc) c-1\nd) 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a directed graph with no self-loops, the maximum number of edges is n(n-1), where n is the number of vertices. This is because each node can have directed edges to every other node.",
        "target_text": "Question: What is the maximum possible number of edges in a directed graph with no self loops having 8 vertices?\nChoices:\na) 28\nb) 64\nc) 256\nd) 56\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Left-Leaning Red-Black (LLRB) trees are a simplified form of red-black trees that simulate 2-3 trees, maintaining a 1-1 correspondence with them for structural balance.",
        "target_text": "Question: LLRB maintains 1-1 correspondence with 2-3 trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Finding connected components in an undirected graph using adjacency lists takes O(n + e) time using DFS or BFS, where n is the number of vertices and e is the number of edges.",
        "target_text": "Question: An undirected graph G with n vertices and e edges is represented by adjacency list. What is the time required to generate all the connected components?\nChoices:\na) O(n)\nb) O(e)\nc) O(e+n)\nd) O(e2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A top tree is a dynamic tree data structure used to represent and maintain a forest under link and cut operations efficiently.",
        "target_text": "Question: Which data structure is used to maintain a dynamic forest using a link or cut operation?\nChoices:\na) Top Tree\nb) Array\nc) Linked List\nd) Stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max heap, the smallest value (like 5) will percolate down to the lowest level if larger elements exist. Thus, it will end up at the last level in the heap.",
        "target_text": "Question: What will be the position of 5, when a max heap is constructed on the input elements 5, 70, 45, 7, 12, 15, 13, 65, 30, 25?\nChoices:\na) 5 will be at root\nb) 5 will be at last level\nc) 5 will be at second level\nd) 5 can be anywhere in heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In prefix trees or tries, two outgoing edges from a node cannot begin with the same character to ensure unique path prefixes.",
        "target_text": "Question: Can the two edges that are coming out of a node have labels of string beginning with the same character?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Modifying edge weights affects the structure of a graph. Squaring edge weights does not preserve MST structure or weight relation due to non-linear scaling.",
        "target_text": "Question: Let G be a weighted graph with edge weights greater than one and G' be the graph constructed by squaring the weights of edges in G. Let T and T' be the minimum spanning trees of G and G', respectively, with total weights t and t'. Which of the following statements is TRUE?\nChoices:\na) T' = T with total weight t' = t2\nb) T' = T with total weight t' < t2\nc) T' != T but total weight t' = t2\nd) None of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Ukkonen provided the first linear-time online algorithm to build a suffix tree, making suffix tree construction efficient and widely applicable in string algorithms.",
        "target_text": "Question: Who among the following provided the first online contribution of Suffix Tree?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Ukkonen\nd) Alexander Morse\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree is a hierarchical structure where each node has at most two children--commonly referred to as the left and right child.",
        "target_text": "Question: How many children does a binary tree have?\nChoices:\na) 2\nb) any number of children\nc) 0 or 1 or 2\nd) 0 or 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In hashing, chaining is a collision resolution method where elements that hash to the same slot are stored in a secondary structure, such as a linked list or binary tree.",
        "target_text": "Question: Which of the following technique stores data separately in case of a collision?\nChoices:\na) Open addressing\nb) Double hashing\nc) Quadratic probing\nd) Chaining using a binary tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In tries (prefix trees), each character in a string corresponds to a node. The insertion logic includes creating new nodes when necessary and advancing the node pointer.",
        "target_text": "Question: Following code snippet is the function to insert a string in a trie. Find the missing line.\nprivate void insert(String str) {\n    TrieNode node = root;\n    for (int i = 0; i < length; i++) {\n        int index = key.charAt(i) - 'a';\n        if (node.children[index] == null)\n            node.children[index] = new TrieNode();\n        __________\n    }\n    node.isEndOfWord = True;\n}\nChoices:\na) node = node.children[index];\nb) node = node.children[str.charAt(i + 1)];\nc) node = node.children[index++];\nd) node = node.children[index++];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sentinel is a dummy value inserted at the end of a data structure like an array to simplify boundary conditions and terminate loops cleanly.",
        "target_text": "Question: The extra key inserted at the end of the array is called a __________\nChoices:\na) End Key\nb) Stop Key\nc) Sentinel\nd) Transposition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Reversing an array reorders its elements from last to first. For example, arr[]={3,5,4,2} becomes {2,4,5,3} when reversed.",
        "target_text": "Question: What will be the resulting array after reversing arr[]={3,5,4,2}?\nChoices:\na) 2,3,5,4\nb) 4,2,3,5\nc) 5,4,2,3\nd) 2,4,5,3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A rope is a binary tree used for efficiently manipulating long strings, supporting fast operations like concatenation, splitting, and insertion.",
        "target_text": "Question: Which type of data structure does rope represent?\nChoices:\na) Array\nb) Linked List\nc) Queue\nd) Binary Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In a binary hash tree (Merkle tree), the height is determined by the logarithm (base branching factor) of the number of records. For branching factor 2 and 8 records, height = 3.",
        "target_text": "Question: What will be the height of the hash tree with branching factor 2 and with 8 records?\nChoices:\na) 3\nb) 5\nc) 4\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In Binary Decision Diagrams (BDDs), conventionally, the 0 branch is depicted using a dotted or dashed line and the 1 branch using a solid or bold line.",
        "target_text": "Question: In a Binary Decision Diagram, 0 values are represented by a __________ line and 1 values are represented by a __________ line.\nChoices:\na) dashed, bold\nb) bold, dashed\nc) dotted, bold\nd) dotted, dashed\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Quick sort is a divide-and-conquer sorting algorithm. It is distinct from heap sort, merge sort, or bubble sort and thus is not synonymous with any of them.",
        "target_text": "Question: Quick sort is also known as __________\nChoices:\na) Merge sort\nb) Heap sort\nc) Bubble sort\nd) None of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The Jaccard index measures similarity between two sets as the size of their intersection divided by the size of their union. If the sets are disjoint, the index is 0.",
        "target_text": "Question: What is the value of the Jaccard index when the two sets are disjoint?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A queue allows insertion at the rear and deletion from the front, making it a linear list with FIFO (First In, First Out) behavior.",
        "target_text": "Question: A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as a __________\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a complete binary min-heap with 1023 nodes (which forms a full tree of height 9), the value 9 can be placed as deep as level 8 while maintaining the min-heap property.",
        "target_text": "Question: A complete binary min-heap is made by including each integer in [1, 1023] exactly once. The depth of a node in the heap is the length of the path from the root of the heap to that node. Thus, the root is at depth 0. The maximum depth at which integer 9 can appear is __________\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In prefix (Polish) notation, the operator is written before its operands. Conversion follows operator precedence and associativity rules.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) +*AB*CD\nb) *+AB*CD\nc) **AB+CD\nd) +*BA*CD\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues are used in scenarios where data must be processed in the order it arrives. Applications include resource sharing, asynchronous data transfer, and load balancing.",
        "target_text": "Question: Which one of the following is an application of Queue Data Structure?\nChoices:\na) When a resource is shared among multiple consumers.\nb) When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes\nc) Load Balancing\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Collision resolution techniques aim to reduce clustering. Increasing the hash table size helps reduce collisions but isn't considered a collision resolution technique.",
        "target_text": "Question: Which of the following is not a technique to avoid a collision?\nChoices:\na) Make the hash function appear random\nb) Use the chaining method\nc) Use uniform hashing\nd) Increasing hash table size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays allow direct or random access using indices, making element retrieval instantaneous regardless of the array's size or content.",
        "target_text": "Question: Elements in an array are accessed __________\nChoices:\na) randomly\nb) sequentially\nc) exponentially\nd) logarithmically\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, inserting at the head involves adjusting both the head and the last node's next pointer to point to the new head.",
        "target_text": "Question: Choose the code snippet which inserts a node to the head of the list?\nChoices\na) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nNode cur = head;\nwhile(cur.getNext() != head)\n cur = cur.getNext();\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head);\n head = temp;\n cur.setNext(temp);\n}\nsize++;\n}\nb) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nwhile(cur != head)\n cur = cur.getNext();\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head.getNext());\n cur.setNext(temp);\n}\nsize++;\n}\nc) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head.getNext());\n head = temp;\n}\nsize++;\n}\nd) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nif(head == null)\n{\n head = temp;\n head.setNext(head.getNext());\n}\nelse\n{\n temp.setNext(head.getNext());\n head = temp;\n}\nsize++;\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A strictly binary tree is one in which each node has either 0 or 2 children. If a tree has 10 leaves, it has exactly 19 nodes due to the property N = 2L - 1.",
        "target_text": "Question: A strictly binary tree with 10 leaves\nChoices:\na) cannot have more than 19 nodes\nb) has exactly 19 nodes\nc) has exactly 17 nodes\nd) has exactly 20 nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing uses sequential slots for collision resolution and has better spatial locality, improving cache performance compared to methods like double hashing.",
        "target_text": "Question: Which of the following techniques offer better cache performance?\nChoices:\na) Quadratic probing\nb) Linear probing\nc) Double hashing\nd) Rehashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack is a Last-In-First-Out (LIFO) data structure commonly used for parsing and matching nested structures like parentheses, making it ideal for syntax checking.",
        "target_text": "Question: Which of the following data structures can be used for parentheses matching?\nChoices:\na) n-ary tree\nb) queue\nc) priority queue\nd) stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Converting infix expressions to postfix (Reverse Polish Notation) using a stack requires handling operator precedence and associativity while maintaining correct operand order.",
        "target_text": "Question: Convert the following Infix expression to Postfix form using a stack.\nx + y * z + (p * q + r) * s, Follow usual precedence rule and assume that the expression is legal.\nChoices:\na) xyz*+pq*r+s*+\nb) xyz*+pq*r+s+*\nc) xyz+*pq*r+s*+\nd) xyzp+**qr+s*+\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A bounded-size dynamic array splits the array into two parts to accommodate variable sizes efficiently while limiting memory reallocation.",
        "target_text": "Question: Array is divided into two parts in __________\nChoices:\na) Hashed Array Tree\nb) Geometric Array\nc) Bounded-size dynamic array\nd) Sparse Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays allow direct or random access using indices, making element retrieval instantaneous regardless of the array's size or content.",
        "target_text": "Question: Elements in an array are accessed __________\nChoices:\na) randomly\nb) sequentially\nc) exponentially\nd) logarithmically\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: In the balancing parentheses algorithm, a string is typically scanned from left to right to push opening symbols and match them with closing ones using a stack.",
        "target_text": "Question: In balancing parentheses algorithm, the string is read from?\nChoices:\na) right to left\nb) left to right\nc) center to right\nd) center to left\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: If the pre-order and post-order traversals of a binary tree are the same, the tree must contain only one node since traversal orders differ otherwise.",
        "target_text": "Question: The pre-order and post order traversal of a Binary Tree generates the same output. The tree can have maximum __________\nChoices:\na) Three nodes\nb) Two nodes\nc) One node\nd) Any number of nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an incidence matrix of a directed graph without self-loops, each edge connects two different nodes--one incoming and one outgoing--making the column sum 0.",
        "target_text": "Question: The column sum in an incidence matrix for a directed graph having no self loop is __________\nChoices:\na) 0\nb) 1\nc) 2\nd) equal to the number of edges\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In postorder traversal of a binary tree, the left subtree is visited first, followed by the right subtree, and then the root, making this statement True.",
        "target_text": "Question: In postorder traversal of binary tree right subtree is traversed before visiting root.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A min-wise independent permutation is a family of permutations used in approximation algorithms. The number of bits needed to specify a permutation depends on its domain size, often bounded by Ω(n).",
        "target_text": "Question: How many bits are needed to specify the single permutation by min-wise independent family?\nChoices:\na) O (log n!)\nb) O (n!)\nc) Ω (n^2)\nd) Ω (n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In a stack implemented using an array, the top element is located at index S[N-1] when there are N elements. This follows the Last-In-First-Out (LIFO) structure.",
        "target_text": "Question: Which of the following array element will return the top-of-the-stack-element for a stack of size N elements (capacity of stack > N)?\nChoices:\na) S[N-1]\nb) S[N]\nc) S[N-2]\nd) S[N+1]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A binary min-heap has the property that every parent node is less than or equal to its children. This property must be maintained throughout the array representation.",
        "target_text": "Question: Which one of the following array elements represents a binary min heap?\nChoices:\na) 12 10 8 25 14 17\nb) 8 10 12 25 14 17\nc) 25 17 14 12 10 8\nd) 14 17 25 10 12 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Tries are tree-like data structures that store strings efficiently and allow fast lookup, making them suitable for autocomplete and spell checking systems.",
        "target_text": "Question: Auto complete and spell checkers can be implemented efficiently using the trie.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Converting infix to prefix notation requires understanding operator precedence and using a stack to temporarily store operators during the rearrangement.",
        "target_text": "Question: What data structure is used when converting an infix notation to prefix notation?\nChoices:\na) Stack\nb) Queue\nc) B-Trees\nd) Linked-list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, dynamic arrays are implemented using the `List` interface and classes such as `ArrayList`, which allow dynamic resizing.",
        "target_text": "Question: How will you implement dynamic arrays in Java?\nChoices:\na) Set\nb) Map\nc) HashMap\nd) List\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash table allows constant-time average access to data due to direct indexing via hash functions, making it significantly faster than other structures for lookup.",
        "target_text": "Question: What is the advantage of a hash table as a data structure?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Finding the nearest neighbor in a k-d tree involves traversing a logarithmic path down the tree and comparing across dimensions, yielding a runtime of O(2^d * log N).",
        "target_text": "Question: What is the run time of finding the nearest neighbour in a k-d tree?\nChoices:\na) O(2+ log N)\nb) O( log N)\nc) O(2^d log N)\nd) O( N log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An in-order traversal of a binary search tree visits nodes in ascending order: left subtree, root, then right subtree.",
        "target_text": "Question: In order to get the contents of a Binary search tree in ascending order, one has to traverse it in __________\nChoices:\na) pre-order\nb) in-order\nc) post order\nd) not possible\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Space requirements differ for graphs depending on properties like directionality and weights. Directed and weighted graphs require more space than undirected and unweighted ones.",
        "target_text": "Question: For the given conditions, which of the following is in the correct order of increasing space requirement?\ni) Undirected, no weight\nii) Directed, no weight\niii) Directed, weighted\niv) Undirected, weighted\nChoices:\na) ii iii i iv\nb) i iii ii iv\nc) iv iii i ii\nd) i ii iii iv\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A queue restricts insertions to the rear and removals from the front. It can be implemented using linked lists with separate front and rear pointers.",
        "target_text": "Question: Which data structure represents a waiting line and limits insertions to be made at the back of the data structure and limits removals to be made from the front?\nChoices:\na) Stack\nb) Queue\nc) Binary tree\nd) Linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Syntax trees represent syntactic structures of expressions. They are constructed bottom-up using bottom-up parsing techniques like shift-reduce parsing.",
        "target_text": "Question: Which parsing approach is followed by syntax tree?\nChoices:\na) Top-down parsing\nb) Bottom-up parsing\nc) Predictive parsing\nd) Shift reduce parsing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A queue follows the FIFO principle, meaning the first element inserted is the first one removed. It is often implemented using arrays or linked lists.",
        "target_text": "Question: A queue follows __________\nChoices:\na) FIFO (First In First Out) principle\nb) LIFO (Last In First Out) principle\nc) Ordered array\nd) Linear tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In C, variable-length arrays (VLAs) allow the use of runtime-computed expressions during declaration, offering flexibility in memory management.",
        "target_text": "Question: Arbitrary expressions can be used while declaring variable-length arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Quadratic probing is a collision resolution method in open addressing. When the table size is prime, quadratic probing ensures successful insertion until the table is full.",
        "target_text": "Question: In quadratic probing, if the table size is prime, a new element cannot be inserted if the table is half full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Quick Sort is a divide-and-conquer sorting algorithm that uses a pivot element to partition the list into subarrays, which are then sorted recursively.",
        "target_text": "Question: To partition an unsorted list, a pivot element is used in __________\nChoices:\na) Merge Sort\nb) Quick Sort\nc) Insertion Sort\nd) Selection Sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a 4-regular graph, each vertex has degree 4. By using the handshaking lemma (2E = dV), we find that 12 edges imply 6 vertices.",
        "target_text": "Question: Determine the number of vertices for the given Graph or Multigraph?\nG is a 4-regular Graph having 12 edges.\nChoices:\na) 3\nb) 6\nc) 4\nd) Information given is insufficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Rope data structures are typically implemented using balanced binary trees like AVL or Red-Black trees to support efficient string operations.",
        "target_text": "Question: Which type of binary tree does rope require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Full\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A K-ary tree is a tree in which every node has at most K children.",
        "target_text": "Question: How many child nodes does each node of K-ary Tree contain?\nChoices:\na) 2\nb) 3\nc) more than k\nd) at most k\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues are widely used in operating systems and network communication for resource allocation and scheduling, where FIFO behavior is needed.",
        "target_text": "Question: A queue data-structure can be used for __________\nChoices:\na) expression parsing\nb) recursion\nc) resource allocation\nd) all of these\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Minimum ternary heaps are used in optimization algorithms like Prim's algorithm for efficient extraction of the minimum element.",
        "target_text": "Question: Which of the following is the application of minimum ternary heap?\nChoices:\na) Prim's Algorithm\nb) Euclid's Algorithm\nc) Eight Queen Puzzle\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In the given program, no modification is made to the matrix. The result of the program is simply the original matrix A.",
        "target_text": "Question: Let A be a square matrix of size n x n. Consider the following program. What is the expected output?\nChoices:\na) The matrix A itself\nb) Transpose of matrix A\nc) Adding 100 to the upper diagonal elements and subtracting 100 from diagonal elements of A\nd) Inverse of matrix A\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: When the root is removed from a binary heap, the rightmost element of the last level replaces it to maintain the complete binary tree structure.",
        "target_text": "Question: In binary heap, whenever the root is removed, the rightmost element of last level is replaced by the root. Why?\nChoices:\na) It is the easiest possible way.\nb) To make sure that it is still complete binary tree.\nc) Because left and right subtree might be missing.\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The code uses the reversal algorithm to rotate the array left by 'd' positions. The result is a rotated array.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int left, int right) \n{ \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n} \n \nvoid func(int arr[], int d, int n) \n{ \n func1(arr, 0, d-1); \n func1(arr, d, n-1); \n func1(arr, 0, n-1); \n} \n \nvoid printArray(int arr[], int size) \n{ \n for (int i = 0; i < size; i++) \n cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 2, 3, 4, 5}; \n int n = sizeof(arr)/sizeof(arr[0]); \n int d = 2; \n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\nChoices:\na) 3 2 1 4 5\nb) 3 4 5 1 2\nc) 5 4 3 2 1\nd) error\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: To insert an element at the bottom of a stack using only push and pop, multiple pop/push operations are required to expose the bottom, push the new element, then restore.",
        "target_text": "Question: Consider you have a stack whose elements in it are as follows.\n5 4 3 2 << top\nWhere the top element is 2.\nYou need to get the following stack\n6 5 4 3 2 << top\nThe operations that needed to be performed are (You can perform only push and pop):\nChoices:\na) Push(pop()), push(6), push(pop())\nb) Push(pop()), push(6)\nc) Push(pop()), push(pop()), push(6)\nd) Push(6)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In a hash table with size 10, the index of element 7 is computed using the modulo operation. 7 % 10 = 7, so the element is placed at index 7.",
        "target_text": "Question: In a hash table of size 10, where is element 7 placed?\nChoices:\na) 6\nb) 7\nc) 17\nd) 16\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The given code performs in-place array reversal using a two-pointer approach. It doesn't allocate additional memory, resulting in constant auxiliary space.",
        "target_text": "Question: What will be the auxiliary space requirement of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n} \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary search tree with 7 nodes can have height 6 if elements are inserted in strictly ascending or descending order. There are 64 such permutations.",
        "target_text": "Question: The number of ways in which the numbers 1 to 7 can be inserted in an empty binary search tree to result in height 6 is:\nChoices:\na) 2\nb) 4\nc) 64\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tree height is the length of the longest path from root to any leaf. It can be derived from tree traversals by reconstructing the tree and analyzing its depth.",
        "target_text": "Question: Given the postorder: 8, 9, 6, 7, 4, 5, 2, 3, 1 and inorder: 8, 6, 9, 4, 7, 2, 5, 1, 3, what is the height of the binary tree?\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: The function f(S) likely refers to computing the number of positive integers in a stack or similar logic. The stack contains 2, -3, 2, -1, 2, with the top as 2.",
        "target_text": "Question: If a stack S contains the integers 2, -3, 2, -1, 2 in order from bottom to top, what is f(S)?\nChoices:\na) 6\nb) 4\nc) 3\nd) 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A trie, or prefix tree, is a digital tree used for storing strings where each node represents a character. It's efficient for search operations.",
        "target_text": "Question: Trie is also known as __________\nChoices:\na) Digital Tree\nb) Treap\nc) Binomial Tree\nd) 2-3 Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A node can have a minimum of one child in some trees (e.g., binary trees). However, trees may also allow leaf nodes with no children.",
        "target_text": "Question: A node can have a minimum of one child.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In AA-trees, left horizontal links (which would create balancing issues) are removed via right rotations to maintain simplified red-black tree properties.",
        "target_text": "Question: How will you remove a left horizontal link in an AA-tree?\nChoices:\na) by performing right rotation\nb) by performing left rotation\nc) by deleting both the elements\nd) by inserting a new element\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A desirable trait of a good hash function is to minimize collisions, which leads to faster lookups and better distribution of data.",
        "target_text": "Question: Which of the following trait of a hash function is most desirable?\nChoices:\na) it should cause less collisions\nb) it should cause more collisions\nc) it should occupy less space\nd) it should be easy to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In B+ trees, only the leaf nodes store data and all keys, while internal nodes guide traversal with routing keys.",
        "target_text": "Question: In a B+ tree, both the internal nodes and the leaves have keys.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Binary search reduces the search space in half each time, so the average number of comparisons is proportional to log2 n.",
        "target_text": "Question: In binary search, average number of comparisons required for searching an element in a list of n numbers is:\nChoices:\na) log2 n\nb) n / 2\nc) n\nd) n - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary heap, the min or max element is always at the root, making retrieval a constant-time operation: O(1).",
        "target_text": "Question: How much time does a heap take to Find Min/Max value?\nChoices:\na) O(logN)\nb) O(N)\nc) O(1)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A dynamic array is a data structure that allows resizing at runtime. It can grow or shrink based on the number of elements.",
        "target_text": "Question: What is a dynamic array?\nChoices:\na) A variable size data structure\nb) An array which is created at runtime\nc) The memory to the array is allocated at runtime\nd) An array which is reallocated every time whenever new elements have to be added\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Variable-length arrays (VLAs) in GNU C are allocated on the stack, providing flexibility in array size based on runtime values.",
        "target_text": "Question: Where does the GNU C compiler allocate memory for variable-length arrays?\nChoices:\na) Tree\nb) Stack\nc) Linked List\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A double-ended queue (deque) supports insertion and deletion from both ends. The provided code inserts an element at the front.",
        "target_text": "Question: Select the function which performs insertion at the front end of the dequeue?\nChoices:\na) Insert at the front end of the dequeue\nb) Insert at the rear end of the dequeue\nc) Fetch the element at the rear end of the dequeue\nd) Fetch the element at the front end of the dequeue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In the balancing of symbols algorithm, opening parentheses are pushed onto the stack to be matched later with closing ones.",
        "target_text": "Question: What should be done when an opening parentheses is read in a balancing symbols algorithm?\nChoices:\na) push it onto the stack\nb) throw an error\nc) ignore the parentheses\nd) pop the stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an undirected graph, the sum of degrees of all vertices is equal to 2 times the number of edges: Σ deg(v) = 2e.",
        "target_text": "Question: For an undirected graph G with n vertices and e edges, the sum of the degrees of each vertex is __________\nChoices:\na) ne\nb) 2n\nc) 2e\nd) en\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A signed binary number uses the most significant bit to indicate sign. -15 in 6-bit two's complement is 101111.",
        "target_text": "Question: Express -15 as a 6-bit signed binary number.\nChoices:\na) 001111\nb) 101111\nc) 101110\nd) 001110\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Searching for a pattern in a string using a suffix array takes O(mlogn) time, where m is the pattern length and n is the text length.",
        "target_text": "Question: What is the time required to locate the occurrences of a pattern P of length m in a string of length n using a suffix array?\nChoices:\na) O(nm)\nb) O(n^2)\nc) O(mnlogn)\nd) O(mlogn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Reverse Polish Notation (postfix) is not the reverse of Polish notation (prefix). The structure and evaluation rules differ.",
        "target_text": "Question: Reverse Polish Notation is the reverse of Polish Notation.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The buddy system is a memory allocation technique that may lead to internal fragmentation and difficulty detecting adjacent memory blocks for merging.",
        "target_text": "Question: What are the disadvantages in implementing buddy system algorithm for free lists?\nChoices:\na) internal fragmentation\nb) it takes so much space\nc) we no more have the hole lists in order of memory address, so it is difficult to detect if 2 holes remain adjacent in memory and shall be merged into one hole\nd) both a and c are correct\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Fully parenthesized infix expressions and postfix expressions remove ambiguity in operator precedence, thus don't need precedence rules for evaluation.",
        "target_text": "Question: Which of the following types of expressions do not require precedence rules for evaluation?\nChoices:\na) fully parenthesised infix expression\nb) postfix expression\nc) partially parenthesised infix expression\nd) more than one of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In array-based heaps, the parent of node at index i is located at index (i-1)/2 assuming 0-based indexing.",
        "target_text": "Question: Using what formula can a parent node be located in an array?\nChoices:\na) (i+1)/2\nb) (i-1)/2\nc) i/2\nd) 2i/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Self-organizing lists reorder nodes to bring frequently accessed elements to the front, reducing average search time in small lists.",
        "target_text": "Question: Which of the following data structures is preferred to have lesser search time when the list size is small?\nChoices:\na) search tree\nb) sorted list\nc) self organizing list\nd) linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In row-major order, elements of a 2D array are stored row by row. The address difference confirms row-major if A[2][1] is at a higher address than A[1][1] by row stride.",
        "target_text": "Question: If the address of A[1][1] and A[2][1] are 1000 and 1010 respectively and each element occupies 2 bytes, then the array has been stored in __________ order.\nChoices:\na) row major\nb) column major\nc) matrix major\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a queue implemented using a linked list, insertion occurs at the tail and deletion occurs at the head of the list.",
        "target_text": "Question: In linked list implementation of a queue, from where is the item deleted?\nChoices:\na) At the head of link list\nb) At the centre position in the link list\nc) At the tail of the link list\nd) Node before the tail\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A d-ary heap is a generalization of a binary heap. It is typically implemented using a priority queue for efficient access to the highest/lowest priority element.",
        "target_text": "Question: On which data structure is a d-ary heap based?\nChoices:\na) stack\nb) queue\nc) linked list\nd) priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Any general ordered tree can be converted into a binary tree by representing the first child as the left child and the next sibling as the right child.",
        "target_text": "Question: General ordered tree can be encoded into binary trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: To convert an array into a max-heap, elements must be heapified. The number of interchanges depends on the number of violations of heap property.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array [89, 19, 50, 17, 12, 15, 2, 5, 7, 11, 6, 9, 100] into a max-heap is:\nChoices:\na) 4\nb) 5\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Inserting n elements into an existing binary heap can be done efficiently in linear time (θ(n)) using bottom-up heap construction.",
        "target_text": "Question: We have a binary heap on n elements and wish to insert n more elements. What is the total time required?\nChoices:\na) θ(logn)\nb) θ(n)\nc) θ(nlogn)\nd) θ(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Circular queues are also called ring buffers because they wrap around in memory, reusing space in a fixed-size buffer.",
        "target_text": "Question: Circular queue is also called:\nChoices:\na) Ring Buffer\nb) Rectangular Buffer\nc) Square Buffer\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A treap is a randomized binary search tree. It stores N nodes and its space complexity is linear, O(N).",
        "target_text": "Question: What is the space complexity of a treap algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The multiplication method for hashing is advantageous because it is less sensitive to the size of the table (m), providing good distribution with a constant multiplier.",
        "target_text": "Question: What is the advantage of the multiplication method?\nChoices:\na) only 2 steps are involved\nb) using constant\nc) value of m not critical\nd) simple multiplication\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Larger query rectangles may lead to more data being accessed, which does not always improve efficiency, especially in spatial indexing.",
        "target_text": "Question: Bigger the query rectangle the better is the query efficiency.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Dynamic equivalence problems can be solved using union-find with two main strategies: union by rank and path compression.",
        "target_text": "Question: How many strategies are followed to solve a dynamic equivalence problem?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The upper bound on access time in a Tango tree, which adapts to access patterns, is O(k + 1 * log log n), where k is the number of interleaves.",
        "target_text": "Question: What is the upper bound for a tango tree if k is the number of interleaves?\nChoices:\na) k+2 O(log(log n))\nb) k O(log n)\nc) k^2 O(log n)\nd) k+1 O(log(log n))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Pairing heaps are a type of heap that use a tree-like structure. The actual implementation uses left-child right-sibling representation, not left-right child pointers.",
        "target_text": "Question: The actual pairing heap implementation uses the right child and left child representation.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A node in a weight-balanced tree typically contains a key, pointers to left and right children, and a size field representing the number of descendants.",
        "target_text": "Question: A node of the weight balanced tree has:\nChoices:\na) key, left and right pointers, size\nb) key, value\nc) key, size\nd) key\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a suffix tree, internal nodes can have more than two children. Only the leaves are guaranteed to have no children.",
        "target_text": "Question: Do all the nodes have at least two children in a suffix tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In trees, the number of edges from the root to a given node is referred to as the depth of that node.",
        "target_text": "Question: The number of edges from the root to a node is called __________ of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In an expression tree, leaf nodes contain operands while non-leaf nodes (internal) contain operators.",
        "target_text": "Question: What do the other nodes of an expression tree (except leaves) contain?\nChoices:\na) only operands\nb) only operators\nc) both operands and operators\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The adjacency matrix is an n*n matrix, while the incidence matrix is an n*e matrix (vertices * edges). They don't necessarily share the same dimensions.",
        "target_text": "Question: Do the incidence matrix and adjacency matrix of a graph always have the same dimensions?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: To convert prefix to postfix, the expression must be rearranged while maintaining operator precedence. For prefix -A/B*C$DE, the postfix is ABCDE$*/-",
        "target_text": "Question: What is the postfix form of the following prefix expression -A/B*C$DE?\nChoices:\na) ABCDE$*/-\nb) A-BCDE$*/\nc) ABC$ED*/\nd) A-BCDE$*/\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, array indexing starts from 0. Accessing arr[2] gives the third element and arr[4] the fifth. For arr = {1,2,3,4,5}, the output is 3 and 5.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array\n{\n\tpublic static void main(String args[])\n\t{\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[2]);\n\t\tSystem.out.println(arr[4]);\n\t}\n}\nChoices:\na) 4 and 2\nb) 2 and 4\nc) 5 and 3\nd) 3 and 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Skip lists are layered data structures with multiple linked lists, providing search efficiency similar to balanced binary search trees.",
        "target_text": "Question: Skip lists are similar to which of the following data structures?\nChoices:\na) stack\nb) heap\nc) binary search tree\nd) balanced binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heap sort uses a binary heap, a complete binary tree where each node is greater than or equal to its children. It repeatedly extracts the max element.",
        "target_text": "Question: A sorting technique which uses the binary tree concept such that label of any node is larger than all the labels in the subtrees is called:\nChoices:\na) Selection sort\nb) Insertion sort\nc) Heap sort\nd) Quick sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a LIFO data structure ideal for reversing operations such as strings or expressions. Reversing a word is efficiently done using a stack.",
        "target_text": "Question: Which is the most appropriate data structure for reversing a word?\nChoices:\na) queue\nb) stack\nc) tree\nd) graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-black trees are used in libraries like C++ STL's map/set and Java TreeMap/TreeSet due to guaranteed log-time operations for insertion, deletion, and lookup.",
        "target_text": "Question: Which of the following is an application of Red-black trees and why?\nChoices:\na) used to store strings efficiently\nb) used to store integers efficiently\nc) can be used in process schedulers, maps, sets\nd) for efficient sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Linked lists allow dynamic memory usage, but arrays offer better cache locality and faster indexed access. Linked lists lack random access.",
        "target_text": "Question: Which of the following points is/are not True about Linked List data structure when compared with an array?\nChoices:\na) Random access is not allowed in a typical implementation of Linked Lists\nb) Access of elements in linked list takes less time than compared to arrays\nc) Arrays have better cache locality that can make them better in terms of performance\nd) It is easy to insert and delete elements in Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A lookup operation is used to find the value associated with a given key in key-value storage systems like hash maps and dictionaries.",
        "target_text": "Question: Which operation finds the value associated with a given key?\nChoices:\na) Insert\nb) Find Next\nc) Look up\nd) Delete\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tango tree is an advanced binary search tree used in competitive data structure design, structured as a hierarchy or tree of trees.",
        "target_text": "Question: Is tango tree represented as a tree of trees?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A succinct binary tree uses exactly 2n + o(n) bits for representing the structure of a binary tree with n nodes in a compressed format.",
        "target_text": "Question: How many bits would a succinct binary tree occupy?\nChoices:\na) n + o(n)\nb) 2n + o(n)\nc) n/2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A simple graph with 10 vertices cannot have both a minimum degree of 0 and a maximum of 9 due to connectivity constraints. This is allowed only in multigraphs.",
        "target_text": "Question: Which of the following statements is True?\nChoices:\na) A simple graph with 10 vertices can have min degree 0 and max degree 9\nb) A multigraph with 10 vertices can have min degree 0 and max degree 9\nc) Both multigraph and simple graph can satisfy the condition\nd) None of the mentioned\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A d-heap supports typical heap operations like insert and extract-min/max. Most implementations define only two primary operations.",
        "target_text": "Question: How many basic operations can be performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Java arrays are 0-indexed. arr[2] accesses the 3rd element and arr[4] accesses the 5th element. In the given array, these values are 3 and 5 respectively.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array\n{\n\tpublic static void main(String args[])\n\t{\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[2]);\n\t\tSystem.out.println(arr[4]);\n\t}\n}\nChoices:\na) 3 and 5\nb) 5 and 3\nc) 2 and 4\nd) 4 and 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: m' is usually chosen as a prime smaller than m in double hashing to reduce collisions and ensure uniform probing. For m = 19, m' = 17 is a good choice.",
        "target_text": "Question: What is the value of m' if the value of m is 19?\nChoices:\na) 11\nb) 18\nc) 17\nd) 15\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-trees maintain balance using fewer rotations compared to red-black trees, which can make searches faster due to simpler balancing logic.",
        "target_text": "Question: Comparing the speed of execution of Red-Black trees and AA-trees, which one has the faster search time?\nChoices:\na) AA-tree\nb) Red-Black tree\nc) Both have an equal search time\nd) It depends\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A deque (double-ended queue) supports insertion and deletion from both ends, unlike a standard queue that supports only FIFO.",
        "target_text": "Question: A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?\nChoices:\na) Queue\nb) Circular queue\nc) Dequeue\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The number of inversions in an array is a measure of how unsorted it is. An already sorted array has 0 inversions, and the maximum is in reverse order.",
        "target_text": "Question: What does the number of inversions in an array indicate?\nChoices:\na) mean value of the elements of array\nb) measure of how close or far the array is from being sorted\nc) the distribution of values in the array\nd) median value of the elements of array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hash trees (Merkle trees) are used in blockchain and distributed systems for efficient and secure verification of large datasets.",
        "target_text": "Question: Hash tree is used in effective data verification in distributed systems.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The auxiliary space complexity refers to the extra memory used by an algorithm. The given array rotation code uses constant space.",
        "target_text": "Question: What will be the auxiliary space complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int n) \n{ \n int k = arr[0], i; \n for (i = 0; i < n - 1; i++) \n  arr[i] = arr[i + 1]; \n \n arr[i] = k; \n} \n \nvoid func(int arr[], int d, int n) \n{ \n for (int i = 0; i < d; i++) \n  func1(arr, n); \n} \n \nvoid printArray(int arr[], int n) \n{ \n for (int i = 0; i < n; i++) \n  cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = { 1, 2, 3, 4, 5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n \n    int d = 3;\n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The program decreases the index j when G[i][j] == 1, leading to an infinite loop unless the matrix has only zeros (an empty graph).",
        "target_text": "Question: For which type of graph will the given program not run infinitely?\nChoices:\na) All Fully Connected Graphs\nb) All Empty Graphs\nc) All Bipartite Graphs\nd) All simple graphs\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Shell Sort is not based on divide and conquer. Merge Sort and Heap Sort divide the input and solve recursively.",
        "target_text": "Question: Which one of the below is not a divide and conquer approach?\nChoices:\na) Quick Sort\nb) Merge Sort\nc) Shell Sort\nd) Heap Sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Standard types of queues include ordinary, circular, and priority queues. Single-ended queue is not a valid queue classification.",
        "target_text": "Question: Which of the following is not the type of queue?\nChoices:\na) Ordinary queue\nb) Single ended queue\nc) Circular queue\nd) Priority queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a tree in which every node other than the leaves has two children. It has 2n + 1 total nodes if there are n non-leaf (internal) nodes.",
        "target_text": "Question: A full binary tree with 'n' non-leaf nodes contains __________\nChoices:\na) log2 n nodes\nb) n+1 nodes\nc) 2n nodes\nd) 2n+1 nodes\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Converting infix to postfix requires use of a stack to manage operators based on precedence and associativity.",
        "target_text": "Question: Which data structure is needed to convert infix notation to postfix notation?\nChoices:\na) Branch\nb) Tree\nc) Queue\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In a d-ary heap, during delete-min, a node is compared to its d children. Only (d - 1) comparisons are needed to find the minimum among d elements.",
        "target_text": "Question: How many comparisons will occur while performing a delete-min operation?\nChoices:\na) d\nb) d-1\nc) d+1\nd) 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binomial heap, heap order is maintained, but it does not enforce left or right child being greater or smaller. Hence, the given statement is False.",
        "target_text": "Question: In a binomial heap the root value is greater than left child and less than right child.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A ternary heap is a variation of a heap in which each node has up to three children instead of two, affecting the structure and heap operations.",
        "target_text": "Question: What is a ternary heap?\nChoices:\na) An array with three elements\nb) Linked list with three elements\nc) Tree with three children\nd) Heap with all nodes having three children\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Trees offer hierarchical organization and efficient search but are not typically used for linear features like undo/redo operations.",
        "target_text": "Question: Which of the following is not an advantage of trees?\nChoices:\na) Hierarchical structure\nb) Faster search\nc) Router algorithms\nd) Undo/Redo operations in a notepad\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: e = 2n + i is a known relationship in certain types of trees; but if the answer is e = i + 2n, it likely refers to a variation or reformatting of that relation.",
        "target_text": "Question: e = 2n+i\nChoices:\na) e = i+n\nb) e = i+2n or 2n+i\nc) e = 2i+n\nd) e = n-i\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An And-Inverter Graph (AIG) consists of AND gates and optional inverters. Size = #AND gates; levels = #AND gates on the longest path from input to output.",
        "target_text": "Question: Size of an And Inverter Graph is the number of __________ gates and the number of logic levels is the number of __________ gates on the __________ path from a primary input to a primary output.\nChoices:\na) AND, AND, average\nb) AND, OR, longest\nc) OR, OR, shortest\nd) AND, AND, longest\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a linked list, each node stores a data value and a reference (or link) to the next node in the list. This allows dynamic memory usage.",
        "target_text": "Question: In Linked List implementation, a node carries information regarding __________\nChoices:\na) Data\nb) Link\nc) Data and Link\nd) Node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An adjacency matrix cannot directly represent multiple parallel edges between the same pair of nodes, as it allows only one value per edge pair.",
        "target_text": "Question: An adjacency matrix representation of a graph cannot contain information of:\nChoices:\na) nodes\nb) edges\nc) direction of edges\nd) parallel edges\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The job scheduling problem selects the maximum number of non-overlapping intervals. Greedy algorithms are often used by selecting the earliest finishing job.",
        "target_text": "Question: Given the intervals [(1, 4), (3, 6), (5, 7), (8, 9)], what would be the output of a job scheduling algorithm?\nChoices:\na) [(1, 4), (5, 7), (8, 9)]\nb) [(1, 4), (3, 6), (8, 9)]\nc) [(1, 4), (3, 6)]\nd) [(1, 4), (3, 6), (5, 7)]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an adjacency matrix of a directed graph, the row sum corresponds to out-degree and column sum to in-degree.",
        "target_text": "Question: For the adjacency matrix of a directed graph the row sum is the __________ degree and the column sum is the __________ degree.\nChoices:\na) in, out\nb) out, in\nc) in, total\nd) total, out\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A treap is a randomized binary search tree. The average case for operations like search, insert, or delete takes O(log N) time.",
        "target_text": "Question: What is the average running time of a treap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Concatenation in O(1) time requires constant-time tail-to-head linking, which circular doubly linked lists support efficiently.",
        "target_text": "Question: The concatenation of two lists is to be performed in O(1) time. Which of the following implementations of a list should be used?\nChoices:\na) singly linked list\nb) doubly linked list\nc) circular doubly linked list\nd) array implementation of lists\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: String literals in C++ can be indexed like arrays. The character at index 0 of 'GFG!' is 'G' and at index 3 is '!'.",
        "target_text": "Question: What is the output of the following code?\ncout << \"GFG!\"[0] <<\" \"<<\"GFG!\"[3];\nChoices:\na) Error\nb) G !\nc) F !\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: To evaluate infix expressions, one stack is used for operands and one for operators, making a total of two stacks.",
        "target_text": "Question: How many stacks are required for applying evaluation of infix expression algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a hypergraph, an edge can connect more than two vertices. All given examples qualify as hypergraphs under this definition.",
        "target_text": "Question: Which of the following is a HyperGraph, where V is the set of vertices, E is the set of edges?\nChoices:\na) V = {v1, v2, v3} E = {e1, e2} = {{v2, v3}, {v1, v3}}\nb) V = {v1, v2} E = {e1} = {{v1, v2}}\nc) V = {v1, v2, v3} E = {e1, e2, e3} = {{v2, v3}, {v3, v1}, {v2, v1}}\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Van Emde Boas trees are advanced data structures that use recursive tree layouts and are not strictly binary in structure.",
        "target_text": "Question: Which type of tree does Van Emde Boas require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Non-Binary\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: And-Inverter Graphs (AIGs) are a canonical representation of logic circuits. Multiple structurally different AIGs can represent the same logical function.",
        "target_text": "Question: Two or more And Inverter Graphs can represent the same function.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In the multiplication method of hashing, the table size is typically a power of two, such as 2^p. For p = 7, the size is 2^7 = 128.",
        "target_text": "Question: What is the table size when the value of p is 7 in the multiplication method of creating hash functions?\nChoices:\na) 14\nb) 128\nc) 49\nd) 127\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Linear probing is a collision resolution strategy in open addressing where the step function is F(i) = i, checking successive slots linearly.",
        "target_text": "Question: Which of the following is the correct function definition for linear probing?\nChoices:\na) F(i)= 1\nb) F(i)=i\nc) F(i)=i^2\nd) F(i)=i+1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tango trees are a form of binary search trees developed by Erik Demaine, Mihai Patrascu, and John Iacono, known for competitive performance.",
        "target_text": "Question: Who developed the concept of tango tree?\nChoices:\na) Erik Demaine\nb) Mihai Patrascu\nc) John Iacono\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: The transpose method is a self-organizing list technique where the searched node is swapped with its immediate predecessor to improve future access.",
        "target_text": "Question: What technique is used in the Transpose method?\nChoices:\na) searched node is swapped with its predecessor\nb) node with highest access count is moved to head of the list\nc) searched node is swapped with the head of list\nd) searched nodes are rearranged based on proximity to the head node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The merge operation in leftist heaps is performed in O(log N) time due to its skewed structure favoring the shorter path.",
        "target_text": "Question: What is the efficiency of merge used in leftist heaps?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(M log N)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In an expression tree, leaf nodes represent operands (values or variables), while internal nodes represent operators.",
        "target_text": "Question: The leaves of an expression tree always contain?\nChoices:\na) operators\nb) operands\nc) null\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A collision in hashing occurs when a key is hashed to an index already occupied by a different key.",
        "target_text": "Question: The case in which a key other than the desired one is kept at the identified location is called?\nChoices:\na) Hashing\nb) Collision\nc) Chaining\nd) Open addressing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Weight balanced trees support dynamic set operations like insertion and deletion while maintaining balance, useful for dictionaries and ordered sequences.",
        "target_text": "Question: What are the applications of weight balanced tree?\nChoices:\na) dynamic sets, dictionaries, sequences, maps\nb) heaps\nc) sorting\nd) storing strings\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In an array-based complete binary tree, the parent of a node at index w (w ≠ 0) is found at index floor((w-1)/2).",
        "target_text": "Question: What is the parent for a node 'w' of a complete binary tree in an array representation when w is not 0?\nChoices:\na) floor((w-1)/2)\nb) ceil((w-1)/2)\nc) (w-1)/2\nd) w/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The d-ary heap is a generalization of binary heaps introduced by Donald Johnson to improve Dijkstra's algorithm with better performance on sparse graphs.",
        "target_text": "Question: Who invented d-ary heap?\nChoices:\na) Carl Rick\nb) Alan Turing\nc) Donald Johnson\nd) Euclid\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A data structure is a specialized format for organizing, processing, and storing data to enable efficient access and modification.",
        "target_text": "Question: What is a data structure?\nChoices:\na) A programming language\nb) A collection of algorithms\nc) A way to store and organize data\nd) A type of computer hardware\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: To delete a node X in a doubly linked list, the backward pointer's forward reference and the forward pointer's backward reference must be updated.",
        "target_text": "Question: A doubly linked list is declared as:\nstruct Node {\n  int Value;\n  struct Node *Fwd;\n  struct Node *Bwd;\n};\nChoices:\na) X->Bwd->Fwd = X->Fwd; X->Fwd->Bwd = X->Bwd ;\nb) X->Bwd.Fwd = X->Fwd ; X.Fwd->Bwd = X->Bwd ;\nc) X.Bwd->Fwd = X.Bwd ; X->Fwd.Bwd = X.Bwd ;\nd) X->Bwd->Fwd = X->Bwd ; X->Fwd->Bwd = X->Fwd;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Circular doubly linked lists allow constant-time concatenation by linking the last node of one list to the first of another without traversal.",
        "target_text": "Question: The concatenation of two lists can be performed in O(1) time. Which of the following variation of the linked list can be used?\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular doubly linked list\nd) Array implementation of list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B+ trees minimize the number of node accesses. With an order of 100, 1 million records require about 4 node accesses in a B+ tree.",
        "target_text": "Question: In a file with 1 million records and tree order 100, what is the max number of nodes accessed in a B+ tree index?\nChoices:\na) 5\nb) 4\nc) 3\nd) 10\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a simple graph with n vertices, the maximum degree of any vertex is n-1, since it cannot be connected to itself.",
        "target_text": "Question: The maximum degree of any vertex in a simple graph with n vertices is:\nChoices:\na) n-1\nb) n+1\nc) 2n-1\nd) n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In-order traversal visits left subtree, root, and then right subtree. This order gives sorted output in binary search trees.",
        "target_text": "Question: Select the code snippet which performs in-order traversal.\nChoices:\na) \npublic void inorder(Tree root)\n{\n System.out.println(root.data);\n inorder(root.left);\n inorder(root.right);\n}\nb) \npublic void inorder(Tree root)\n{\n inorder(root.left);\n System.out.println(root.data);\n inorder(root.right);\n}\nc) \npublic void inorder(Tree root)\n{\n System.out.println(root.data);\n inorder(root.right);\n inorder(root.left);\n}\nd) \npublic void inorder(Tree root)\n{\n inorder(root.right);\n inorder(root.left);\n System.out.println(root.data);\n}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Doubly linked lists support bi-directional traversal, making insertion/deletion faster compared to singly linked lists in certain cases.",
        "target_text": "Question: What is the advantage of using a doubly linked list for chaining over singly linked list?\nChoices:\na) it takes less memory\nb) it is easy to implement\nc) it makes the process of insertion and deletion faster\nd) it causes less collisions\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A bit can be set to 1 using the bitwise OR operation with a mask where the desired bit is already 1.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 1?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NOR\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In the division method of hashing, the hash index is found as key mod table_size. For key 172 and table size 157, 172 % 157 = 15.",
        "target_text": "Question: Using division method, in a given hash table of size 157, the key of value 172 will be placed at position __________\nChoices:\na) 19\nb) 72\nc) 15\nd) 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a top tree, every node represents a cluster, leaves represent edges, and the root represents the full tree. These properties make it binary.",
        "target_text": "Question: Which property makes top tree a binary tree?\nChoices:\na) Nodes as Cluster\nb) Leaves as Edges\nc) Root is Tree Itself\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree is both rooted (has a single root node) and ordered (left and right child are distinguishable). Hence the statement is False.",
        "target_text": "Question: A binary tree is a rooted tree but not an ordered tree.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Skip lists are efficient for search and range queries in sorted data. They support O(log n) time complexity for many operations.",
        "target_text": "Question: Are the below statements True about skip lists?\n1. Find closest element in O(log n)\n2. Count elements in range in O(log n)\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees allow linear-time operations for pattern matching, substring checking, and other string-processing tasks, making them optimal for substring operations.",
        "target_text": "Question: Which tree provides a linear time solution for substring operation?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To create a mirror image of a binary tree, post-order traversal is typically used to recursively swap left and right subtrees from the bottom up.",
        "target_text": "Question: One can convert a binary tree into its mirror image by traversing it in:\nChoices:\na) in-order\nb) pre-order\nc) post-order\nd) any order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An incidence matrix for a graph is a matrix with rows representing vertices and columns representing edges, so its dimensions are vertices * edges.",
        "target_text": "Question: What are the dimensions of an incidence matrix?\nChoices:\na) Number of edges * number of edges\nb) Number of edges * number of vertices\nc) Number of vertices * number of vertices\nd) Number of edges * ((1/2) * number of vertices)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A complete binary tree has all levels completely filled except possibly the last, which is filled from left to right.",
        "target_text": "Question: What is a complete binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) Completely filled tree, bottom filled right to left\nc) Completely filled tree, bottom filled left to right\nd) A tree in which all nodes have degree 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In incomplete binary trees represented as arrays, child pointers (2i, 2i+1) may not always apply, so auxiliary data can help indicate valid children.",
        "target_text": "Question: If the tree is not a complete binary tree, what changes can be made for easy access of children of a node in the array?\nChoices:\na) every node stores data saying which of its children exist in the array\nb) no need of any changes, continue with 2w and 2w+1\nc) keep a separate table telling children of a node\nd) use another array parallel to the tree array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A priority queue supports retrieval of the highest or lowest priority item. It is efficiently implemented using heaps.",
        "target_text": "Question: With what data structure can a priority queue be implemented?\nChoices:\na) Array\nb) List\nc) Heap\nd) Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists do not support random access due to their sequential memory layout, unlike arrays. Hence, they're unsuitable for direct indexing.",
        "target_text": "Question: Which of these is not an application of a linked list?\nChoices:\na) To implement file systems\nb) For separate chaining in hash-tables\nc) To implement non-binary trees\nd) Random Access of elements\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is used for parsing expressions and balancing symbols, like parentheses, brackets, and braces, using LIFO behavior.",
        "target_text": "Question: Which application of stack is used to ensure that the pair of parentheses is properly nested?\nChoices:\na) Balancing symbols\nb) Reversing a stack\nc) Conversion of an infix to postfix expression\nd) Conversion of an infix to prefix expression\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A Treap is a randomized binary search tree where nodes maintain both BST order on keys and heap order on priorities, making it a randomized structure.",
        "target_text": "Question: Is Treap a randomized tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a DAG (Directed Acyclic Graph), there's always at least one node with in-degree 0 and one with out-degree 0, so the minimum in-degree + max out-degree is always 0.",
        "target_text": "Question: What is the value of the sum of the minimum in-degree and maximum out-degree of a Directed Acyclic Graph?\nChoices:\na) Depends on the graph\nb) Will always be zero\nc) Will always be greater than zero\nd) May be zero or greater than zero\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The maximum number of nodes in a binary tree of height k (root at height 0) is 2^(k+1) - 1, which forms a complete binary tree.",
        "target_text": "Question: Maximum number of nodes in a binary tree with height k (root at height 0) is:\nChoices:\na) 2^k - 1\nb) 2^(k+1) - 1\nc) 2^(k-1) + 1\nd) 2^k + 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: The probability of collision in hashing with a uniform distribution is proportional to O(n/m), where n is the number of keys and m is the table size.",
        "target_text": "Question: What is the probability of a collision when hashing n keys into a hash table of size m?\nChoices:\na) O(1/n)\nb) O(n/m)\nc) O(log n)\nd) O(m/n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashmaps store key-value pairs using a hash function, requiring space proportional to the number of elements stored, hence O(N).",
        "target_text": "Question: What is the space used by programs when we use HashMap in our program?\nChoices:\na) O(1)\nb) O(Log N)\nc) O(N)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Some operations like insertion and union in certain heap structures (e.g., binomial heap) have the same time complexity due to their structural properties.",
        "target_text": "Question: Which of these operations have the same complexities?\nChoices:\na) Insertion, find_min\nb) Find_min, union\nc) Union, Insertion\nd) Deletion, Find_max\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Linear data structures include arrays, stacks, and queues as their elements are organized in a sequential order.",
        "target_text": "Question: Which one of the below mentioned is a linear data structure?\nChoices:\na) Queue\nb) Stack\nc) Arrays\nd) All of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: BFS traverses the tree level by level. At depth 4, a complete binary tree will have 2^5 - 1 = 31 nodes.",
        "target_text": "Question: If BFS starts at root and visits vertex t at distance 4, what's the max value of t in the BFS traversal?\nChoices:\na) 15\nb) 16\nc) 31\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: All three standard tree traversals (in-order, pre-order, post-order) follow left subtree before right subtree traversal unless specified otherwise.",
        "target_text": "Question: Which of the following properties are obeyed by all three tree traversals?\nChoices:\na) Left subtrees are visited before right subtrees\nb) Right subtrees are visited before left subtrees\nc) Root node is visited before left subtree\nd) Root node is visited before right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A randomized binary search tree is generated using a stochastic (probabilistic) process such as randomized priority assignment (e.g., in Treaps).",
        "target_text": "Question: Which process forms the randomized binary search tree?\nChoices:\na) Stochastic Process\nb) Branching Process\nc) Diffusion Process\nd) Aggregation Process\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Greedy algorithms make the best decision at each step with the goal of finding a globally optimal solution. They focus on local optima.",
        "target_text": "Question: Which of these algorithmic approaches tries to achieve a localized optimum solution?\nChoices:\na) Greedy approach\nb) Divide and conquer approach\nc) Dynamic approach\nd) All of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Garbage collection using implicit free lists works by reclaiming memory that no longer has pointers referencing it, as it's considered unreachable.",
        "target_text": "Question: How does implicit free lists (garbage collection) work when adding memory to the free list?\nChoices:\na) Whichever comes last will be added to free list\nb) Whichever comes first will be added to free list\nc) Certain blocks can be freed if there are no pointers to them\nd) Makes a probabilistic guess\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A dynamic array grows automatically, whereas a dynamically allocated array requires manual resizing, making them conceptually different.",
        "target_text": "Question: Both dynamic array and dynamically memory allocated array are the same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Rebalancing an AVL tree involves rotations that occur during insertion or deletion. These rebalancing operations take O(log n) time.",
        "target_text": "Question: Re-balancing of AVL tree costs __________\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack-life of an element is the time between its push and pop operations. The average for a sequence of n pushes and n pops includes push time, pop time, and idle time.",
        "target_text": "Question: The average stack-life of an element in a stack where push and pop take X seconds, and there's Y seconds between operations, is:\nChoices:\na) n(X + Y)\nb) 3Y + 2X\nc) n(X + Y) - X\nd) Y + 2X\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix operators do not operate on the value to their right. Instead, in postfix notation, operands precede the operator.",
        "target_text": "Question: Which of the following statements is incorrect?\nChoices:\na) Postfix operators use value to their right\nb) Postfix operators use value to their left\nc) Prefix operators use value to their right\nd) In postfix expression, operands are followed by operators\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Fibonacci heaps support amortized constant-time insertion and union operations. Hence, both have the same complexity.",
        "target_text": "Question: Choose the option with functions having same complexity for a Fibonacci heap:\nChoices:\na) Insertion, Union\nb) Insertion, Deletion\nc) extract_min, insertion\nd) Union, delete\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A complete binary tree of height h has 2^(h+1) - 1 nodes. Height is measured as the number of edges in the longest root-to-leaf path.",
        "target_text": "Question: What is the maximum number of nodes in a binary tree of height h?\nChoices:\na) 2^h - 1\nb) 2^h\nc) 2^(h+1) - 1\nd) 2^(h+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Open addressing handles collisions by finding another location in the hash table. Chaining stores collided elements in separate data structures.",
        "target_text": "Question: Which of the following techniques stores data in the hash table itself in case of a collision?\nChoices:\na) Open addressing\nb) Chaining using linked list\nc) Chaining using doubly linked list\nd) Chaining using binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: The length() method in Java's String class returns the number of characters in a string.",
        "target_text": "Question: Which of these methods of class String is used to obtain the length of the String object?\nChoices:\na) get()\nb) Sizeof()\nc) lengthof()\nd) length()\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: In a sequential search, on average, (n + 1)/2 comparisons are made for a successful search.",
        "target_text": "Question: What is the average number of key comparisons in a successful sequential search in a list of length n?\nChoices:\na) log n\nb) (n - 1)/2\nc) n/2\nd) (n + 1)/2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The number of possible labeled graphs depends on the type: simple directed, pseudographs, and multigraphs. Only a few simple directed graphs exist for 2 vertices, while others are unbounded.",
        "target_text": "Question: Possible number of labeled simple Directed, Pseudo, and Multigraphs with 2 vertices?\nChoices:\na) 3, Infinite, 4\nb) 4, 3, Infinite\nc) 4, Infinite, Infinite\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hash functions that use higher-order operations (like cubing) tend to distribute keys more uniformly across buckets than simple mod operations.",
        "target_text": "Question: Which one of the following hash functions distributes keys most uniformly over 10 buckets for i from 0 to 2020?\nChoices:\na) h(i) = (12 * i) mod 10\nb) h(i) = (11 * i^2) mod 10\nc) h(i) = i^3 mod 10\nd) h(i) = i^2 mod 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A Binary Decision Diagram (BDD) has two terminal (leaf) nodes representing the Boolean constants True (1) and False (0).",
        "target_text": "Question: In a Binary Decision Diagram, how many types of terminal nodes exist?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hash tables provide constant-time average-case access due to efficient indexing by hash functions, making them suitable for large datasets.",
        "target_text": "Question: What is the advantage of a hash table as a data structure?\nChoices:\na) easy to implement\nb) faster access of data\nc) exhibit good locality of reference\nd) very efficient for fewer entries\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists are used in stack/queue implementations and name directories due to dynamic memory allocation and easy insert/delete operations.",
        "target_text": "Question: What are the application(s) of linked list?\nChoices:\na) Implementation of stacks and queues.\nb) Maintaining a directory of names\nc) None of the above\nd) Both a and b\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The Jaccard Coefficient Index is used to measure similarity between two sets by calculating the ratio of their intersection to their union.",
        "target_text": "Question: Which of the following is defined as the ratio of total elements of intersection and union of two sets?\nChoices:\na) Rope Tree\nb) Jaccard Coefficient Index\nc) Tango Tree\nd) MinHash Coefficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The Hamming weight, also called population count, is the number of 1s in a bit array and is used in compression and hashing.",
        "target_text": "Question: What does Hamming weight/population count mean in bit arrays?\nChoices:\na) Finding the number of 1 bits in a bit array\nb) Finding the number of 0 bits in a bit array\nc) Finding the sum of bits in a bit array\nd) Finding the average number of 1s and 0s\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The complement of a graph G, denoted G', has the same vertices as G, but includes only the edges not present in G. Edge count: E(G') = (n(n-1)/2) - E(G).",
        "target_text": "Question: If a simple graph G has n vertices and m edges, how many edges are in its complement G'?\nChoices:\na) (n^2 - n - 2m)/2\nb) (n^2 + n + 2m)/2\nc) n(n-1)/2\n d) (n^2 - n + 2m)/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Complete graphs are cyclic, but not all cyclic graphs are complete. Paths are bipartite, and some cyclic graphs are as well. The question asks how many of these logical statements are True.",
        "target_text": "Question: How many of the following statements are correct?\ni) All cyclic graphs are complete graphs.\nii) All complete graphs are cyclic graphs.\niii) All paths are bipartite.\niv) All cyclic graphs are bipartite.\nv) There are cyclic graphs which are complete.\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the division method of hashing, the modulus value (m) is typically chosen as a prime number to distribute keys uniformly.",
        "target_text": "Question: What can be the value of m in the division method?\nChoices:\na) Any prime number\nb) Any even number\nc) 2^p - 1\nd) 2^p\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Spatial locality refers to the use of data elements within relatively close storage locations, and arrays help take advantage of this concept.",
        "target_text": "Question: Which of the following concepts make extensive use of arrays?\nChoices:\na) Binary trees\nb) Scheduling of processes\nc) Caching\nd) Spatial locality\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The maximum number of keys in a B-tree of order m and height h is (m^(h+1)) - 1. For order 4 and height 3, it's 4^4 - 1 = 255 keys.",
        "target_text": "Question: A B-tree of order 4 and of height 3 will have a maximum of __________ keys.\nChoices:\na) 255\nb) 63\nc) 127\nd) 188\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In any graph, the sum of degrees of all vertices is equal to twice the number of edges, not the number of edges itself.",
        "target_text": "Question: In a simple graph, the number of edges is equal to twice the sum of the degrees of the vertices.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, the ArrayList grows by a factor of 1.5x its current size to reduce the overhead of frequent resizing.",
        "target_text": "Question: The growth factor of ArrayList in Java is __________\nChoices:\na) 1\nb) 1.5\nc) 2\nd) 0\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In an array-based binary heap starting at index 1, the parent of element at index i is at index floor(i/2).",
        "target_text": "Question: In a binary heap with n elements stored from index 1 to n, the parent of element at index i is:\nChoices:\na) i - 1\nb) floor(i/2)\nc) ceiling(i/2)\nd) (i + 1)/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: The top two elements (5 and 4) on the stack are popped and the operator * is applied. The result is pushed back to the stack.",
        "target_text": "Question: Consider the stack:\n| 5 |\n| 4 |\n| 3 |\n| 2 |\nIf '*' is encountered, what operation is performed?\nChoices:\na) 5*4=20 is pushed\nb) * is pushed\nc) 2*3=6 is pushed\nd) * is ignored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Cartesian sorting is effective when data is partially sorted. It allows efficient reordering with minimal overhead.",
        "target_text": "Question: What is the speciality of cartesian sorting?\nChoices:\na) sorts partially sorted data quickly\nb) uses cartesian product\nc) sorts in less than O(log n)\nd) it is a self-balancing tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Skew heaps rely on merge operations for insertion and deletion, making merging the core operation.",
        "target_text": "Question: What is the fundamental operation performed in skew heaps?\nChoices:\na) intersection\nb) difference\nc) merging\nd) sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Open addressing places all entries directly in the table, providing better cache performance than separate chaining using linked structures.",
        "target_text": "Question: Which of the following variant of a hash table has the best cache performance?\nChoices:\na) hash table using a linked list for separate chaining\nb) hash table using binary search tree for separate chaining\nc) hash table using open addressing\nd) hash table using a doubly linked list for separate chaining\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: The tango tree is named after the capital of Argentina, Buenos Aires, as part of a trend to name trees after cities.",
        "target_text": "Question: After which city is tango tree named?\nChoices:\na) Vatican City\nb) Buenos Aires\nc) New York\nd) California\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Treaps combine binary search trees and heaps and can perform union, intersection, and difference efficiently using structural properties.",
        "target_text": "Question: Several other operations like union, set difference, and intersection can be done in treaps.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: While XOR linked lists reduce memory usage, array-based solutions often outperform them in practice due to better memory locality and simplicity.",
        "target_text": "Question: Would using arrays and swapping elements instead of XOR linked lists be more efficient?\nChoices:\na) no not all\nb) yes arrays would have been better than XOR lists\nc) both would be same in efficiency\nd) can't say\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack can be implemented using a single queue by adjusting enqueue and dequeue logic, though multiple queues may improve performance.",
        "target_text": "Question: Minimum number of queues to implement stack is __________\nChoices:\na) 3\nb) 4\nc) 1\nd) 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A relation R is symmetric if xRy implies yRx. This is the definition of symmetry in mathematical logic.",
        "target_text": "Question: A relation R on a set S is defined such that x R y if and only if y R x. This is an example of?\nChoices:\na) reflexive relation\nb) symmetric relation\nc) transitive relation\nd) invalid relation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The first node visited in in-order traversal is the leftmost node, while in post-order it is the leftmost descendant. These differ unless it's a leaf.",
        "target_text": "Question: For a binary tree, is the first node visited in in-order and post-order traversal the same?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In d-ary heaps, delete-min takes O(log N) time, regardless of the branching factor, due to its logarithmic tree height.",
        "target_text": "Question: What is the run time efficiency of delete-min operation?\nChoices:\na) O(log N)\nb) O(logd N)\nc) O(d logd N)\nd) O(d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: SLLs use one pointer per node, while DLLs use two. Therefore, DLLs use more memory, but enable constant-time insert/delete at known positions.",
        "target_text": "Question: Which of the following statements are not correct with respect to Singly and Doubly Linked Lists?\nChoices:\na) Insertion/deletion is O(n) in SLL and O(1) in DLL\nb) SLL uses less memory per node than DLL\nc) DLL allows better backward traversal than SLL\nd) Number of node fields in SLL is more than DLL\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Character strings can represent numbers in radix (base) systems. 'pt' interpreted in base-26 yields 14452.",
        "target_text": "Question: Interpret the string 'pt' as an integer in suitable radix notation.\nChoices:\na) 14963\nb) 14392\nc) 12784\nd) 14452\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Vectors in C++ are dynamic arrays that can resize themselves automatically, unlike static arrays which have fixed sizes.",
        "target_text": "Question: Which of the following is a difference between vectors and arrays?\nChoices:\na) Access to any element using [] operator\nb) Stored in contiguous memory blocks\nc) The ability to change size dynamically\nd) Efficient direct access to any element\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Python's list data type is implemented internally using dynamic arrays, allowing resizing and random access.",
        "target_text": "Question: Which of the following arrays are used in the implementation of the list data type in Python?\nChoices:\na) Bit array\nb) Dynamic arrays\nc) Sparse arrays\nd) Parallel arrays\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: To maintain the min-heap property, if a node is less than its parent, they are swapped. This ensures that the smallest value bubbles up.",
        "target_text": "Question: In the following min-heap function, what is the missing condition?\nChoices:\na) if A[m] > A[parent(m)] then swap A[m], A[parent(m)]\nb) if A[m] > A[parent(m)] then swap A[i], A[parent(m)]\nc) if A[m] < A[parent(m)] then swap A[m], A[parent(m)]\nd) if A[m] > A[parent(m)] then swap A[i], A[parent(m)]\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Recursive algorithms use stacks implicitly. Non-recursive implementations use explicit stacks to track function call states.",
        "target_text": "Question: What data structure would you most likely see in a non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked list\nc) Queue\nd) Trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree can be uniquely constructed if in-order traversal is combined with either pre-order or post-order traversal.",
        "target_text": "Question: Which of the following traversal pairs can uniquely build a binary tree?\nChoices:\na) post-order and pre-order\nb) post-order and in-order\nc) post-order and level-order\nd) level-order and preorder\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The parent of a node in a binary heap stored in an array at index i is at floor(i/2).",
        "target_text": "Question: What is the location of a parent node for any arbitrary node i?\nChoices:\na) (i/2) position\nb) (i+1)/2 position\nc) floor(i/2) position\nd) ceil(i/2) position\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Two directed graphs are isomorphic if there exists a permutation matrix P such that A = PBP^-1, where A and B are adjacency matrices.",
        "target_text": "Question: Two directed graphs G and H are isomorphic if and only if A = PBP^-1, where A and B are their adjacency matrices.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A 2-3 tree is a balanced search tree, which is a special case of B-trees but also shares properties with AVL trees due to balance.",
        "target_text": "Question: 2-3 tree is a specific form of __________\nChoices:\na) B-tree\nb) B+ tree\nc) AVL tree\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The van Emde Boas tree supports associative array operations like insert, delete, and lookup with fast time complexity.",
        "target_text": "Question: On which abstract data type does van Emde Boas tree perform operations?\nChoices:\na) Tree\nb) Linked List\nc) Heap\nd) Associative Array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: K-d trees support range queries, which ask for all points lying within a multidimensional rectangle or box.",
        "target_text": "Question: Several kinds of queries are possible on a k-d tree, one of which is?\nChoices:\na) partial queries\nb) range queries\nc) neighbor queries\nd) search queries\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The given code pushes characters in reverse order to produce the string 'cat' when popped from the stack.",
        "target_text": "Question: What is the set of stack operations to get the output \"cat\"?\nChoices:\na) push(t), push(a), push(c), pop(), pop(), pop()\nb) push(c), pop(), push(a), pop(), push(t), pop()\nc) pop(c), pop(a), pop(t)\nd) push(c), push(a), pop(t)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: A trie can store strings up to length m. In the worst case, the trie can grow to a maximum depth of m for any single string.",
        "target_text": "Question: What can be the maximum depth of a trie with n strings, each of length up to m?\nChoices:\na) log2n\nb) log2m\nc) n\nd) m\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Weight-balanced trees support basic operations like insert/delete and set operations like union, intersection, and subset testing.",
        "target_text": "Question: What operations can be performed on a weight-balanced tree?\nChoices:\na) all basic operations and set intersection, set union, subset test\nb) only basic operations\nc) only set operations\nd) only insertion and deletion\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Recursion uses the call stack for function calls. Each call keeps its activation record in memory, leading to high stack usage.",
        "target_text": "Question: Recursion is memory-intensive because:\nChoices:\na) Recursive functions declare many local variables.\nb) Previous calls remain open and occupy space on the stack.\nc) Many copies of function code are created.\nd) It requires large data values.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The number of possible undirected graphs with n vertices and self-loops but no multiple edges is 2^(n(n+1)/2).",
        "target_text": "Question: The number of undirected graphs with self-loops (no multi-edges) and n vertices is:\nChoices:\na) 2^((n(n-1))/2)\nb) 2^((n(n+1))/2)\nc) 2^(((n-1)^2)/2)\nd) 2^((n*n)/2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The maximum number of edges in a DAG (Directed Acyclic Graph) with n vertices is (n(n-1))/2. For n=7, max is 21.",
        "target_text": "Question: What is the maximum number of edges in a simple directed acyclic graph with 7 vertices?\nChoices:\na) 21\nb) 7\nc) 6\nd) 49\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operator precedence and associativity determine the evaluation order in expressions. According to the rules, multiplication/division have higher precedence than addition/subtraction, unless otherwise stated.",
        "target_text": "Question: Assume +, -, *, / are usual arithmetic operators. + has highest precedence and is right-associative, others are left-associative. What is the output of the expression 23 * 3 - 6 + 11 - 2 * 8 / 4?\nChoices:\na) 110\nb) 100\nc) 130\nd) 120\nAnswer: 110"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black Trees are balanced binary search trees commonly used to maintain the structure of auxiliary trees in complex tree operations.",
        "target_text": "Question: Which special balanced binary search tree is used to store the nodes of an auxiliary tree?\nChoices:\na) Red - Black Tree\nb) Red - Brown Tree\nc) Red - Yellow Tree\nd) Red - Tango Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sparse array is one in which most of the elements share the same value, commonly zero. This allows for memory-efficient storage techniques.",
        "target_text": "Question: What is a sparse array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) An array in which memory is allocated at run time\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A stack is empty when the top pointer equals -1. This check is commonly used in stack underflow condition detection.",
        "target_text": "Question: What does the following function check for?\nif (s->top == -1)\n    return 1;\nelse\n    return 0;\nChoices:\na) Full stack\nb) Invalid index\nc) Empty stack\nd) Infinite stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A d-heap is a generalization of a binary heap where each node can have up to d children. As d increases, the tree becomes shallower.",
        "target_text": "Question: d-heap is shallower than a binary heap.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In postfix expressions (Reverse Polish notation), operators appear after their operands. This form does not require parentheses for disambiguation.",
        "target_text": "Question: What type of expression places the operator after its operands?\nChoices:\na) Infix Expression\nb) Prefix Expression\nc) Postfix Expression\nd) Both Prefix and Postfix Expressions\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Stack underflow refers to attempting a pop operation on an empty stack, which is an illegal memory access.",
        "target_text": "Question: What does 'stack underflow' refer to?\nChoices:\na) Accessing an item from an undefined stack\nb) Adding items to a full stack\nc) Removing items from an empty stack\nd) Index out of bounds exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Before deleting from a linked queue, underflow is checked to ensure that there are elements present in the structure.",
        "target_text": "Question: What essential condition must be checked before deleting from a linked queue?\nChoices:\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary search tree can be uniquely reconstructed using its inorder and one other traversal (either preorder or postorder).",
        "target_text": "Question: Given preorder = [15, 10, 12, 11, 20, 18, 16, 19], what is the postorder traversal?\nChoices:\na) 10, 11, 12, 15, 16, 18, 19, 20\nb) 11, 12, 10, 16, 19, 18, 20, 15\nc) 20, 19, 18, 16, 15, 12, 11, 10\nd) 19, 16, 18, 20, 11, 12, 10, 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Binary trees allow insertions in different ways--leftmost, rightmost, or random--depending on whether it is a full, complete, or general binary tree.",
        "target_text": "Question: How many types of insertion can be performed in a binary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Horner's method allows evaluating a polynomial with minimum number of multiplications and additions. For degree 3, 3 multiplications and 3 additions are required.",
        "target_text": "Question: What is the minimum number of multiplications and additions required to evaluate the polynomial P = 4x^3 + 3x^2 - 15x + 45?\nChoices:\na) 6 & 3\nb) 4 & 2\nc) 3 & 3\nd) 8 & 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack is not used for asynchronous data transfer. It is used in expression evaluation, runtime variable tracking, and compiler design.",
        "target_text": "Question: Which of the following is not an application of a stack?\nChoices:\na) Data transfer between two asynchronous processes\nb) Compiler syntax analyzer\nc) Tracking local variables at runtime\nd) Parentheses balancing program\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: The multiplication method for hashing consists of two steps: multiplying the key and taking the fractional part, followed by multiplying with table size.",
        "target_text": "Question: How many steps are involved in creating a hash function using the multiplication method?\nChoices:\na) 1\nb) 4\nc) 3\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In infix to postfix conversion, parentheses are not ignored. They play a key role in operator precedence and must be processed correctly.",
        "target_text": "Question: Parentheses are simply ignored in infix to postfix conversion.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A treap is a randomized binary search tree that also satisfies the heap property based on priorities.",
        "target_text": "Question: A treap is a combination of a tree and a heap.\nChoices:\na) False\nb) True\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Leftist heaps maintain both the heap order property and the leftist property, supporting three key structural constraints.",
        "target_text": "Question: How many properties does a leftist heap support?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Binary trees with height h can perform operations in O(log n) time due to their balanced structure.",
        "target_text": "Question: What is the time complexity for operations in a balanced binary tree?\nChoices:\na) O(n^0.5)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Java uses row-major order for multidimensional arrays. The syntax for declaring a 2D array is `int[][] arr;`.",
        "target_text": "Question: Which of the following is the correct way to declare a multidimensional array in Java?\nChoices:\na) int[] arr;\nb) int arr[[]];\nc) int[][] arr;\nd) int[[]] arr;\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: AA-trees are balanced binary search trees that use skew and split operations to maintain balance.",
        "target_text": "Question: What are the two different operations done in an AA-Tree?\nChoices:\na) shift and color\nb) skew and split\nc) zig and zag\nd) enqueue and dequeue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A monotonic deque maintains elements in a strictly increasing or decreasing order and is used in sliding window problems.",
        "target_text": "Question: The deque which stores elements in strictly increasing or strictly decreasing order is called __________.\nChoices:\na) Priority Queue\nb) Double-ended Queue\nc) Monotonic Deque\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In union-find structures, the number of nodes of rank r is at most N / 2^r.",
        "target_text": "Question: What is the number of nodes of rank r in a union-find data structure?\nChoices:\na) N\nb) N/2\nc) N/2^r\nd) Nr\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a linked list, each node must contain a pointer to the next node (and possibly previous), along with data.",
        "target_text": "Question: In a linked list, each node contains at least two fields. One is data. What is the other?\nChoices:\na) Pointer to character\nb) Pointer to integer\nc) Pointer to node\nd) Node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Pruning is used to reduce search space by eliminating paths that won't lead to a solution, often in decision trees or game trees.",
        "target_text": "Question: Reducing search space by eliminating irrelevant trees is known as?\nChoices:\na) pruning\nb) partial results\nc) freeing space\nd) traversing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Postorder traversal follows left -> right -> root. Given a preorder sequence, the unique BST's postorder traversal can be computed.",
        "target_text": "Question: Given preorder traversal: 30, 20, 10, 15, 25, 23, 39, 35, 42. What is the postorder traversal?\nChoices:\na) 10, 20, 15, 23, 25, 35, 42, 39, 30\nb) 15, 10, 25, 23, 20, 42, 35, 39, 30\nc) 15, 20, 10, 23, 25, 42, 35, 39, 30\nd) 15, 10, 23, 25, 20, 35, 42, 39, 30\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: The array q[] represents the queue. q[0] typically refers to the front of the queue in simple implementations.",
        "target_text": "Question: In a basic array implementation of a queue, which index is typically used for the front?\nChoices:\na) q[0]\nb) q[1]\nc) q[9]\nd) q[10]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A heap must be a complete binary tree and must follow the heap property--either max-heap or min-heap ordering.",
        "target_text": "Question: What is the necessary condition for a tree to be a heap?\nChoices:\na) Only complete tree\nb) Only heap property\nc) Complete tree and heap property\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Recursion typically uses a stack for call management. Non-recursive versions explicitly simulate this with a stack.",
        "target_text": "Question: What data structure is commonly used in non-recursive implementations of recursive algorithms?\nChoices:\na) Linked List\nb) Stack\nc) Queue\nd) Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Using arrays for tree storage requires knowing the maximum number of nodes beforehand, which reduces flexibility.",
        "target_text": "Question: What is a disadvantage of implementing a tree using arrays?\nChoices:\na) Difficult to access children\nb) Difficult to find parent\nc) Maximum nodes must be known in advance\nd) Hard to implement\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a full binary tree, the total number of nodes is given by 2L - 1, where L is the number of leaves.",
        "target_text": "Question: In a full binary tree with L leaves, what is the total number of nodes N?\nChoices:\na) 2*L\nb) L + 1\nc) L - 1\nd) 2*L - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In graphs where all edges have equal weight, BFS finds the shortest path in linear time as it explores layer by layer.",
        "target_text": "Question: Given a directed graph with equal-weight edges, which algorithm efficiently finds the shortest path from source to destination?\nChoices:\na) Breadth First Traversal\nb) Dijkstra's Algorithm\nc) Neither BFS nor Dijkstra's\nd) Depth First Search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Bit arrays store boolean values compactly, while bit fields are used to access or manipulate individual bits within a data structure. They are related but not the same.",
        "target_text": "Question: Bit fields and Bit arrays are the same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Singly linked lists require less memory than doubly linked lists due to having only one pointer per node, making them more space-efficient for chaining.",
        "target_text": "Question: What is the advantage of using a singly linked list over a doubly linked list for chaining in hash tables?\nChoices:\na) It takes less memory\nb) It causes more collisions\nc) It makes the process of insertion and deletion faster\nd) It causes fewer collisions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Preorder and inorder traversals can be used to reconstruct a binary tree. Using the given sequences, one can derive the corresponding postorder.",
        "target_text": "Question: The preorder and inorder traversals of a binary tree are T M L N P O Q and L M N T O P Q. What is the postorder traversal?\nChoices:\na) L N M O Q P T\nb) N M O P O L T\nc) L M N O P Q T\nd) O P L M N Q T\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In double hashing, the probe function is of the form `(h1(k) + i * h2(k)) mod m` where i is the probe count. This avoids clustering better than linear probing.",
        "target_text": "Question: What is the hash function used in Double Hashing?\nChoices:\na) (h1(k) - i*h2(k)) mod m\nb) h1(k) + h2(k)\nc) (h1(k) + i*h2(k)) mod m\nd) (h1(k) + h2(k)) mod m\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: When converting infix to postfix, the position of operators and parentheses must be considered based on precedence and associativity.",
        "target_text": "Question: Convert the following infix expression to postfix: (A + B ∧ D)/(E - F) + G\nChoices:\na) A B D ∧ + E F - / G +\nb) A B D + ∧ E F - / G +\nc) A B D ∧ + E F - / - G +\nd) A B D E F + ∧ / - G +\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AVL trees maintain a stricter balance than Red-Black trees by ensuring that the balance factor of every node is -1, 0, or 1.",
        "target_text": "Question: AVL trees are more balanced than Red-black trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Accessing elements from the start is O(1) in a singly linked list, while accessing from the end requires traversal, which takes O(n) time.",
        "target_text": "Question: What are the time complexities of finding the 8th element from the beginning and from the end in a singly linked list (n > 8)?\nChoices:\na) O(1) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(n) and O(n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue follows the First-In-First-Out (FIFO) principle, so elements are removed in the same order they are added.",
        "target_text": "Question: If elements 'A', 'B', 'C', and 'D' are placed in a queue, in what order are they removed?\nChoices:\na) ABCD\nb) DCBA\nc) DCAB\nd) ABDC\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix tree is a compressed trie that represents all the suffixes of a string. An alternative structure called a PAT Tree (Practical Algorithm to Retrieve Information Coded in Alphanumeric) is also used to represent suffixes efficiently.",
        "target_text": "Question: What is the other name for Suffix Tree?\nChoices:\na) Array\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The height of a node in a tree is the number of edges on the longest downward path between that node and a leaf. This measurement helps analyze the efficiency of operations like search and insert.",
        "target_text": "Question: The number of edges from the node to the deepest leaf is called __________ of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In a Binary Search Tree (BST), the in-order predecessor of a node is the maximum value node in its left subtree. This node will not have a right child.",
        "target_text": "Question: If a node in a BST has two children, then its in-order predecessor has __________.\nChoices:\na) no left child\nb) no right child\nc) two children\nd) no child\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The in-order traversal of a BST gives nodes in sorted order. To identify a valid BST from a given traversal, the property that for any node, left < root < right, must hold True.",
        "target_text": "Question: A Binary Search Tree (BST) stores values in the range 37 to 573. Consider the following sequence of keys:\nI. 81, 537, 102, 439, 285, 376, 305\nII. 52, 97, 121, 195, 242, 381, 472\nIII. 142, 248, 520, 386, 345, 270, 307\nIV. 550, 149, 507, 395, 463, 402, 270\nWhich of the following statements is TRUE?\nChoices:\na) I, II and IV are inorder sequences of three different BSTs\nb) I is a preorder sequence of some BST with 439 as the root\nc) II is an inorder sequence of some BST where 121 is the root and 52 is a leaf\nd) IV is a postorder sequence of some BST with 149 as the root\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A binary heap is a complete binary tree. Its inorder traversal does not guarantee sorted order. This is in contrast with a BST.",
        "target_text": "Question: Does there exist a heap with seven distinct elements so that the Inorder traversal gives the elements in sorted order?\nChoices:\na) Yes\nb) No\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Matrix representations are commonly used in graph theory, image processing, and solving linear equations, but not in sorting operations.",
        "target_text": "Question: Which of the following don't use matrices?\nChoices:\na) In solving linear equations\nb) Image processing\nc) Graph theory\nd) Sorting numbers\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The recursive function shown checks whether the elements in a singly linked list are in non-decreasing order by comparing each node with its next.",
        "target_text": "Question: Consider the function f defined below:\n#include <iostream>\nstruct item {\n int data;\n struct item *next;\n};\nint f(struct item *p) {\n return ((p == NULL) || (p->next == NULL) || ((p->data <= p->next->data) && f(p->next)));\n}\nWhat does this function check?\nChoices:\na) Not all elements have the same data value\nb) Elements are sorted in non-decreasing order\nc) Elements are sorted in non-increasing order\nd) None of them\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a Directed Acyclic Graph (DAG), a sink vertex has no outgoing edges. Every DAG must have at least one sink vertex.",
        "target_text": "Question: Every Directed Acyclic Graph has at least one sink vertex.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Interpolation search works effectively only when elements are uniformly distributed in a sorted dataset, as it estimates the position based on value range.",
        "target_text": "Question: Interpolation search is an improved variant of binary search. What is necessary for this algorithm to work?\nChoices:\na) Data collection should be in sorted form and equally distributed\nb) Data collection should be sorted but not equally distributed\nc) Data collection should be equally distributed but not sorted\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a Binary Search Tree (BST), the left child node always contains a value less than its parent node, and the right child node always contains a value greater. Additionally, in-order traversal yields values in increasing order.",
        "target_text": "Question: Which of the following is False about a binary search tree?\nChoices:\na) The left child is always lesser than its parent\nb) The right child is always greater than its parent\nc) The left and right sub-trees should also be binary search trees\nd) In order sequence gives decreasing order of elements\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a ternary heap (a heap where each node has three children), the tree is typically maintained in an array representation and leaves are filled from left to right to preserve the complete tree property.",
        "target_text": "Question: Should leaves in ternary heap be distributed from left to right.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In weight-balanced trees, each internal node stores a size value equal to the combined sizes of its children. Leaf nodes are considered to have a size of zero.",
        "target_text": "Question: The size value of various nodes in a weight balanced tree are\nleaf - zero\ninternal node - size of it's two children\nis this True?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: While min-heaps can be used for heap sort, they are not typically used for selection sort, which operates by finding the minimum element repeatedly without using a heap.",
        "target_text": "Question: Min heap can be used to implement selection sort.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Ternary heaps are stored using arrays where the children of node i are located at 3i + 1, 3i + 2, and 3i + 3. This array-based representation allows efficient access to parent and children.",
        "target_text": "Question: Which type of data structure is a ternary heap?\nChoices:\na) Array\nb) Hash\nc) Priority Queue\nd) Priority Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: A self-organizing list adjusts its structure based on access patterns, reducing average access time. Frequently accessed elements are moved closer to the front.",
        "target_text": "Question: The self organizing list improves __________\nChoices:\na) average access time\nb) insertion\nc) deletion\nd) binary search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Skew heaps are a form of self-adjusting binary heap that rely on a simple merging procedure, unlike leftist heaps that maintain additional structure.",
        "target_text": "Question: __________ is a self-adjusting version of a leftist heap.\nChoices:\na) Rightist heap\nb) Skew heap\nc) d-heap\nd) Binary heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a d-heap, each node has d children. Secondary operations such as sift-up and sift-down depend on the value of d, affecting the heap's structure.",
        "target_text": "Question: How many secondary operations are performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The adjacency matrix of a graph can be used to count the number of paths of a given length. The square of the adjacency matrix gives the number of paths of length 2 between vertices.",
        "target_text": "Question: Given an adjacency matrix A = [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ], The total no. of ways in which every vertex can walk to itself using 2 edges is __________\nChoices:\na) 2\nb) 4\nc) 6\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The load factor is a measure used in hash tables to determine how full the table is. It is commonly denoted by the Greek letter λ (lambda) or sometimes β.",
        "target_text": "Question: What is the correct notation for a load factor?\nChoices:\na) Ω\nb) ∞\nc) Σ\nd) λ\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A hash function maps input data to a fixed index in an array. This index determines where the data should be stored in a hash table for fast retrieval.",
        "target_text": "Question: What is the use of a hash function?\nChoices:\na) to calculate and return the index of corresponding data\nb) to store data\nc) to erase data\nd) to change data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black Trees are balanced binary search trees that ensure logarithmic height. A perfect Red-Black Tree may have all black nodes if all nodes satisfy the tree's coloring rules.",
        "target_text": "Question: Is the following statement valid? A Red-Black Tree which is also a perfect Binary Tree can have all black nodes\nChoices:\na) Yes\nb) No\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B+ tree is a balanced tree data structure used in databases. The degree of a node determines how many children it can have and is influenced by block size and pointer size.",
        "target_text": "Question: A B+ -tree index is to be built on the Name attribute of the relation STUDENT. Assume that all student names are of length 8 bytes, disk block are size 512 bytes, and index pointers are of size 4 bytes. Given this scenario, what would be the best choice of the degree (i.e. the number of pointers per node) of the B+ -tree?\nChoices:\na) 16\nb) 42\nc) 43\nd) 44\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A heap is a special tree-based data structure that satisfies the heap property. In a max-heap, each parent node is greater than or equal to its children, while in a min-heap, each parent is less than or equal to its children. A leftist heap is a variant of a binary heap that is implemented as a binary tree and is optimized for efficient merging of two heaps. It maintains a special property called the null path length (npl), ensuring that the right child of any node has the shortest npl.",
        "target_text": "Question: A leftist heap is also said to be a binary heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. It is commonly used in parsing expressions, managing function calls, and checking for balanced symbols like parentheses, braces, and brackets. When validating balanced expressions, opening symbols are pushed onto the stack, and when a corresponding closing symbol is encountered, the stack is popped to check for a match.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) push it on to the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a non-linear hierarchical data structure widely used to represent relationships between elements. Specialized trees like suffix trees are used in string processing tasks. A suffix tree is a compressed trie of all the suffixes of a given string and is commonly used in applications such as text editors, search engines, and bioinformatics for pattern matching and substring queries.",
        "target_text": "Question: Can suffix tree be used in string problems occurring in a text editor?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Graphs are generalizations of tree structures that may include cycles and weights on edges. In a weighted graph, the shortest path from a source to a destination may not be unique unless additional constraints apply. For example, if all edge weights are unique, there may still be multiple paths of equal total weight due to different combinations of edges. Hence, uniqueness of edge weights does not guarantee a unique shortest path.",
        "target_text": "Question: Is the following statement valid?\nGiven a weighted graph where weights of all edges are unique (no two edges have the same weights), there is always a unique shortest path from a source to destination in such a graph.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a dynamic data structure consisting of nodes that contain data and a pointer to the next node. In compiler design, the syntax analysis phase (also called parsing) uses data structures to represent the syntactic structure of code. Although trees (especially abstract syntax trees) are common, linked lists are also used internally to manage tokens and other dynamic sequences of elements during parsing.",
        "target_text": "Question: Which data structure is used in the syntax analysis phase of the compiler?\nChoices:\na) Tree\nb) Stack\nc) Linked List\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An array is a linear data structure that stores elements in contiguous memory locations. Inversions in an array are pairs of elements that are out of their natural order (i.e., a pair (i, j) such that i < j and arr[i] > arr[j]). A completely sorted array has zero such inversions.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are used in many algorithmic applications including number system conversions. To convert a decimal number to binary, repeated division by 2 is performed, and the remainders are stored in an array. The binary representation is obtained by reading the remainders in reverse order.",
        "target_text": "Question: Which of the following code snippet is used to convert decimal to binary numbers?\nChoices:\na) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[index++] = num%2;\n num = num/2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nb) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[++index] = num%2;\n num = num/2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nc) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[index++] = num/2;\n num = num%2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nd)\npublic void convertBinary(int num)\n {\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[++index] = num/2;\n num = num%2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n }\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a LIFO (Last-In-First-Out) data structure used in various applications including function call management in programming languages. Recursion, which involves a function calling itself, uses the call stack to keep track of active function calls. Each recursive call consumes stack space, making recursion more memory-intensive than iteration.",
        "target_text": "Question: Recursion uses more memory space than iteration because __________\nChoices:\na) it uses stack instead of queue.\nb) every recursive call has to be stored.\nc) both A & B are True.\nd) None of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms are used to reorder elements in a list based on comparison criteria. Merging two sorted arrays is a common subroutine in merge sort and takes linear time proportional to the sum of the sizes of the arrays. If two sorted lists of sizes m and n are merged, it takes O(m + n) time to combine them into one sorted list.",
        "target_text": "Question: Time required to merge two sorted lists of size m and n, is __________\nChoices:\na) O(m | n)\nb) O(m + n)\nc) O(m log n)\nd) O(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure consisting of nodes, where each node contains data and a reference (or pointer) to the next node in the sequence. It enables efficient insertion and deletion of elements and is widely used in dynamic memory management.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of pointer is called?\nChoices:\na) Linked list\nb) Node list\nc) Primitive list\nd) Unordered list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A complete undirected graph with n vertices contains n(n-1)/2 edges. A spanning tree of a graph connects all vertices with exactly (n-1) edges and no cycles. In a weighted graph, a minimum spanning tree (MST) is a tree with the lowest possible sum of edge weights. The maximum possible weight of an MST occurs when the (n-1) smallest edges are chosen.",
        "target_text": "Question: Let G be a complete undirected graph on 4 vertices, having 6 edges with weights being 1, 2, 3, 4, 5, and 6. The maximum possible weight that a minimum weight spanning tree of G can have is:\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: During the compilation of a program, symbol tables are used to store information about variables, functions, objects, etc. Efficient implementations of symbol tables often use self-organizing lists, which adjust dynamically based on access patterns to reduce average lookup time.",
        "target_text": "Question: Symbol tables during compilation of program is efficiently implemented using __________\nChoices:\na) a singly linked list\nb) a doubly linked list\nc) a self organizing list\nd) an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms are used to reorder elements in a list based on comparison criteria. Merging two sorted arrays is a common subroutine in merge sort and takes linear time proportional to the sum of the sizes of the arrays. If two sorted lists of sizes m and n are merged, it takes O(m + n) time to combine them into one sorted list.",
        "target_text": "Question: Time required to merge two sorted lists of size m and n, is __________\nChoices:\na) O(m | n)\nb) O(m + n)\nc) O(m log n)\nd) O(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash tree, also known as a Merkle tree, is a tree in which each leaf node contains a hash of a data block, and each non-leaf node contains a hash of its child nodes. It is widely used in blockchain and distributed systems to verify data integrity efficiently.",
        "target_text": "Question: Hash tree is also known as __________\nChoices:\na) Merkle tree\nb) T-tree\nc) Hash table\nd) Bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A memory-efficient doubly linked list can be implemented using XOR (exclusive OR) of previous and next node addresses. This technique, known as XOR linked list, saves space by storing a single pointer per node that encodes both previous and next pointers using bitwise XOR.",
        "target_text": "Question: How do you calculate the pointer difference in a memory-efficient doubly linked list?\nChoices:\na) head xor tail\nb) pointer to previous node xor pointer to next node\nc) pointer to previous node - pointer to next node\nd) pointer to next node - pointer to previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In postfix expression evaluation (Reverse Polish Notation), operands are pushed onto the stack. When an operator is encountered, the last two operands are popped, the operation is applied, and the result is pushed back onto the stack. This method is commonly used in compilers and calculators.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) Push it directly onto the stack\nb) Pop 2 operands, evaluate them, and push the result onto the stack\nc) Pop the entire stack\nd) Ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A weight-balanced tree is a type of balanced binary tree in which the weight (often measured by the number of nodes or size of subtrees) of left and right subtrees at each node maintains a specific proportion. This is governed by a balance factor 'a', ensuring the tree remains efficiently balanced for operations like insertions and deletions.",
        "target_text": "Question: What is the condition for a tree to be weight-balanced, where a is a factor and n is a node?\nChoices:\na) weight[n.left] >= aweight[n] and weight[n.right] >= aweight[n]\nb) weight[n.left] >= aweight[n.right] and weight[n.right] >= aweight[n]\nc) weight[n.left] >= aweight[n.left] and weight[n.right] >= aweight[n]\nd) weight[n] is a non-zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are fixed-size data structures that allow direct access to elements using indices. However, they have some limitations, such as fixed size and inefficient insertions or deletions at arbitrary positions. Random access, on the other hand, is a major advantage as it allows constant-time retrieval.",
        "target_text": "Question: Which of the following is not a disadvantage to the usage of array?\nChoices:\na) Fixed size\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Insertion based on position\nd) Accessing elements at specified positions\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing, a collision occurs when two different keys are mapped to the same hash value or index in a hash table. Collisions are inherent in hash functions and are typically handled through techniques like chaining or open addressing.",
        "target_text": "Question: Collision is caused due to the presence of two keys having the same value.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A min heap is a complete binary tree where the value of each node is less than or equal to the values of its children. This ensures that the smallest element is always at the root, and such trees are used in priority queues and efficient sorting algorithms.",
        "target_text": "Question: Min heap is a complete binary tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A treap is a data structure that combines properties of binary search trees and heaps. It is also called a randomized binary search tree. Each node has a key (for BST property) and a randomly assigned priority (for heap property). The structure maintains both properties simultaneously.",
        "target_text": "Question: A treap is a cartesian tree with __________\nChoices:\na) additional value, which is a priority value to the key generated randomly\nb) additional value, which is a priority value to the key generated sequentially\nc) additional heap rule\nd) additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a FIFO (First-In-First-Out) data structure. When implemented using recursion, elements can be removed from the front and reinserted at the rear to reverse the order of elements. This technique can be used to reverse a queue using recursion.",
        "target_text": "Question: Suppose you are given an implementation of a queue of integers.\nConsider the following function:\nvoid f(queue<int> &Q) {\n int i;\n if (!Q.empty()) {\n i = Q.front();\n Q.pop();\n f(Q);\n Q.push(i);\n }\n}\nChoices:\na) Leaves the queue Q unchanged\nb) Reverses the order of the elements in the queue Q\nc) Deletes the element at the front of the queue Q and inserts it at the rear keeping the other elements in the same order\nd) Empties the queue Q\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary tree, internal nodes are nodes that have at least one child. A node of degree 1 has only one child, and a node of degree 2 has two children. The number of leaf nodes in a binary tree can be derived from the structure using various tree properties and formulas.",
        "target_text": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is:\nChoices:\na) 10\nb) 11\nc) 12\nd) 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays in C++ are fixed-size containers for storing sequential elements. Recursive functions can manipulate arrays by modifying their elements. A classic problem is to reverse an array using recursion, where the function swaps elements from both ends and recurses toward the center.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{ \n if (left >= right) \n return; \n int temp = arr[left]; \n arr[left] = arr[right]; \n arr[right] = temp; \n func(arr, left + 1, right - 1); \n} \nvoid printArray(int arr[], int size) \n{ \n for (int i = 0; i < size; i++) \n cout << arr[i] << ""; \n} \nint main() \n{ \n int arr[] = {1,2,3,4}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) 1 2 3 4\nb) 4 3 2 1\nc) 1 4 2 3\nd) 4 1 2 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix (Reverse Polish) expressions are evaluated using a stack. Operands are pushed onto the stack, and when an operator is encountered, the appropriate number of operands are popped, the operation is applied, and the result is pushed back. In the expression abcd+, values are substituted and operations follow the postfix order.",
        "target_text": "Question: What is the result of the following postfix expression?\nabcd+ where a=2, b=2, c=3, d=4.\nChoices:\na) 16\nb) 12\nc) 14\nd) 10\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In graph theory, a multigraph allows multiple edges between the same set of vertices. When such graphs also allow self-loops--edges that connect a vertex to itself--they are referred to as pseudographs. These structures are useful in modeling certain real-world networks and edge-weighted systems.",
        "target_text": "Question: MultiGraphs having self-loops are called PseudoGraphs?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Recursive functions are functions that call themselves with modified parameters. The function in the question calculates the factorial of a number. The factorial of a number n (denoted as n!) is the product of all positive integers less than or equal to n.",
        "target_text": "Question: What value does function mystery return when called with a value of 4?\nint mystery ( int number ) {\n if ( number <= 1 )\n return 1;\n else\n return number * mystery( number - 1 );\n}\nChoices:\na) 0\nb) 1\nc) 4\nd) 24\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In dynamic programming and combinatorics, reaching the end of an array can be modeled by counting the number of valid jumps from each position based on allowed step values. This type of problem appears in variants of the staircase or jump game problems.",
        "target_text": "Question: In how many different ways can we reach the end of the array arr[]={1,3,5,8,9}?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Reversing an array involves swapping elements from the two ends toward the center. The number of swaps required is floor(n/2) for an array of length n. If n is odd, the middle element doesn't require a swap.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1)/2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-trees are a form of balanced binary search tree that simplify the balancing logic of red-black trees. Though they perform fewer types of rotations (only right and left skew), they may require more frequent rotations to maintain balance, particularly in worst-case insertion sequences.",
        "target_text": "Question: AA-Trees make more rotations than a red-black tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Reversing an array inverts the order of its elements, while rotation shifts the elements cyclically. The output of reversal and rotation differs in most cases, as they are fundamentally different operations. Therefore, applying both will not consistently produce the same result.",
        "target_text": "Question: When array reversal and rotation are applied to the same array, the output produced will also be the same every time.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a complete binary tree, every level is completely filled except possibly the last. A full binary tree with n leaf nodes contains 2n - 1 total nodes, based on the structural properties of binary trees.",
        "target_text": "Question: A full binary tree with n leaf nodes contains how many total nodes?\nChoices:\na) n nodes\nb) log 2 n nodes\nc) 2n -1 node\nd) 2 n nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A hash tree, also known as a Merkle tree, is used in blockchain systems and digital currencies like Bitcoin and Ethereum to efficiently and securely verify the integrity of large datasets. Each non-leaf node is a hash of its child nodes, enabling quick and tamper-evident verification.",
        "target_text": "Question: Where is the hash tree used?\nChoices:\na) in digital currency\nb) in sorting of large data\nc) for indexing in databases\nd) in encryption of data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A skew heap is a variant of a binary heap that is self-adjusting, with no structural constraints like leftist heaps. This makes the relationship between skew heaps and leftist heaps similar to that between splay trees (self-adjusting) and AVL trees (strictly balanced).",
        "target_text": "Question: The relationship of skew heaps to leftist heaps is analogous to that of?\nChoices:\na) Splay tree and AVL tree\nb) Red black tree and AVL tree\nc) Binary tree and Splay tree\nd) Binary tree and Red black tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A balanced binary tree ensures that the height of the tree remains logarithmic with respect to the number of elements. This allows for efficient search, insertion, and deletion operations, all of which run in O(log n) worst-case time.",
        "target_text": "Question: A balanced binary tree with n items allows the lookup of an item in __________ worst-case time.\nChoices:\na) O(log n)\nb) O(nlog 2)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In C, arrays can be initialized during declaration using curly braces and a comma-separated list of values. The correct syntax for initializing an array of three integers is int arr[3] = {1, 2, 3};.",
        "target_text": "Question: How do you initialize an array in C?\nChoices:\na) int arr[3] = (1,2,3);\nb) int arr(3) = {1,2,3};\nc) int arr[3] = {1,2,3};\nd) int arr(3) = (1,2,3);\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A simple connected graph with n vertices and n edges forms a single cycle. The number of different spanning trees in such a graph depends on how many edges can be removed without disconnecting the graph. It can be shown that such a graph has at least 3 spanning trees.",
        "target_text": "Question: What is the largest integer m such that every simple connected graph with n vertices and n edges contains at least m different spanning trees?\nChoices:\na) 1\nb) 2\nc) 3\nd) n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing is a collision resolution technique in open addressing where the next index is computed as (hash + f(i)) mod table_size, where f(i) = i. So the probing function is linear, and the hash function used is typically H(x) = (key + i) % table_size.",
        "target_text": "Question: What is the hash function used in linear probing?\nChoices:\na) H(x)= key mod table size\nb) H(x)= (key+ F(i2)) mod table size\nc) H(x)= (key+ F(i)) mod table size\nd) H(x)= X mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An inversion in an array is a pair of indices (i, j) such that i < j and A[i] > A[j]. The expected number of inversions in a randomly ordered array of n distinct elements is n(n-1)/4, which is half of the worst-case (reversed array) count.",
        "target_text": "Question: Let A[1...n] be an array of n distinct numbers. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. What is the expected number of inversions in any permutation on n elements?\nChoices:\na) n(n-1)/2\nb) n(n-1)/4\nc) n(n+1)/4\nd) 2n[logn]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A skew heap is a form of self-adjusting heap that does not impose any structural constraints like leftist heaps. Swapping during merge operations is done unconditionally, without maintaining specific balance factors, hence no fixed constraints are required.",
        "target_text": "Question: In skew heaps, certain constraints are to be met in order to perform swapping.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: When finding both the smallest and largest elements in an array, a more efficient approach than scanning twice can be used. By comparing elements in pairs, the number of comparisons can be reduced. The optimal method requires about n + (n/2 - 1) comparisons.",
        "target_text": "Question: The total comparisons in finding both smallest and largest elements are:\nChoices:\na) 2*n + 2\nb) n + ((n+1)/2) - 2\nc) n + logn\nd) n^2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tree traversals define the order in which nodes are visited. In postorder traversal, the left subtree is visited first, then the right subtree, and finally the node itself. This is often used in deleting trees or evaluating postfix expressions.",
        "target_text": "Question: What does the following piece of code do?\npublic void func(Tree root)\n{\n func(root.left());\n func(root.right());\n System.out.println(root.data());\n}\nChoices:\na) Preorder traversal\nb) Inorder traversal\nc) Postorder traversal\nd) Level order traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A plane graph is a graph drawn on a plane without any edge crossings. Euler's formula states that for any connected plane graph, V - E + R = 2. If a plane graph has multiple connected components, the formula generalizes to V - E + R = C + 1, where C is the number of components.",
        "target_text": "Question: Given a plane graph, G having 2 connected components, 6 vertices, 7 edges and 4 regions, what will be the number of connected components?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The given C++ program performs a depth-first traversal (DFS) on a graph represented by an adjacency matrix. Starting from vertex 0, it recursively visits all unvisited neighbors. The output corresponds to the order in which the DFS visits the vertices based on the adjacency matrix.",
        "target_text": "Question: What would be the output of the following C++ program if the given input is\n0 0 0 1 1\n0 0 0 0 1\n0 0 0 1 0\n1 0 1 0 0\n1 1 0 0 0\n \n#include <bits/stdc++.h>\nusing namespace std;\nbool visited[5];\nint G[5][5];\n \nvoid fun(int i)\n{\n cout<<i<<"";\n visited[i]=true;\n for(int j=0;j<5;j++)\n if(!visited[j]&&G[i][j]==1)\n fun(j);\n}\n \nint main()\n{ \n for(int i=0;i<5;i++)\n for(int j=0;j<5;j++)\n cin>>G[i][j];\n \n for(int i=0;i<5;i++)\n visited[i]=0;\n \n fun(0);\n return 0;\n}\nChoices:\na) 0 2 3 1 4\nb) 0 3 2 4 1\nc) 0 2 3 4 1\nd) 0 3 2 1 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In an infix expression, operators are placed between operands. This is the common human-readable format for arithmetic expressions. The recursive pattern of producing left expression -> operator -> right expression characterizes infix notation.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The Rope data structure is a binary tree used to efficiently store and manipulate very long strings. In programming, a Rope is also known as a Cord. It allows for efficient concatenation and substring operations.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) cord\nb) string\nc) array\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Two balanced binary search trees with m and n elements can be merged into one balanced BST in O(m+n) time. The process typically involves converting both trees to sorted arrays, merging them, and reconstructing a balanced BST from the merged array.",
        "target_text": "Question: Two balanced binary trees are given with m and n elements respectively. They can be merged into a balanced binary search tree in __________ time.\nChoices:\na) o(m+n)\nb) o(mn)\nc) o(m)\nd) o(mlog n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of binary trees that can be formed with a given set of nodes and a specific traversal sequence depends on the properties of binary trees and Catalan numbers. For 3 nodes with a fixed postorder traversal (e.g., N, M, L), only a limited number of trees can match that sequence.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a tree in which every node has either 0 or 2 children. In such a tree, if the number of internal nodes is I, then the number of leaves (L) is always L = I + 1. This is a fundamental property derived from the structure of full binary trees.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of leaves L are?\nChoices:\na) l = 2i\nb) l = i + 1\nc) l = i - 1\nd) l = 2i - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, accessing the k-th element from the beginning can be done in O(1) time if a pointer to the head is maintained and traversed. However, finding the k-th element from the end generally requires a full traversal of the list or use of two pointers, making the time complexity O(n).",
        "target_text": "Question: What are the time complexities of finding 8th element from beginning and 8th element from end in a singly linked list? Let n be the number of nodes in linked list, you may assume that n > 8.\nChoices:\na) o(n) and o(n)\nb) o(1) and o(1)\nc) o(n) and o(1)\nd) o(1) and o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B-trees and B+ trees are used in databases and file systems to maintain sorted data and allow searches, insertions, and deletions in logarithmic time. B+ trees usually have a greater fanout than B-trees and support simpler deletion. However, B+ trees do not necessarily have greater depth than B-trees, making that statement False.",
        "target_text": "Question: Which of the following is false?\nChoices:\na) compared to b-tree, b+ -tree has larger fanout\nb) deletion in b-tree is more complicated than in b+ -tree\nc) b+ -tree has greater depth than corresponding b-tree\nd) both b-tree and b+ -tree have same search and insertion efficiencies\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-trees are a form of balanced binary search trees that simplify the balancing operations of red-black trees. The tree structure is designed to consider only two shapes when performing rotations: skew and split, which simplifies rebalancing. Thus, only 2 structural shapes need to be handled.",
        "target_text": "Question: How many different shapes does maintenance of AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A suffix tree is a specialized data structure that allows efficient operations on substrings of a string, such as pattern matching, longest repeated substring, or finding substrings in linear time. This makes it ideal for fast string operations.",
        "target_text": "Question: Which tree allows fast implementation of string operation?\nChoices:\na) rope tree\nb) suffix tree\nc) tango tree\nd) top tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Separate chaining is a method used in hashing to handle collisions by maintaining a linked list of all elements that hash to the same index. Although effective in managing collisions, this technique requires additional memory due to the use of pointers and linked lists.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining using linked lists?\nChoices:\na) it requires many pointers\nb) it requires linked lists\nc) it uses array\nd) it does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An edge cluster in graph theory typically refers to a grouping of edges that are densely connected or form a small subgraph. If an edge cluster is defined as a minimal group, it usually starts with a single edge connecting two vertices.",
        "target_text": "Question: How many edges are present in edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A Cartesian tree is a binary tree derived from a sequence of values where the in-order traversal yields the original sequence and each node follows heap property. It is not height-balanced, and if the input values are distinct, the Cartesian tree is uniquely determined.",
        "target_text": "Question: Which of the below statements are true?\ni. cartesian tree is not a height balanced tree\nii. cartesian tree of a sequence of unique numbers can be uniquely generated\nChoices:\na) both statements are true\nb) only i. is true\nc) only ii. is true\nd) both are false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In Java, the Stack class from java.util throws an EmptyStackException if a pop operation is attempted on an empty stack. This exception is a subclass of RuntimeException and is thrown at runtime.",
        "target_text": "Question: What happens when you pop from an empty stack while implementing using the stack adt in java?\nChoices:\na) undefined error\nb) compiler displays a warning\nc) emptystackexception is thrown\nd) nostackexception is thrown\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-3 tree is a balanced search tree in which every internal node has either two or three children. The height of a 2-3 tree with n elements lies between log base 3 of (n+1) and log base 2 of (n+1), ensuring logarithmic search time.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log3(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sparse array is a data structure that efficiently stores and processes arrays with a large number of zero or default values. Instead of allocating space for every element, it stores only non-zero values and their positions, making it memory-efficient compared to a naive array.",
        "target_text": "Question: What is the difference between a normal (naive) array and a sparse array?\nChoices:\na) sparse array can hold more elements than a normal array\nb) sparse array is memory efficient\nc) sparse array is dynamic\nd) a naive array is more efficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: To print the right view of a binary tree, level order traversal using a queue is used. The rightmost node at each level is printed. In the provided C++ code, the queue must be properly initialized with the root node. If not, the traversal won't begin.",
        "target_text": "Question: What is wrong in the below code of printing right view of a binary tree using the queue data structure?\n#include <iostream>\n#include <queue>\nusing namespace std;\nclass Node {\npublic:\n int data;\n Node* left;\n Node* right;\n Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\nvoid printRightView(Node* root) {\n if (root == nullptr) return;\n queue<Node*> q;\n q.push(root);\n while (!q.empty()) {\n int n = q.size();\n for (int i = 0; i < n; i++) {\n Node* x = q.front();\n q.pop();\n if (i == n - 1) {\n cout << x->data << "";\n }\n if (x->left) {\n q.push(x->left);\n }\n if (x->right) {\n q.push(x->right);\n }\n }\n }\n}\nChoices:\na) we have not initialized anything in the queue\nb) queue will never be empty.\nc) left and right nodes of the tree are null.\nd) none\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The trace of a matrix is defined as the sum of its diagonal elements from the top-left to the bottom-right. This is commonly calculated by iterating over the matrix where row and column indices are equal (i == j).",
        "target_text": "Question: What does the following piece of code do?\nfor(int i = 0; i < row; i++)\n{ \n for(int j = 0; j < column; j++)\n {\n if(i == j)\n sum = sum + (array[i][j]);\n }\n}\nSystem.out.println(sum);\nChoices:\na) normal of a matrix\nb) trace of a matrix\nc) square of a matrix\nd) transpose of a matrix\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In separate chaining hashing, collisions are resolved using linked lists. The load factor is defined as the number of elements divided by the number of buckets. A load factor of 1 is typically optimal, meaning the number of elements is equal to the number of buckets.",
        "target_text": "Question: What should be the load factor for separate chaining hashing?\nChoices:\na) 0.5\nb) 1\nc) 1.5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Rotating an array by k positions involves moving the elements such that each element shifts by k places. For example, rotating [1, 2, 3, 4, 5] by 2 positions to the left results in [3, 4, 5, 1, 2].",
        "target_text": "Question: What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?\nChoices:\na) 2, 1, 3, 4, 5\nb) 3, 4, 5, 1, 2\nc) 4, 5, 1, 2, 3\nd) 1, 2, 3, 5, 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Universal hashing is a method where the hash function is chosen at random from a family of functions. This randomization provides good average-case performance and protects against worst-case scenarios caused by poor hash function choices.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) hashing by division\nb) hashing by multiplication\nc) universal hashing\nd) open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A doubly linked list allows traversal in both forward and backward directions using two pointers per node. While more flexible, it requires extra space and pointer handling, making it more complex to implement than a singly linked list.",
        "target_text": "Question: Which of the following is false about a doubly linked list?\nChoices:\na) we can navigate in both the directions\nb) it requires more space than a singly linked list\nc) the insertion and deletion of a node take a bit longer\nd) implementing a doubly linked list is easier than singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a Directed Acyclic Graph (DAG), the shortest paths from a single source can be computed efficiently using topological sorting. Once the vertices are sorted, the shortest paths can be calculated in linear time with respect to the number of vertices and edges.",
        "target_text": "Question: Which of the following algorithms can be used to efficiently calculate single source shortest paths in a directed acyclic graph?\nChoices:\na) dijkstra\nb) bellman-ford\nc) topological sort\nd) strongly connected component\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Many recursive algorithms can be rewritten in a non-recursive way using an explicit stack. This is common when converting recursive implementations to iterative versions for better memory control or performance.",
        "target_text": "Question: What data structure would you most likely see in non-recursive implementation of a recursive algorithm?\nChoices:\na) stack\nb) linked list\nc) tree\nd) queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In the linked list implementation of a queue, the rear pointer is updated when a new node is inserted. The front pointer remains unchanged unless the queue is empty before insertion.",
        "target_text": "Question: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) only front pointer\nb) only rear pointer\nc) both front and rear pointer\nd) no pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A circular queue is a linear data structure in which the last position is connected back to the first to make a circle. It is also known as a ring buffer and is used in buffering and scheduling.",
        "target_text": "Question: Circular Queue is also known as __________\nChoices:\na) ring buffer\nb) square buffer\nc) rectangle buffer\nd) curve buffer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a Last-In-First-Out (LIFO) data structure, meaning the last element pushed onto the stack is the first one to be popped off. So if A, B, C, and D are pushed in that order, the removal order will be D, C, B, A.",
        "target_text": "Question: If the elements 'A', 'B', 'C' and 'D' are placed in a stack and are deleted one at a time, what is the order of removal?\nChoices:\na) abcd\nb) dcba\nc) dcab\nd) abdc\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In a binary search tree (BST), the left child has a value less than its parent, but in general binary trees this condition may not hold. Thus, the statement only applies to BSTs, not to all trees.",
        "target_text": "Question: Left child of parent node has value lesser than the parent node.\nChoices:\na) true\nb) false\nc) only in binary search trees\nd) only in heaps\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap, the largest key is always located at the root node because each parent must be greater than or equal to its children. This structure supports efficient maximum retrieval in constant time.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) leaf node\nb) first node of left sub tree\nc) root node\nd) first node of right sub tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Top Tree data structure is used to dynamically maintain information in trees. It relies on the divide and conquer paradigm by breaking trees into clusters and solving problems in a recursive fashion.",
        "target_text": "Question: Which algorithm is used in the top tree data structure?\nChoices:\na) divide and conquer\nb) greedy\nc) backtracking\nd) branch\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree is a binary tree in which every node has either 0 or 2 children. In such trees, the number of total nodes is given by the formula 2n - 1, where n is the number of leaves.",
        "target_text": "Question: A full binary tree with n leaves contains __________.\nChoices:\na) n nodes\nb) log n2 nodes\nc) 2n - 1 nodes\nd) 2n nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In algorithms that use stacks (e.g., expression evaluation, syntax checking), it is expected that the stack is empty at the end if all operations are properly matched. If the stack is not empty, it indicates an error such as unbalanced parentheses.",
        "target_text": "Question: An error is reported when the stack is not empty at the end.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An Inverter Graph is a type of Directed Acyclic Graph (DAG), used in applications like digital logic and dataflow modeling where the graph represents dependencies that must not form cycles.",
        "target_text": "Question: An Inverter Graph is a type of __________\nChoices:\na) multigraph\nb) cyclic graph\nc) directed acyclic graph\nd) directed acyclic word graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists are dynamic data structures ideal for situations where data sizes change frequently. They allow for efficient insertion and deletion operations, making them well-suited for structures that frequently grow and shrink.",
        "target_text": "Question: Linked lists are best suited __________\nChoices:\na) for relatively permanent collections of data.\nb) for the size of the structure and the data in the structure are constantly changing.\nc) data structure\nd) for none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In linked list implementation of a queue, available nodes are often managed using a separate free list called the AVAIL list. When inserting a new node, one is taken from this AVAIL list and linked into the queue.",
        "target_text": "Question: In case of insertion into a linked queue, a node borrowed from the __________ list is inserted in the queue.\nChoices:\na) avail\nb) front\nc) rear\nd) null\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A pseudograph is a graph that allows both multiple edges between nodes and loops (edges that connect a vertex to itself). In an adjacency matrix, loops are indicated by non-zero entries along the diagonal.",
        "target_text": "Question: Given Adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0} {0,1}}\nii) {{0,1} {1,0}}\niii) {{0,0,1} {0,1,0} {1,0,0}}\nChoices:\na) only i\nb) ii and iii\nc) i and iii\nd) i, ii, and iii\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a decision tree that sorts n elements, the height of the tree corresponds to the minimum number of comparisons needed in the worst case. Since at least n - 1 comparisons are required, the height is in Ω(n).",
        "target_text": "Question: Any decision tree that sorts n elements has height\nChoices:\na) Ω(n)\nb) Ω(log n)\nc) Ω(n log n)\nd) Ω(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a hypergraph, an edge (called a hyperedge) can connect any number of vertices. The degree of a vertex is the number of hyperedges it belongs to. The degree sequence is the list of vertex degrees sorted in non-increasing order.",
        "target_text": "Question: What is the degree sequence of the given HyperGraph, in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3,2,1,1,1,1\nb) 3,2,2,2,1,1\nc) 3,2,2,2,2,1\nd) 3,2,2,1,1,1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Topological sorting of a Directed Acyclic Graph (DAG) involves ordering its vertices such that for every directed edge u -> v, u appears before v. It can be done in linear time using Depth First Search (DFS) or Kahn's algorithm.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) cubic\nb) quadratic\nc) linear\nd) logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of distinct binary search trees (BSTs) that can be formed with n distinct keys is given by the nth Catalan number. For 4 keys, the number is C(4) = 14.",
        "target_text": "Question: How many distinct binary search trees can be created out of 4 distinct keys?\nChoices:\na) 4\nb) 14\nc) 24\nd) 42\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A priority queue is a special type of queue where each element has a priority. Elements with higher priority are dequeued before those with lower priority. Priority queues can be implemented as ascending or descending order queues depending on whether the highest or lowest value has the highest priority.",
        "target_text": "Question: Which of the following is the type of priority queue?\nChoices:\na) ascending order priority queue\nb) descending order priority queue\nc) deque\nd) both a and b\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree is a binary search tree (BST) if an in-order traversal of the tree results in a sorted (non-decreasing) sequence of values. This property helps distinguish BSTs from other binary trees.",
        "target_text": "Question: One can determine whether a binary tree is a binary search tree by traversing it in __________.\nChoices:\na) pre-order\nb) in-order\nc) post-order\nd) any of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: DNA sequence alignment is commonly solved using dynamic programming algorithms like Needleman-Wunsch or Smith-Waterman, not traditional string-matching algorithms like Rabin-Karp or KMP, which are better suited for exact matching rather than similarity-based alignment.",
        "target_text": "Question: In DNA sequence alignment, which string-matching algorithm is commonly used to identify similarities between two DNA sequences efficiently?\nChoices:\na) rabin-karp algorithm\nb) knuth-morris-pratt algorithm\nc) z function\nd) none of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays allow fast random access due to contiguous memory allocation and have better cache locality. Linked lists allow faster insertion and deletion but lack random access and generally have higher access time due to pointer traversal.",
        "target_text": "Question: Which of the following points is/are not true about linked list data structure when it is compared with an array?\nChoices:\na) arrays have better cache locality that can make them better in terms of performance\nb) it is easy to insert and delete elements in linked list\nc) random access is not allowed in a typical implementation of linked lists\nd) access of elements in linked list takes less time than compared to arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A skip list is a data structure that allows fast search within an ordered sequence of elements. It uses multiple layers of linked lists to achieve average-case logarithmic time complexity for search, insertion, and deletion operations.",
        "target_text": "Question: What is a skip list?\nChoices:\na) a linked list with size value in nodes\nb) a linked list that allows faster search within an ordered sequence\nc) a linked list that allows slower search within an ordered sequence\nd) a tree which is in the form of linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are data structures used to store multiple elements of the same type in contiguous memory. They support indexing, which makes access efficient, and are preferred when working with homogeneous data.",
        "target_text": "Question: What are the advantages of arrays?\nChoices:\na) objects of mixed data types can be stored\nb) elements in an array cannot be sorted\nc) index of first element of an array is 1\nd) easier to store elements of same data type\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), the maximum element is always found by traversing the rightmost path starting from the root, since all right children have greater values.",
        "target_text": "Question: How will you find the maximum element in a binary search tree?\nChoices:\na) \npublic void max(Tree root)\n{\n while(root.left() != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nb)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nc)\npublic void max(Tree root)\n{\n while(root.right() != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nd)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black trees and AVL trees are both self-balancing binary search trees. Red-Black trees are less rigidly balanced but require fewer rotations. AVL trees store balance factors in each node, which can increase space and time complexity for updates.",
        "target_text": "Question: Why prefer red-black trees over AVL trees?\nChoices:\na) because red-black is more rigidly balanced\nb) avl tree stores balance factor in every node which costs space\nc) avl tree fails at scale\nd) red-black is more efficient\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: If the weights of all edges in a graph are multiplied by a positive constant, the relative order of path weights remains the same. Therefore, the shortest path remains unchanged; only the total cost scales accordingly.",
        "target_text": "Question: Is the following statement valid about shortest paths? Given a graph, suppose we have calculated shortest path from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains same, only the total weight of path changes.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A graph can be drawn in many ways, with different visual representations based on layout, orientation, and position of nodes and edges. However, the structure (connectivity) remains the same. Hence, a graph does not have a unique drawing representation.",
        "target_text": "Question: All graphs have unique representation on paper.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash table is a data structure that allows efficient insertion, deletion, and search of data. It maps keys to values using a hash function and is commonly used in associative arrays and databases.",
        "target_text": "Question: Which of the following operations are done in a hash table?\nChoices:\na) Insert only\nb) Search only\nc) Insert and search\nd) Replace\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In Java, the `BitSet` class from the `java.util` package can be used to represent a bit array, where individual bits can be set, cleared, and queried efficiently.",
        "target_text": "Question: Which class in Java can be used to represent bit array?\nChoices:\na) bitset\nb) bitvector\nc) bitarray\nd) bitstream\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In formal language theory, each parse tree corresponds to a leftmost and a rightmost derivation. Therefore, the number of parse trees equals the number of leftmost and rightmost derivation trees.",
        "target_text": "Question: Which of the following is correct with respect to a parse tree for a given grammar?\nChoices:\na) n parse tree = n leftmost derivation tree = n rightmost derivation tree\nb) n parse tree = n leftmost derivation tree\nc) n parse tree = n rightmost derivation tree\nd) n parse tree = n non-terminals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A d-heap is a generalization of a binary heap where each node can have d children. Operations like insert, delete, and create can be performed efficiently. However, finding an arbitrary element (not the min/max) is not directly supported.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: A palindrome is a string that reads the same backward as forward. Examples include 'madam' and 'racecar'. This property can be checked by comparing the string with its reversed version.",
        "target_text": "Question: What is a palindromic string?\nChoices:\na) the string of length 0\nb) the string having a special character\nc) the string having an uppercase letter\nd) the string whose reversed string is equal to the original string\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Dijkstra and Bellman-Ford algorithms both compute the shortest path in weighted graphs with positive weights. Although the actual path may differ, the total weight of the shortest path from a source to a destination remains the same.",
        "target_text": "Question: Is the following statement valid?\nGiven a graph where all edges have positive weights, the shortest paths produced by Dijkstra and Bellman-Ford algorithms may be different, but the path weight would always be the same.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a doubly linked list, each node has two pointers--`prev` and `next`. When inserting a node, four pointers are typically updated: the new node's two pointers and one each from its neighboring nodes. Thus, the number of affected pointers is 4.",
        "target_text": "Question: In a doubly linked list, the number of pointers affected for an insertion operation will be:\nChoices:\na) 5\nb) 0\nc) 1\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The provided code inserts a new node at the end of a singly linked list by traversing from the head to the last node and updating the last node's `next` pointer to point to the new node.",
        "target_text": "Question: What is the functionality of the following code?\npublic void function(Node node)\n{\n if(size == 0)\n  head = node;\n else\n {\n  Node temp, cur;\n  for(cur = head; (temp = cur.getNext()) != null; cur = temp);\n  cur.setNext(node);\n }\n size++;\n}\nChoices:\na) Inserting a node at the beginning of the list\nb) Deleting a node at the beginning of the list\nc) Inserting a node at the end of the list\nd) Deleting a node at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees are a type of self-adjusting binary search tree where recently accessed elements are moved to the root. This provides better performance for sequences of non-uniform access and simplifies implementation compared to more strictly balanced trees.",
        "target_text": "Question: Why prefer splay trees?\nChoices:\na) easier to program\nb) space efficiency\nc) easier to program and faster access to recently accessed items\nd) quick searching\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a K-ary tree, the height is defined as the number of edges from the root to the deepest leaf. If the tree has only the root node, the height is 0 since there are no edges.",
        "target_text": "Question: What is the height of a K-ary tree having only a root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Transposing a matrix involves swapping elements across its diagonal, i.e., converting row elements to column elements and vice versa. The given code snippet does this by swapping A[i][j] with A[j][i] for all i < j.",
        "target_text": "Question: Let A be a matrix of size n x n. Consider the following program. What is the expected output?\nvoid fun(int A[][N])\n{\n    for (int i = 0; i < N; i++)\n        for (int j = i + 1; j < N; j++)\n            swap(A[i][j], A[j][i]);\n}\nChoices:\na) matrix a\nb) diagonal of matrix a\nc) transpose of matrix a\nd) none\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used in digital signature systems, not to encrypt or decrypt the signature directly, but to generate a fixed-size hash of the message that is encrypted with a private key. This allows verification using the corresponding public key.",
        "target_text": "Question: Hashing can be used to encrypt and decrypt digital signatures.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B-tree, the number of disk accesses required for a search operation depends on the height of the tree. The height h is logarithmic in the number of keys n with respect to the minimum degree t, giving a complexity of θ(logₜ n).",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) θ(logₙ h * t)\nb) θ(logₜ n * h)\nc) θ(logₕ n)\nd) θ(logₜ n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: A treap is a binary search tree (based on keys) that also maintains heap property based on priority. The root node always has the highest priority because it must be greater than its children with respect to heap ordering.",
        "target_text": "Question: Which node has the lowest priority in a treap?\nChoices:\na) Root node\nb) Leaf node\nc) Null node\nd) Centre node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operator precedence determines the order in which operators are evaluated in expressions. Among the given options, the bitwise NOT '~' and XOR '^' have higher precedence than arithmetic operators like '+' and '*'.",
        "target_text": "Question: Which of these operators have the highest order of precedence?\nChoices:\na) '(' and ')'\nb) '*' and '/'\nc) '~' and '^'\nd) '+' and '-'\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array is a sorted array of all suffixes of a string. If constructed using comparison-based sorting algorithms like merge sort, it will take O(n^2 log n) time due to repeated comparisons of strings of length up to n.",
        "target_text": "Question: If a comparison-based sorting algorithm is used to construct the suffix array, what will be the time required to construct the suffix array?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n^2 log n)\nd) O(n^3)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When simulating a stack using a priority queue, to ensure LIFO behavior, elements inserted later must have higher priority. This is achieved by assigning strictly decreasing keys to newer elements so that they are removed first using DELETEMIN.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K), where K is an integer key chosen by the implementation. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys chosen are in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-d tree (or kd-tree in 2 dimensions) is an extension of a binary search tree where each level alternates the key used for comparison (e.g., x and y coordinates). Insertion follows similar logic as a binary search tree.",
        "target_text": "Question: Insertion into a 2-d tree is a trivial extension of insertion into a binary search tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix expressions (also known as Polish notation) are evaluated from right to left. The expression +-9 2 7 is interpreted as: subtract 2 from 7, then add -9 to the result: -9 + (2 - 7) = -9 + (-5) = -14.",
        "target_text": "Question: Using the evaluation of prefix algorithm, evaluate +-9 2 7.\nChoices:\na) 10\nb) 4\nc) 17\nd) -14\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists differ from arrays in that they allow dynamic resizing and efficient insertions/deletions, but they lack random access. Arrays, on the other hand, offer better cache performance and allow direct element access by index.",
        "target_text": "Question: Which of the following points is/are True about Linked List data structure when it is compared with array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance.\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) The size of array has to be pre-decided, linked lists can change their size any time\ne) All of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In binomial heaps or Fibonacci heaps, merging two trees of order k results in a single tree of order k+1, which has a height increased by one due to the new root-child relationship.",
        "target_text": "Question: What is the order of the resultant heap after merging two trees of order k?\nChoices:\na) 2*k\nb) k+1\nc) k*k\nd) k+logk\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash function satisfies the simple uniform hashing condition if each key is equally likely to be hashed to any of the slots. The function h(k) = floor(km), where m is a constant and 0 < m < 1, is an example that attempts to spread keys uniformly.",
        "target_text": "Question: Which hash function satisfies the condition of simple uniform hashing?\nChoices:\na) h(k) = lowerbound(km)\nb) h(k) = upperbound(mk)\nc) h(k) = lowerbound(k)\nd) h(k) = upperbound(k)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When parsing expressions using a stack to match brackets or parentheses, failure to find a matching closing or opening bracket indicates an imbalance, which is treated as an error in the parser or compiler.",
        "target_text": "Question: When the corresponding end bracket/braces/parentheses is not found, what happens?\nChoices:\na) The stack is popped\nb) Ignore the parentheses\nc) An error is reported\nd) It is treated as an exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A good hashing function distributes keys uniformly across the hash table, avoiding clustering caused by predictable patterns. Therefore, a good hash should be independent of any patterns in the data.",
        "target_text": "Question: A good hash approach is to derive the hash value that is expected to be dependent on any patterns that might exist in the data.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The provided C++ code reverses the first `k` elements in an array if `k <= n`. It swaps the values symmetrically within the first `k` elements. For the input {1, 2, 3, 4, 5} and k = 3, it produces {3, 2, 1, 4, 5}.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) 3 2 1 4 5\nb) 5 4 3 2 1\nc) 1 2 5 4 3\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An AVL tree is a self-balancing binary search tree where the height is logarithmic in the number of nodes. The maximum height for `p` nodes is O(log p), ensuring fast search, insertion, and deletion.",
        "target_text": "Question: What is the maximum height of an AVL tree with p nodes?\nChoices:\na) p\nb) log(p)\nc) log(p)/2\nd) p/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In a normal array, all elements including nulls are counted in the size. In contrast, a sparse array efficiently stores only non-null or non-zero elements. So, the size is 6 in the normal case and 2 in the sparse representation.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10};\nWhat would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an undirected graph, an adjacency list uses O(V + E) space, where V is the number of vertices and E is the number of edges. This is more space-efficient than adjacency matrices for sparse graphs.",
        "target_text": "Question: Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is __________\nChoices:\na) O(E)\nb) O(V*V)\nc) O(E + V)\nd) O(V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: To check if an expression has balanced parentheses, a stack is used. Each time an opening symbol is encountered, it is pushed to the stack. A closing symbol pops the top element. If the stack is empty at the end, the expression is balanced.",
        "target_text": "Question: The data structure required to check whether an expression contains a balanced parenthesis is?\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A heap is a complete binary tree that satisfies the heap property. In a max-heap, the parent node is greater than or equal to its children. In a min-heap, the parent is less than or equal to its children.",
        "target_text": "Question: Heap exhibits the property of a binary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix (or Reverse Polish Notation) expressions do not require parentheses and can be evaluated from left to right using a stack, making them easier and faster for computers to process than infix expressions.",
        "target_text": "Question: It is easier for a computer to process a postfix expression than an infix expression.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A XOR linked list is a memory-efficient version of a doubly linked list where each node stores the XOR of the memory addresses of the previous and next nodes. This allows traversal in both directions using XOR operations.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) Every node stores the XOR of addresses of previous and next nodes\nb) Actual memory address of the next node\nc) Every node stores the XOR of addresses of previous and next two nodes\nd) Every node stores XOR of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In binary tree rotations, a right rotation repositions nodes to maintain balance. The given pseudocode updates pointers to rotate a node to the right, making its left child the new root of the subtree.",
        "target_text": "Question: What output does the below pseudo code produce?\nTree_node function(Tree_node x)\n{\n    Tree_node y = x.left;\n    x.left = y.right;\n    y.right = x;\n    return y;\n}\nChoices:\na) Right rotation of subtree\nb) Left rotation of subtree\nc) Zig-zag operation\nd) Zig-zig operation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix notation (Polish notation) places the operator before its operands. For the expression a | b & c, the AND operation is evaluated first, followed by OR, resulting in | a & b c -> |a&bc.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) a|&bc\nb) &|abc\nc) |a&bc\nd) ab&|c\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The van Emde Boas (vEB) tree is a tree-based data structure that supports fast predecessor/successor queries. It was invented by Peter van Emde Boas.",
        "target_text": "Question: Who invented the vEB tree, also known as the van Emde Boas Tree?\nChoices:\na) Peter Van Emde Boas\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A weak heap is a variant of the binary heap that is used in the weak heap sort algorithm. It is also known as a relaxed heap due to its weaker structural constraints compared to binary heaps.",
        "target_text": "Question: What is the other name of a weak heap?\nChoices:\na) min-heap\nb) max-heap\nc) relaxed-heap\nd) leonardo heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Common types of queues include ordinary queue (FIFO), circular queue (wrap-around structure), and priority queue (based on priority). A 'single-ended queue' is not a standard type of queue.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) Priority queue\nb) Circular queue\nc) Single-ended queue\nd) Ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In column-major order, the elements of a matrix are stored column by column in memory. For a 3*3 matrix with elements arranged as:\na b c\nd e f\ng h i\nThe order of elements in memory will be: a, d, g, b, e, h, c, f, i -> adgbehcfi.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A max-heap maintains the property that each parent node is greater than or equal to its children. Inserting 1 and then 7 into a heap that has level-order [10, 8, 5, 3, 2] results in a new structure that reorders to preserve the heap property.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. The level-order traversal of the heap after the insertion of the elements is:\nChoices:\na) 10, 8, 5, 7, 2, 1, 3\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A descending priority queue gives higher priority to larger elements. It can be efficiently implemented using a max-heap, where the largest element is always at the root and removed first.",
        "target_text": "Question: A descending priority queue can be implemented using __________\nChoices:\na) Max heap\nb) Min heap\nc) Min-max heap\nd) Trie\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A max-heap ensures that the maximum element is at the root. To build a max-heap from an array, the heapify procedure swaps elements to restore the heap property. The number of swaps required depends on how far elements are from satisfying the property.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is:\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Direct addressing is a technique where data is stored at an index equal to its key. Since it allows direct access without traversal, the search time complexity is O(1).",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing with open addressing, the probe sequence determines which slots to inspect. The sequence often depends on the key (k) and constants (e.g., in quadratic probing), but ultimately the key determines the pattern of probing.",
        "target_text": "Question: On what value does the probe sequence depend?\nChoices:\na) c1\nb) k\nc) c2\nd) m\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a min-heap, the minimum element is always at the root, so FindMin() takes O(1) time. Deleting the minimum involves replacing the root with the last element and re-heapifying, which takes O(log n).",
        "target_text": "Question: The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in a min-heap take __________\nChoices:\na) constant and linear time respectively\nb) constant and linear time respectively\nc) constant and quadratic time respectively\nd) constant and logarithmic time respectively\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In C, dynamic memory allocation is performed using `malloc()`. When creating a new node for a linked list, the correct syntax involves using `sizeof(NODE)` and casting the return value to a pointer of the appropriate type.",
        "target_text": "Question: Consider the following definition in C programming language:\nstruct node\n{\n    int data;\n    struct node * next;\n};\ntypedef struct node NODE;\nNODE *ptr;\nWhich of the following C code is used to create a new node?\nChoices:\na) ptr = (NODE*)malloc(sizeof(NODE));\nb) ptr = (NODE*)malloc(NODE);\nc) ptr = (NODE*)malloc(sizeof(NODE*));\nd) ptr = (NODE)malloc(sizeof(NODE));\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: If only push and pop operations are allowed, simulating an enqueue operation in an array-based queue (via two stacks) involves moving elements from one stack to another and back. Each move takes time, and multiple moves are required to insert an element.",
        "target_text": "Question: You are on a planet where computational power is slow. You have an array of size 10. You want to enqueue an element using only push and pop operations (each takes 1 second). What is the total time required to perform the enqueue operation?\nChoices:\na) 20\nb) 40\nc) 42\nd) 43\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Based on the birthday paradox, in a hash table of size 20, inserting 10 keys leads to a collision probability exceeding 0.5. This concept illustrates how quickly collisions can occur even in modestly filled hash tables.",
        "target_text": "Question: Consider a hash function that distributes keys uniformly. The hash table size is 20. After hashing how many keys will the probability that any new key collides with an existing one exceed 0.5?\nChoices:\na) 5\nb) 6\nc) 7\nd) 10\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The minimum number of jumps to reach the end of an array depends on the value at each index. If certain sections are blocked by 0 and no forward path exists, it's impossible to reach the end.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) Not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A top tree is a type of data structure used in dynamic trees. If a tree has only a single vertex, there are no edges to break or cluster, hence no valid top trees can be formed.",
        "target_text": "Question: How many top trees are there in a tree with a single vertex?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary heap, the number of nodes at height h in an n-element heap can be calculated using the formula ceil(n / 2^(h+1)). This is derived from the complete binary tree structure of the heap.",
        "target_text": "Question: The number of nodes of height h in any n-element heap is __________.\nChoices:\na) h\nb) 2h\nc) ceil(n/2h)\nd) ceil(n/2^(h+1))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A triply linked list extends a doubly linked list by including a third pointer. This extra pointer, often named `top`, can be used for specialized navigational or hierarchical operations, and it is typically positioned logically as an additional link from the node.",
        "target_text": "Question: Where does a triply linked list contain an extra pointer in comparison to a doubly linked list?\nChoices:\na) top of the node\nb) bottom of the node\nc) before the node\nd) after the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In tree terminology, the height of a node is defined as the number of edges on the longest path from the node to a leaf. The height of a root node in any tree (including ternary trees) is 0 if the node has no children.",
        "target_text": "Question: What is the height of the root node of a ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: MinHash is a probabilistic technique for efficiently estimating the similarity between datasets. It is commonly used in applications like association rule learning, document similarity, and clustering.",
        "target_text": "Question: Is MinHash used as a tool for association rule learning?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Tree traversals define the order in which nodes are visited. Level-order traversal, also known as breadth-first traversal, visits nodes level by level from left to right, typically implemented using a queue.",
        "target_text": "Question: Which traversal's pseudo code is written here?\nChoices:\na) level order\nb) pre-order\nc) post-order\nd) in-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Auxiliary trees are temporary or helper trees used during tree operations. The 'join' operation combines two auxiliary trees into one while preserving the properties of the tree structure.",
        "target_text": "Question: Which operation is used to combine two auxiliary trees?\nChoices:\na) join\nb) combinatorial\nc) add\nd) concatenation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each element (node) points to the next node using a pointer. This allows dynamic memory allocation and flexible insertion/deletion operations.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of a pointer is called __________.\nChoices:\na) linked list\nb) node list\nc) primitive list\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Free lists manage available memory blocks. Allocation strategies like best fit, first fit, and worst fit differ in how memory is chosen. Among these, first fit is generally considered the simplest to implement.",
        "target_text": "Question: What are different ways of implementing free lists and which is simple among them?\nChoices:\na) best fit, first fit, worst fit; first fit is simplest\nb) best fit, first fit, worst fit; best fit is simplest\nc) best fit, first fit, worst fit; worst fit is simplest\nd) first fit, best fit, worst fit; worst fit is simplest\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When two stacks share a single array growing from opposite ends, the condition for stack overflow occurs when their tops are about to collide. That is, when top1 == top2 - 1.",
        "target_text": "Question: A single array A[1..MAXSIZE] is used to implement two stacks growing from opposite ends. If top1 and top2 point to the top elements of each stack and top1 < top2, what is the condition for 'stack full'?\nChoices:\na) (top1 = MAXSIZE/2) and (top2 = MAXSIZE/2+1)\nb) top1 + top2 + 1 = MAXSIZE\nc) (top1 = MAXSIZE/2) or (top2 = MAXSIZE)\nd) top1 = top2 - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A binary tree is a hierarchical structure in which each node can have at most two children--commonly referred to as the left and right child. This is a defining property of binary trees.",
        "target_text": "Question: What is the maximum number of children that a binary tree node can have?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Fibonacci heaps offer better amortized time complexity for decrease-key and delete operations than other heap types. Although more complex to implement, they are theoretically faster in certain scenarios, such as Dijkstra's algorithm with many decrease-key operations.",
        "target_text": "Question: Out of the following given options, which is the fastest algorithm?\nChoices:\na) fibonacci heap\nb) pairing heap\nc) d-ary heap\nd) binary heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An expression tree is a type of binary tree used to represent expressions. Operands are stored in leaves, and operators are stored in internal nodes. The structure obeys the binary tree property.",
        "target_text": "Question: An expression tree is a kind of?\nChoices:\na) binary search tree\nb) fibonacci tree\nc) binary tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In C++, the `delete` operator releases memory allocated by `new`, but it doesn't delete the pointer itself. After the delete operation, the pointer still exists and should be set to `nullptr` to avoid dangling pointer issues.",
        "target_text": "Question: Given that the line `delete newPtr;` just executed, what can you conclude?\nChoices:\na) the memory referenced by newPtr is released only if it is needed by the system.\nb) the pointer newPtr is of type void *.\nc) the pointer newPtr only exists if there was an error freeing the memory.\nd) the pointer newPtr still exists.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack can be implemented using two queues. One queue is used to store the elements and the second helps simulate the Last-In-First-Out (LIFO) behavior by rearranging the elements during pop or push operations.",
        "target_text": "Question: To implement a stack using queues (with only enqueue and dequeue operations), how many queues will you need?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: To convert a postfix expression to prefix, reverse the postfix, swap operators/operands accordingly, and apply precedence rules. For AB+CD-* the prefix form is *+AB-CD.",
        "target_text": "Question: The prefix expression of the postfix expression AB+CD-* is __________\nChoices:\na) (A+B)*(C-D)\nb) +ab*-cd\nc) a+*bcd-\nd) *+ab-cd\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Balancing symbols such as parentheses, braces, or brackets is a common problem in compilers and expression parsing. A stack is the ideal data structure for this task due to its LIFO behavior, allowing correct matching of opening and closing symbols.",
        "target_text": "Question: Which is the most appropriate data structure for applying the balancing of symbols algorithm?\nChoices:\na) stack\nb) queue\nc) tree\nd) graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix array is a sorted array of all suffixes of a string. Compared to suffix trees, suffix arrays are more space efficient as they use linear space and simpler structures, making them preferable for large-scale string processing.",
        "target_text": "Question: Suffix array is space efficient compared to the suffix tree.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A graph is bipartite if its vertices can be divided into two disjoint sets such that no edge connects vertices within the same set. While all paths are bipartite, not all cyclic graphs are--especially those with an odd number of vertices in the cycle.",
        "target_text": "Question: All paths and cyclic graphs are bipartite graphs.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Dynamic arrays grow and shrink automatically based on their usage. To avoid wasting space, if the size of the array drops below a certain threshold (commonly 30% of the allocated size), the array is deallocated or shrunk.",
        "target_text": "Question: The size of the dynamic array is deallocated if the array size is less than __________% of the backend physical size.\nChoices:\na) 30\nb) 40\nc) 10\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binomial heap, the decrease-key operation adjusts the value of a node and may require restructuring the heap to maintain the heap property. This process takes O(log n) time because the heap is organized as a collection of binomial trees.",
        "target_text": "Question: Time taken in decreasing the node value in a binomial heap is:\nChoices:\na) o(n)\nb) o(1)\nc) o(log n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The evaluation of prefix expressions (Polish notation) is guided by operator precedence and associativity. This determines the correct order in which operands and operators are processed during computation.",
        "target_text": "Question: What determines the order of evaluation of a prefix expression?\nChoices:\na) precedence and associativity\nb) precedence only\nc) associativity only\nd) depends on the parser\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Converting an infix expression to postfix (Reverse Polish Notation) involves using a stack to manage operators based on their precedence and associativity, ensuring correct evaluation order.",
        "target_text": "Question: One can convert an infix expression to a postfix expression using a __________.\nChoices:\na) stack\nb) queue\nc) deque\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing is a collision resolution technique in hashing. It is widely used in applications such as database indexing, cache management, and compiler symbol tables where fast lookups and space efficiency are needed.",
        "target_text": "Question: What are the applications of linear probing?\nChoices:\na) databases\nb) caching\nc) compiler design\nd) all of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A complete binary tree of depth `d` has (2^d - 1) nodes and (2^{d+1} - 1) pointers in total. The number of unused (null) pointers corresponds to the number of leaves, which in a complete tree is (2^d). For depth 5, that is 32 leaves, each having 2 null children pointers, so 16 unused pointers.",
        "target_text": "Question: The number of unused pointers in a complete binary tree of depth 5 is:\nChoices:\na) 4\nb) 8\nc) 16\nd) 32\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack follows the Last-In-First-Out (LIFO) principle, where the last item added is the first to be removed. A real-world analogy is a stack of chairs or plates, where the topmost item is accessed first.",
        "target_text": "Question: Which of the following real-world scenarios would you associate with a stack data structure?\nChoices:\na) piling up of chairs one above the other\nb) people standing in a line to be serviced at a counter\nc) offer services based on the priority of the customer\nd) tatkal ticket booking in irctc\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Universal hashing refers to a class of hash functions that minimize the probability of collision by choosing a function at random from a family of hash functions. It offers better average performance than traditional methods like division or multiplication.",
        "target_text": "Question: Which hashing scheme provides good performance?\nChoices:\na) open addressing\nb) universal hashing\nc) hashing by division\nd) hashing by multiplication\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Deleting a linked list involves traversing it and deallocating memory for each node. This can be done in-place without needing additional memory, making the space complexity O(1).",
        "target_text": "Question: What is the space complexity for deleting a linked list?\nChoices:\na) o(1)\nb) o(n)\nc) either o(1) or o(n)\nd) o(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In nearest neighbor search using kd-trees, three primary concepts are crucial: (1) pruning using bounding boxes, (2) recursive traversal, and (3) backtracking to search the opposite subtree if necessary. These techniques optimize search in multidimensional spaces.",
        "target_text": "Question: How many prime concepts are available in nearest neighbor search in a kd tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a 2-dimensional kd-tree, the root node is typically chosen based on the value of the first dimension. Often, to break ties or for simplicity, the first node inserted (or an arbitrary odd-positioned node) is used as the root.",
        "target_text": "Question: In a two-dimensional search tree, the root is arbitrarily chosen to be?\nChoices:\na) even\nb) odd\nc) depends on subtrees\nd) random node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists support dynamic memory usage and allow insertions and deletions at any position. This is a major advantage over arrays, which require shifting elements.",
        "target_text": "Question: In general, linked lists allow:\nChoices:\na) insertions and removals anywhere.\nb) insertions and removals only at one end.\nc) insertions at the back and removals from the front.\nd) none of the above.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary min-heap, the maximum element resides in the leaf nodes. For a complete binary tree with 1023 elements, 512 nodes are leaves. Finding the maximum among them requires 511 comparisons.",
        "target_text": "Question: Consider the array representation of a binary min-heap containing 1023 elements. The minimum number of comparisons required to find the maximum in the heap is:\nChoices:\na) 510\nb) 511\nc) 512\nd) 255\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In disjoint set union (union-find), rank is used to limit the depth of trees. A node with rank r must have at least 2^r descendants. This ensures logarithmic time performance with union by rank.",
        "target_text": "Question: When executing a sequence of Unions, a node of rank r must have at least 2^r descendants.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In an undirected simple graph with (n) vertices, each pair of distinct vertices can have at most one edge, resulting in (n(n-1)/2) edges. In a directed graph, each pair can have two directed edges (one in each direction), leading to (n(n-1)) possible non-zero entries in the adjacency matrix.",
        "target_text": "Question: What is the maximum number of possible non-zero values in an adjacency matrix of a simple graph with n vertices?\nChoices:\na) (n*(n-1))/2\nb) (n*(n+1))/2\nc) n*(n-1)\nd) n*(n+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To convert a binary tree into its mirror image, you recursively swap the left and right subtrees. This is typically performed during a pre-order traversal, where the current node is processed before its children.",
        "target_text": "Question: A binary tree can be converted into its mirror image by traversing it in __________.\nChoices:\na) in-order\nb) pre-order\nc) post-order\nd) any order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Level-order traversal is a breadth-first traversal of a tree. It visits nodes level by level and is implemented using a queue to process nodes in FIFO order.",
        "target_text": "Question: Level order traversal of a tree is formed with the help of:\nChoices:\na) breadth-first search\nb) depth-first search\nc) dijkstra's algorithm\nd) prim's algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Parallel arrays store related data across multiple arrays using a shared index. While useful in languages that don't support records, they can be inefficient for insertion and deletion due to the need to maintain synchronization across arrays.",
        "target_text": "Question: Which of the following is a disadvantage of parallel arrays over traditional arrays?\nChoices:\na) when a language does not support records, parallel arrays can be used\nb) increased locality of reference\nc) ideal cache behaviour\nd) insertion and deletion becomes tedious\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The height of a tree node is the number of edges on the longest path to a leaf. In a K-ary tree, the height of the root depends on the total number of levels. For some tree definitions, if the tree has multiple levels and the root is at level 0, then its height may be 3.",
        "target_text": "Question: What is the height of the root node of a K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The given recursive function prints the data of a linked list node, then skips the next node (if it exists), and calls itself recursively. After returning from recursion, it prints the same node again. This produces a symmetric output from first, third, fifth, then in reverse.",
        "target_text": "Question: What is the output of the following function if start is pointing to the first node of the linked list 1->2->3->4->5->6?\n#include <iostream>\nusing namespace std;\nstruct Node {\n    int data;\n    Node* next;\n    Node() { data = 0; next = nullptr; } \n};\nvoid fun(Node* start) {\n    if (start == nullptr)\n        return;\n    cout << start->data << \"  \";\n    \n    if (start->next != nullptr)\n        fun(start->next->next);\n    cout << start->data << \"  \";\n}\nChoices:\na) 1 4 6 6 4 1\nb) 1 3 5 1 3 5\nc) 1 2 3 5\nd) 1 3 5 5 3 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a minimum spanning tree (MST), the number of edges is always (V - 1). If the weight of each edge in the graph is increased by a constant, the structure of the MST remains the same, and the total weight increases by (V - 1) * constant.",
        "target_text": "Question: Let G be a connected undirected graph with 100 vertices and 300 edges. The weight of a minimum spanning tree of G is 500. When the weight of each edge of G is increased by five, the weight of a minimum spanning tree becomes __________.\nChoices:\na) 1000\nb) 995\nc) 2000\nd) 1995\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In bracket matching algorithms, opening brackets are pushed onto the stack. When a closing bracket is encountered, the top of the stack is popped to check for a match. This maintains balanced structure.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) push it onto the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A suffix tree is a compressed trie of all suffixes of a given string. It is highly useful in text editors and search engines for string matching, substring search, and pattern recognition.",
        "target_text": "Question: Can a suffix tree be used in string problems occurring in a text editor?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Even if all edge weights in a graph are unique, multiple paths can have different weights, but uniqueness of edge weights does not guarantee that the shortest path between any two nodes is unique.",
        "target_text": "Question: Is the following statement valid?\nGiven a weighted graph where weights of all edges are unique, there is always a unique shortest path from a source to destination.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An inversion in an array is a pair of indices (i, j) such that i < j and arr[i] > arr[j]. A sorted array has zero such inversions, indicating it is already ordered.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Recursion uses a call stack to keep track of function calls. Each recursive call is pushed onto the stack, increasing memory usage. Iteration, in contrast, does not rely on the call stack for execution.",
        "target_text": "Question: Recursion uses more memory space than iteration because __________.\nChoices:\na) it uses stack instead of queue.\nb) every recursive call has to be stored.\nc) both a & b are true.\nd) none of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An almost complete binary tree of depth 'd' is one where all levels are fully filled except possibly the last, and all leaves appear as far left as possible. It includes both the conditions described in options A and B.",
        "target_text": "Question: A binary tree of depth 'd' is an almost complete binary tree if:\nChoices:\na) each leaf in the tree is either at level 'd' or at level 'd-1'\nb) for any node 'n' in the tree with a right descendant at level 'd', all the left descendants of 'n' that are leaves, are also at level 'd'\nc) both (a) & (b)\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Merging two sorted arrays of sizes m and n involves iterating over both arrays once, making comparisons and appending the smaller element. This takes linear time: θ(m + n).",
        "target_text": "Question: Time required to merge two sorted lists of size m and n is __________.\nChoices:\na) θ(m | n)\nb) θ(m + n)\nc) θ(m log n)\nd) θ(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A complete undirected graph with 4 vertices has 6 edges. To form a minimum spanning tree (MST), we need (V-1) = 3 edges with the smallest weights. Choosing edges with weights 1, 2, and 3 gives the minimal total weight: 6.",
        "target_text": "Question: Let G be a complete undirected graph on 4 vertices, having 6 edges with weights 1, 2, 3, 4, 5, and 6. What is the weight of the minimum spanning tree of G?\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A self-organizing list is a type of linked list that reorders elements based on access patterns to reduce average lookup time. It's used in symbol tables to improve compiler performance during variable/function lookup.",
        "target_text": "Question: Symbol tables during compilation of a program are efficiently implemented using __________\nChoices:\na) a singly linked list\nb) a doubly linked list\nc) a self-organizing list\nd) an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: A hash tree, also known as a Merkle tree, is a tree in which every leaf node is a hash of a data block and every non-leaf node is a hash of its children. It's widely used in blockchain and data verification.",
        "target_text": "Question: A hash tree is also known as __________\nChoices:\na) merkle tree\nb) t-tree\nc) hash table\nd) bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A memory-efficient doubly linked list uses XOR linking, where each node contains a single pointer that stores the XOR of addresses of the previous and next nodes. This reduces memory usage by eliminating an extra pointer field.",
        "target_text": "Question: How do you calculate the pointer difference in a memory-efficient doubly linked list?\nChoices:\na) head xor tail\nb) pointer to previous node xor pointer to next node\nc) pointer to previous node - pointer to next node\nd) pointer to next node - pointer to previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Postfix (Reverse Polish Notation) expressions are evaluated using a stack. When an operator is encountered, the top two operands are popped, the operation is performed, and the result is pushed back onto the stack.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) push it directly onto the stack\nb) pop 2 operands, evaluate them and push the result onto the stack\nc) pop the entire stack\nd) ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A weight-balanced tree ensures that the weight (or size) of the left and right subtrees of any node n is at least a certain fraction 'a' of the weight of the node itself. This helps in maintaining balanced access times.",
        "target_text": "Question: What is the condition for a tree to be weight balanced, where 'a' is a factor and 'n' is a node?\nChoices:\na) weight[n.left] >= a * weight[n] and weight[n.right] >= a * weight[n]\nb) weight[n.left] >= a * weight[n.right] and weight[n.right] >= a * weight[n]\nc) weight[n.left] >= a * weight[n.left] and weight[n.right] >= a * weight[n]\nd) weight[n] is a non-zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A treap is a randomized binary search tree that also satisfies the heap property using a priority value assigned randomly to each node. It is also known as a Cartesian tree with priorities.",
        "target_text": "Question: A treap is a Cartesian tree with __________\nChoices:\na) additional value, which is a priority value to the key generated randomly\nb) additional value, which is a priority value to the key generated sequentially\nc) additional heap rule\nd) additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary tree, internal nodes are those with at least one child. The number of leaf nodes can be derived using the relation: L = N + 1, where L is leaf nodes and N is internal nodes with two children. Here, 5 nodes have one child, and 10 have two children, giving 11 leaf nodes.",
        "target_text": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is:\nChoices:\na) 10\nb) 11\nc) 12\nd) 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The given function is a recursive implementation of the factorial. For input 4, it computes 4 * 3 * 2 * 1 = 24.",
        "target_text": "Question: What value does function mystery return when called with a value of 4?\nint mystery (int number) {\n    if (number <= 1)\n        return 1;\n    else\n        return number * mystery(number - 1);\n}\nChoices:\na) 0\nb) 1\nc) 4\nd) 24\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Reversing an array requires swapping elements from both ends toward the center. For an array with n elements, floor(n/2) swaps are needed. If n is odd, this simplifies to (n-1)/2.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1) / 2\nb) n / 2\nc) (n / 2) - 1\nd) (n + 1) / 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Quick sort is a divide-and-conquer algorithm that partitions the array around a pivot element such that elements less than or equal to the pivot come before it, and elements greater come after it. This process is repeated recursively.",
        "target_text": "Question: The sorting technique where the array to be sorted is partitioned again and again in such a way that all elements less than or equal to the partitioning element appear before it and those which are greater appear after it is called __________.\nChoices:\na) merge sort\nb) quick sort\nc) selection sort\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a balanced binary tree, the height is minimized, ensuring logarithmic time complexity for search operations. Lookup in such a tree is efficient, with worst-case time O(log n).",
        "target_text": "Question: A balanced binary tree with n items allows the lookup of an item in __________ worst-case time.\nChoices:\na) o(log n)\nb) o(n log 2)\nc) o(n)\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Linear probing is a collision resolution technique in open addressing where a key is placed at the next available location in the array. The formula is: H(x) = (key + F(i)) mod table size.",
        "target_text": "Question: What is the hash function used in linear probing?\nChoices:\na) h(x) = key mod table size\nb) h(x) = (key + f(i^2)) mod table size\nc) h(x) = (key + f(i)) mod table size\nd) h(x) = x mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Queues are widely used to simulate limited resource allocation in operating systems and networks, where processes or requests are handled in FIFO order as resources become available.",
        "target_text": "Question: Queues serve a major role in __________\nChoices:\na) simulation of recursion\nb) simulation of arbitrary linked list\nc) simulation of limited resource allocation\nd) simulation of heap sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary tree, the number of nodes with two children is always one less than the number of leaves in a full binary tree. If a tree has 20 leaves, it will have 19 nodes with two children.",
        "target_text": "Question: A binary tree T has 20 leaves. The number of nodes in T having two children is:\nChoices:\na) 18\nb) 19\nc) 17\nd) any number between 10 and 20\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Postfix (or Reverse Polish) notation places operators after operands. For example, the infix expression (A + B) becomes AB+ in postfix notation.",
        "target_text": "Question: In Postfix expressions, the operators come after the operands.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In infix expressions, operators are placed between operands. When parsed recursively, the structure results in a left expression, followed by an operator, then a right expression, which defines infix notation.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A rope (or cord) is a data structure used for efficiently manipulating large strings. It is implemented as a binary tree of strings and is also referred to as a cord structure.",
        "target_text": "Question: Which of the following is also known as the Rope data structure?\nChoices:\na) cord\nb) string\nc) array\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of binary trees that can be created with `n` distinct nodes follows the Catalan number sequence. For 3 nodes, the number of structurally unique binary trees is 5.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a full binary tree, each internal node has exactly two children. The number of leaves L in such a tree is always L = I + 1, where I is the number of internal nodes.",
        "target_text": "Question: In a full binary tree, if the number of internal nodes is I, then the number of leaves L is?\nChoices:\na) l = 2* i\nb) l = i + 1\nc) l = i - 1\nd) l = 2* i - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Accessing the k-th element from the beginning of a singly linked list is O(1) if pointer starts from the head. Finding the k-th element from the end requires a traversal or two-pointer method, making it O(n).",
        "target_text": "Question: What are the time complexities of finding the 8th element from the beginning and 8th element from the end in a singly linked list? Let n > 8.\nChoices:\na) O(n) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(1) and O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-Trees are a type of balanced binary search tree that simulate red-black trees using simpler rules. Maintenance of an AA-tree involves two operations: skew (right rotation) and split (left rotation), making the number of structural shapes to consider just two.",
        "target_text": "Question: How many different shapes does maintenance of an AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees are used for efficient implementation of string operations such as substring search, longest common substring, and pattern matching. They allow these operations in linear time with respect to the string length.",
        "target_text": "Question: Which tree allows fast implementation of string operations?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Separate chaining is a method for handling collisions in hash tables using linked lists. Although it effectively resolves collisions, it increases pointer usage and memory overhead.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining with linked lists?\nChoices:\na) it requires many pointers\nb) it requires linked lists\nc) it uses array\nd) it does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: An edge cluster in graph theory typically refers to a tightly connected group of nodes. The minimum number of edges to define such a cluster is one--connecting two nodes--hence, the simplest form includes one edge.",
        "target_text": "Question: How many edges are present in an edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A 2-3 tree is a balanced search tree where each node can have two or three children. The height of a 2-3 tree with `n` elements lies between log₃(n + 1) and log2(n + 1), due to its structure supporting varying degrees.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log₃(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To compute the sum of values between two nodes L and H in a balanced BST, you skip subtrees that are completely out of range. The query takes time O(log n) for traversal and O(m) for m matching elements. The full time bound may include constants a, b, c, and d to model deeper operations.",
        "target_text": "Question: Suppose we have a balanced binary search tree T holding n numbers. We are given two numbers L and H and wish to sum up all the numbers in T that lie between L and H. Suppose there are m such numbers in T. If the tightest upper bound on the time to compute the sum is O(n^a log^b n + m*c log^d n), the value of a + 10b + 100c + 1000d is __________.\nChoices:\na) 60\nb) 110\nc) 210\nd) 50\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Universal hashing is a technique that chooses the hash function at random from a carefully designed class of functions, offering better average-case performance by minimizing collision probability.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) Hashing by division\nb) Hashing by multiplication\nc) Universal hashing\nd) Open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A doubly linked list contains two pointers per node: one to the next node and one to the previous. This allows bidirectional traversal but also increases space usage and complexity compared to a singly linked list.",
        "target_text": "Question: Which of the following is False about a doubly linked list?\nChoices:\na) We can navigate in both directions\nb) It requires more space than a singly linked list\nc) The insertion and deletion of a node take a bit longer\nd) Implementing a doubly linked list is easier than a singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Recursive algorithms often use the system call stack to maintain state across function calls. A non-recursive version of such algorithms requires explicit use of a stack data structure to emulate this behavior.",
        "target_text": "Question: What data structure would you most likely see in a non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked List\nc) Tree\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a queue implemented with a linked list, new elements are added at the rear and removed from the front. During insertion into a non-empty queue, only the `rear` pointer is updated.",
        "target_text": "Question: In a linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In a binary search tree (BST), the left child must have a value less than the parent. The given statement implies this is True for all trees, which is incorrect. It only applies to BSTs, not general binary trees.",
        "target_text": "Question: Left child of a parent node has value lesser than the parent node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap, the heap property ensures that the largest element is always located at the root. This structure allows constant-time access to the maximum element.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) Leaf node\nb) First node of left subtree\nc) Root node\nd) First node of right subtree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists are dynamic structures ideal for collections where the size may change frequently. They allow efficient insertion and deletion, making them suitable for non-permanent or frequently modified data.",
        "target_text": "Question: Linked lists are best suited __________.\nChoices:\na) For relatively permanent collections of data.\nb) For the size of the structure and the data in the structure are constantly changing.\nc) Data structure\nd) For none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A pseudograph is a graph that allows self-loops and multiple edges. An adjacency matrix representing a graph with non-zero diagonal entries indicates the presence of self-loops, identifying a pseudograph.",
        "target_text": "Question: Given adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0}, {0,1}}\nii) {{0,1}, {1,0}}\niii) {{0,0,1}, {0,1,0}, {1,0,0}}\nChoices:\na) only i)\nb) ii) and iii)\nc) i) and iii)\nd) i), ii), and iii)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Any decision tree that sorts n elements must have at least n leaves, and therefore a height of at least Ω(n) in the worst case, as each comparison decision leads to a distinct permutation of input.",
        "target_text": "Question: Any decision tree that sorts n elements has height:\nChoices:\na) Ω(n)\nb) Ω(log n)\nc) Ω(n log n)\nd) Ω(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In a hypergraph, a hyperedge can connect any number of vertices. The degree of a vertex is the number of hyperedges it is part of. The degree sequence is the list of degrees sorted in non-increasing order.",
        "target_text": "Question: What is the degree sequence of the given hypergraph in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3, 2, 1, 1, 1, 1\nb) 3, 2, 2, 2, 1, 1\nc) 3, 2, 2, 2, 2, 1\nd) 3, 2, 2, 1, 1, 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Topological sorting of a Directed Acyclic Graph (DAG) can be done in linear time using either Depth First Search (DFS) or Kahn's algorithm. The time complexity is O(V + E), where V is the number of vertices and E is the number of edges.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) Cubic\nb) Quadratic\nc) Linear\nd) Logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays provide contiguous memory allocation and support random access. Linked lists allow flexible size but have slower access due to pointer traversal. Access speed is generally better in arrays.",
        "target_text": "Question: Which of the following points is/are not True about the linked list data structure when compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in linked lists\nc) Random access is not allowed in a typical implementation of linked lists\nd) Access of elements in a linked list takes less time than in arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A skip list is a linked structure designed for fast search operations. It uses multiple levels of linked lists with skip pointers to allow logarithmic search time.",
        "target_text": "Question: What is a skip list?\nChoices:\na) A linked list with size value in nodes\nb) A linked list that allows faster search within an ordered sequence\nc) A linked list that allows slower search within an ordered sequence\nd) A tree which is in the form of a linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: If all edge weights in a graph are multiplied by a constant, the shortest path remains the same. This is because path weights scale proportionally and the relative path order does not change.",
        "target_text": "Question: Is the following statement valid about shortest paths?\nGiven a graph, suppose we have calculated shortest paths from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains the same--only the total weight of the path changes.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a d-heap (a generalization of a binary heap where each node has d children), operations like insert, delete, and create are well-defined. However, a generic `find` operation is not directly supported since heaps are not designed for search.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a K-ary tree, the height of a tree with only the root node is 0 because there are no edges from the root to any other node.",
        "target_text": "Question: What is the height of a K-ary tree having only the root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B-tree of minimum degree t and height h has a search time complexity of θ(logₕ n), where n is the number of keys. This allows for efficient disk-based searching in large datasets.",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) θ(log n h * t)\nb) θ(log t n * h)\nc) θ(log h n)\nd) θ(log t n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AA-trees are simplified versions of red-black trees. They maintain balance using right-child-only 'red' links and a level field instead of colors. Coding practices (e.g., recursion) are not structural rules, hence statement 2 is incorrect.",
        "target_text": "Question: Of the following rules that are followed by an AA-tree, which of the following is incorrect?\n1. Only right children can be red\n2. Procedures are coded recursively\n3. Instead of storing colors, the level of a node is stored\n4. There should not be any left children\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: To implement a stack using a priority queue, each new item must be assigned a priority that ensures it is removed before earlier items. This is achieved by assigning strictly decreasing keys, so the last pushed item is removed first.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K) where K is a key. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys should be in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Compared to arrays, linked lists provide dynamic memory allocation, efficient insertion/deletion, and do not require a fixed size. However, they lack random access and have lower cache locality.",
        "target_text": "Question: Which of the following points is/are true about the Linked List data structure when compared with arrays?\nChoices:\na) arrays have better cache locality that can make them better in terms of performance\nb) it is easy to insert and delete elements in linked list\nc) random access is not allowed in a typical implementation of linked lists\nd) the size of array has to be pre-decided, linked lists can change their size any time\ne) all of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A sparse array stores only non-null (or non-zero) elements, saving memory. In contrast, a normal array of length 6 stores all elements, including nulls. So its logical size is 6, but the sparse representation only stores 2 meaningful elements.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10}; What would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a XOR linked list, each node stores the XOR of the addresses of the previous and next nodes instead of maintaining two separate pointers. This saves memory in comparison to traditional doubly linked lists.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) every node stores the xor of addresses of previous and next nodes\nb) actual memory address of next node\nc) every node stores the xor of addresses of previous and next two nodes\nd) every node stores xor of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The van Emde Boas (vEB) tree is a tree data structure that supports fast predecessor, successor, and minimum/maximum queries in O(log log U) time. It was introduced by Peter van Emde Boas.",
        "target_text": "Question: Who invented the vEB tree, also known as Van Emde Boas Tree?\nChoices:\na) peter van emde boas\nb) samuel f. b. morse\nc) friedrich clemens gerke\nd) alexander morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues are abstract data structures with several variations including ordinary queue (FIFO), circular queue (with wrap-around logic), and priority queue (based on priority levels). 'Single ended queue' is not a standard classification.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) priority queue\nb) circular queue\nc) single ended queue\nd) ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In column-major order, elements of a matrix are stored column by column in memory. For the matrix:\n```\na b c\nd e f\ng h i\n```\nthe order will be a, d, g, b, e, h, c, f, i.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\n```\na b c\nd e f\ng h i\n```\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap, new elements are inserted at the next available leaf position and then 'heapified up' to maintain the heap property. The level-order traversal changes depending on the heapification process.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 3, 2, 1, 5\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Associative arrays can be implemented using __________\nChoices:\na) b-tree\nb) a doubly linked list\nc) a single linked list\nd) a self balancing binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In parse trees, every internal node represents a non-terminal and every leaf node represents a terminal.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the other name for a postfix expression?\nChoices:\na) normal polish notation\nb) reverse polish notation\nc) warsaw notation\nd) infix notation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following is the implementation of the ternary tree?\nChoices:\na) avl tree\nb) ternary heap\nc) hash table\nd) dictionary\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the expected error for estimating the Jaccard index using MinHash scheme for k different hash functions?\nChoices:\na) o (log k!)\nb) o (k!)\nc) o (k^2)\nd) o (1/√k)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: The maximum number of binary trees that can be formed with three unlabelled nodes is:\nChoices:\na) 1\nb) 5\nc) 4\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Abstract syntax tree is an input to which phase of compiler?\nChoices:\na) lexical analysis\nb) syntax analysis\nc) semantic analysis\nd) intermediate code generation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: Who invented the MinHash technique?\nChoices:\na) weiner\nb) samuel f. b. morse\nc) friedrich clemens gerke\nd) andrei broder\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider a linked list of n elements. What is the time taken to insert an element after an element pointed by some pointer?\nChoices:\na) o(1)\nb) o(log2 n)\nc) o(n)\nd) o(n log2 n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A program to search a contact from phone directory can be implemented efficiently using __________\nChoices:\na) a bst\nb) a trie\nc) a balanced bst\nd) a binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the other name or Van Emde Boas Tree data structure?\nChoices:\na) van emde boas array\nb) van emde boas stack\nc) van emde boas priority queue\nd) van emde boas heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Sorting | Context: Sorting algorithms arrange elements in a particular order (ascending or descending). Adaptive sorting algorithms improve performance when data is partially sorted.",
        "target_text": "Question: An adaptive sorting algorithm __________\nChoices:\na) adapts to new computers\nb) takes advantage of already sorted elements\nc) takes input which is already sorted\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is not a disadvantage of bit array?\nChoices:\na) without compression, they might become sparse\nb) accessing individual bits is expensive\nc) compressing bit array to byte/word array, the machine also has to support byte/word addressing\nd) storing and manipulating in the register set for long periods of time\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: B Trees are generally\nChoices:\na) very deep and narrow\nb) very wide and shallow\nc) very deep and very wide\nd) cannot say\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is balanced and is a height balanced tree\nb) a tree which is unbalanced and is a height balanced tree\nc) a tree with three children\nd) a tree with atmost 3 children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient insertion\nb) to have efficient deletion\nc) to have efficient region query\nd) to have efficient traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: To convert the postfix expression into the infix expression we use stack and scan the postfix expression from left to right.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the load factor?\nChoices:\na) average array size\nb) average key size\nc) average chain length\nd) average hash table length\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which pattern is used to evaluate abstract syntax tree?\nChoices:\na) visitor pattern\nb) singleton pattern\nc) proxy pattern\nd) adapter pattern\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is an advantage of parallel arrays?\nChoices:\na) poor locality of reference for non-sequential access\nb) very little direct language support\nc) expensive to shrink or grow\nd) increased locality of reference\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Recursive procedures are implemented by   using __________ data structure.\nChoices:\na) queues\nb) stacks\nc) linked lists\nd) strings\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Can child node be always called Leaf node in the K-ary tree?\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A balance factor in AVL tree is used to check __________\nChoices:\na) what rotation to make\nb) if all child nodes are at same level\nc) when the last rotation occurred\nd) if the tree is unbalanced\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Quick sort running time depends on the   selection of __________\nChoices:\na) size of array\nb) pivot element\nc) sequence of values\nd) none of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which type of binary search tree is imitated for construction of tango tree?\nChoices:\na) complete binary search tree\nb) perfect binary search tree\nc) balanced binary search tree\nd) degenerate binary search tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In order traversal of binary search tree will produce __________\nChoices:\na) unsorted list\nb) reverse of input\nc) sorted list\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: Reversing a word using stack can be used to find if the given word is a palindrome or not.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: The number of items used by the dynamic array contents is its __________\nChoices:\na) physical size\nb) capacity\nc) logical size\nd) random size\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: __________ is not a theoretical problem but actually occurs in real implementations of probing.\nChoices:\na) hashing\nb) clustering\nc) rehashing\nd) collision\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following has search efficiency of Ω(1)?\nChoices:\na) tree\nb) heap\nc) hash table\nd) linked-list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Dijkstra's Algorithm will work for both negative and positive weights?\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What will be the auxiliary space complexity of the code to rotate an array by using the reversal algorithm (d = number of rotations)?\nChoices:\na) o(1)\nb) o(n)\nc) o(d)\nd) o(n*d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Is Top tree used for maintaining Dynamic set of trees called forest.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider an implementation of unsorted single linked list. Suppose it has its representation with a head and a tail pointer (i.e. pointers to the first and last nodes of the linked list). Given the representation, which of the following operation can not be implemented in O(1) time ?\nChoices:\na) insertion at the front of the linked list.\nb) insertion at the end of the linked list.\nc) deletion of the front node of the linked list.\nd) deletion of the last node of the linked list.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths. Topological sorting applies to Directed Acyclic Graphs (DAGs).",
        "target_text": "Question: Which of the given statement is True?\nChoices:\na) all acyclic directed graphs have topological sortings and all cyclic directed graphs have none\nb) all cyclic directed graphs have topological sortings\nc) all directed graphs have topological sortings\nd) none of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) Distinct array position for every possible key\nb) Fewer array positions than keys\nc) Fewer keys than array positions\nd) Same array position for all keys\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is the range of β in finding the length of the longest path in a randomized binary search tree?\nChoices:\na) (-1, 0)\nb) (1, 0)\nc) (0, 5)\nd) (0, 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths. Simple graphs do not allow loops or multiple edges.",
        "target_text": "Question: Which of the following properties does a simple graph not hold?\nChoices:\na) must be connected\nb) must be unweighted\nc) must have no loops or multiple edges\nd) must be undirected\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Can leaf node be called child node in a K-ary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: Given a queue with a linked list implementation. the Rear pointer points to the rear node of the queue. and the front node of the queue points to the front node of the queue, Which of the following operations is impossible to do in O(1) time?\nChoices:\na) delete the front item from the list.\nb) delete the rear from the list.\nc) insert at the front of the list.\nd) none\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: How many stacks are required for evaluation of prefix expression?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees. AA-trees are a balanced binary search tree variant using skew and split operations.",
        "target_text": "Question: In an AA-tree, we process split first, followed by a skew.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Path Compression algorithm performs in which of the following operations?\nChoices:\na) Create operation\nb) Insert operation\nc) Find operation\nd) Delete operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Given an array of element 5, 7, 9, 1, 3, 10, 8, 4. Which of the following are the correct sequences of elements after inserting all the elements in a min-heap?\nChoices:\na) 1,3,4,5,7,8,9,10\nb) 1,4,3,9,8,5,7,10\nc) 1,3,4,5,8,7,9,10\nd) 1,3,8,4,5,10,9,7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and collision handling techniques such as open addressing and separate chaining are key to practical implementations.",
        "target_text": "Question: What are the methods to handle collision:\nChoices:\na) separate chaining\nb) open addressing\nc) both of the above\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Which of the following is not the rearranging method used to implement self-organizing lists?\nChoices:\na) count method\nb) move to front method\nc) ordering method\nd) least frequently used\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. Sparse arrays are used when most elements are zero and can be optimized in memory by only storing non-zero entries.",
        "target_text": "Question: When do you use a sparse array?\nChoices:\na) when there are unique elements in the array\nb) when the array has more occurrence of zero elements\nc) when the data type of elements differ\nd) when elements are sorted\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The incidence matrix of a connected graph has a rank that depends on the number of vertices and the structure of the graph. For a connected graph with n vertices, the rank is at most n-1.",
        "target_text": "Question: If a connected Graph (G) contains n vertices what would be the rank of its incidence matrix?\nChoices:\na) n-1\nb) values greater than n are possible\nc) values less than n-1 are possible\nd) insufficient information is given\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: What is the average retrieval time when n keys hash to the same slot?\nChoices:\na) Θ(n)\nb) Θ(n²)\nc) Θ(n log n)\nd) o(n²)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. JavaScript provides many built-in array methods, including reverse(), sort(), and slice().",
        "target_text": "Question: Which of the following is the predefined function for array reversal in javascript?\nChoices:\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. The degree sum formula for undirected graphs states that the sum of degrees equals twice the number of edges.",
        "target_text": "Question: For an undirected graph with n vertices and e   edges, the sum of the degree of each vertex is equal   to:\nChoices:\na) 2n\nb) (2n-1)/2\nc) 2e\nd) e2/2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A weight-balanced tree is a binary tree in which each node maintains balance based on subtree sizes. The height of such trees can be bounded using logarithmic relationships.",
        "target_text": "Question: A weight-balanced tree is a binary tree in which for each node the number of nodes in the left subtree is at least half and at most twice the number of nodes in the right subtree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on n nodes is best described by which of the following?\nChoices:\na) log_2 n\nb) log_{4/3} n\nc) log_3 n\nd) log_{3/2} n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: The adjacency matrix of a graph with n vertices is an n x n matrix. Each entry indicates the presence or absence of an edge.",
        "target_text": "Question: The number of elements in the adjacency matrix of a graph having 7 vertices is __________\nChoices:\na) 7\nb) 14\nc) 36\nd) 49\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: The goal of hashing is to produce a search that   takes __________\nChoices:\na) o(1) time\nb) o(n2) time\nc) o(log n) time\nd) o(n log n) time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B+ tree is a type of self-balancing search tree where all records are stored at the leaf level and internal nodes only store keys. It remains balanced because the paths from the root to all leaves are of the same length.",
        "target_text": "Question: B+ Trees are considered BALANCED because\nChoices:\na) the lengths of the paths from the root to all leaf nodes are all equal.\nb) the lengths of the paths from the root to all leaf nodes differ from each other by at most 1.\nc) the number of children of any two non-leaf sibling nodes differ by at most 1.\nd) the number of records in any two leaf nodes differ by at most 1.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each element is stored in a node containing a pointer to the next node. Searching through a linked list is a linear-time operation.",
        "target_text": "Question: Linked list search complexity is __________\nChoices:\na) Ω(1)\nb) Ω(n)\nc) Ω(log n)\nd) Ω(log log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is the limitation of the array?\nChoices:\na) elements can be accessed from anywhere.\nb) the size of the array is fixed.\nc) indexing starts from zero.\nd) memory waste if an array's elements are smaller than the size allotted to them\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs can be represented using adjacency matrices or lists. Matrix representations offer efficient lookups at the cost of higher space complexity.",
        "target_text": "Question: Which of the following is an advantage of matrices?\nChoices:\na) internal complexity\nb) searching through a matrix is complex\nc) not space efficient\nd) constant-time edge lookup\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each element is stored in a node containing a pointer to the next. Trie data structures, though tree-based, can outperform linked lists and BSTs for dictionary word searches.",
        "target_text": "Question: Which of the following is the efficient data structure for searching words in dictionaries?\nChoices:\na) bst\nb) linked list\nc) balanced bst\nd) trie\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure used in expression evaluation, symbol balancing, and function call tracking. It operates on the LIFO principle.",
        "target_text": "Question: Which of the following is not an application of stack?\nChoices:\na) evaluation of postfix expression\nb) conversion of infix to postfix expression\nc) balancing symbols\nd) line at ticket counter\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A linked list is a linear data structure where each node contains data and a reference to the next node. In a queue implemented using a linked list, new elements are typically added at the tail (rear).",
        "target_text": "Question: In linked list implementation of a queue, where does a new element be inserted?\nChoices:\na) at the head of the linked list\nb) at the centre position in the linked list\nc) at the tail of the linked list\nd) at any position in the linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: A priority queue can efficiently implemented using which of the following data structures? Assume that the number of insert and peek (operation to see the current highest priority item) and extraction (remove the highest priority item) operations are almost same.\nChoices:\na) array\nb) linked list\nc) heap data structures like binary heap, fibonacci heap\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A B-tree is a self-balancing tree data structure. During insertions, a node may split if it exceeds its capacity. The number of splits depends on how often insertions cause overflow.",
        "target_text": "Question: A B-tree of order 4 is built from scratch by 10 successive insertions. What is the maximum number of node splitting operations that may take place?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A heap is a binary tree where each node follows a specific heap property. In a min-heap, each parent is less than or equal to its children. In a max-heap, the opposite is True.",
        "target_text": "Question: The ascending heap property is __________\nChoices:\na) a[parent(i)] = a[i]\nb) a[parent(i)] <= a[i]\nc) a[parent(i)] >= a[i]\nd) a[parent(i)] > 2 * a[i]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. The incidence matrix of a simple graph has columns that sum to 2 for each edge.",
        "target_text": "Question: The column sum in an incidence matrix for a simple graph is __________\nChoices:\na) depends on number of edges\nb) always greater than 2\nc) equal to 2\nd) equal to the number of edges\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions. Double hashing is an open addressing technique that reduces clustering.",
        "target_text": "Question: Double hashing is one of the best methods available for open addressing.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. Common operations include enqueue (insertion), dequeue (removal), and peek (access front without removing).",
        "target_text": "Question: Which of the following is NOT a common operation in a queue data structure?\nChoices:\na) enqueue\nb) dequeue\nc) peek\nd) shuffle\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inversions in an array occur when a pair of elements is out of order. Counting inversions is useful in analyzing sorting algorithms like merge sort.",
        "target_text": "Question: Which of the following form inversion in the array arr = {1,5,4,2}?\nChoices:\na) (5,4), (5,2)\nb) (5,4), (5,2), (4,2)\nc) (1,5), (1,4), (1,2)\nd) (1,5)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A Cartesian tree is a binary tree derived from a sequence of numbers. It satisfies the heap property and its in-order traversal yields the original sequence.",
        "target_text": "Question: What is a Cartesian tree?\nChoices:\na) a skip list in the form of tree\nb) a tree which obeys cartesian product\nc) a tree which obeys heap property and whose inorder traversal yields the given sequence\nd) a tree which obeys heap property only\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: In what time can a leftist heap be built?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(log n)\nd) o(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees are used in string matching and compression. Farach's algorithm is one of the linear-time algorithms that can construct suffix trees efficiently, especially in external memory settings.",
        "target_text": "Question: Who among the following algorithm is used in external memory and compression of the suffix tree?\nChoices:\na) weiner's algorithm\nb) farach's algorithm\nc) ukkonen's algorithm\nd) alexander morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Queues are FIFO data structures, but self-balancing binary search trees can be used for efficient implementations of priority queues due to ordered access and rebalancing features.",
        "target_text": "Question: A self - balancing binary search tree can be used to implement __________\nChoices:\na) priority queue\nb) hash table\nc) heap sort\nd) priority queue and heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Stacks can be implemented using arrays or linked lists. Stacks follow LIFO (Last In First Out) behavior, unlike queues which follow FIFO.",
        "target_text": "Question: Which of the following statements about stacks   is incorrect?\nChoices:\na) stacks can be implemented using linked lists.\nb) stacks are first-in, first-out (FIFO) data structures.\nc) new nodes can only be added to the top of the stack.\nd) the last node (at the bottom) of a stack has a null (0) link.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. AVL trees and 2-3 trees are both self-balancing, but they differ in how they manage balance and insertion.",
        "target_text": "Question: AVL trees provide better insertion than 2-3 trees.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: In propositional logic, directed acyclic graphs (DAGs) can represent expressions and computations. Leaves in such graphs may represent boolean constants or variables.",
        "target_text": "Question: In a Propositional Directed Acyclic Graph Leaves maybe labelled with a boolean variable.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: AVL trees are height-balanced binary search trees. The difference in height between left and right subtrees of every node is at most 1.",
        "target_text": "Question: In __________, the difference between the height of   the left sub tree and height of the right tree, for each   node, is almost one.\nChoices:\na) Binary search tree\nb) AVL - tree\nc) Complete tree\nd) Threaded binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Searching algorithms are used to retrieve data from structures. Binary search is an efficient method to find elements in sorted arrays with time complexity O(log n).",
        "target_text": "Question: The complexity of searching an element from a   set of n elements using Binary search algorithm is __________\nChoices:\na) O(n)\nb) O(log n)\nc) O(n2)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A full binary tree can be uniquely constructed using both preorder and postorder traversals. One traversal alone is not sufficient.",
        "target_text": "Question: A full binary tree can be generated using __________\nChoices:\na) post-order and pre-order traversal\nb) pre-order traversal\nc) post-order traversal\nd) in-order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: A pairing heap is a type of heap-ordered multiway tree. It supports many priority queue operations efficiently and is simpler to implement than Fibonacci heaps.",
        "target_text": "Question: How is a pairing heap represented?\nChoices:\na) binary tree\nb) fibonacci tree\nc) heap ordered tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In any rooted tree, the node with no ancestors is the root. All other nodes are descendants.",
        "target_text": "Question: How many nodes in a tree have no ancestors?\nChoices:\na) 0\nb) 1\nc) 2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Union-find data structures with union by size and path compression techniques achieve nearly constant time complexity, amortized over a series of m operations on n elements.",
        "target_text": "Question: What is the worst-case running time of unions done by size and path compression?\nChoices:\na) o(n)\nb) o(logn)\nc) o(n logn)\nd) o(m logn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Abstract Syntax Trees (ASTs) are used in compilers to represent the structure of source code. Operators are represented as internal nodes and operands as leaves.",
        "target_text": "Question: In an abstract syntax tree, each internal node represents an operand and each leaf node represents an operator.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Unrolled linked lists store multiple elements per node, reducing memory allocation and access overhead, which improves insertion and deletion performance.",
        "target_text": "Question: Insertion and deletion are much faster in an unrolled linked list than in a singly linked list.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Arrays can represent binary trees in sequential memory where the height determines the number of elements. A tree of height l has up to 2^l - 1 nodes.",
        "target_text": "Question: What must be the ideal size of array if the height of tree is 'l'?\nChoices:\na) 2^l - 1\nb) l - 1\nc) l\nd) 2^l\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a full binary tree, every node has either 0 or 2 children. A full binary tree with 2n+1 total nodes always contains exactly n non-leaf (internal) nodes.",
        "target_text": "Question: A full binary tree with 2n+1 nodes contain __________.\nChoices:\na) n leaf nodes\nb) n non-leaf nodes\nc) n-1 leaf nodes\nd) n-1 non-leaf nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Expression trees can be built from prefix, infix, or postfix expressions. Only infix cannot uniquely determine an expression tree.",
        "target_text": "Question: Only infix expression can be made into an expression tree.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In separate chaining, each hash bucket contains a list of all elements that hash to the same bucket. A doubly linked list is often used for chaining in hash tables.",
        "target_text": "Question: Which of the following technique stores data in a separate entity in case of a collision?\nChoices:\na) open addressing\nb) chaining using doubly linked list\nc) linear probing\nd) double hashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A Binary Search Tree (BST) is a binary tree where the left subtree contains only nodes with keys less than the parent node and the right subtree only nodes with keys greater. The number of distinct BSTs that can be formed with n keys is the nth Catalan number.",
        "target_text": "Question: How many distinct BSTs can be constructed with 3 distinct keys?\nChoices:\na) 4\nb) 5\nc) 6\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Poor hash functions can lead to clustering, especially when the modulus operator is used with closely packed keys.",
        "target_text": "Question: Which of the following hash functions is most likely to cause clustering in a hash table? Here k is the input key value and m is hash table size. You may assume that all four hash functions generate valid indexes in the hash table.\nChoices:\na) h(k) = k % m\nb) h(k) = floor(m * (k mod 1))\nc) h(k) = k\nd) h(k) = ((k / m) + k * m) + k % m\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: MinHash is a probabilistic technique for estimating similarity between sets. It was originally used to cluster web documents based on shared content (like shingles or n-grams).",
        "target_text": "Question: Which technique was firstly used clustering documents using the similarity of two words or strings?\nChoices:\na) minhash\nb) stack\nc) priority queue\nd) pat tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Bitwise XOR is used to toggle specific bits in a binary representation. It flips a bit from 0 to 1 or from 1 to 0.",
        "target_text": "Question: Which of the following bitwise operations will you use to toggle a particular bit?\nChoices:\na) or\nb) and\nc) xor\nd) not\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: MinHash was used in the AltaVista search engine to detect duplicate pages. It's a fast method to compute Jaccard similarity between large sets.",
        "target_text": "Question: Which technique was firstly used to remove duplicate web pages from search results in AltaVista search engine?\nChoices:\na) minhash\nb) stack\nc) priority queue\nd) pat tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A tree is a hierarchical data structure consisting of nodes. Splay trees are self-adjusting binary search trees where recently accessed elements are moved to the root for fast access.",
        "target_text": "Question: In which of the following self-balancing binary search trees is the recently accessed element moved to the root for quick future access?\nChoices:\na) avl tree\nb) aa tree\nc) splay tree\nd) red-black tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is used to map data to fixed-size values using a hash function. Collision resolution techniques like separate chaining, linear probing, and quadratic probing manage collisions, whereas hashing itself is the overall process.",
        "target_text": "Question: Which of the following is not a collision resolution technique?\nChoices:\na) separate chaining\nb) linear probing\nc) quadratic probing\nd) hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The symbol balancing algorithm checks whether parentheses, brackets, and braces are balanced. It is typically implemented using a stack.",
        "target_text": "Question: Which of the following statement is incorrect with respect to balancing symbols algorithm?\nChoices:\na) {[()]}\nb) ([ )]\nc) {( )}\nd) {[ ]}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Linear search is a sequential search technique, while binary search divides the search space. Binary search is more efficient in large, sorted arrays.",
        "target_text": "Question: Linear search is highly inefficient compared to binary search when dealing with:\nChoices:\na) small, unsorted arrays\nb) small, sorted arrays\nc) large, unsorted arrays\nd) large, sorted arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Separate chaining is a common technique used in hash tables where each bucket is a linked list. A typical hash function for this method is x mod table size.",
        "target_text": "Question: Which of the following is the hashing function for separate chaining?\nChoices:\na) h(x) = (hash(x) + f(i)) mod table size\nb) h(x) = hash(x) + i^2 mod table size\nc) h(x) = x mod table size\nd) h(x) = x mod (table size * 2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Threaded binary trees reduce the need for stack and queue memory by using NULL pointers to point to in-order predecessor or successor. Efficiency, not memory size, is a primary concern.",
        "target_text": "Question: Identify the reason which doesn't play a key role to use threaded binary trees?\nChoices:\na) the storage required by stack and queue is more\nb) the pointers in most of nodes of a binary tree are null\nc) it is difficult to find a successor node\nd) they occupy less size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: In simple uniform hashing, every key is equally likely to hash to any slot, which makes the expected search time constant.",
        "target_text": "Question: In simple uniform hashing, what is the search complexity?\nChoices:\na) o(n)\nb) o(logn)\nc) o(nlogn)\nd) o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Randomized hashing techniques like universal and double hashing reduce clustering and collision frequency by generating hashes independent of the data.",
        "target_text": "Question: Collisions can be reduced by choosing a hash function randomly in a way that is independent of the keys that are actually to be stored.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In memory storage, row-major order stores elements of a 2D array row by row. For a 3x3 matrix, the elements are stored sequentially as they appear row-wise.",
        "target_text": "Question: If row-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inversions represent the number of pairs of elements that are out of order. A sorted array has zero inversions, which is the minimum.",
        "target_text": "Question: Under what condition the number of inversions in an array are minimum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In an AVL tree, after inserting a node, the balance factor of nodes along the path to the root may need to be updated. This ensures the tree remains balanced.",
        "target_text": "Question: To restore the AVL property after inserting an element, we start at the insertion point and move towards the root of the tree. Is this statement true?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Breadth First Traversal (BFS) is implemented using a queue. This data structure allows level-order traversal in graphs or trees.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is?\nChoices:\na) stack\nb) array\nc) queue\nd) tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In array-based representation of binary trees, left and right children of node at index i can be found at 2i+1 and 2i+2 respectively.",
        "target_text": "Question: If binary trees are represented in arrays, what formula can be used to locate a left child, if the node has an index i?\nChoices:\na) 2i+1\nb) 2i+2\nc) 2i\nd) 4i\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Hashing-based searches use probing for insertion and lookup. On average, linear probing requires 2.5 probes for insertion and 1.5 for successful search.",
        "target_text": "Question: How many probes are required on average for insertion and successful search?\nChoices:\na) 4 and 10\nb) 2 and 6\nc) 2.5 and 1.5\nd) 3.5 and 1.5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) effective usage of memory\nb) easier computations\nc) to delete elements based on priority\nd) implement LIFO principle in queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Balanced parentheses checks often use stacks because of their LIFO structure, which mirrors the nesting of brackets. Arrays can store stack data.",
        "target_text": "Question: One can determine whether an infix expression has balanced parenthesis or not by using __________\nChoices:\na) array\nb) queue\nc) stack\nd) tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A heap is a special tree-based data structure that satisfies the heap property and can efficiently support priority queue operations.",
        "target_text": "Question: Heap can be used as __________\nChoices:\na) priority queue\nb) stack\nc) a decreasing order array\nd) normal array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Quadratic probing is a collision resolution technique in open addressing where the hash index is computed as (h(k) + c1*i + c2*i^2) % table_size. Often simplified as f(i) = i^2.",
        "target_text": "Question: Which of the following is the correct function definition for quadratic probing?\nChoices:\na) f(i)=i^2\nb) f(i)=i\nc) f(i)=i+1\nd) f(i)=i^2+1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: The `charAt()` method in Java's `String` class is used to return the character located at a specific index.",
        "target_text": "Question: Which of these methods from the String class is used to extract a single character from an object of String?\nChoices:\na) CHARAT()\nb) charAt()\nc) CharAt()\nd) charAT()\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A suffix tree is a compressed trie that contains all the suffixes of a given string. For a string of length n, the tree has n leaves and helps in efficient string pattern matching.",
        "target_text": "Question: Which statement is correct of suffix tree with a string of length n?\nChoices:\na) The tree has n leaves.\nb) The tree has n roots\nc) Height of tree is n\nd) Depth of tree is n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: Propositional Directed Acyclic Graphs (PDAGs) are used to represent Boolean functions efficiently. They help in logical inference and are fundamental in knowledge representation and reasoning systems.",
        "target_text": "Question: In which of the following case does a Propositional Directed Acyclic Graph is used for?\nChoices:\na) representation of boolean functions\nb) string matching\nc) searching\nd) sorting of number\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Red-Black trees are chosen for frequent insertions, AVL trees for fast lookups due to strict balancing, and B-trees for handling large datasets and disk-based storage.",
        "target_text": "Question: When to choose Red-Black tree, AVL tree and B-trees?\nChoices:\na) many inserts, many searches and when managing more items respectively\nb) many searches, when managing more items respectively and many inserts respectively\nc) sorting, sorting and retrieval respectively\nd) retrieval, sorting and retrieval respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A weight balanced tree is a binary tree where each node stores the size (or weight) of its subtrees to maintain balance. It helps in ensuring efficient insertions, deletions, and access operations.",
        "target_text": "Question: What is a weight balanced tree?\nChoices:\na) a binary tree that stores the sizes of subtrees in nodes\nb) a binary tree with an additional attribute of weight\nc) a height balanced binary tree\nd) a normal binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binomial heap, the number of binomial trees with n nodes corresponds to the number of 1's in the binary representation of n, which is approximately log(n).",
        "target_text": "Question: The number of trees in a binomial heap with n nodes is\nChoices:\na) log n\nb) n\nc) n log n\nd) n/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A doubly linked list allows traversal in both directions and provides direct access to the previous node, which makes deletion of a known node location more efficient compared to a singly linked list.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by linear linked list?\nChoices:\na) deleting a node whose location is given\nb) searching an unsorted list for a given item\nc) inserting a node after the node with a given location\nd) traversing the list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: When converting expressions or evaluating them using a stack, operands are typically placed directly into the output stream or output list.",
        "target_text": "Question: When an operand is read, which of the following is done?\nChoices:\na) it is placed on to the output\nb) it is placed in operator stack\nc) it is ignored\nd) operator stack is emptied\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: An optimal binary search tree minimizes the expected search cost based on known frequencies of access. It is constructed when the access pattern of the keys is known and remains unchanged.",
        "target_text": "Question: What are the conditions for an optimal binary search tree and what is its advantage?\nChoices:\na) the tree should not be modified and you should know how often the keys are accessed, it improves the lookup cost\nb) you should know the frequency of access of the keys, improves the lookup time\nc) the tree can be modified and you should know the number of elements in the tree before hand, it improves the deletion time\nd) the tree should be just modified and improves the lookup time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: It is possible to find the minimum number of steps to reach the end of an array using a greedy or dynamic programming approach in linear time, contrary to common belief.",
        "target_text": "Question: It is not possible to find the minimum number of steps to reach the end of an array in linear time.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: A spanning tree of a connected graph with `n` vertices always contains exactly `n-1` edges. It is a subgraph that connects all the vertices without forming any cycle.",
        "target_text": "Question: The spanning tree of connected graph with 10 vertices contains __________\nChoices:\na) 9 edges\nb) 11 edges\nc) 10 edges\nd) 9 vertices\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a linked list, overflow can occur if a node creation is attempted but there is no available memory (i.e., the free space pool is empty).",
        "target_text": "Question: Overflow condition in linked list may occur when attempting to __________\nChoices:\na) create a node when free space pool is empty.\nb) traverse the nodes when free space pool is empty.\nc) create a node when linked list is empty.\nd) none of these.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Binary Search is the most efficient technique to search in a sorted array, requiring O(log n) time.",
        "target_text": "Question: To search for an element in a sorted array, which searching technique can be used?\nChoices:\na) linear search\nb) jump search\nc) binary search\nd) fibonacci search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Hashing is a technique used to map data (keys) to specific addresses in memory using hash functions. It enables constant-time average-case access.",
        "target_text": "Question: Hashing is the problem of finding an appropriate mapping of keys into addresses.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A single traversal like inorder, preorder, or postorder is not sufficient to uniquely reconstruct a binary tree. At least two traversals (such as inorder and preorder) are required.",
        "target_text": "Question: Can a tree stored in an array using either one of inorder or post order or pre order traversals be again reformed?\nChoices:\na) yes just traverse through the array and form the tree\nb) no we need one more traversal to form a tree\nc) no in case of sparse trees\nd) yes by using both inorder and array elements\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: In C/C++, the `strcmp()` function compares two strings. If both strings are identical, it returns `0`.",
        "target_text": "Question: If two string s are identical, then strcmp() functions returns __________\nChoices:\na) -1\nb) 1\nc) yes\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a randomized binary search tree, the expected number of leaves is generally (n + 1)/3, assuming uniform insertion probabilities.",
        "target_text": "Question: What is the expected number of leaves in a randomized binary search tree?\nChoices:\na) n + 1\nb) (n + 1)/3\nc) (n + 1)/2\nd) n + 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A stack is a Last-In First-Out (LIFO) structure. Saying it is FIFO is incorrect. Stacks are commonly implemented using linked lists where the top points to the most recently added node.",
        "target_text": "Question: Which of the following statement(s) about stack data structure is/are NOT correct?\nChoices:\na) linked list are used for implementing stacks\nb) top of the stack always contain the new node\nc) stack is the fifo data structure\nd) null link is present in the last node at the bottom of the stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A complete graph with n vertices has an edge between every pair of distinct vertices. The number of edges is given by the formula (n*(n-1))/2.",
        "target_text": "Question: What is the number of edges present in a complete graph having n vertices?\nChoices:\na) (n*(n+1))/2\nb) (n*(n-1))/2\nc) n\nd) information given is insufficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Bit arrays are memory-efficient data structures that enable compact storage and bit-level operations. However, accessing individual bits can be slower due to bit masking and shifting.",
        "target_text": "Question: Which of the following is not an advantage of bit array?\nChoices:\na) exploit bit level parallelism\nb) maximal use of data cache\nc) can be stored and manipulated in the register set for long periods of time\nd) accessing individual elements is easy\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a randomized binary search tree (RBST), the expected depth of a node is approximately 2 * log(n) + O(1), based on probabilistic balancing during insertion.",
        "target_text": "Question: What is the expected depth of a node in a randomized binary search tree?\nChoices:\na) log n\nb) n!\nc) n²\nd) 2 log n + o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In threaded binary trees, null pointers are replaced with special pointers (threads) to the in-order predecessor or successor. A single-threaded tree has one such pointer, while a double-threaded tree has two.",
        "target_text": "Question: What are double and single threaded trees?\nChoices:\na) when both left, right nodes are having null pointers and only right node is null pointer respectively\nb) having 2 and 1 node\nc) using single and double linked lists\nd) using heaps and priority queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a k-d tree, the 'k' refers to the number of dimensions. It is a space-partitioning data structure for organizing points in a k-dimensional space.",
        "target_text": "Question: In a k-d tree, k originally meant?\nChoices:\na) number of dimensions\nb) size of tree\nc) length of node\nd) weight of node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Cartesian trees are used in scenarios requiring range minimum queries and lowest common ancestor computations. They combine properties of a heap and binary search tree.",
        "target_text": "Question: Cartesian trees are most suitable for?\nChoices:\na) searching\nb) finding nth element\nc) minimum range query and lowest common ancestors\nd) self balancing a tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A suffix tree can be constructed using a suffix array and an LCP (Longest Common Prefix) array, which together allow efficient representation and search in strings.",
        "target_text": "Question: LCP array and __________ is used to construct suffix tree.\nChoices:\na) hash tree\nb) hash trie\nc) suffix array\nd) balanced tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a min heap, the value of the parent node is always less than or equal to its child nodes. This ensures the minimum element is always at the root.",
        "target_text": "Question: In a min heap:\nChoices:\na) minimum values are stored.\nb) child nodes have less value than parent nodes.\nc) parent nodes have less value than child nodes.\nd) maximum value is contained by the root node.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Suffix trees are widely used in bioinformatics for tasks like DNA sequence alignment, pattern matching, and repeat finding.",
        "target_text": "Question: Can suffix tree be used in bioinformatics problems and solutions.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a randomized binary search tree, the longest path during insertion can be analyzed probabilistically. The expected maximum depth for inserting a node is around 4.311 * log(x).",
        "target_text": "Question: What is the longest length path for a node x in random binary search tree for the insertion process?\nChoices:\na) log x\nb) x²\nc) x!\nd) 4.311 log x\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Searching for a specific element in a heap requires scanning each node, as heaps are not designed for search operations. Therefore, the worst-case time complexity is O(n).",
        "target_text": "Question: What is the time complexity of searching in a heap?\nChoices:\na) o(logn)\nb) o(n)\nc) o(1)\nd) o(nlogn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Heap data structures are widely used in various real-world applications such as medical systems (task scheduling), file compression (Huffman coding), and stock market analysis (priority queues).",
        "target_text": "Question: What are the applications of the heap data structure?\nChoices:\na) medical applications\nb) file compression\nc) stock market\nd) all of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The time complexity for multiplying two matrices of order m*n and n*p using standard matrix multiplication is O(mnp), where m, n, and p are the respective dimensions.",
        "target_text": "Question: The complexity of multiplying two matrices of order m*n and n*p is __________.\nChoices:\na) mnp\nb) mp\nc) mn\nd) np\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: Circular queues optimize memory use by treating the queue as a circular buffer. They are beneficial in memory management, traffic systems, and CPU scheduling.",
        "target_text": "Question: Which of the following is/are advantages of circular queue?\nChoices:\na) memory management\nb) traffic system\nc) cpu scheduling\nd) all of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In direct addressing, each key has a unique position in an array, meaning there's a one-to-one correspondence between keys and array indices. This allows constant-time access but requires large arrays if the key range is large.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) distinct array position for every possible key\nb) fewer array positions than keys\nc) fewer keys than array positions\nd) distinct array positions for keys based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Priority scheduling can cause issues like starvation and indefinite blocking for low-priority processes. However, interrupt handling is a standard OS function and not a specific disadvantage of this scheduling.",
        "target_text": "Question: What is not a disadvantage of priority scheduling in operating systems?\nChoices:\na) a low priority process might have to wait indefinitely for the cpu\nb) if the system crashes, the low priority systems may be lost permanently\nc) interrupt handling\nd) indefinite blocking\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Circular queues are used to optimize memory usage by wrapping around when the end of the array is reached, unlike linear queues which can waste space after deletions.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) easier computations\nb) implement lifo principle in queues\nc) effective usage of memory\nd) to delete elements based on priority\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a binary search tree (BST), an inorder traversal visits the nodes in sorted (increasing) order. This property makes it useful for producing sorted output.",
        "target_text": "Question: What is the speciality about the inorder traversal of a binary search tree?\nChoices:\na) it traverses in a non increasing order\nb) it traverses in an increasing order\nc) it traverses in a random fashion\nd) it traverses based on priority of the node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Computational geometry is a field of computer science that deals with the study and development of algorithms to solve geometric problems. It plays an important role in computer graphics, robotics, and more.",
        "target_text": "Question: What is computational geometry?\nChoices:\na) study of geometry using a computer\nb) study of geometry\nc) study of algorithms\nd) study of algorithms related to geometry\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: In evaluating infix expressions using stacks, the precedence of operators determines the evaluation order. Higher precedence should not trigger immediate evaluation--only lower or equal precedence should.",
        "target_text": "Question: Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?\nChoices:\na) operand is pushed on to the stack\nb) if the precedence of operator is higher, pop two operands and evaluate\nc) if the precedence of operator is lower, pop two operands and evaluate\nd) the result is pushed on to the operand stack\nAnswer: b"
    },