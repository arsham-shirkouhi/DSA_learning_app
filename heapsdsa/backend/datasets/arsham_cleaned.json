[
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: If implemented using a circular array, both ENQUEUE and DEQUEUE operations in a queue can be performed in constant time O(1).",
        "target_text": "Question: A queue is implemented using an array such that ENQUEUE and DEQUEUE operations are performed efficiently. Which one of the following statements is CORRECT (n refers to the number of items in the queue)?\nChoices:\na) Both operations can be performed in O(1) time\nb) At most one operation can be performed in O(1) time but the worst case time for the other operation will be Ω(n)\nc) The worst case time complexity for both operations will be Ω(n)\nd) Worst case time complexity for both operations will be Ω(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Dijkstra's algorithm implemented using a binary heap and adjacency list has a time complexity of O((|E| + |V|) log |V|).",
        "target_text": "Question: Let G(V, E) be an undirected graph with positive edge weights. Dijkstra's single-source shortest path algorithm can be implemented using the binary heap data structure with time complexity:\nChoices:\na) O(|V|^2)\nb) O(|E| + |V| log |V|)\nc) O(|V| log |V|)\n d)O((|E| + |V|) log |V|)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Circular linked lists are ideal for applications like CPU scheduling in operating systems, where processes are managed in a circular queue-like structure.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) Undo operation in a text editor\nb) Recursive function calls\nc) Allocating CPU to resources\nd) Implement Hash Tables\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inserting or deleting at the beginning of an array requires shifting all elements, resulting in a time complexity of O(n).",
        "target_text": "Question: What is the time complexity for inserting/deleting at the beginning of the array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In most queue implementations (especially circular arrays or linked lists), DEQUEUE (removal from the front) is a constant-time O(1) operation.",
        "target_text": "Question: Which of the following operations on a queue data structure have a time complexity of O(1)?\nChoices:\na) Enqueue and Clear\nb) Dequeue and Peek\nc) Enqueue and Peek\nd) Clear only\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: If a hash table uses a balanced binary tree for chaining (instead of a linked list), the average search time is O(log n), but if it's incorrectly assumed the key is always at the root, the worst-case could be O(n). However, under ideal conditions and assuming direct access, some sources may still classify it as O(1).",
        "target_text": "Question: What is the time complexity of the search function in a hash table using a binary tree?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Deleting a node at index i in a binary heap may require both upward and downward heapify operations. The time complexity is O(d), where d is the depth of the heap.",
        "target_text": "Question: An operator delete(i) for a binary heap data structure is to be designed to delete the item in the i-th node. Assume that the heap is implemented in an array and i refers to the i-th index of the array. If the heap tree has depth d (number of edges on the path from the root to the farthest leaf), then what is the time complexity to re-fix the heap efficiently after the removal of the element?\nChoices:\na) O(1)\nb) O(d) but not O(1)\nc) O(2d) but not O(d)\nd) O(d2^d) but not O(2d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, the time to search for an element is O(n) in the worst case as each node might have to be visited.",
        "target_text": "Question: What is the time complexity of searching for an element in a circular linked list?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(1)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In direct address tables, insertion takes O(1) time as each key maps directly to a slot based on its value.",
        "target_text": "Question: What is the time complexity to insert an element into the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The top tree is a dynamic tree structure. Initializing it requires constructing subtrees for each node, which takes O(n) time.",
        "target_text": "Question: What is the time complexity for the initialization of top tree?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(log n)\nd) O(n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Using a self-balancing BST to count inversions in an array reduces the time complexity from O(n^2) in nested loops to O(n log n).",
        "target_text": "Question: The time complexity of the code that determines the number of inversions in an array using self-balancing BST is lesser than that of the code that uses loops for the same purpose.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Search | Context: Binary search divides the search space in half at each step, resulting in a worst-case time complexity of θ(log n), not θ(n). The original answer may be incorrect.",
        "target_text": "Question: What is the worst case run-time complexity of binary search algorithm?\nChoices:\na) θ(log n)\nb) θ(n)\nc) θ(n log n)\nd) θ(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Inserting into a sorted array in the worst case requires shifting all elements after the insertion point, resulting in O(n) time complexity.",
        "target_text": "Question: What is the worst case time complexity of inserting an element into the sorted array?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: In the worst case, inserting or deleting elements at the end of a dynamic array requires resizing, which takes O(n) time. However, this is amortized and not typical.",
        "target_text": "Question: In special case, the time complexity of inserting/deleting elements at the end of dynamic array is __________\nChoices:\na) O(n)\nb) O(sqrt(n))\nc) O(log n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In the best-case and average-case scenarios, inserting into a hash table or direct address table is O(1). Thus, the worst-case insertion can still be O(1) under ideal hashing.",
        "target_text": "Question: What is the worst-case time complexity of an insertion operation in a hash table (n = number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a binary min heap, operations like insert, delete, and decrease-key are O(log n), but merging with another heap is costlier and takes O(n) if not using specialized structures.",
        "target_text": "Question: Which of the following Binary Min Heap operation has the highest time complexity?\nChoices:\na) Inserting an item under the assumption that the heap has capacity to accommodate one more item\nb) Merging with another heap under the assumption that the heap has capacity to accommodate items of other heap\nc) Deleting an item from heap\nd) Decreasing value of a key\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a circular linked list, nodes form a cycle and none of them point to NULL; instead, the last node points to the head.",
        "target_text": "Question: In a circular linked list, how many nodes contain NULL as the address?\nChoices:\na) Only one node\nb) Only two nodes\nc) Every node\nd) None\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: When a graph is represented by an adjacency list, checking whether an edge exists between two vertices may require scanning through the adjacency list, which takes O(V) in the worst case.",
        "target_text": "Question: Time complexity to find if there is an edge between 2 particular vertices is __________\nChoices:\na) O(V)\nb) O(E)\nc) O(1)\nd) O(V + E)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Finding the longest repeated substring in a string using suffix arrays or suffix trees can be done in linear time O(n).",
        "target_text": "Question: What is a time complexity for finding the longest substring that is repeated in a string?\nChoices:\na) O(log n!)\nb) θ(n!)\nc) O(n^2 + n)\nd) θ(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Ukkonen's algorithm constructs a suffix tree in O(n log n) time in the worst case, though it performs better in practice and is often considered linear.",
        "target_text": "Question: What is the time complexity of Ukkonen's algorithm?\nChoices:\na) O(log n!)\nb) O(n!)\nc) O(n^2)\nd) O(n log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: Building a heap is called heapifying. This process organizes the array into a heap by applying the heapify function from the bottom up.",
        "target_text": "Question: What is the process of building a ternary heap called?\nChoices:\na) Heapify\nb) Hashing\nc) Linking\nd) Merging\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: When candidates are evenly distributed in bins and a query operation intersects k bins, the total time complexity is O(k).",
        "target_text": "Question: What will be the time complexity of query operation if all the candidates are evenly spaced so that each bin has constant number of candidates? (k = number of bins query rectangle intersects)\nChoices:\na) O(1)\nb) O(k)\nc) O(k^2)\nd) O(log k)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The optimal algorithm to find the intersection node of two linked lists runs in θ(m+n) by aligning the traversal length of both lists.",
        "target_text": "Question: Suppose there are two singly linked lists both of which intersect at some point and become a single linked list. The head or start pointers of both the lists are known, but the intersecting node and lengths of lists are not known. What is the worst-case time complexity of the optimal algorithm to find the intersecting node from two intersecting linked lists?\nChoices:\na) θ(n*m)\nb) θ(n^2), where m > n\nc) θ(m+n)\nd) θ(min(n, m))\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Path compression optimizes disjoint set operations. When combined with union by rank, its worst-case time complexity becomes O(M log N) where M is the number of operations.",
        "target_text": "Question: What is the worst case efficiency for a path compression algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: If only the front pointer is maintained in a queue implemented using a linked list, insertion (at rear) and emptying the queue both require O(n) time.",
        "target_text": "Question: In linked list implementation of queue, if only front pointer is maintained, which of the following operations take worst-case linear time?\nChoices:\na) Insertion\nb) Deletion\nc) To empty a queue\nd) Both Insertion and To empty a queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Rotating elements one by one involves shifting the entire array multiple times, making it the most expensive among rotation algorithms with time complexity O(n*d).",
        "target_text": "Question: Which of the following algorithms to rotate an array has the maximum time complexity?\nChoices:\na) Rotate elements one by one\nb) Juggling algorithm\nc) Reversal algorithm\nd) Using a temporary array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In rope data structures, each operation like finding a character at index x or splitting a string is supported in O(log n) time due to the tree-based representation.",
        "target_text": "Question: What is the time complexity for finding the node at x position where n is the length of the rope?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Although binary tree sort with self-balancing BSTs achieves O(n log n) complexity in the worst case, it can be slower than Merge Sort due to higher constant factors and tree rotations.",
        "target_text": "Question: Binary tree sort implemented using a self-balancing binary search tree takes O(n log n) time in the worst case but is still slower than Merge Sort.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To construct an AVL tree without rotations, one can sort the input, find the median as root, and build the tree recursively to maintain balance.",
        "target_text": "Question: Given an empty AVL tree, how would you construct an AVL tree when a set of numbers is given without performing any rotations?\nChoices:\na) Just build the tree with the given input\nb) Find the median of the set of elements given, make it as root and construct the tree\nc) Use trial and error\nd) Use dynamic programming to build the tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In asymptotic notation, expressions with exponential growth (e.g., 2^f(n)) dominate polynomial or linear terms, making 2^θ(n) worse than θ(n^3), θ(n + 9378), or n^θ(1).",
        "target_text": "Question: Which of the following asymptotic notations is the worst among all?\nChoices:\na) θ(n + 9378)\nb) θ(n^3)\nc) n^θ(1)\nd) 2^θ(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Finding the longest common substring between two strings S1 and S2 can be done using dynamic programming or suffix automata in θ(n1 + n2) time.",
        "target_text": "Question: What is the time complexity for finding the longest substring that is common in strings S1 and S2 (n1 and n2 are the string lengths of S1 and S2 respectively)?\nChoices:\na) O(log n!)\nb) θ(n!)\nc) O(n^2 + n1)\nd) θ(n1 + n2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To compute the total length of strings on all edges of a tree (like a suffix tree), we may need to traverse each node and sum string lengths, which can result in O(n^2) in the worst case.",
        "target_text": "Question: What is the time complexity for finding the total length of all strings on all edges of a tree?\nChoices:\na) θ(n)\nb) θ(n!)\nc) θ(1)\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The Bellman-Ford algorithm has a time complexity of θ(V*E). In a complete graph, E = V(V-1) = θ(V^2), so the total becomes θ(V*V^2) = θ(V^3).",
        "target_text": "Question: What is the time complexity of Bellman-Ford single-source shortest path algorithm on a complete graph of n vertices?\nChoices:\na) θ(V^2)\nb) θ(V^2 log V)\nc) θ(V^3)\nd) θ(V^3 log V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In simple chaining used in hash tables, doubly linked lists are often preferred as they simplify deletion of elements by allowing backward traversal.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) Doubly linked list\nb) Circular linked list\nc) Singly linked list\nd) Binary trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: If frequent random access by position is needed, an array-based representation of a linked list provides constant-time O(1) access.",
        "target_text": "Question: What kind of linked list is best to answer questions like 'What is the item at position n?'\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Array implementation of linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In weak heaps, the minimum element is usually stored at the root. Thus, searching for the minimum value takes constant time O(1).",
        "target_text": "Question: What is the worst case time in searching minimum value in weak-heap?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Direct address tables map keys directly to an index in an array. Deleting an element requires only overwriting the index, so time complexity is O(1).",
        "target_text": "Question: What is the time complexity to delete an element from the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Depth First Traversal (DFS) visits each vertex and edge once in a graph. Its time complexity is Θ(|V| + |E|), where V is the number of vertices and E is the number of edges.",
        "target_text": "Question: Time complexity of Depth First Traversal is __________\nChoices:\na) Θ(|V| + |E|)\nb) Θ(|V|)\nc) Θ(|E|)\nd) Θ(|V|*|E|)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: To calculate the sum of all leaf nodes in a binary tree, we must traverse each node at least once. Thus, the time complexity is O(n).",
        "target_text": "Question: The time complexity of calculating the sum of all leaf nodes in an n-node binary tree is __________\nChoices:\na) O(n^2)\nb) O(n + 1)\nc) O(1)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: The optimal Build Heap operation uses a bottom-up approach, which has a linear time complexity of O(n) instead of O(n log n).",
        "target_text": "Question: What is the best case complexity in building a heap?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n log^2 n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The code reverses the first k elements of an array, which takes O(k) time since it performs k/2 swaps.",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) O(k)\nb) O(n)\nc) O(k log k)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The postfix expression 2 3 + 4 5 6 - - * evaluates as: 2 + 3 = 5, 5 - 6 = -1, 4 - (-1) = 5, 5 * 5 = 25.",
        "target_text": "Question: What is the value of the postfix expression 2 3 + 4 5 6 - - *?\nChoices:\na) 19\nb) 21\nc) -4\nd) 25\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Operations like Find Next and Find Previous are often supported in ordered data structures like balanced search trees or linked lists with additional pointers.",
        "target_text": "Question: Can operations like Find Next and Find Previous be implemented in ordered data structures like balanced trees or linked lists?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stacks are inherently used for operations such as expression evaluation, recursion, and reversing strings. Job scheduling typically involves queues or priority queues.",
        "target_text": "Question: Which of the following is not an inherent application of stack?\nChoices:\na) Reversing a string\nb) Evaluation of postfix expression\nc) Implementation of recursion\nd) Job scheduling\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Recursion is implemented via a function call stack. Internally, this stack is often implemented using an array-based structure or a True stack data structure.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Stack\nb) Queue\nc) List\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Most infix expression evaluation algorithms convert the input to postfix or prefix and evaluate in a single pass using a stack. Thus, one pass is sufficient.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Most infix expression evaluation algorithms convert the input to postfix or prefix and evaluate in a single pass using a stack. Thus, one pass is sufficient.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: The given recursive function prints a linked list in reverse order using post-order traversal logic.",
        "target_text": "Question: What does the following function do for a given Linked List with first node as head?\nvoid fun1(struct node* head)\n{\n  if(head == NULL)\n    return;\n  \n  fun1(head->next);\n  printf(\"%d  \", head->data);\n}, \nChoices:\na) Prints all nodes of linked list\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Hashing | Context: Double hashing generates more probe sequences than linear or quadratic probing due to the use of two hash functions.",
        "target_text": "Question: Which technique has the greatest number of probe sequences?\nChoices:\na) Linear probing\nb) Quadratic probing\nc) Double hashing\nd) Closed hashing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Dynamic arrays perform poorly when reallocation is costly and the array size is small. In such cases, the overhead of dynamic resizing isn't worth the benefit.",
        "target_text": "Question: In which of the following cases are dynamic arrays not preferred?\nChoices:\na) If the size of the array is unknown\nb) If the size of the array changes after few iterations\nc) If the memory reallocation is expensive\nd) If the array holds fewer elements\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: In memory allocation, freelists can be implemented implicitly via garbage collection or explicitly via calls to malloc/new.",
        "target_text": "Question: What are implicit and explicit implementations of freelists?\nChoices:\na) Garbage collection and new/malloc respectively\nb) New/malloc and garbage collection respectively\nc) Implicit implementation is not favored\nd) Explicit implementation is not favored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The rope data structure allows for efficient insertion and deletion due to its tree-like structure, often outperforming arrays.",
        "target_text": "Question: Is insertion and deletion operation faster in rope than in an array?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: A triply linked list does not inherently prevent the insertion of duplicate nodes. Nodes with identical data can still be added.",
        "target_text": "Question: A node will be rejected while inserting if the given node is already present in a triply linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a B-tree of order n, each non-root node must contain at least ceil(n/2) - 1 keys, which simplifies to at least (n-1)/2 keys for simplicity.",
        "target_text": "Question: A B-tree of order n is an order-n multiway tree in which each non-root node contains __________\nChoices:\na) at most (n - 1)/2 keys\nb) exactly (n - 1)/2 keys\nc) at least 2n keys\nd) at least (n - 1)/2 keys\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Buddy memory allocation manages free memory blocks by dividing memory into powers of two and maintaining multiple free lists, each for a specific block size.",
        "target_text": "Question: What is buddy memory management of free lists?\nChoices:\na) Modified version of first fit\nb) Buddy allocation keeps several free lists, each one holds blocks which are of one particular size\nc) Modified version of best fit\nd) A tree representation of free lists\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Accessing an index beyond the bounds of an array in Java throws an ArrayIndexOutOfBoundsException, as shown in the given code.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array {\n\tpublic static void main(String args[]) {\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[5]);\n\t}\n}\nChoices:\na) 4\nb) 5\nc) ArrayIndexOutOfBoundsException\nd) InvalidInputException\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Skew merging is an efficient variant of merge used in skew heaps. It has amortized logarithmic time complexity due to its adaptive merging.",
        "target_text": "Question: What is the amortized efficiency of skew merge?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Binary trees can be traversed using strategies like depth-first (pre-order, in-order, post-order) or breadth-first (level order).",
        "target_text": "Question: Which traversal strategy visits nodes level by level from top to bottom in a binary tree?\nChoices:\na) Depth-first traversal\nb) Breadth-first traversal\nc) Random traversal\nd) Priority traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Tracking a stack operation sequence helps identify the order of elements popped. The correct answer must reflect the final stack state after each operation.",
        "target_text": "Question: If the sequence of operations - push(1), push(2), pop, push(1), push(2), pop, pop, pop, push(2), pop - is performed on a stack, the sequence of popped out values is:\nChoices:\na) 2,2,1,1,2\nb) 2,2,1,2,2\nc) 2,1,2,2,1\nd) 2,1,2,2,2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: Stack operations such as reversing strings, evaluating expressions, and simulating recursion are inherent. Job scheduling typically uses queues or heaps.",
        "target_text": "Question: Which data structure can be used to test a palindrome?\nChoices:\na) Tree\nb) Heap\nc) Stack\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Prefix expressions are evaluated from right to left, while postfix expressions are evaluated from left to right.",
        "target_text": "Question: Given a prefix and a postfix notation, what is the difference between them?\nChoices:\na) The postfix equation is solved starting from the left whereas the prefix notation is solved from the right\nb) The postfix equation is solved starting from the right whereas the prefix notation is solved from the left\nc) Both equations are solved starting from the same side (right)\nd) Both equations are solved starting from the same side (left)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Breadth-First Search (BFS) uses a queue to explore all neighboring nodes before moving to the next level. Thus, a queue is required for BFS.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is __________\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Hash tables rely on a hash function to compute the index where an input record should be stored in the underlying array.",
        "target_text": "Question: Which of the following is used in hash tables to determine the index of any input record?\nChoices:\na) Hash function\nb) Hash linked list\nc) Hash tree\nd) Hash chaining\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: An inversion is a pair (i, j) such that i < j and arr[i] > arr[j]. It's used to count disorder in an array.",
        "target_text": "Question: What is the condition for two elements arr[i] and arr[j] to form an inversion?\nChoices:\na) arr[i] < arr[j]\nb) i < j\nc) arr[i] < arr[j] and i < j\nd) arr[i] > arr[j] and i < j\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists offer better memory management and efficient insertion/deletion over arrays, saving both space and time under many circumstances.",
        "target_text": "Question: Linked list data structure offers considerable saving in __________\nChoices:\na) Computational Time\nb) Space Utilization\nc) Space Utilization and Computational Time\nd) Speed Utilization\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: XOR-linked lists use XOR operations instead of traditional pointers, offering a memory-efficient way to store links with a single field.",
        "target_text": "Question: Which of the following is an application of XOR-linked lists?\nChoices:\na) Implementing stacks\nb) Implementing queues\nc) Memory-efficient linked list representation\nd) Caching data structures\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Top Trees are used for maintaining dynamic trees and support operations like link, cut, and expose, which help in manipulating subtrees efficiently.",
        "target_text": "Question: Which of the dynamic operations are used in Top Tree data structure implementation?\nChoices:\na) Link\nb) Cut\nc) Expose\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: The array-based representation of binary trees supports random access, whereas linked representations lack this feature and require extra space for pointers.",
        "target_text": "Question: Disadvantages of linked list representation of binary trees over arrays?\nChoices:\na) Randomly accessing is not possible\nb) Extra memory for a pointer is needed with every element in the list\nc) Difficulty in deletion\nd) Random access is not possible and extra memory with every element\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Recursion is implemented using the call stack. Hence, stack is the underlying data structure used for implementing recursion.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Arrays\nd) List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: Linked lists allocate memory dynamically at runtime, making them an example of dynamic memory allocation.",
        "target_text": "Question: Linked list is considered as an example of __________ type of memory allocation.\nChoices:\na) Dynamic\nb) Static\nc) Compile time\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: A dequeue (double-ended queue) has many applications including job scheduling, flexible data access (like stacks and queues), and efficient sliding window computations.",
        "target_text": "Question: What are the applications of dequeue?\nChoices:\na) A-Steal job scheduling algorithm\nb) Can be used as both stack and queue\nc) To find the maximum of all subarrays of size k\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Sparse matrices store only non-zero values, which reduces storage and improves speed. However, algorithms for sparse matrices are often more complex.",
        "target_text": "Question: Which of the following is the disadvantage of sparse matrices over normal matrices?\nChoices:\na) Size\nb) Speed\nc) Easily compressible\nd) Algorithm complexity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Multiplicative hashing computes h(k) = floor(p * (k * s mod 2^w) / 2^w). For the key 123456 and given parameters, h(k) = 67.",
        "target_text": "Question: What is the value of h(k) for the key 123456?\nGiven: p = 14, s = 2654435769, w = 32\nChoices:\na) 123\nb) 456\nc) 70\nd) 67\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Stack | Context: MinHash is a technique used in hashing-based approaches to estimate similarity between sets (like Jaccard similarity).",
        "target_text": "Question: Which technique is used for finding similarity between two sets?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Abstract Syntax Trees (ASTs) are widely used in compilers and static analyzers to represent the syntactic structure of code.",
        "target_text": "Question: Which of the following is an application of abstract syntax tree?\nChoices:\na) Static code analyzing\nb) Implement indexing in databases\nc) Used for dynamic memory allocation\nd) To represent networks of communication\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In red-black trees, each node is colored either red or black, and the root node is always black to maintain balance properties.",
        "target_text": "Question: What is the special property of red-black trees and what should the root always be?\nChoices:\na) A color which is either red or black and root should always be black\nb) Height of the tree\nc) Pointer to next node\nd) A color which is either green or black\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: String | Context: Binary Decision Diagrams (BDDs) are used to represent Boolean functions efficiently in computational logic and verification tasks.",
        "target_text": "Question: In which of the following cases is a Binary Decision Diagram used?\nChoices:\na) Representation of Boolean Functions\nb) String Matching\nc) Searching\nd) Sorting of numbers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: The algorithm to balance symbols in code typically includes checks for parentheses (), brackets [], and braces {}, using a stack to ensure proper nesting.",
        "target_text": "Question: Which of the following does the balancing symbols algorithm include?\nChoices:\na) Balancing double quotes\nb) Balancing single quotes\nc) Balancing operators and brackets\nd) Balancing parentheses, brackets and braces\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Breadth-First Search (BFS) visits nodes level by level, similar to level order traversal in a binary tree.",
        "target_text": "Question: Which of the following graph traversals closely imitates level order traversal of a binary tree?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Depth & Breadth First Search\nd) Binary Search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: In a max-heap, new elements are inserted and then bubbled up to maintain heap order. After inserting 1 and 7 into the heap [10, 8, 5, 3, 2], the result is [10, 8, 7, 3, 2, 1, 5].",
        "target_text": "Question: A Priority-Queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements '1' and '7' are inserted in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 5, 3, 2, 1\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 3, 2, 1, 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Graph | Context: A Directed Acyclic Graph (DAG) with V vertices can have at most V(V-1)/2 edges while still maintaining its acyclic property.",
        "target_text": "Question: With V (greater than 1) vertices, how many edges at most can a Directed Acyclic Graph possess?\nChoices:\na) (V*(V-1))/2\nb) (V*(V+1))/2\nc) (V+1)C2\nd) (V-1)C2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In a Binary Search Tree (BST), in-order traversal visits nodes in ascending order and hence yields sorted output.",
        "target_text": "Question: Which of the following traversal outputs the data in sorted order in a BST?\nChoices:\na) Preorder\nb) Inorder\nc) Postorder\nd) Level order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: Run-Length Encoding (RLE) is a form of lossless data compression used to encode sequences of repeated values in bit arrays.",
        "target_text": "Question: Run-Length encoding is used to compress data in bit arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Queue | Context: To implement a queue using stacks, the minimum number required is two--one for enqueue and another for dequeue operations.",
        "target_text": "Question: The minimum number of stacks needed to implement a queue is:\nChoices:\na) 3\nb) 1\nc) 2\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: In a singly linked list, deleting the last element requires traversal from the head to find the node before the last one, leading to time complexity dependent on list length.",
        "target_text": "Question: Consider a single linked list where F and L are pointers to the first and last elements respectively of the linked list. The time for performing which of the given operations depends on the length of the linked list?\nChoices:\na) Delete the first element of the list\nb) Interchange the first two elements of the list\nc) Delete the last element of the list\nd) Add an element at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting infix expressions like (A+B)*(C-D)/E*F into prefix notation requires proper operator ordering. The correct prefix form is * / * + A B - C D E F.",
        "target_text": "Question: The prefix of (A+B)*(C-D)/E*F is:\nChoices:\na) /+-AB*CD\nb) /*+-ABCD*EF\nc) */*+AB-CDEF\nd) **AB+CD/EF\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Array | Context: An array is a collection of elements stored in contiguous memory locations, all of the same data type.",
        "target_text": "Question: Which of these best describes an array?\nChoices:\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialized\nd) Array is not a data structure\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: B-trees are widely used in databases and file systems for external memory storage due to their balanced structure and efficient disk I/O.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) AVL tree\nb) B-tree\nc) Red-black tree\nd) Both AVL tree and Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In database systems, B+ trees are preferred because they support range queries efficiently and store data in leaves in sorted order.",
        "target_text": "Question: Which one of the following data structures is preferred in database-system implementation?\nChoices:\na) AVL tree\nb) B-tree\nc) B+ tree\nd) Splay tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: In the Union-Find (Disjoint Set) data structure, path compression leads to ranks increasing from the leaves up toward the root.",
        "target_text": "Question: In the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from?\nChoices:\na) Leaf to root\nb) Root to node\nc) Root to leaf\nd) Left subtree to right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Heap | Context: In a max-heap or min-heap, the root is the largest or smallest element. Subtree roots can still be larger/smaller than the overall root, so the statement is False.",
        "target_text": "Question: The roots of the elements of the subtrees are smaller than the root of the heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Theory | Context: Converting a postfix expression to infix is generally easier to implement compared to prefix because postfix evaluation uses a straightforward stack approach.",
        "target_text": "Question: Given two processes (conversion of postfix to infix and prefix to infix), which of the following is easier to implement?\nChoices:\na) Both are easy to implement\nb) Postfix to infix is harder than prefix to infix\nc) Postfix to infix is easier than prefix to infix\nd) Insufficient data\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Linked List | Context: An unrolled linked list stores elements in blocks, and the space complexity is O(n) since each element must be stored explicitly.",
        "target_text": "Question: Which of the following represents the space complexity for an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: The number of different randomized binary search trees that can be formed from a given permutation of (1,3,2) is determined by unique insertion orders.",
        "target_text": "Question: How many randomized binary search trees can be formed by the numbers (1, 3, 2)?\nChoices:\na) 2\nb) 3\nc) 6\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Topic: Tree | Context: Splay trees are self-adjusting binary search trees that perform access operations and restructuring in logarithmic amortized time.",
        "target_text": "Question: Which of the following is the self-adjusting binary search tree?\nChoices:\na) AVL Tree\nb) Splay Tree\nc) Top Tree\nd) Ternary Tree\nAnswer: b"
    },