[
    {
        "input_text": "Generate a data structure MCQ | Context: If implemented using a circular array, both ENQUEUE and DEQUEUE operations in a queue can be performed in constant time O(1).",
        "target_text": "Question: A queue is implemented using an array such that ENQUEUE and DEQUEUE operations are performed efficiently. Which one of the following statements is CORRECT (n refers to the number of items in the queue)?\nChoices:\na) Both operations can be performed in O(1) time\nb) At most one operation can be performed in O(1) time but the worst case time for the other operation will be Ω(n)\nc) The worst case time complexity for both operations will be Ω(n)\nd) Worst case time complexity for both operations will be Ω(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dijkstra's algorithm implemented using a binary heap and adjacency list has a time complexity of O((|E| + |V|) log |V|).",
        "target_text": "Question: Let G(V, E) be an undirected graph with positive edge weights. Dijkstra's single-source shortest path algorithm can be implemented using the binary heap data structure with time complexity:\nChoices:\na) O(|V|^2)\nb) O(|E| + |V| log |V|)\nc) O(|V| log |V|)\n d)O((|E| + |V|) log |V|)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular linked lists are ideal for applications like CPU scheduling in operating systems, where processes are managed in a circular queue-like structure.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) Undo operation in a text editor\nb) Recursive function calls\nc) Allocating CPU to resources\nd) Implement Hash Tables\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting or deleting at the beginning of an array requires shifting all elements, resulting in a time complexity of O(n).",
        "target_text": "Question: What is the time complexity for inserting/deleting at the beginning of the array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In most queue implementations (especially circular arrays or linked lists), DEQUEUE (removal from the front) is a constant-time O(1) operation.",
        "target_text": "Question: Which of the following operations on a queue data structure have a time complexity of O(1)?\nChoices:\na) Enqueue and Clear\nb) Dequeue and Peek\nc) Enqueue and Peek\nd) Clear only\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If a hash table uses a balanced binary tree for chaining (instead of a linked list), the average search time is O(log n), but if it's incorrectly assumed the key is always at the root, the worst-case could be O(n). However, under ideal conditions and assuming direct access, some sources may still classify it as O(1).",
        "target_text": "Question: What is the time complexity of the search function in a hash table using a binary tree?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Deleting a node at index i in a binary heap may require both upward and downward heapify operations. The time complexity is O(d), where d is the depth of the heap.",
        "target_text": "Question: An operator delete(i) for a binary heap data structure is to be designed to delete the item in the i-th node. Assume that the heap is implemented in an array and i refers to the i-th index of the array. If the heap tree has depth d (number of edges on the path from the root to the farthest leaf), then what is the time complexity to re-fix the heap efficiently after the removal of the element?\nChoices:\na) O(1)\nb) O(d) but not O(1)\nc) O(2d) but not O(d)\nd) O(d2^d) but not O(2d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list, the time to search for an element is O(n) in the worst case as each node might have to be visited.",
        "target_text": "Question: What is the time complexity of searching for an element in a circular linked list?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(1)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In direct address tables, insertion takes O(1) time as each key maps directly to a slot based on its value.",
        "target_text": "Question: What is the time complexity to insert an element into the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The top tree is a dynamic tree structure. Initializing it requires constructing subtrees for each node, which takes O(n) time.",
        "target_text": "Question: What is the time complexity for the initialization of top tree?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(log n)\nd) O(n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Using a self-balancing BST to count inversions in an array reduces the time complexity from O(n^2) in nested loops to O(n log n).",
        "target_text": "Question: The time complexity of the code that determines the number of inversions in an array using self-balancing BST is lesser than that of the code that uses loops for the same purpose.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary search divides the search space in half at each step, resulting in a worst-case time complexity of θ(log n), not θ(n). The original answer may be incorrect.",
        "target_text": "Question: What is the worst case run-time complexity of binary search algorithm?\nChoices:\na) θ(log n)\nb) θ(n)\nc) θ(n log n)\nd) θ(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting into a sorted array in the worst case requires shifting all elements after the insertion point, resulting in O(n) time complexity.",
        "target_text": "Question: What is the worst case time complexity of inserting an element into the sorted array?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the worst case, inserting or deleting elements at the end of a dynamic array requires resizing, which takes O(n) time. However, this is amortized and not typical.",
        "target_text": "Question: In special case, the time complexity of inserting/deleting elements at the end of dynamic array is __________\nChoices:\na) O(n)\nb) O(sqrt(n))\nc) O(log n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the best-case and average-case scenarios, inserting into a hash table or direct address table is O(1). Thus, the worst-case insertion can still be O(1) under ideal hashing.",
        "target_text": "Question: What is the worst-case time complexity of an insertion operation in a hash table (n = number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary min heap, operations like insert, delete, and decrease-key are O(log n), but merging with another heap is costlier and takes O(n) if not using specialized structures.",
        "target_text": "Question: Which of the following Binary Min Heap operation has the highest time complexity?\nChoices:\na) Inserting an item under the assumption that the heap has capacity to accommodate one more item\nb) Merging with another heap under the assumption that the heap has capacity to accommodate items of other heap\nc) Deleting an item from heap\nd) Decreasing value of a key\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list, nodes form a cycle and none of them point to NULL; instead, the last node points to the head.",
        "target_text": "Question: In a circular linked list, how many nodes contain NULL as the address?\nChoices:\na) Only one node\nb) Only two nodes\nc) Every node\nd) None\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When a graph is represented by an adjacency list, checking whether an edge exists between two vertices may require scanning through the adjacency list, which takes O(V) in the worst case.",
        "target_text": "Question: Time complexity to find if there is an edge between 2 particular vertices is __________\nChoices:\na) O(V)\nb) O(E)\nc) O(1)\nd) O(V + E)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding the longest repeated substring in a string using suffix arrays or suffix trees can be done in linear time O(n).",
        "target_text": "Question: What is a time complexity for finding the longest substring that is repeated in a string?\nChoices:\na) O(log n!)\nb) θ(n!)\nc) O(n^2 + n)\nd) θ(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Ukkonen's algorithm constructs a suffix tree in O(n log n) time in the worst case, though it performs better in practice and is often considered linear.",
        "target_text": "Question: What is the time complexity of Ukkonen's algorithm?\nChoices:\na) O(log n!)\nb) O(n!)\nc) O(n^2)\nd) O(n log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Building a heap is called heapifying. This process organizes the array into a heap by applying the heapify function from the bottom up.",
        "target_text": "Question: What is the process of building a ternary heap called?\nChoices:\na) Heapify\nb) Hashing\nc) Linking\nd) Merging\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When candidates are evenly distributed in bins and a query operation intersects k bins, the total time complexity is O(k).",
        "target_text": "Question: What will be the time complexity of query operation if all the candidates are evenly spaced so that each bin has constant number of candidates? (k = number of bins query rectangle intersects)\nChoices:\na) O(1)\nb) O(k)\nc) O(k^2)\nd) O(log k)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The optimal algorithm to find the intersection node of two linked lists runs in θ(m+n) by aligning the traversal length of both lists.",
        "target_text": "Question: Suppose there are two singly linked lists both of which intersect at some point and become a single linked list. The head or start pointers of both the lists are known, but the intersecting node and lengths of lists are not known. What is the worst-case time complexity of the optimal algorithm to find the intersecting node from two intersecting linked lists?\nChoices:\na) θ(n*m)\nb) θ(n^2), where m > n\nc) θ(m+n)\nd) θ(min(n, m))\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Path compression optimizes disjoint set operations. When combined with union by rank, its worst-case time complexity becomes O(M log N) where M is the number of operations.",
        "target_text": "Question: What is the worst case efficiency for a path compression algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If only the front pointer is maintained in a queue implemented using a linked list, insertion (at rear) and emptying the queue both require O(n) time.",
        "target_text": "Question: In linked list implementation of queue, if only front pointer is maintained, which of the following operations take worst-case linear time?\nChoices:\na) Insertion\nb) Deletion\nc) To empty a queue\nd) Both Insertion and To empty a queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Rotating elements one by one involves shifting the entire array multiple times, making it the most expensive among rotation algorithms with time complexity O(n*d).",
        "target_text": "Question: Which of the following algorithms to rotate an array has the maximum time complexity?\nChoices:\na) Rotate elements one by one\nb) Juggling algorithm\nc) Reversal algorithm\nd) Using a temporary array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In rope data structures, each operation like finding a character at index x or splitting a string is supported in O(log n) time due to the tree-based representation.",
        "target_text": "Question: What is the time complexity for finding the node at x position where n is the length of the rope?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Although binary tree sort with self-balancing BSTs achieves O(n log n) complexity in the worst case, it can be slower than Merge Sort due to higher constant factors and tree rotations.",
        "target_text": "Question: Binary tree sort implemented using a self-balancing binary search tree takes O(n log n) time in the worst case but is still slower than Merge Sort.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To construct an AVL tree without rotations, one can sort the input, find the median as root, and build the tree recursively to maintain balance.",
        "target_text": "Question: Given an empty AVL tree, how would you construct an AVL tree when a set of numbers is given without performing any rotations?\nChoices:\na) Just build the tree with the given input\nb) Find the median of the set of elements given, make it as root and construct the tree\nc) Use trial and error\nd) Use dynamic programming to build the tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In asymptotic notation, expressions with exponential growth (e.g., 2^f(n)) dominate polynomial or linear terms, making 2^θ(n) worse than θ(n^3), θ(n + 9378), or n^θ(1).",
        "target_text": "Question: Which of the following asymptotic notations is the worst among all?\nChoices:\na) θ(n + 9378)\nb) θ(n^3)\nc) n^θ(1)\nd) 2^θ(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding the longest common substring between two strings S1 and S2 can be done using dynamic programming or suffix automata in θ(n1 + n2) time.",
        "target_text": "Question: What is the time complexity for finding the longest substring that is common in strings S1 and S2 (n1 and n2 are the string lengths of S1 and S2 respectively)?\nChoices:\na) O(log n!)\nb) θ(n!)\nc) O(n^2 + n1)\nd) θ(n1 + n2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To compute the total length of strings on all edges of a tree (like a suffix tree), we may need to traverse each node and sum string lengths, which can result in O(n^2) in the worst case.",
        "target_text": "Question: What is the time complexity for finding the total length of all strings on all edges of a tree?\nChoices:\na) θ(n)\nb) θ(n!)\nc) θ(1)\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Bellman-Ford algorithm has a time complexity of θ(V*E). In a complete graph, E = V(V-1) = θ(V^2), so the total becomes θ(V*V^2) = θ(V^3).",
        "target_text": "Question: What is the time complexity of Bellman-Ford single-source shortest path algorithm on a complete graph of n vertices?\nChoices:\na) θ(V^2)\nb) θ(V^2 log V)\nc) θ(V^3)\nd) θ(V^3 log V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In simple chaining used in hash tables, doubly linked lists are often preferred as they simplify deletion of elements by allowing backward traversal.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) Doubly linked list\nb) Circular linked list\nc) Singly linked list\nd) Binary trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If frequent random access by position is needed, an array-based representation of a linked list provides constant-time O(1) access.",
        "target_text": "Question: What kind of linked list is best to answer questions like 'What is the item at position n?'\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Array implementation of linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In weak heaps, the minimum element is usually stored at the root. Thus, searching for the minimum value takes constant time O(1).",
        "target_text": "Question: What is the worst case time in searching minimum value in weak-heap?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Direct address tables map keys directly to an index in an array. Deleting an element requires only overwriting the index, so time complexity is O(1).",
        "target_text": "Question: What is the time complexity to delete an element from the direct address table?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Depth First Traversal (DFS) visits each vertex and edge once in a graph. Its time complexity is Θ(|V| + |E|), where V is the number of vertices and E is the number of edges.",
        "target_text": "Question: Time complexity of Depth First Traversal is __________\nChoices:\na) Θ(|V| + |E|)\nb) Θ(|V|)\nc) Θ(|E|)\nd) Θ(|V|*|E|)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To calculate the sum of all leaf nodes in a binary tree, we must traverse each node at least once. Thus, the time complexity is O(n).",
        "target_text": "Question: The time complexity of calculating the sum of all leaf nodes in an n-node binary tree is __________\nChoices:\na) O(n^2)\nb) O(n + 1)\nc) O(1)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The optimal Build Heap operation uses a bottom-up approach, which has a linear time complexity of O(n) instead of O(n log n).",
        "target_text": "Question: What is the best case complexity in building a heap?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n log^2 n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The code reverses the first k elements of an array, which takes O(k) time since it performs k/2 swaps.",
        "target_text": "Question: What will be the time complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) O(k)\nb) O(n)\nc) O(k log k)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The postfix expression 2 3 + 4 5 6 - - * evaluates as: 2 + 3 = 5, 5 - 6 = -1, 4 - (-1) = 5, 5 * 5 = 25.",
        "target_text": "Question: What is the value of the postfix expression 2 3 + 4 5 6 - - *?\nChoices:\na) 19\nb) 21\nc) -4\nd) 25\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Operations like Find Next and Find Previous are often supported in ordered data structures like balanced search trees or linked lists with additional pointers.",
        "target_text": "Question: Can operations like Find Next and Find Previous be implemented in ordered data structures like balanced trees or linked lists?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stacks are inherently used for operations such as expression evaluation, recursion, and reversing strings. Job scheduling typically involves queues or priority queues.",
        "target_text": "Question: Which of the following is not an inherent application of stack?\nChoices:\na) Reversing a string\nb) Evaluation of postfix expression\nc) Implementation of recursion\nd) Job scheduling\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursion is implemented via a function call stack. Internally, this stack is often implemented using an array-based structure or a True stack data structure.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Stack\nb) Queue\nc) List\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Most infix expression evaluation algorithms convert the input to postfix or prefix and evaluate in a single pass using a stack. Thus, one pass is sufficient.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Most infix expression evaluation algorithms convert the input to postfix or prefix and evaluate in a single pass using a stack. Thus, one pass is sufficient.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm make through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given recursive function prints a linked list in reverse order using post-order traversal logic.",
        "target_text": "Question: What does the following function do for a given Linked List with first node as head?\nvoid fun1(struct node* head)\n{\n  if(head == NULL)\n    return;\n  \n  fun1(head->next);\n  printf(\"%d  \", head->data);\n}, \nChoices:\na) Prints all nodes of linked list\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Double hashing generates more probe sequences than linear or quadratic probing due to the use of two hash functions.",
        "target_text": "Question: Which technique has the greatest number of probe sequences?\nChoices:\na) Linear probing\nb) Quadratic probing\nc) Double hashing\nd) Closed hashing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays perform poorly when reallocation is costly and the array size is small. In such cases, the overhead of dynamic resizing isn't worth the benefit.",
        "target_text": "Question: In which of the following cases are dynamic arrays not preferred?\nChoices:\na) If the size of the array is unknown\nb) If the size of the array changes after few iterations\nc) If the memory reallocation is expensive\nd) If the array holds fewer elements\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In memory allocation, freelists can be implemented implicitly via garbage collection or explicitly via calls to malloc/new.",
        "target_text": "Question: What are implicit and explicit implementations of freelists?\nChoices:\na) Garbage collection and new/malloc respectively\nb) New/malloc and garbage collection respectively\nc) Implicit implementation is not favored\nd) Explicit implementation is not favored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The rope data structure allows for efficient insertion and deletion due to its tree-like structure, often outperforming arrays.",
        "target_text": "Question: Is insertion and deletion operation faster in rope than in an array?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A triply linked list does not inherently prevent the insertion of duplicate nodes. Nodes with identical data can still be added.",
        "target_text": "Question: A node will be rejected while inserting if the given node is already present in a triply linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a B-tree of order n, each non-root node must contain at least ceil(n/2) - 1 keys, which simplifies to at least (n-1)/2 keys for simplicity.",
        "target_text": "Question: A B-tree of order n is an order-n multiway tree in which each non-root node contains __________\nChoices:\na) at most (n - 1)/2 keys\nb) exactly (n - 1)/2 keys\nc) at least 2n keys\nd) at least (n - 1)/2 keys\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Buddy memory allocation manages free memory blocks by dividing memory into powers of two and maintaining multiple free lists, each for a specific block size.",
        "target_text": "Question: What is buddy memory management of free lists?\nChoices:\na) Modified version of first fit\nb) Buddy allocation keeps several free lists, each one holds blocks which are of one particular size\nc) Modified version of best fit\nd) A tree representation of free lists\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Accessing an index beyond the bounds of an array in Java throws an ArrayIndexOutOfBoundsException, as shown in the given code.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array {\n\tpublic static void main(String args[]) {\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[5]);\n\t}\n}\nChoices:\na) 4\nb) 5\nc) ArrayIndexOutOfBoundsException\nd) InvalidInputException\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skew merging is an efficient variant of merge used in skew heaps. It has amortized logarithmic time complexity due to its adaptive merging.",
        "target_text": "Question: What is the amortized efficiency of skew merge?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary trees can be traversed using strategies like depth-first (pre-order, in-order, post-order) or breadth-first (level order).",
        "target_text": "Question: Which traversal strategy visits nodes level by level from top to bottom in a binary tree?\nChoices:\na) Depth-first traversal\nb) Breadth-first traversal\nc) Random traversal\nd) Priority traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tracking a stack operation sequence helps identify the order of elements popped. The correct answer must reflect the final stack state after each operation.",
        "target_text": "Question: If the sequence of operations - push(1), push(2), pop, push(1), push(2), pop, pop, pop, push(2), pop - is performed on a stack, the sequence of popped out values is:\nChoices:\na) 2,2,1,1,2\nb) 2,2,1,2,2\nc) 2,1,2,2,1\nd) 2,1,2,2,2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stack operations such as reversing strings, evaluating expressions, and simulating recursion are inherent. Job scheduling typically uses queues or heaps.",
        "target_text": "Question: Which data structure can be used to test a palindrome?\nChoices:\na) Tree\nb) Heap\nc) Stack\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix expressions are evaluated from right to left, while postfix expressions are evaluated from left to right.",
        "target_text": "Question: Given a prefix and a postfix notation, what is the difference between them?\nChoices:\na) The postfix equation is solved starting from the left whereas the prefix notation is solved from the right\nb) The postfix equation is solved starting from the right whereas the prefix notation is solved from the left\nc) Both equations are solved starting from the same side (right)\nd) Both equations are solved starting from the same side (left)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Breadth-First Search (BFS) uses a queue to explore all neighboring nodes before moving to the next level. Thus, a queue is required for BFS.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is __________\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash tables rely on a hash function to compute the index where an input record should be stored in the underlying array.",
        "target_text": "Question: Which of the following is used in hash tables to determine the index of any input record?\nChoices:\na) Hash function\nb) Hash linked list\nc) Hash tree\nd) Hash chaining\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion is a pair (i, j) such that i < j and arr[i] > arr[j]. It's used to count disorder in an array.",
        "target_text": "Question: What is the condition for two elements arr[i] and arr[j] to form an inversion?\nChoices:\na) arr[i] < arr[j]\nb) i < j\nc) arr[i] < arr[j] and i < j\nd) arr[i] > arr[j] and i < j\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists offer better memory management and efficient insertion/deletion over arrays, saving both space and time under many circumstances.",
        "target_text": "Question: Linked list data structure offers considerable saving in __________\nChoices:\na) Computational Time\nb) Space Utilization\nc) Space Utilization and Computational Time\nd) Speed Utilization\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: XOR-linked lists use XOR operations instead of traditional pointers, offering a memory-efficient way to store links with a single field.",
        "target_text": "Question: Which of the following is an application of XOR-linked lists?\nChoices:\na) Implementing stacks\nb) Implementing queues\nc) Memory-efficient linked list representation\nd) Caching data structures\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Top Trees are used for maintaining dynamic trees and support operations like link, cut, and expose, which help in manipulating subtrees efficiently.",
        "target_text": "Question: Which of the dynamic operations are used in Top Tree data structure implementation?\nChoices:\na) Link\nb) Cut\nc) Expose\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The array-based representation of binary trees supports random access, whereas linked representations lack this feature and require extra space for pointers.",
        "target_text": "Question: Disadvantages of linked list representation of binary trees over arrays?\nChoices:\na) Randomly accessing is not possible\nb) Extra memory for a pointer is needed with every element in the list\nc) Difficulty in deletion\nd) Random access is not possible and extra memory with every element\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursion is implemented using the call stack. Hence, stack is the underlying data structure used for implementing recursion.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Arrays\nd) List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists allocate memory dynamically at runtime, making them an example of dynamic memory allocation.",
        "target_text": "Question: Linked list is considered as an example of __________ type of memory allocation.\nChoices:\na) Dynamic\nb) Static\nc) Compile time\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A dequeue (double-ended queue) has many applications including job scheduling, flexible data access (like stacks and queues), and efficient sliding window computations.",
        "target_text": "Question: What are the applications of dequeue?\nChoices:\na) A-Steal job scheduling algorithm\nb) Can be used as both stack and queue\nc) To find the maximum of all subarrays of size k\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sparse matrices store only non-zero values, which reduces storage and improves speed. However, algorithms for sparse matrices are often more complex.",
        "target_text": "Question: Which of the following is the disadvantage of sparse matrices over normal matrices?\nChoices:\na) Size\nb) Speed\nc) Easily compressible\nd) Algorithm complexity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Multiplicative hashing computes h(k) = floor(p * (k * s mod 2^w) / 2^w). For the key 123456 and given parameters, h(k) = 67.",
        "target_text": "Question: What is the value of h(k) for the key 123456?\nGiven: p = 14, s = 2654435769, w = 32\nChoices:\na) 123\nb) 456\nc) 70\nd) 67\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: MinHash is a technique used in hashing-based approaches to estimate similarity between sets (like Jaccard similarity).",
        "target_text": "Question: Which technique is used for finding similarity between two sets?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Abstract Syntax Trees (ASTs) are widely used in compilers and static analyzers to represent the syntactic structure of code.",
        "target_text": "Question: Which of the following is an application of abstract syntax tree?\nChoices:\na) Static code analyzing\nb) Implement indexing in databases\nc) Used for dynamic memory allocation\nd) To represent networks of communication\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In red-black trees, each node is colored either red or black, and the root node is always black to maintain balance properties.",
        "target_text": "Question: What is the special property of red-black trees and what should the root always be?\nChoices:\na) A color which is either red or black and root should always be black\nb) Height of the tree\nc) Pointer to next node\nd) A color which is either green or black\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary Decision Diagrams (BDDs) are used to represent Boolean functions efficiently in computational logic and verification tasks.",
        "target_text": "Question: In which of the following cases is a Binary Decision Diagram used?\nChoices:\na) Representation of Boolean Functions\nb) String Matching\nc) Searching\nd) Sorting of numbers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The algorithm to balance symbols in code typically includes checks for parentheses (), brackets [], and braces {}, using a stack to ensure proper nesting.",
        "target_text": "Question: Which of the following does the balancing symbols algorithm include?\nChoices:\na) Balancing double quotes\nb) Balancing single quotes\nc) Balancing operators and brackets\nd) Balancing parentheses, brackets and braces\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Breadth-First Search (BFS) visits nodes level by level, similar to level order traversal in a binary tree.",
        "target_text": "Question: Which of the following graph traversals closely imitates level order traversal of a binary tree?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Depth & Breadth First Search\nd) Binary Search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a max-heap, new elements are inserted and then bubbled up to maintain heap order. After inserting 1 and 7 into the heap [10, 8, 5, 3, 2], the result is [10, 8, 7, 3, 2, 1, 5].",
        "target_text": "Question: A Priority-Queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements '1' and '7' are inserted in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 5, 3, 2, 1\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 3, 2, 1, 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Directed Acyclic Graph (DAG) with V vertices can have at most V(V-1)/2 edges while still maintaining its acyclic property.",
        "target_text": "Question: With V (greater than 1) vertices, how many edges at most can a Directed Acyclic Graph possess?\nChoices:\na) (V*(V-1))/2\nb) (V*(V+1))/2\nc) (V+1)C2\nd) (V-1)C2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a Binary Search Tree (BST), in-order traversal visits nodes in ascending order and hence yields sorted output.",
        "target_text": "Question: Which of the following traversal outputs the data in sorted order in a BST?\nChoices:\na) Preorder\nb) Inorder\nc) Postorder\nd) Level order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Run-Length Encoding (RLE) is a form of lossless data compression used to encode sequences of repeated values in bit arrays.",
        "target_text": "Question: Run-Length encoding is used to compress data in bit arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To implement a queue using stacks, the minimum number required is two--one for enqueue and another for dequeue operations.",
        "target_text": "Question: The minimum number of stacks needed to implement a queue is:\nChoices:\na) 3\nb) 1\nc) 2\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a singly linked list, deleting the last element requires traversal from the head to find the node before the last one, leading to time complexity dependent on list length.",
        "target_text": "Question: Consider a single linked list where F and L are pointers to the first and last elements respectively of the linked list. The time for performing which of the given operations depends on the length of the linked list?\nChoices:\na) Delete the first element of the list\nb) Interchange the first two elements of the list\nc) Delete the last element of the list\nd) Add an element at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting infix expressions like (A+B)*(C-D)/E*F into prefix notation requires proper operator ordering. The correct prefix form is * / * + A B - C D E F.",
        "target_text": "Question: The prefix of (A+B)*(C-D)/E*F is:\nChoices:\na) /+-AB*CD\nb) /*+-ABCD*EF\nc) */*+AB-CDEF\nd) **AB+CD/EF\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An array is a collection of elements stored in contiguous memory locations, all of the same data type.",
        "target_text": "Question: Which of these best describes an array?\nChoices:\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialized\nd) Array is not a data structure\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: B-trees are widely used in databases and file systems for external memory storage due to their balanced structure and efficient disk I/O.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) AVL tree\nb) B-tree\nc) Red-black tree\nd) Both AVL tree and Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In database systems, B+ trees are preferred because they support range queries efficiently and store data in leaves in sorted order.",
        "target_text": "Question: Which one of the following data structures is preferred in database-system implementation?\nChoices:\na) AVL tree\nb) B-tree\nc) B+ tree\nd) Splay tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the Union-Find (Disjoint Set) data structure, path compression leads to ranks increasing from the leaves up toward the root.",
        "target_text": "Question: In the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from?\nChoices:\na) Leaf to root\nb) Root to node\nc) Root to leaf\nd) Left subtree to right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a max-heap or min-heap, the root is the largest or smallest element. Subtree roots can still be larger/smaller than the overall root, so the statement is False.",
        "target_text": "Question: The roots of the elements of the subtrees are smaller than the root of the heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting a postfix expression to infix is generally easier to implement compared to prefix because postfix evaluation uses a straightforward stack approach.",
        "target_text": "Question: Given two processes (conversion of postfix to infix and prefix to infix), which of the following is easier to implement?\nChoices:\na) Both are easy to implement\nb) Postfix to infix is harder than prefix to infix\nc) Postfix to infix is easier than prefix to infix\nd) Insufficient data\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An unrolled linked list stores elements in blocks, and the space complexity is O(n) since each element must be stored explicitly.",
        "target_text": "Question: Which of the following represents the space complexity for an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of different randomized binary search trees that can be formed from a given permutation of (1,3,2) is determined by unique insertion orders.",
        "target_text": "Question: How many randomized binary search trees can be formed by the numbers (1, 3, 2)?\nChoices:\na) 2\nb) 3\nc) 6\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Splay trees are self-adjusting binary search trees that perform access operations and restructuring in logarithmic amortized time.",
        "target_text": "Question: Which of the following is the self-adjusting binary search tree?\nChoices:\na) AVL Tree\nb) Splay Tree\nc) Top Tree\nd) Ternary Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a full binary tree, the total number of nodes N is always 2*L - 1, where L is the number of leaf nodes.",
        "target_text": "Question: In a full binary tree, if there are L leaves, then the total number of nodes N is?\nChoices:\na) N = 2*L\nb) N = L + 1\nc) N = L - 1\nd) N = 2*L - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: According to the cut property in graph theory, the minimum weight edge crossing a cut must be included in the Minimum Spanning Tree (MST).",
        "target_text": "Question: Let s and t be two vertices in an undirected graph G = (V, E) with positive edge weights. Let [X, Y] be a partition of V such that s is an element of X and t is an element of Y. Consider the edge e having the minimum weight among all edges with one vertex in X and the other in Y. The edge e must definitely belong to:\nChoices:\na) The minimum weighted spanning tree of G\nb) The weighted shortest path from s to t\nc) Each path from s to t\nd) The weighted longest path from s to t\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A min-heap is a complete binary tree where each node's value is less than or equal to its children's values. It satisfies the heap property and is always complete.",
        "target_text": "Question: A min-Heap is a complete binary tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A palindrome is a string that reads the same backward as forward. For example, \"ABCCBA\" is a palindrome.",
        "target_text": "Question: Which of the following is a palindromic string?\nChoices:\na) \"APPLE\"\nb) \"ABCDE\"\nc) \"APPLA\"\nd) \"ABCCBA\"\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Jaccard similarity approximation using MinHashing, the number of hash functions required for an error rate ε is approximately 1/ε^2. For ε <= 0.05, around 400 hashes are needed.",
        "target_text": "Question: How many hashes will be needed for calculating Jaccard index with an expected error less than or equal to 0.05?\nChoices:\na) 100\nb) 200\nc) 300\nd) 400\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Null nodes in trees, such as in Treaps or certain binary trees, are often treated as having infinite priority to ensure proper rotations and balancing.",
        "target_text": "Question: What is the priority of a null node?\nChoices:\na) 1\nb) 0\nc) Random number\nd) Infinity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A bit array is a compact data structure used for storing individual bits efficiently, often used in Bloom filters and bitmap indexing.",
        "target_text": "Question: What is a bit array?\nChoices:\na) Data structure that compactly stores bits\nb) Data structure for representing arrays of records\nc) Array in which elements are not present in continuous locations\nd) An array in which most of the elements have the same value\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap is a complete binary tree where each parent node is greater (max-heap) or smaller (min-heap) than its children, depending on the heap type.",
        "target_text": "Question: A complete binary tree with the property that the value at each node is at least as large as the values at its children is known as:\nChoices:\na) Binary search tree\nb) AVL tree\nc) Completely balanced tree\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a graph with a Eulerian walk, the number of vertices with odd degrees must be either 0 (Eulerian circuit) or 2 (Eulerian path).",
        "target_text": "Question: Number of vertices with odd degrees in a graph having a Eulerian walk is __________\nChoices:\na) 0\nb) Can't be predicted\nc) 2\nd) Either 0 or 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The minimum number of jumps problem finds the minimum steps to reach the end of an array, given that each element represents the maximum jump length from that position.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) Not possible to reach the end\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stack operations like push and pop modify the content and size of the stack. Tracing each operation can determine the final count of elements.",
        "target_text": "Question: Consider the following operation performed on a stack of size 5.\nPush(1);\nPop();\nPush(2);\nPush(3);\nPop();\nPush(4);\nPop();\nPop();\nPush(5);\nAfter the completion of all operations, the number of elements present in the stack is?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash function is a key component in hashing, which maps keys to addresses for storage or retrieval in hash tables.",
        "target_text": "Question: Which of the following helps keys to be mapped into addresses?\nChoices:\na) Hash function\nb) Separate chaining\nc) Open addressing\nd) Chaining using a linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix notation (Polish notation) places operators before operands. The prefix form of A - B / (C * D ^ E) is -A/B*C^DE.",
        "target_text": "Question: The prefix form of A - B / (C * D ^ E) is?\nChoices:\na) -A/B*C^DE\nb) -A/BC*^DE\nc) -ABCD*^DE\nd) -/*^ACBDE\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An Abstract Data Type (ADT) is a model for a data structure that specifies the behavior from the point of view of a user, particularly its storage structure in memory.",
        "target_text": "Question: Representation of data structure in memory is known as:\nChoices:\na) Recursive\nb) Abstract data type\nc) Storage structure\nd) File structure\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: 2-3 trees are balanced search trees that provide efficient searching by maintaining sorted keys and having 2 or 3 children per node.",
        "target_text": "Question: Which of the following data structures can provide efficient searching of the elements?\nChoices:\na) Unordered lists\nb) Binary search tree\nc) Treap\nd) 2-3 tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Self-organizing lists improve the performance of linear search by reordering elements to reflect frequency of access.",
        "target_text": "Question: The self-organizing list improves the efficiency of __________?\nChoices:\na) Binary search\nb) Jump search\nc) Sublist search\nd) Linear search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The problem describes a variation of stack operations with constraints. Moving elements between two containers and returning them simulates stack behavior.",
        "target_text": "Question: You have two jars, one with 10 rings and another with none, stacked vertically. You want to remove the last ring from the first jar, but the second jar is weak and cannot store rings for long.\nChoices:\na) Empty the first jar one by one into the second jar\nb) Move rings to the second jar, then move them back one by one to the first\nc) There exists no possible way to do this\nd) Break the jar and remove the last one\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix array is a sorted array of all suffixes of a string. It is commonly used in string matching problems and must be sorted for efficient access.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) Suffix array is always sorted\nb) Suffix array is used in string matching problems\nc) Suffix array is always unsorted\nd) Suffix array contains all the suffixes of the given string\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In postfix expressions, operators follow their operands. The postfix form of an infix expression depends on operator precedence and associativity.",
        "target_text": "Question: What is the postfix expression for the corresponding infix expression?\nChoices:\na) abc*+de*+\nb) abc+*de*+\nc) a+bc*de+*\nd) abc*+(de)*+\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In graph theory, every path is also a trail, and every trail is a path when all edges and vertices are distinct.",
        "target_text": "Question: Which of the following statements for a simple graph is correct?\nChoices:\na) Every path is a trail\nb) Every trail is a path\nc) Every trail is a path as well as every path is a trail\nd) Path and trail have no relation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap is a binary tree-based structure where parent nodes follow a specific order relative to their children. A valid max-heap has each parent greater than its children.",
        "target_text": "Question: Which of the following sequences of array elements forms a heap?\nChoices:\na) {23, 17, 14, 6, 13, 10, 1, 12, 7, 5}\nb) {23, 17, 14, 6, 13, 10, 1, 5, 7, 12}\nc) {23, 17, 14, 7, 13, 10, 1, 5, 6, 12}\nd) {23, 17, 14, 7, 13, 10, 1, 12, 5, 7}\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The move-to-front method performs poorly for sequential access patterns because it constantly moves elements to the front, disrupting the natural access order.",
        "target_text": "Question: Which of the following methods performs poorly when elements are accessed in sequential order?\nChoices:\na) Count method\nb) Move to front method\nc) Transpose method\nd) Ordering method\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The C++ program iterates through the string \"Hello Geeks\" to count characters until the null terminator, returning the total character length.",
        "target_text": "Question: What will the below program print?\n// C++ program to find the length of string\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str = \"Hello Geeks\";\n    int i;\n    for (i = 0; str[i] != '\\0'; ++i);\n    cout << i;\n    return 0;\n}, \nChoices:\na) 0\nb) 1\nc) 5\nd) 11\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Given custom operator precedence and associativity, arithmetic expressions can be evaluated differently than usual conventions.",
        "target_text": "Question: Assume +, -, * are usual arithmetic operators. * has the lowest precedence, + has the highest precedence, and - has medium. + and * are left-associative whereas - is right-associative. What is the value of the expression 3 - 8 + 2 - 9 * 3?\nChoices:\na) 4\nb) 6\nc) 8\nd) 20\ne) 20\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The provided Java method uses a stack to identify and print matching parentheses by tracking their indices.",
        "target_text": "Question: Which of the following program prints the index of every matching parenthesis?\nChoices:\na) First program with index output incremented\nb) Second program\nc) Third with reverse condition\nd) Fourth program with unmatched pairing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2-3 tree is a balanced search tree where all leaves are at the same level. However, postorder traversal does not yield sorted elements—only inorder does.",
        "target_text": "Question: Which of the following is not True about the 2-3 tree?\nChoices:\na) All leaves are at the same level\nb) It is perfectly balanced\nc) Postorder traversal yields elements in sorted order\nd) It is a B-tree of order 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: XOR linked lists are memory-efficient doubly linked lists used in constrained environments, but come with certain trade-offs for usability.",
        "target_text": "Question: Which of the following statements are True?\ni) XOR lists are used in environments with limited space, like embedded devices\nii) Garbage collectors may not support XOR lists\niii) Calculating next requires remembering previous node\niv) XOR lists are always more efficient than all alternatives\nChoices:\na) i, ii, iii, iv\nb) i, ii, iii\nc) i, ii\nd) i\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, ArrayLists are dynamic arrays. The correct syntax uses the generic type and constructor to instantiate the list.",
        "target_text": "Question: Which of the following is the correct syntax to declare an ArrayList in Java?\nChoices:\na) ArrayList<String> al = new ArrayList<>();\nb) ArrayList al = new ArrayList[];\nc) ArrayList al() = new ArrayList();\nd) ArrayList al[] = new ArrayList[];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a queue implemented using a linked list, both front and rear pointers are used to track the beginning and end. Inserting into an empty queue requires updating both pointers.",
        "target_text": "Question: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into EMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The word reversal algorithm using stacks requires one stack to hold the input and one to reverse the output.",
        "target_text": "Question: How many stacks are required for reversing a word algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In tree-based data structures, leaf and internal nodes may hold pointers. The rightmost child in certain trees may retain a parent pointer.",
        "target_text": "Question: Which node contains a pointer to its parent?\nChoices:\na) root node\nb) right most child\nc) left most child\nd) left sibling\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In circular linked lists, nodes loop back to the head. The given program checks if a list loops back to its head node.",
        "target_text": "Question: Consider the below program, and identify which operation is performed.\nint solve(struct Node* head)\n{\n    if (head == NULL)\n        return 1;\n    struct Node* ptr;\n    ptr = head->next;\n    while (ptr != NULL && ptr != head)\n        ptr = ptr->next;\n    return (ptr == head);\n}\nChoices:\na) Checking if list is empty or not\nb) Checking if the list is circular or not\nc) Counting the number of elements in the list\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The adjacency matrix of a graph is symmetric only for undirected graphs. For directed graphs, it is not symmetric.",
        "target_text": "Question: Adjacency matrix of all graphs are symmetric.\nChoices:\na) False\nb) True\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tango trees are binary search trees that adaptively restructure to access patterns, maintaining search tree properties.",
        "target_text": "Question: Which type of tree is tango tree?\nChoices:\na) Ternary Tree\nb) AVL Tree\nc) Binary Search Tree\nd) K-ary Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In array-based queue implementations, the queue becomes full when the rear index reaches the array's maximum size minus one.",
        "target_text": "Question: A normal queue, if implemented using an array of size MAX_SIZE, gets full when?\nChoices:\na) Rear = MAX_SIZE - 1\nb) Front = (rear + 1) mod MAX_SIZE\nc) Front = rear + 1\nd) Rear = front\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Lexicographical order of strings stored in a trie is achieved by performing an inorder traversal over the trie.",
        "target_text": "Question: What traversal over trie gives the lexicographical sorting of the set of the strings?\nChoices:\na) postorder\nb) preorder\nc) inorder\nd) level order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Union-find with union by height optimizes disjoint-set structures. The depth of any tree in this scheme is logarithmic in size.",
        "target_text": "Question: What is the depth of any tree if the union operation is performed by height?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Top trees, various operations such as link, cut, expose, and merge are used. Among these, 'merge' is commonly used as an internal operation to combine parts of the tree.",
        "target_text": "Question: Which of the following are used as an internal operation in Top tree?\nChoices:\na) Merge\nb) Cut\nc) Expose\nd) Link\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The function in the provided C++ code performs a breadth-first traversal of a binary tree, visiting nodes level by level using a queue.",
        "target_text": "Question: Consider the below program, and identify what the function is doing.\n#include <iostream>\n#include <queue>\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int item) {\n        data = item;\n        left = right = nullptr;\n    }\n};\nvoid function(Node* root) {\n    if (root == nullptr)\n        return;\n    std::queue<Node*> q;\n    q.push(root);\n    while (!q.empty()) {\n        Node* node = q.front();\n        q.pop();\n        std::cout << node->data << \" \";\n        if (node->left != nullptr)\n            q.push(node->left);\n        if (node->right != nullptr)\n            q.push(node->right);\n    }\n}\nChoices:\na) In order traversal of a tree\nb) Normal traversal of a tree\nc) Level order traversal of a tree\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A leftist heap is structured so that the shortest path to a leaf is always on the right, making it biased or deeper on the left.",
        "target_text": "Question: Why is this heap named leftist heap?\nChoices:\na) only left subtrees exist\nb) the tree is biased to get deep down the left\nc) it is balanced\nd) right trees are unbalanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tree traversals include preorder, inorder, and postorder. Randomized traversal is not a standard algorithm used in trees.",
        "target_text": "Question: Which of the following traversing algorithm is not used to traverse in a tree?\nChoices:\na) Post order\nb) Pre order\nc) In order\nd) Randomized\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The heap can be constructed in linear time, O(n), using bottom-up heapify techniques.",
        "target_text": "Question: The running time for creating a heap of size n is?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: XOR linked lists reduce memory usage by storing the XOR of previous and next pointers in each node, acting as a space-efficient doubly linked list.",
        "target_text": "Question: What is xor linked list?\nChoices:\na) uses of bitwise XOR operation to decrease storage requirements for doubly linked lists\nb) uses of bitwise XOR operation to decrease storage requirements for linked lists\nc) uses of bitwise operations to decrease storage requirements for doubly linked lists\nd) just another form of linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Farach provided the first suffix tree construction for all alphabets in linear time, significantly improving previous algorithms like Weiner's and Ukkonen's.",
        "target_text": "Question: Who among the following provided the first suffix tree contribution for all alphabet?\nChoices:\na) Weiner\nb) Farach\nc) Ukkonen\nd) Alexander Morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To determine whether an expression contains balanced parentheses, a stack is commonly used because of its LIFO structure.",
        "target_text": "Question: The data structure required to check whether an expression contains balanced parenthesis is __________\nChoices:\na) Stack\nb) Queue\nc) Tree\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given function prints the linked list nodes in reverse order by using recursion.",
        "target_text": "Question: What does the following function do for a given Linked List with first node as head?\nvoid fun1(struct node* head)\n{\n    if(head == NULL)\n        return;\n    fun1(head->next);\n    printf(\"%d  \", head->data);\n}\nChoices:\na) Prints all nodes of linked lists\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix array lists the starting positions of suffixes of a string sorted in lexicographical order.",
        "target_text": "Question: What will be the suffix array of the string 'engineering'?\nChoices:\na) 2 3 8 4 9 1 7 5 0 6 10\nb) 5 0 6 1 4 9 1 7 0 2 3 8\nc) 5 0 6 10 2 4 9 1 7 3 8\nd) 5 0 6 10 2 3 8 4 9 1 7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Separate chaining is a collision resolution technique in hash tables that uses linked lists to store multiple values that hash to the same index.",
        "target_text": "Question: Which of the following is identical to that of a separate chaining hash node?\nChoices:\na) Linked list\nb) Array\nc) Stack\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting an element after a given pointer in a linked list takes constant time as it only involves pointer manipulation.",
        "target_text": "Question: In a linked list with n nodes, the time taken to insert an element after an element pointed by some pointer is __________\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: For a sorted array, binary search can be used to find if an element appears more than n/2 times in Θ(log n) time.",
        "target_text": "Question: The minimum number of comparisons required to determine if an integer appears more than n/2 times in a sorted array of n integers is __________\nChoices:\na) Θ(n)\nb) Θ(log n)\nc) Θ(n log n)\nd) Θ(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Separate chaining and open addressing are common collision resolution strategies in hashing. Separate chaining is generally simpler to implement.",
        "target_text": "Question: Separate chaining is easier to implement as compared to open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AND-Inverter Graphs (AIGs) are a compact and efficient representation of Boolean functions and are often more efficient than Binary Decision Diagrams (BDDs).",
        "target_text": "Question: The And-Inverter Graph representation of a Boolean function is more efficient than the Binary Decision Diagram.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA Trees are a type of balanced binary search tree. They use a concept called 'levels' instead of colors (as in Red-Black trees) to maintain balance.",
        "target_text": "Question: AA Trees are implemented using?\nChoices:\na) Colors\nb) Levels\nc) Node size\nd) Heaps\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary tree, child nodes can be internal nodes or leaf nodes. Not all child nodes are necessarily leaf nodes.",
        "target_text": "Question: Can a child node always be called a leaf node in a ternary tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary string consists only of characters '0' and '1'. Any other characters make it non-binary.",
        "target_text": "Question: Which of the following statement is a binary string?\nChoices:\na) \"ab\"\nb) \"121212\"\nc) \"01010101110\"\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix Tree Clustering (STC) is a data clustering algorithm used in search engines to group similar results by matching phrases via suffix trees.",
        "target_text": "Question: Which of the following data clustering algorithms uses suffix trees in search engines?\nChoices:\na) Weiner's algorithm\nb) Farach's algorithm\nc) Lempel-Ziv-Welch's algorithm\nd) Suffix Tree Clustering\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A ternary tree is a tree data structure in which each node can have up to three children.",
        "target_text": "Question: How many child nodes does each node of a ternary tree contain?\nChoices:\na) 4\nb) 6\nc) 5\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A fundamental property of trees in graph theory is that a tree with n vertices has exactly n‑1 edges.",
        "target_text": "Question: All trees with n vertices consist of how many edges?\nChoices:\na) n\nb) n‑2\nc) n+1\nd) n‑1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: For a connected planar graph, Euler’s formula states V - E + F = 2, where V is vertices, E is edges, and F is regions (faces).",
        "target_text": "Question: A connected planar graph having 6 vertices and 7 edges contains how many regions?\nChoices:\na) 15\nb) 3\nc) 1\nd) 11\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In expression conversion, prefix (Polish) notation requires placing the operator before its operands. Parentheses are eliminated by using the order of operators.",
        "target_text": "Question: The prefix form of A - B / (C * D ^ E) is:\nChoices:\na) -/*^ACBDE\nb) -ABCD*^DE\nc) -A/B*C^DE\nd) -A/BC*^DE\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The balancing symbols algorithm is used in compilers and interpreters to ensure proper nesting of brackets, parentheses, and braces. It operates in a single linear pass.",
        "target_text": "Question: How many passes does the balancing symbols algorithm make through the input?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Load factor in hashing is defined as the number of elements divided by the number of slots in the table. A higher load factor indicates more collisions and reduced performance.",
        "target_text": "Question: Given a hash table T with 25 slots that stores 2000 elements, the load factor α for T is __________\n- A\n80\n- B\n0.0125\n- C\n8000\n- D\n1.25\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When a collision occurs in a hash table, alternative indices must be generated to place the colliding key. This process is known as collision resolution or handling.",
        "target_text": "Question: The task of generating alternative indices for a node is called?\nChoices:\na) Collision handling\nb) Collision detection\nc) Collision recovery\nd) Closed hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sparse matrices are matrices with a large number of zero elements. Efficient representations like Dictionary of Keys and Linked Lists are used to store only non-zero entries.",
        "target_text": "Question: Which of the following is not the method to represent Sparse Matrix?\nChoices:\na) Dictionary of Keys\nb) Linked List\nc) Array\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Balanced parentheses in expressions can be checked using stacks, where each opening bracket is pushed and matched with a corresponding closing one popped from the stack.",
        "target_text": "Question: What data structure can be used to check if syntax has balanced parenthesis?\nChoices:\na) Queue\nb) Tree\nc) List\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a doubly linked list, each node points to both its previous and next node. Deleting a node is done in constant time O(1), provided a pointer to the node is already known.",
        "target_text": "Question: The time required to delete a node x from a doubly linked list having n nodes is ________________\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a path graph, only the internal nodes have degree 2. The two end nodes have degree 1, so a path with n > 2 vertices has (n - 2) nodes of degree 2.",
        "target_text": "Question: What is the number of vertices of degree 2 in a path graph having n vertices, here n > 2?\nChoices:\na) n-2\nb) n\nc) 2\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Self-balancing binary search trees automatically adjust their structure after insertions and deletions to maintain a balanced height and ensure logarithmic operations.",
        "target_text": "Question: Which of the following is a self-balancing binary search tree?\nChoices:\na) 2-3 tree\nb) Threaded binary tree\nc) AA tree and Treap\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an unrolled linked list, each node contains an array of elements. When an element can't fit, data is moved to the next node to preserve efficiency and structure.",
        "target_text": "Question: What happens if a node cannot fit an element in an unrolled linked list?\nChoices:\na) The element is discarded\nb) The elements are moved to the next node\nc) The node is discarded\nd) Error message is shown\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A bit array (or bit vector) is a data structure used to efficiently store and manipulate bits, often used in bitmap indexing and space-efficient algorithms.",
        "target_text": "Question: What is a bit array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) Array in which elements are not present in continuous locations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Jaccard Index measures similarity between two sets. The closer the value is to 1, the more similar the sets are.",
        "target_text": "Question: When are the members of two sets more common relatively?\nChoices:\na) Jaccard Index is closer to 1\nb) Jaccard Index is closer to 0\nc) Jaccard Index is closer to -1\nd) Jaccard Index is farther from 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bubble sort compares adjacent elements and swaps them if out of order. The number of swaps (interchanges) depends on the initial ordering of elements.",
        "target_text": "Question: The number of interchanges required to sort 5, 1, 6, 2, 4 in ascending order using Bubble Sort is\nChoices:\na) 6\nb) 5\nc) 7\nd) 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In data structures, a top pointer is typically used in stack implementations to keep track of the element at the top. In tree or heap representations, 'top' may also refer to the root or level-based organization.",
        "target_text": "Question: For which of the following purpose a top pointer can be used?\nChoices:\na) Storing the address of the head pointer\nb) Storing the address of the previous node\nc) Storing the address of the next node\nd) Storing equal values on the same level\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Data compression algorithms like LZW (Lempel-Ziv-Welch) use structures like suffix trees to represent repeated patterns and efficiently encode them. Suffix trees are useful for searching repeated substrings.",
        "target_text": "Question: Which of the following algorithm of data compression uses a suffix tree?\nChoices:\na) Weiner’s algorithm\nb) Farach’s algorithm\nc) Lempel–Ziv–Welch’s algorithm\nd) Alexander Morse’s algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The degree of a node is the number of its edges. A transformation that removes degree-2 nodes while connecting their neighbors alters the tree structure, and the final edge count can be derived based on degrees.",
        "target_text": "Question: A binary tree with n > 1 nodes has n₁, n₂ and n₃ nodes of degree one, two and three respectively. The degree of a node is defined as the number of its neighbors.\nStarting with the above tree, while there remains a node v of degree two in the tree, add an edge between the two neighbors of v and then remove v from the tree. How many edges will remain at the end of the process?\nChoices:\na) 2 * n₁ – 3\nb) n₂ + 2 * n₁ – 2\nc) n₃ – n₂\nd) n₂ + n₁ – 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quadratic probing is a collision resolution strategy in open addressing. It uses a quadratic function to compute the next index in the probe sequence to avoid clustering.",
        "target_text": "Question: Which of the following schemes does quadratic probing come under?\nChoices:\na) rehashing\nb) extended hashing\nc) separate chaining\nd) open addressing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix (Reverse Polish) notation represents expressions without parentheses by placing operators after operands. It is used in stack-based expression evaluation.",
        "target_text": "Question: The postfix form of A*B+C/D is:\nChoices:\na) *AB/CD+\nb) AB*CD/+\nc) A*BC+/D\nd) ABCD+/*\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The height of a binary tree is the length of the longest path from the root to a leaf. The minimum number of nodes corresponds to a linear tree, and the maximum corresponds to a full binary tree.",
        "target_text": "Question: The height of a tree is the length of the longest root-to-leaf path in it. The maximum and minimum number of nodes in a binary tree of height 5 are:\nChoices:\na) 63 and 6, respectively\nb) 64 and 5, respectively\nc) 32 and 6, respectively\nd) 31 and 5, respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap can be constructed in O(n) time using a bottom-up approach by heapifying each internal node in reverse level order, starting from the last non-leaf node.",
        "target_text": "Question: An array of integers of size n can be converted into a heap by adjusting the heaps rooted at each internal node of the complete binary tree starting at the node floor((n - 1)/2), and doing this adjustment up to the root node. The time required to construct a heap in this manner is:\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A rope (cord) is a binary tree data structure used to store and manipulate large strings efficiently by splitting them into smaller chunks.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) Linked List\nb) Array\nc) String\nd) Cord\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stack underflow occurs when attempting to pop from an empty stack. This function checks for an empty stack and retrieves the top element if available.",
        "target_text": "Question: What does the following function do?\npublic Object some_func() throws emptyStackException {\n    if (isEmpty()) throw new emptyStackException(\"underflow\");\n    return first.getEle();\n}\nChoices:\na) pop\nb) delete the top-of-the-stack element\nc) retrieve the top-of-the-stack element\nd) push operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the linked list implementation of a queue, the queue is empty when there are no nodes. This is typically indicated by a null front pointer.",
        "target_text": "Question: In linked list implementation of a queue, the important condition for a queue to be empty is?\nChoices:\na) FRONT is null\nb) REAR is null\nc) LINK is empty\nd) FRONT == REAR - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: C++ provides built-in algorithms in the STL (Standard Template Library), including `reverse()`, which is used to reverse elements in a container such as an array or vector.",
        "target_text": "Question: Which of the following is the predefined function for array reversal in C++?\nChoices:\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the dynamic equivalence problem (e.g., union-find), N-1 merges are performed using union operations. If optimized with union by rank and path compression, the time complexity becomes O(N log N).",
        "target_text": "Question: What is the total time spent for N-1 merges in a dynamic equivalence problem?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix notation (also called Polish notation) places operators before operands. Converting infix to prefix involves reversing the expression and adjusting parentheses and precedence.",
        "target_text": "Question: The prefix form of an infix expression p + q - r * t is:\nChoices:\na) + pq - *rt\nb) - +pqr * t\nc) - +pq * rt\nd) - + * pqrt\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In spatial indexing and data retrieval, bin structures are influenced by both the size and location of queries and candidates. These factors affect the accuracy and efficiency of results.",
        "target_text": "Question: Efficiency of bin depends upon __________\nChoices:\na) size of query and candidates\nb) location of query and candidates\nc) location and size of query and candidates\nd) depends on the input\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Unrolled linked lists reduce pointer overhead by storing multiple elements per node. However, this increases per-node memory usage and management complexity.",
        "target_text": "Question: Which of the following is a drawback of an unrolled linked list?\nChoices:\na) Small memory overhead\nb) Cache management\nc) High overhead per node\nd) Slow insertion and deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A priority queue is an abstract data type in which each element is associated with a priority. Elements are served based on priority rather than just the order they arrive.",
        "target_text": "Question: Is the priority queue an abstract data type?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Event-driven simulations use queues to manage events sorted by time. Priority queues or min-heaps are common to ensure the earliest event is processed first.",
        "target_text": "Question: Which data structure is commonly used to implement the event-driven simulation of complex systems, such as in computer network simulations or traffic simulations?\nChoices:\na) Stack\nb) Tree\nc) Array\nd) Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary tree is said to be height-balanced if the difference in height between the left and right subtrees of any node is at most one. This ensures O(log n) operations.",
        "target_text": "Question: A binary tree is balanced if the difference between left and right subtree of every node is not more than 1\nChoices:\na) 1\nb) 3\nc) 2\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given pseudo-code converts a decimal number to binary using a stack. Each remainder from dividing by 2 is pushed onto the stack, then popped in reverse order to print binary.",
        "target_text": "Question: Following is a pseudo code of a function that takes a number as an argument, and uses a stack S to do processing.\ndef fun(n):\n    S = []  # Say it creates an empty stack S\n    while n > 0:\n        # This line pushes the value of n%2 to stack S\n        S.append(n % 2)\n        n = n // 2\n    # Run while Stack S is not empty\n    while S:\n        print(S.pop(), end=' ')\nChoices:\na) Prints binary representation of n in reverse order\nb) Prints binary representation of n\nc) Prints the value of log n\nd) Prints the value of log n in reverse order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Cartesian tree is a binary tree derived from a sequence of numbers. When elements are repeated, a tie-breaking rule (e.g., index order) is used to maintain heap and in-order properties.",
        "target_text": "Question: Consider a sequence of numbers to have repetitions, how a cartesian tree can be constructed in such situations without violating any rules?\nChoices:\na) use any tie-breaking rule between repeated elements\nb) cartesian tree is impossible when repetitions are present\nc) construct a max heap in such cases\nd) construct a min heap in such cases\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix array is built from a suffix tree using a depth-first traversal. This allows efficient construction and lexicographical sorting of suffixes.",
        "target_text": "Question: Suffix array can be created by performing __________ traversal of a suffix tree.\nChoices:\na) breadth-first\nb) level order\nc) depth-first\nd) either breadth-first or level order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary trees can be implemented using arrays or linked lists. The linked list method supports dynamic size and easier insertion/deletion.",
        "target_text": "Question: Advantages of linked list representation of binary trees over arrays?\nChoices:\na) dynamic size\nb) ease of insertion/deletion\nc) ease in randomly accessing a node\nd) both dynamic size and ease in insertion/deletion\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A bit vector is a space-efficient data structure often used to track presence/absence of elements in sets, including for hash tables. It typically uses less space than arrays.",
        "target_text": "Question: How is a bit vector better compared to a normal array for implementing the hash table?\nChoices:\na) It saves time\nb) It saves space\nc) It saves both time and space\nd) It reduces code complexity\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Parallel arrays are separate arrays where corresponding elements across arrays represent related data. They are often used to avoid struct types in lower-level programming.",
        "target_text": "Question: What are parallel arrays?\nChoices:\na) Arrays of the same size\nb) Arrays allocated one after the other\nc) Arrays of the same number of elements\nd) Arrays allocated dynamically\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting infix expressions to postfix requires use of a stack to temporarily hold operators and enforce precedence and associativity.",
        "target_text": "Question: Which data structure is needed to convert infix notation to postfix notation?\nChoices:\na) Branch\nb) Queue\nc) Tree\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To evaluate or convert infix to postfix expressions, operator precedence and associativity rules must be followed. In postfix, operands appear in order followed by operators.",
        "target_text": "Question: Assume that the operators +, -, * are left associative and ^ is right associative. The order of precedence (from highest to lowest) is ^, *, +, -. The postfix expression corresponding to the infix expression a + b * c - d ^ e ^ f is:\nChoices:\na) abc * + def ^ ^ -\nb) abc * + de ^ f ^ -\nc) ab + c * d - e ^ f ^\nd) - + a * bc ^ ^ def\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AVL trees are height-balanced binary search trees. The code recursively computes left and right subtree heights and checks balance at every node.",
        "target_text": "Question: Consider the pseudo code:\nint avl(binarysearchtree root):\n     if(not root)\n       return 0\n     left_tree_height = avl(left_of_root)\n     if(left_tree_height== -1) \n       return left_tree_height\n     right_tree_height= avl(right_of_root)\n     if(right_tree_height==-1)\n       return right_tree_height\nDoes the above code check if a binary search tree is an AVL tree?\nChoices:\na) yes\nb) no\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix trees are compressed tries of all suffixes of a string. With efficient algorithms like Ukkonen's, a suffix tree can be constructed in linear time relative to the string length.",
        "target_text": "Question: How much time does construction of suffix tree take?\nChoices:\na) O(log M)\nb) O(M!)\nc) Exponential to Length of Tree\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Fibonacci heap offers improved amortized performance over a binomial heap for operations like decrease-key and delete, due to its more relaxed structure and lazy operations.",
        "target_text": "Question: The statement 'Fibonacci heap has better amortized running time compared to a binomial heap.'\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When performing a union operation on two Fibonacci heaps of order n, the resulting heap's order increases by 1 due to the merging of root lists and potential structural changes.",
        "target_text": "Question: What will be the order of new heap created after union of heap H1 and H2 when created by the following code. Initially both are of the order n?\nChoices:\na) n+1\nb) n+n/2\nc) nlogn\nd) 2*n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: 2-3 trees are balanced search trees that maintain sorted order and support efficient insertions, deletions, and searches in logarithmic time.",
        "target_text": "Question: Which of the following data structures can provide efficient searching of the elements?\nChoices:\na) binary search tree\nb) unordered lists\nc) 2-3 tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In linear probing, clustering affects performance. The expected cost of a successful search is based on the cost of an unsuccessful one, because probing continues until a match or an empty slot is found.",
        "target_text": "Question: In linear probing, the cost of an unsuccessful search can be used to compute the average cost of a successful search.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, arrays use zero-based indexing. Printing arr[2] and arr[4] from the array {1,2,3,4,5} will return the third and fifth elements respectively.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array {\n  public static void main(String args[]) {\n    int []arr = {1,2,3,4,5};\n    System.out.println(arr[2]);\n    System.out.println(arr[4]);\n  }\n}\nChoices:\na) 3 and 5\nb) 5 and 3\nc) 2 and 4\nd) 4 and 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An AVL tree is a self-balancing binary search tree. It maintains a balance factor to ensure that the height difference between left and right subtrees is at most 1.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is unbalanced and is a height balanced tree\nb) a tree which is balanced and is a height balanced tree\nc) a tree with at most 3 children\nd) a tree with three children\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A ternary heap is a variation of a binary heap where each node has up to three children. It must still maintain the heap property, either min-heap or max-heap.",
        "target_text": "Question: Which property should a ternary heap hold for execution?\nChoices:\na) Associative\nb) Commutative\nc) Tree\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If multiplying matrix A with matrix C results in the identity matrix, then matrix C is the inverse of A by definition of matrix inverse.",
        "target_text": "Question: Matrix A when multiplied with Matrix C gives the Identity matrix I. What is C?\nChoices:\na) Identity matrix\nb) Inverse of A\nc) Square of A\nd) Transpose of A\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists are probabilistic data structures that allow fast search, insertion, and deletion. They use multiple layers to emulate balanced trees.",
        "target_text": "Question: Is a skip list like balanced tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stacks operate on a LIFO principle and are ideal for reversing sequences like strings or words, since the last character pushed will be the first one popped.",
        "target_text": "Question: Which is the most appropriate data structure for reversing a word?\nChoices:\na) stack\nb) queue\nc) graph\nd) tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays have a fixed size once declared. If fewer elements are inserted, unused space leads to memory inefficiency.",
        "target_text": "Question: What are the disadvantages of arrays?\nChoices:\na) Data structure like queue or stack cannot be implemented\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Index value of an array can be negative\nd) Elements are sequentially accessed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a heap, the root node always contains the minimum (min-heap) or maximum (max-heap) value. A linear scan of heap array for minimum will still return the root.",
        "target_text": "Question: What does this pseudo_code return?\nint myfun(heap_arr[]) {\n  int mini=INF;\n  for(int i=0;i<tot_node;i++)\n    mini=min(mini,heap_arr[i]);\n  return mini;\n}\nChoices:\na) Last added element to heap\nb) First element added to heap\nc) Root of the heap\nd) Leftmost node of the heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The upper bound of an array is the highest valid index. It represents the maximum index that can be accessed safely in the array.",
        "target_text": "Question: The largest element of an array index is called its __________.\nChoices:\na) lower bound.\nb) range.\nc) upper bound.\nd) All of these.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Adjacency lists use space proportional to the number of edges, making them more efficient than adjacency matrices for sparse graphs.",
        "target_text": "Question: For some sparse graph an adjacency list is more space efficient against an adjacency matrix.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A B-tree is a general-purpose balanced search tree, not necessarily a binary tree. AVL, red-black, and splay trees are all types of self-balancing binary trees.",
        "target_text": "Question: Which of the following tree data structures is not a balanced binary tree?\nChoices:\na) AVL tree\nb) Red-black tree\nc) Splay tree\nd) B-tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Evaluating prefix expressions involves scanning from right to left and applying operations to operands. This example is a complex prefix computation.",
        "target_text": "Question: Find the output of the following prefix expression:\n* + 2 - 2 1 / - 4 2 + - 5 3 1\nChoices:\na) 2\nb) 12\nc) 10\nd) 4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When inserting a new value into a max heap, the value is added at the end and then bubbled up to maintain the heap property. This results in a reordering of elements.",
        "target_text": "Question: Consider a max heap, represented by the array: 40, 30, 20, 10, 15, 16, 17, 8, 4. Now consider that a value 35 is inserted into this heap. After insertion, the new heap is:\nChoices:\na) 40, 30, 20, 10, 15, 16, 17, 8, 4, 35\nb) 40, 35, 20, 10, 30, 16, 17, 8, 4, 15\nc) 40, 30, 20, 10, 35, 16, 17, 8, 4, 15\nd) 40, 35, 20, 10, 15, 16, 17, 8, 4, 30\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Pairing heaps are simple yet efficient heap structures. Their performance benefits stem from their simple operations, particularly meld, which allow fast amortized performance.",
        "target_text": "Question: What is the reason for the efficiency of a pairing heap?\nChoices:\na) simplicity\nb) time-efficient\nc) space-efficient\nd) advanced\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The average depth of a binary tree refers to the average distance from the root to all nodes. For a randomly built tree, this depth is approximately O(sqrt(N)).",
        "target_text": "Question: The average depth of a binary tree is given as?\nChoices:\na) O(N)\nb) O(√N)\nc) O(N²)\nd) O(log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix expressions are evaluated using a stack where operands are pushed and operators cause the last operands to be popped and evaluated.",
        "target_text": "Question: The data structure required to evaluate a postfix expression is:\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a singly linked list, deleting the last element requires traversing the entire list to find the node before the last one, making the operation O(n).",
        "target_text": "Question: Consider a singly linked list of the form where F is a pointer to the first element in the linked list and L is the pointer to the last element of the list. The time of which of the following operations depends on the length of the list?\nChoices:\na) Delete the last element of the list\nb) Delete the first element of the list\nc) Add an element after the last element of the list\nd) Interchange the first two elements of the list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To set a specific bit to 0 in bitwise operations, the AND operator is used with a bitmask that has 0 in the desired bit position and 1 elsewhere.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 0?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NAND\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash tables provide average constant time access using keys, unlike linked lists which require linear time search.",
        "target_text": "Question: What is the advantage of the hash table over a linked list?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Balanced binary trees include AVL, red-black, and splay trees. B-trees are multi-way trees typically used for disk storage and are not binary.",
        "target_text": "Question: Which of the following tree data structures is not a balanced binary tree?\nChoices:\na) Splay tree\nb) B-tree\nc) AVL tree\nd) Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The recurrence relation Fn = Fn-1 + Fn-2 defines the Fibonacci sequence, where each number is the sum of the two preceding ones.",
        "target_text": "Question: The following formula will produce: Fn = Fn-1 + Fn-2\nChoices:\na) Armstrong Number\nb) Fibonacci Series\nc) Euler Number\nd) Prime Number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Infix expressions follow standard operator precedence and associativity rules. Evaluating such expressions requires a correct understanding of these rules.",
        "target_text": "Question: Evaluation of infix expression is done based on precedence of operators.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists offer better performance for insertion/deletion, while arrays support better cache locality and constant-time random access. Accessing elements in a linked list is slower.",
        "target_text": "Question: Which of the following points is/are not True about Linked List data structure when compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) Access of elements in linked list takes less time than compared to arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Preorder traversal visits the root node first, then recursively visits the left and right subtrees. The function prints the node before visiting its children.",
        "target_text": "Question: What does the following piece of code do?\npublic void func(Tree root) {\n System.out.println(root.data());\n func(root.left());\n func(root.right());\n}\nChoices:\na) Preorder traversal\nb) Inorder traversal\nc) Postorder traversal\nd) Level order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A leftist tree is a priority queue implemented using a binary tree that satisfies the leftist property. For a tree of rank r, it must have at least 2<sup>r</sup>-1 nodes.",
        "target_text": "Question: How many nodes does a leftist tree of rank r have at minimum?\nChoices:\na) 2<sup>r</sup>\nb) 2<sup>r</sup>-1\nc) r<sup>2</sup>\nd) r-1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Open addressing is one of the methods for handling collisions in hash tables. It searches for the next available slot when a collision occurs.",
        "target_text": "Question: Which of the following techniques is used for handling collisions in a hash table?\nChoices:\na) Open addressing\nb) Hashing\nc) Searching\nd) Hash function\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sentinel is a dummy value placed at the end of a data structure (like an array) to mark the end and simplify algorithms like linear search.",
        "target_text": "Question: The extra key inserted at the end of the array is called a __________.\nChoices:\na) End key.\nb) Stop key.\nc) Sentinel.\nd) Transposition.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A directed tree with n nodes has n-1 edges. The number of structurally unique directed trees with 3 nodes is 3, considering all possible root-child configurations.",
        "target_text": "Question: The number of different directed trees with 3 nodes are:\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a B+ tree, leaf nodes are linked for sequential access. Once a leaf is found, accessing the next record is done in constant time using the sibling pointer.",
        "target_text": "Question: Efficiency of finding the next record in B+ tree is __________\nChoices:\na) O(n)\nb) O(log n)\nc) O(nlog n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary min heap, the smallest element is at the root, but the largest element is not in a fixed location. To find it, a full scan is needed.",
        "target_text": "Question: In a binary min heap containing n elements, the largest element can be found in __________ time.\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A simple undirected graph with n vertices can have at most n(n-1)/2 edges. Any more will necessarily create a parallel edge or self-loop.",
        "target_text": "Question: A graph with n vertices will definitely have a parallel edge or self loop if the total number of edges are __________.\nChoices:\na) more than n\nb) more than n+1\nc) more than (n+1)/2\nd) more than n(n-1)/2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary search assumes the list is sorted, whereas linear search does not. This makes element order critical for binary search.",
        "target_text": "Question: A characteristic of the data that binary search uses but linear search ignores is the __________.\nChoices:\na) Order of the elements of the list.\nb) Length of the list.\nc) Maximum value in list.\nd) Type of elements of the list.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a min-heap, the 7th smallest element is not necessarily at a specific location. Finding it requires traversing the heap selectively, taking O(log n) in optimized approaches.",
        "target_text": "Question: In a min-heap with n elements with the smallest element at the root, the 7th smallest element can be found in time:\nChoices:\na) θ(nlogn)\nb) θ(n)\nc) θ(logn)\nd) θ(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: K-d trees are spatial data structures that allow efficient range searching and nearest neighbor queries. They are simpler than advanced multidimensional structures.",
        "target_text": "Question: Which of the following is the simplest data structure that supports range searching?\nChoices:\na) Heaps\nb) binary search trees\nc) AA-trees\nd) K-d trees\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sorting algorithm is stable if it maintains the relative order of records with equal keys. This is useful when multiple keys are involved.",
        "target_text": "Question: A stable sorting algorithm:\nChoices:\na) does not crash.\nb) does not run out of memory.\nc) does not change the sequence of appearance of elements.\nd) does not exist.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing a queue using another queue is not feasible with queue-only operations, as queues do not support reverse-order access natively like stacks.",
        "target_text": "Question: n elements of a Queue are to be reversed using another queue. The number of 'ADD' and 'REMOVE' operations required to do so is:\nChoices:\na) 2*n\nb) 4*n\nc) n\nd) The task cannot be accomplished\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The code rotates an array left by 4 positions using temporary storage. The output is a rotated array where elements from the start are moved to the end.",
        "target_text": "Question: What will be the output of the following code?\n#include <iostream>\nusing namespace std;\nint main() {\n    int arr[] = {1,2,3,4,5,6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int d=4;\n    int temp[10];\n    for(int i=0;i<d;i++) temp[i]=arr[i];\n    int j=0;\n    for(int i=d;i<n;i++,j++) arr[j]=arr[i];\n    int k=0;\n    for(int i=n-d;i<n;i++,k++) arr[i]=temp[k];\n    for(int i=0;i<n;i++) cout<<arr[i]<<\" \";\n    return 0;\n}\nChoices:\na) 5 6 1 2 3 4\nb) 6 5 4 3 1 2\nc) 3 4 5 6 1 2\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Amortized analysis gives average performance over a sequence of operations. For heaps, deleting the minimum element takes O(log N) time in amortized complexity.",
        "target_text": "Question: The amortized time efficiency for performing deletion of a minimum element is?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N^2)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Index mapping is a simple hashing approach where data values directly map to positions in the hash table without needing complex hash functions.",
        "target_text": "Question: Which is a simple form of hashing where the data is directly mapped to an index in a hash table?\nChoices:\na) Collision\nb) Index Mapping\nc) Functional Mapping\nd) Hash function\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Operator precedence determines the order of evaluation in expressions. Among the listed operators, exponentiation (^) has the highest precedence.",
        "target_text": "Question: Out of the following operators (^, *, +, &, $), the one having highest priority is __________\nChoices:\na) +\nb) $\nc) ^\nd) &\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In doubly linked lists, deleting a node when its address is known is efficient due to backward traversal capability, unlike singly linked lists which require full traversal.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by singly linked list?\nChoices:\na) Deleting a node whose location is given\nb) Searching an unsorted list for a given item\nc) Inverting a node after the node with a given location\nd) Traversing a list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When converting prefix to infix expressions, the first step is to reverse the prefix string to start processing from the end.",
        "target_text": "Question: When converting the prefix notation into an infix notation, the first step to be followed is __________\nChoices:\na) Reverse the equation\nb) Push the equation to the stack\nc) Push the equation onto the queue\nd) Push the equation to the stack or queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: K-d trees are efficient for range searching in multidimensional space. They are simpler than AA-trees and more effective than binary heaps for this use.",
        "target_text": "Question: Which of the following is the simplest data structure that supports range searching?\nChoices:\na) AA-trees\nb) K-d trees\nc) Heaps\nd) binary search trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an unbalanced binary search tree, the insertion and deletion operations can degrade to linear time O(n) in the worst case (e.g., skewed trees).",
        "target_text": "Question: What are the worst-case complexities of insertion and deletion of a key in a binary search tree?\nChoices:\na) θ(logn) for both insertion and deletion\nb) θ(n) for both insertion and deletion\nc) θ(n) for insertion and θ(logn) for deletion\nd) θ(logn) for insertion and θ(n) for deletion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a min-heap, each parent node is less than or equal to its children. This property ensures that the root is the smallest element.",
        "target_text": "Question: In a min-heap:\nChoices:\na) parent nodes have values greater than or equal to their children\nb) parent nodes have values less than or equal to their children\nc) both statements are True\nd) both statements are wrong\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: C++'s `map` container is a key-value associative container that can be used to implement adjacency lists for graph representations.",
        "target_text": "Question: To create an adjacency list C++'s map container can be used.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A leftist heap is a variant of a binary heap that maintains balance using null path length (NPL), which for a null node is defined as -1.",
        "target_text": "Question: In a leftist heap, the null path length of a null node is defined as?\nChoices:\na) 0\nb) 1\nc) null\nd) -1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This function buffers insertions and only pushes to the heap when full. Such buffering makes average insertion time constant (amortized O(1)).",
        "target_text": "Question: What is the complexity of the given function for insertion?\ninsert(int n) {\n  if(buffer_size()< max_buffer_size())\n    buffer_arr[ind] = n;\n  else\n    move_to_heap(buffer, buffer+max_buffer_size());\n}\nChoices:\na) O(logn)\nb) amortized O(1)\nc) O(n)\nd) O(n*logn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This Java function fetches a value from a sparse array using row and column indices. It includes bounds checking before access.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic Object function(int row_index, int col_index) {\n  if (row_index < 0 || col_index > N) {\n    System.out.println(\"column index out of bounds\");\n    return;\n  }\n  return (sparse_array[row_index].fetch(col_index));\n}\nChoices:\na) Store the element in the specified position\nb) Get the element from the specified position\nc) Alter the element in the specified position\nd) Remove the element from the specified position\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The function checks whether a node is a child of any ancestor and prints that ancestor, effectively printing the ancestors of a given node.",
        "target_text": "Question: What is the code below trying to print?\nvoid print(tree *root, tree *node) {\n  if(root == null) return 0;\n  if(root->left == node || root->right == node || print(root->left,node) || print(root->right,node)) {\n    print(root->data);\n  }\n}\nChoices:\na) Just printing all nodes\nb) Not a valid logic to do any task\nc) Printing ancestors of a node passed as argument\nd) Printing nodes from leaf node to a node passed as argument\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A deque can be implemented using two stacks by reversing the order between stacks to support operations on both ends.",
        "target_text": "Question: A Double-ended queue supports operations such as adding and removing items from both ends. You are given only stacks to implement this data structure. What are the total number of stacks required for this operation (you can reuse the stack)?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Depth-first traversal of a graph uses a stack either explicitly or via recursion to explore nodes as deep as possible before backtracking.",
        "target_text": "Question: What data structure is used for depth-first traversal of a graph?\nChoices:\na) Queue\nb) Stack\nc) List\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In inorder threaded binary trees, inorder traversal should use the inorder successor, not predecessor, to move through the tree efficiently.",
        "target_text": "Question: What is wrong with the below code for inorder traversal of a threaded binary tree?\ninordertraversal(threadedtreenode root):\n  threadedtreenode q = inorderpredecessor(root)\n  while(q != root):\n    q = inorderpredecessor(q)\n    print q.data\nChoices:\na) inorder successor instead of inorder predecessor must be used\nb) code is correct\nc) it is code for post order\nd) it is code for pre order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Insertion sort is a stable sorting algorithm, meaning it preserves the relative order of elements with equal keys. Heap and quick sort are unstable.",
        "target_text": "Question: Which of the following sorting algorithms is stable?\nChoices:\na) Insertion sort\nb) Bubble sort\nc) Quick sort\nd) Heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack overflow occurs when pushing an element onto a full stack, typically when the allocated memory for the stack is exhausted.",
        "target_text": "Question: What does 'stack overflow' refer to?\nChoices:\na) accessing item from an undefined stack\nb) adding items to a full stack\nc) removing items from an empty stack\nd) index out of bounds exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In sparse graphs, an adjacency list is preferred over a matrix because it uses less memory and offers faster iteration over neighbors.",
        "target_text": "Question: In which case is an adjacency list preferred over an adjacency matrix?\nChoices:\na) Dense graph\nb) Sparse graph\nc) Adjacency list is always preferred\nd) Complete graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Tiger tree hash is a type of hash tree structure commonly used in cryptographic applications to verify data integrity.",
        "target_text": "Question: Which of the following is a widely used form of the hash tree?\nChoices:\na) B+ - tree\nb) T tree\nc) Tiger tree hash\nd) Htree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Doubly linked lists allow bidirectional traversal, which makes operations like deleting a known node more efficient than singly linked lists.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by singly linked list?\nChoices:\na) Deleting a node whose location is given\nb) Searching of an unsorted list for a given item\nc) Inserting a new node after node whose location is given\nd) Traversing the list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The provided Java function checks if the queue is empty and returns the front element without removing it. This is typically a peek operation.",
        "target_text": "Question: What does the following Java code do?\npublic Object function() {\n if(isEmpty())\n   return -999;\n else {\n   Object high;\n   high = q[front];\n   return high;\n }\n}\nChoices:\na) Dequeue\nb) Enqueue\nc) Return the front element\nd) Return the last element\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Open addressing in hash tables can lead to a situation where all slots are filled, causing the table to be considered full even if not all keys are stored.",
        "target_text": "Question: A hash table may become full in the case when we use open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Separate chaining stores multiple elements in the same hash slot using linked lists, but using just the list head doesn't reduce collisions--it organizes them.",
        "target_text": "Question: By implementing separate chaining using a list head we can reduce the number of collisions drastically.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A parse tree represents the syntactic structure of code based on tokens generated by the lexical analyzer during compilation.",
        "target_text": "Question: Parse tree is constructed from the tokens produced by the lexical analyzer.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Under simple uniform hashing with chaining, the probability of avoiding the first few slots is calculated by raising the complement of their probabilities.",
        "target_text": "Question: Consider a hash table with 100 slots. Collisions are resolved using chaining. Assuming simple uniform hashing, what is the probability that the first 3 slots are unfilled after the first 3 insertions?\nChoices:\na) (97 * 97 * 97)/100^3\nb) (99 * 98 * 97)/100^3\nc) (97 * 96 * 95)/100^3\nd) (97 * 96 * 95)/(3! * 100^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C, arrays support declaration and definition but do not support dynamic allocation natively without using pointers and malloc.",
        "target_text": "Question: Which of the following is not possible with an array in C programming language?\nChoices:\na) Declaration\nb) Definition\nc) Dynamic Allocation\nd) Array of strings\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Post-order traversal visits the left child, right child, and then the root. This order is crucial for operations like deleting trees or evaluating expressions.",
        "target_text": "Question: Which among the following is the pseudo code for post-order traversal?\nChoices:\na) Order(node):\n    if node is not null:\n       Order(node.left)\n       Order(node.right)\n       print node.value\nb) Order(node):\n    if node is not null:\n       Order(node.right)\n       Order(node.left)\n       print node.value\nc) Order(node):\n    if node is not null:\n       Order(node.left)\n       print node.value\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Graph Structured Stack is a variant used in Tomita's parsing algorithm to manage multiple parsing paths efficiently in natural language processing.",
        "target_text": "Question: Graph Structured Stack finds its application in __________\nChoices:\na) Bogo Sort\nb) Tomita's Algorithm\nc) Todd-Coxeter algorithm\nd) Heap Sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix is one in which the number of zero elements is more than half the total number of elements, optimizing storage and computation.",
        "target_text": "Question: The matrix contains m rows and n columns. The matrix is called a Sparse Matrix if __________\nChoices:\na) Total number of zero elements > (m*n)/2\nb) Total number of zero elements = m + n\nc) Total number of zero elements = m/n\nd) Total number of zero elements = m - n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Indexed sequential search combines the speed of binary search with the simplicity of sequential search but requires additional space for the index.",
        "target_text": "Question: The search technique for searching a sorted file that requires increased amount of space is __________.\nChoices:\na) Indexed sequential search\nb) Interpolation search\nc) Sequential search\nd) Tree search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Direct addressing uses the key as the index in an array, allowing constant-time O(1) access when the universe of keys is small.",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: ArrayIndexOutOfBoundsException in Java occurs at runtime when trying to access an index outside the array bounds.",
        "target_text": "Question: When does the ArrayIndexOutOfBoundsException occur?\nChoices:\na) Compile-time\nb) Run-time\nc) Not an error\nd) Not an exception at all\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of distinct binary search trees with n distinct keys is given by the nth Catalan number. For n=4, it is 14.",
        "target_text": "Question: How many distinct binary search trees can be created out of 4 distinct keys?\nChoices:\na) 5\nb) 14\nc) 24\nd) 35\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing allows O(1) average time complexity for searches using direct access via hash functions, assuming ideal distribution and no collisions.",
        "target_text": "Question: The searching technique that takes O(1) time to find data is:\nChoices:\na) Linear Search\nb) Binary Search\nc) Hashing\nd) Tree Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an Acyclic Directed Graph (DAG), if v is reachable from u, it does not imply the reverse. This is due to the directed nature and absence of cycles.",
        "target_text": "Question: For any two different vertices u and v of an Acyclic Directed Graph, if v is reachable from u, is u also reachable from v?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a B+ tree, leaf nodes store key-value pairs and data pointers. Their order is the maximum number of such pairs that fit in a block, calculated based on block size and field sizes.",
        "target_text": "Question: The order of a leaf node in a B+ tree is the maximum number of (value, data record pointer) pairs it can hold. Given that the block size is 1K bytes, data record pointer is 7 bytes, the value field is 9 bytes, and a block pointer is 6 bytes, what is the order of the leaf node?\nChoices:\na) 63\nb) 64\nc) 67\nd) 68\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The `rotate()` function in C++ STL takes three arguments: the beginning, the middle (new start), and the end iterator. It rotates the range.",
        "target_text": "Question: How many arguments are required by the predefined function rotate() in C++?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting infix to postfix respects operator precedence and associativity. The correct postfix form is obtained by traversing the expression accordingly.",
        "target_text": "Question: The postfix form of A*B+C/D is?\nChoices:\na) *AB/CD+\nb) AB*CD/+\nc) A*BC+/D\nd) ABCD+/*\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Tower of Hanoi problem has a well-known recurrence relation where the number of moves required is 2^k - 1 for k disks.",
        "target_text": "Question: What is the number of moves required to solve Tower of Hanoi problem for k disks?\nChoices:\na) 2^k - 1\nb) 2^k + 1\nc) 2k + 1\nd) 2k - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inversions represent the number of pairs in an array where the order is incorrect. Reverse-sorted arrays have the maximum number of inversions.",
        "target_text": "Question: Under what condition are the number of inversions in an array maximum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A dequeue (double-ended queue) supports insertions and deletions at both ends, and is often implemented using doubly linked lists.",
        "target_text": "Question: What is a dequeue?\nChoices:\na) A queue with insert/delete defined for both front and rear ends of the queue\nb) A queue implemented with a doubly linked list\nc) A queue implemented with both singly and doubly linked lists\nd) A queue with insert/delete defined for front side of the queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This problem tests stack and queue manipulation. The operations require simulating the data movements carefully to track the resulting top of stack.",
        "target_text": "Question: The five items: A, B, C, D, and E are pushed in a stack, one after another starting from A. The stack is popped four items and each element is inserted in a queue. Two elements are deleted from the queue and pushed back on the stack. Now one item is popped from the stack. The popped item is:\nChoices:\na) A\nb) B\nc) C\nd) D\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA trees are a form of balanced binary search trees that mimic the structure of 2-3 trees and maintain logarithmic height.",
        "target_text": "Question: Which of the following BSTs is isometric with the 2-3 tree?\nChoices:\na) Splay tree\nb) AA tree\nc) Heap\nd) Red - Black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This function iterates through a linked list and returns the index (position) of a node with a matching value. If not found, it returns Integer.MIN_VALUE.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic int function(int data) {\n Node temp = head;\n int var = 0;\n while(temp != null) {\n   if(temp.getData() == data) {\n     return var;\n   }\n   var = var + 1;\n   temp = temp.getNext();\n }\n return Integer.MIN_VALUE;\n}\nChoices:\na) Find and delete a given element in the list\nb) Find and return the given element in the list\nc) Find and return the position of the given element in the list\nd) Find and insert a new element in the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This Java function uses a stack to match each closing parenthesis with its corresponding opening one, printing their indices.",
        "target_text": "Question: Which of the following programs prints the index of every matching parenthesis?\nChoices:\na) Java code matching opening and closing brackets and printing indices\nb) Same with incorrect logic for index matching\nc) Logic reversed for ')' before '('\nd) Unmatched index misplacement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a weighted graph, multiplying edge weights by a constant factor preserves relative path costs, so the shortest path remains unchanged. Adding/subtracting does not preserve path relationships.",
        "target_text": "Question: Assuming value of every weight to be greater than 10, in which of the following cases will the shortest path of a directed weighted graph from 2 vertices u and v never change?\nChoices:\na) add all values by 10\nb) subtract 10 from all the values\nc) multiply all values by 10\nd) in both the cases of multiplying and adding by 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays are efficient structures for string processing and can be constructed in O(nlogn) time using sorting-based approaches.",
        "target_text": "Question: Suffix array can be created in O(nlogn) time.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary heap of height h, the leaf nodes can appear at height h or h-1 due to the complete binary tree structure.",
        "target_text": "Question: The leaf node for a heap of height h will be at which position?\nChoices:\na) h\nb) h-1\nc) h or h-1\nd) h-2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The basic operation in a pairing heap is merging, which allows efficient support for insertions, deletions, and decrease-key operations.",
        "target_text": "Question: What is the basic operation performed in a pairing heap?\nChoices:\na) merge\nb) deletion\nc) insertion\nd) swapping\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Graph Structured Stack (GSS) used in parsing algorithms like Tomita's is represented as a Directed Acyclic Graph (DAG).",
        "target_text": "Question: A Graph Structured Stack is a __________\nChoices:\na) Undirected Graph\nb) Directed Graph\nc) Directed Acyclic Graph\nd) Regular Graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node in a doubly linked list typically contains three fields: data, pointer to the next node, and pointer to the previous node.",
        "target_text": "Question: The minimum number of fields with each node of a doubly linked list is:\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Balanced BSTs like AVL trees allow faster searching (O(log n)) compared to binary heaps which only guarantee fast access to the min/max.",
        "target_text": "Question: Which of the following is an advantage of a balanced binary search tree, like an AVL tree, compared to a binary heap?\nChoices:\na) insertion takes less time\nb) deletion takes less time\nc) searching takes less time\nd) construction of the tree takes less time than binary heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tango trees use a partitioning technique to group access paths efficiently, improving access time for dynamic search trees.",
        "target_text": "Question: Is the partitioning method used by the Tango Tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash function computes an index (or location) for storing or retrieving a value in a hash table based on the key.",
        "target_text": "Question: What is a hash function?\nChoices:\na) A function that allocates memory to keys\nb) A function that computes the location of the key in the array\nc) A function that creates an array\nd) A function that computes the location of the values in the array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix expressions are evaluated by scanning the expression from right to left using a stack for operand management.",
        "target_text": "Question: While evaluating a prefix expression, the string is read from?\nChoices:\na) left to right\nb) right to left\nc) center to right\nd) center to left to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In tree data structures, a node with child nodes is referred to as the parent node. Its immediate descendants are called children.",
        "target_text": "Question: Which of the following is the name of the node having child nodes?\nChoices:\na) Brother\nb) Sister\nc) Mother\nd) Parent\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When an algorithm has two independent time complexities, the overall complexity is determined by the slower-growing function, i.e., the maximum of the two.",
        "target_text": "Question: An algorithm is made up of two independent time complexities f(n) and g(n). Then the complexity of the algorithm is in the order of:\nChoices:\na) f(n) * g(n)\nb) Max(f(n), g(n))\nc) Min(f(n), g(n))\nd) f(n) + g(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In tree structures such as Leftist trees or AVL trees, left children often have levels less than their parents to ensure balance or heap properties.",
        "target_text": "Question: What should be the condition for the level of a left node?\nChoices:\na) It should be less than or equal to that of its parent\nb) It should be greater than that of its parent\nc) It should be strictly less than that of its parent\nd) The level should be equal to one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To efficiently count scores above a threshold, only relevant values are stored. For scores above 50, only 51-100 need to be tracked.",
        "target_text": "Question: A program P reads in 500 integers in the range [0..100] representing the scores of 500 students. It then prints the frequency of each score above 50. What would be the best way for P to store the frequencies?\nChoices:\na) An array of 50 numbers\nb) An array of 100 numbers\nc) An array of 500 numbers\nd) A dynamically allocated array of 550 numbers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In dynamic arrays, the physical size is the size of the underlying memory allocation (often larger than the logical size to accommodate growth).",
        "target_text": "Question: What is meant by physical size in a dynamic array?\nChoices:\na) The size allocated to elements\nb) The size extended to add new elements\nc) The size of the underlying array at the back-end\nd) The size visible to users\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The probability of selecting a tree uniformly from a set of Catalan-number-generated trees is 1/Catalan(n), where Catalan(n) is the total number of such trees.",
        "target_text": "Question: What is the probability of selecting a tree uniformly at random?\nChoices:\na) Equal to Catalan Number\nb) Less than Catalan Number\nc) Greater than Catalan Number\nd) Reciprocal of Catalan Number\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The maximum height of an AVL tree with n nodes is based on the balance factor constraint. For 7 nodes, the maximum height is 3.",
        "target_text": "Question: What is the maximum height of any AVL-tree with 7 nodes? Assume that the height of a tree with a single node is 0.\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Counting the number of elements in a linked list involves iterating through the list until the end and incrementing a counter at each node.",
        "target_text": "Question: Which of the following pieces of code has the functionality of counting the number of elements in the list?\nChoices:\na) code that increments `size` inside a while loop with cur != null\nb) code that swaps the order of size++ and pointer movement\nc) code with no return value\nd) code that skips every second node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a full binary tree, each internal node has exactly two children. The total number of nodes N is 2 * I + 1, where I is the number of internal nodes.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of nodes N are?\nChoices:\na) N = 2*I\nb) N = I + 1\nc) N = I - 1\nd) N = 2*I + 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In splay trees and other dynamic tree structures, a 'cut' operation is used to break a preferred path or subtree at a specific node.",
        "target_text": "Question: Which operation is used to break a preferred path into two sets of parts at a particular node?\nChoices:\na) Differentiate\nb) Cut\nc) Integrate\nd) Join\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Not all undirected multigraphs contain Eulerian cycles. The necessary condition is that all vertices have even degree and the graph is connected.",
        "target_text": "Question: All undirected Multigraphs contain Eulerian cycles.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The code attempts to reverse a string but uses an undeclared variable `n` for loop control. Declaring and initializing `n` as the string's length is essential.",
        "target_text": "Question: What is missing in the given code?\n#include <bits/stdc++.h>\nusing namespace std;\nvoid reverseStr(string& str) {\n    for (int i = 0; i < n / 2; i++)\n        swap(str[i], str[n - i - 1]);\n}\nint main() {\n    string str = \"geeksforgeeks\";\n    reverseStr(str);\n    cout << str;\n    return 0;\n}\nChoices:\na) swap function is not defined\nb) string is not defined here.\nc) Variable n is not declared anywhere.\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 3-ary max heap allows three children per node and is represented using an array. The parent must be greater than all its children to maintain the max-heap property.",
        "target_text": "Question: Which one of the following is a valid sequence of elements in an array representing a 3-ary max heap?\nChoices:\na) 1, 3, 5, 6, 8, 9\nb) 9, 6, 3, 1, 8, 5\nc) 9, 3, 6, 8, 5, 1\nd) 9, 5, 6, 8, 3, 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Splay trees offer amortized efficiency for frequently accessed elements. They are useful in applications where a small subset of data is accessed repeatedly.",
        "target_text": "Question: When we have red-black trees and AVL trees that can perform most operations in logarithmic time, what is the need for splay trees?\nChoices:\na) no there is no special usage\nb) In real time it is estimated that 80% access is only to 20% data, hence most used ones must be easily available\nc) red-black and AVL are not up to mark\nd) they are just another type of self-balancing binary search trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This code generates all subarrays of an array. Each subarray is printed by iterating over a range starting from index i to j.",
        "target_text": "Question: What will the following code do?\nvoid fun(int arr[], int n) {\n  for (int i = 0; i < n; i++) {\n    for (int j = i; j < n; j++) {\n      for (int k = i; k <= j; k++)\n        cout << arr[k] << \" \";\n      cout << endl;\n    }\n  }\n}\nChoices:\na) Prints the subsequence of the article.\nb) Prints the elements of the array\nc) Prints the subarray of the element.\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a linear queue implemented using an array, the space complexity is O(n) since memory for n elements is preallocated.",
        "target_text": "Question: What is the space complexity of a linear queue having n elements?\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A connected acyclic graph with v vertices and e edges must have e = v - 1. This defines the properties of a tree.",
        "target_text": "Question: For a given graph G having v vertices and e edges which is connected and has no cycles, which of the following statements is True?\nChoices:\na) v = e\nb) v = e + 1\nc) v + 1 = e\nd) v = e - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The function swaps adjacent elements in a singly linked list by manipulating the values, not pointers. It alters the data, not structure.",
        "target_text": "Question: What will be the contents of the list after the function completes execution (on list 1 to 7)?\nChoices:\na) 1,2,3,4,5,6,7\nb) 2,1,4,3,6,5,7\nc) 1,3,2,5,4,7,6\nd) 2,3,4,5,6,7,1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular queue of size n holding up to n-1 elements, the full condition is (REAR+1) mod n == FRONT; the empty condition is REAR == FRONT.",
        "target_text": "Question: Suppose a circular queue of capacity (n - 1) elements is implemented with an array of n elements. What are the conditions for full and empty states?\nChoices:\na) Full: (REAR+1) mod n == FRONT, empty: REAR == FRONT\nb) Full: (REAR+1) mod n == FRONT, empty: (FRONT+1) mod n == REAR\nc) Full: REAR == FRONT, empty: (REAR+1) mod n == FRONT\nd) Full: (FRONT+1) mod n == REAR, empty: REAR == FRONT\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This code removes the second-to-last node in a doubly linked list and returns its value. It updates both previous and next links.",
        "target_text": "Question: What is the functionality of the following piece of code?\npublic int function() {\n Node temp = tail.getPrev();\n tail.setPrev(temp.getPrev());\n temp.getPrev().setNext(tail);\n size--;\n return temp.getItem();\n}\nChoices:\na) Return the element at the tail of the list but do not remove it\nb) Return the element at the tail of the list and remove it from the list\nc) Return the last but one element from the list but do not remove it\nd) Return the last but one element at the tail of the list and remove it from the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reverse Polish Notation (RPN) is postfix form where the operator comes after its operands. The valid format is operand operand operator.",
        "target_text": "Question: Which of the following is a valid reverse Polish expression?\nChoices:\na) a op b\nb) op a b\nc) a b op\nd) both op a b and a b op\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a BST, traversing right -> root -> left produces elements in descending order due to the inherent structure of BSTs.",
        "target_text": "Question: A BST is traversed in the following order recursively: Right, root, left. The output sequence will be in:\nChoices:\na) Ascending order\nb) Descending order\nc) Bitomic sequence\nd) No specific order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Infix expressions place the operator between operands. Recognizing correct infix notation involves checking for balanced operators and operands.",
        "target_text": "Question: Identify the infix expression from the list of options given below:\nChoices:\na) a/b+(c-d)\nb) abc*+d+ab+cd+*ce-f-\nc) ab-c-\nd) +ab\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If each node in a binary tree has an odd number of descendants (including itself), it implies that no node can have exactly one child.",
        "target_text": "Question: In a binary tree with n nodes, every node has an odd number of descendants. Every node is considered to be its own descendant. What is the number of nodes in the tree that have exactly one child?\nChoices:\na) 0\nb) 1\nc) (n-1)/2\nd) n-1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Ternary heaps (3-ary heaps) have more children per node compared to binary heaps, leading to fewer levels and improved cache behavior.",
        "target_text": "Question: Do ternary heaps have better memory cache behavior than binary heaps?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The code reverses an array using two-pointer swapping from both ends. The output reflects a full reverse.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n}  \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) 5 1 4 3\nb) 3 5 1 4\nc) 5 3 4 1\nd) error\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the 'count' heuristic, frequently accessed nodes move forward in a list as their access count increases, improving future access time.",
        "target_text": "Question: In __________ method, whenever a node is accessed, it might move to the head of the list if its number of accesses becomes greater than the records preceding it.\nChoices:\na) least recently used\nb) count\nc) transpose\nd) exchange\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Range query structures like bins group values by intervals for quick access in searching and filtering.",
        "target_text": "Question: Bin is an example of a range query data structure.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The structure of a BST depends on the insertion order. Different orders yield different shapes, even with the same data set.",
        "target_text": "Question: Select the incorrect statement. Binary search trees (regardless of the order in which the values are inserted into the tree):\nChoices:\na) Always have multiple links per node.\nb) Can be sorted efficiently.\nc) Always have the same shape for a particular set of data.\nd) Are nonlinear data structures.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A deque (double-ended queue) supports insertion/deletion at both ends and can be implemented using a doubly linked list or a circular array.",
        "target_text": "Question: Which data structure is used to implement deque?\nChoices:\na) Stack\nb) Doubly linked list\nc) Circular array\nd) Both B and C\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sparse matrices are those in which most elements are zero. They are the opposite of dense matrices, which are mostly non-zero.",
        "target_text": "Question: Is Sparse Matrix also known as Dense Matrix?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sorted arrays are efficient in scenarios involving ordered data, such as in commercial computing or scheduling. Hash tables do not rely on order and are thus not a typical application.",
        "target_text": "Question: Which of the following is not an application of sorted array?\nChoices:\na) Commercial computing\nb) Priority Scheduling\nc) Discrete Mathematics\nd) Hash Tables\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A circular, doubly linked list node contains two pointers (prev and next). For 5 nodes, total pointers = 5 * 2 = 10.",
        "target_text": "Question: How many pointers are contained as data members in the nodes of a circular, doubly linked list of integers with five nodes?\nChoices:\na) 5\nb) 8\nc) 10\nd) 15\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary tree, nodes with degree 1, 2, or 3 correspond to the number of their neighbors. For each configuration, relationships can be derived based on degree constraints.",
        "target_text": "Question: A binary tree with n > 1 nodes has n1, n2, and n3 nodes of degree one, two, and three respectively. The degree of a node is defined as the number of its neighbors.\nn3 can be expressed as:\nChoices:\na) n1 + n2 - 1\nb) n1 - 2\nc) ((n1 + n2)/2)\nd) n2 - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In open addressing, if all slots are probed and none is empty, the table is considered full. Hence, it can become full despite available slots due to probing strategy.",
        "target_text": "Question: In open addressing, the hash table can never become full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Chernoff bound provides exponential bounds on tail distributions. For sampling without replacement, the expected error decreases as O(1/sqrt(k)).",
        "target_text": "Question: What is the expected error by the estimator Chernoff bound on the samples performed without replacement?\nChoices:\na) O(log k!)\nb) O(k!)\nc) O(k^2)\nd) O(1/sqrt(k))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The lowest-level element in a BST is the one farthest from the root. This depends on the insertion order and tree balancing.",
        "target_text": "Question: While inserting the elements 71, 65, 84, 69, 67, 83 in an empty binary search tree (BST) in the sequence shown, the element in the lowest level is:\nChoices:\na) 65\nb) 67\nc) 69\nd) 83\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Matrix multiplication involves nested loops for multiplying rows of the first matrix by columns of the second. Valid code performs this with proper indexing.",
        "target_text": "Question: Select the code snippet which performs matrix multiplication (a and b are the two given matrices, resultant matrix is c):\nChoices:\na) correct nested-loop code for c[i][j] += a[i][k] * b[k][j]\nb) code that adds matrix values instead\nc) code that transposes the matrix\nd) code that just prints one matrix\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a skew heap, all three major operations--merge, insert, delete--are based on merge operations, and each takes amortized O(log N) time.",
        "target_text": "Question: What is the time per operation of merging, insertion, and deletion operations in a skew heap?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A single stack is sufficient to evaluate a postfix expression using a simple algorithm that processes operators and operands in one pass.",
        "target_text": "Question: To evaluate an expression without any embedded function calls:\nChoices:\na) As many stacks as the height of the expression tree are needed\nb) One stack is enough\nc) Two stacks are needed\nd) A Turing machine is needed in the general case\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The size of an array is calculated by multiplying the number of elements with the size of each element. If int is 4 bytes, int arr[15] occupies 60 bytes.",
        "target_text": "Question: Assuming int is of 4 bytes, what is the size of int arr[15]?\nChoices:\na) 15\nb) 19\nc) 11\nd) 60\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Job scheduling is not inherently stack-based. Stacks are used in recursion, expression evaluation, and reversing operations.",
        "target_text": "Question: Which of the following is not an inherent application of stack?\nChoices:\na) Implementation of recursion\nb) Evaluation of a postfix expression\nc) Job scheduling\nd) Reverse a string\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An Abstract Data Type (ADT) defines a data model and operations that can be performed on it, without specifying implementation details.",
        "target_text": "Question: A mathematical model with a collection of operations defined on that model is called:\nChoices:\na) Data Structure\nb) Abstract Data Type\nc) Primitive Data Type\nd) Algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Unrolled linked lists optimize space by grouping multiple elements in a node, reducing the pointer overhead compared to traditional singly linked lists.",
        "target_text": "Question: Unrolled linked-list requires more storage space for pointers compared to a singly linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing a string using a stack involves pushing each character and then popping to retrieve them in reverse order.",
        "target_text": "Question: Operations required for reversing a word or a string using stack are push() and pop().\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In any tree, the root node is defined to be at depth 0. Depth increases by one at each level of the tree.",
        "target_text": "Question: What is the depth of the root node of the ternary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the process of building a heap with n elements, a maximum of n nodes must be arranged using heapify operations.",
        "target_text": "Question: Given a heap of n nodes. The maximum number of trees for building the heap is:\nChoices:\na) n\nb) n-1\nc) n/2\nd) logn\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In open addressing, deletion is typically handled lazily by marking entries as deleted rather than physically removing them.",
        "target_text": "Question: What kind of deletion is implemented by hashing using open addressing?\nChoices:\na) active deletion\nb) standard deletion\nc) lazy deletion\nd) no deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Priority queues are used in tasks like Huffman coding and interrupt handling. Undo operations are not typically modeled with priority queues.",
        "target_text": "Question: Which of the following is not an application of priority queue?\nChoices:\na) Huffman codes\nb) Interrupt handling in operating system\nc) Undo operation in text editors\nd) Bayesian spam filter\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Infix expressions are valid even with parentheses. A proper evaluation algorithm handles them without error.",
        "target_text": "Question: The system throws an error if parentheses are encountered in an infix expression evaluation algorithm.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The LIFO (Last In First Out) principle is implemented using a stack. While linked lists allow flexible data management, the LIFO principle specifically defines stack behavior.",
        "target_text": "Question: Which data structure is based on the Last In First Out (LIFO) principle?\nChoices:\na) Tree\nb) Linked List\nc) Stack\nd) Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A splay operation in splay trees moves a recently accessed node to the root using tree rotations, improving future access time for frequently used elements.",
        "target_text": "Question: What is a splay operation?\nChoices:\na) moving parent node to down of child\nb) moving a node to root\nc) moving root to leaf\nd) removing leaf node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Tower of Hanoi problem is optimally solved using a stack, as it naturally fits the recursive movement and backtracking needed.",
        "target_text": "Question: The optimal data structure used to solve Tower of Hanoi is __________\nChoices:\na) Tree\nb) Heap\nc) Priority queue\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In uniform hashing, the expected number of keys per slot is the load factor, n/m. Dividing the total keys by the total number of slots provides the expected value.",
        "target_text": "Question: Suppose we are given n keys, m hash table slots, and two simple uniform hash functions h1 and h2. Further, suppose our hashing scheme uses h1 for odd keys and h2 for even keys. What is the expected number of keys in a slot?\nChoices:\na) 2m/n\nb) m/n\nc) n/m\nd) m/2n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Null path length (NPL) is a measure used in leftist heaps and other tree structures. If it's not updated properly, its value remains at the default (usually 0).",
        "target_text": "Question: What happens if the null path length is not updated?\nChoices:\na) error occurs\nb) all null path lengths will be 0\nc) all null path lengths will be -1\nd) all null path lengths will be 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A memory-efficient doubly linked list reduces space by storing XOR of previous and next pointers in a single field, minimizing pointer storage.",
        "target_text": "Question: What is a memory efficient double linked list?\nChoices:\na) Each node has only one pointer to traverse the list back and forth\nb) The list has breakpoints for faster traversal\nc) An auxiliary singly linked list acts as a helper list to traverse through the doubly linked list\nd) A doubly linked list that uses bitwise AND operator for storing addresses\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A fully connected undirected graph with all non-diagonal elements as 1 forms a complete graph. The number of MSTs depends on how edges are selected, all with equal weight.",
        "target_text": "Question: An undirected graph G has n nodes. Its adjacency matrix is given by an n * n square matrix with (i) diagonal elements as 0s and (ii) non-diagonal elements as 1s. Which one of the following is TRUE?\nChoices:\na) Graph G has no minimum spanning tree (MST)\nb) Graph G has a unique MST of cost n-1\nc) Graph G has multiple distinct MSTs, each of cost n-1\nd) Graph G has multiple spanning trees of different costs\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a leftist heap, the right path contains the shortest path to a leaf. All operations (merge, insert, delete) are performed via this right path.",
        "target_text": "Question: In a leftist heap, all the operations should be performed on?\nChoices:\na) left path\nb) centre path\nc) right path\nd) root\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: By the triangle inequality, if shortest paths s->u=53 and s->v=65, then u->v must be ≥12 to maintain valid path lengths.",
        "target_text": "Question: Consider a weighted undirected graph with positive edge weights. Let u–v be an edge. The shortest path from source s to u is 53, and to v is 65. Which one of the following statements is always True?\nChoices:\na) weight(u, v) < 12\nb) weight(u, v) ≤ 12\nc) weight(u, v) > 12\nd) weight(u, v) ≥ 12\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A deque (double-ended queue) supports insertions and deletions at both ends, but not in the middle. It is a generalization of stacks and queues.",
        "target_text": "Question: A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?\nChoices:\na) Priority queue\nb) Dequeue\nc) Circular queue\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bin data structures are used for organizing data spatially, and they are commonly applied in range or region query problems (e.g., graphics, GIS).",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient traversal\nb) to have efficient region query\nc) to have efficient deletion\nd) to have efficient insertion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Direct addressing is suitable when the universe of keys is small, allowing direct access using an array index with no hashing needed.",
        "target_text": "Question: When is it appropriate to use direct addressing?\nChoices:\na) When the array is comparatively large\nb) When the universe U of keys is reasonably small\nc) When the universe U of keys is reasonably large\nd) When the array is comparatively small\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack with PUSH, POP, and REVERSE can simulate queue operations. ENQUEUE may require multiple instructions, while DEQUEUE can often be done with one.",
        "target_text": "Question: Suppose a stack implementation supports an instruction REVERSE, which reverses the order of elements on the stack, in addition to PUSH and POP. Which one of the following statements is TRUE with respect to this modified stack?\nChoices:\na) A queue cannot be implemented using this stack.\nb) A queue can be implemented where ENQUEUE takes a single instruction and DEQUEUE takes a sequence of two instructions.\nc) A queue can be implemented where ENQUEUE takes a sequence of three instructions and DEQUEUE takes a single instruction.\nd) A queue can be implemented where both ENQUEUE and DEQUEUE take a single instruction each.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A full binary tree is a special type of binary tree in which every node has either zero or two children. This structure ensures balanced depth and predictable traversal patterns.",
        "target_text": "Question: What is a full binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) Each node has exactly two children\nc) All the leaves are at the same level\nd) Each node has exactly one or two children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash tables commonly use arrays for storage, where a hash function maps keys to specific array indices. Collisions are often handled using techniques like chaining or open addressing.",
        "target_text": "Question: What data organization method is used in hash tables?\nChoices:\na) Stack\nb) Array\nc) Linked list\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix tree is a compressed trie of all the suffixes of a given text. Efficient algorithms allow for its construction in linear time and space relative to the length of the input string, often O(M), where M is the string length.",
        "target_text": "Question: How much space does construction of suffix tree takes?\nChoices:\na) O (log M)\nb) Exponential to Length of Tree\nc) O (M!)\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix expressions (Reverse Polish Notation) are evaluated using a stack. Operands are pushed onto the stack, and operators pop the required operands to apply the operation. This method avoids the need for parentheses.",
        "target_text": "Question: The result of evaluating the postfix expression 5, 4, 6, +, *, 4, 9, 3, /, +, * is?\nChoices:\na) 600\nb) 350\nc) 650\nd) 588\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an adjacency list representation of an undirected graph, each edge is stored twice--once in the list for each of its endpoints. The space complexity is proportional to the number of edges E.",
        "target_text": "Question: Space complexity for storing only the edges in an adjacency list of an undirected graph is __________\nChoices:\na) O(V)\nb) O(E*E)\nc) O(E)\nd) O(E+V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In post-order traversal of a binary tree, the correct sequence is to first traverse the left subtree, then the right subtree, and finally visit the root node.",
        "target_text": "Question: The steps for finding post-order traversal are traverse the right subtree, traverse the left subtree or visit the current node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a complete binary tree of depth d, the number of leaf nodes is given by 2^d, as all levels are completely filled.",
        "target_text": "Question: The number of leaf nodes in a complete binary tree of depth d is __________\nChoices:\na) 2d\nb) 2d-1+1\nc) 2d+1+1\nd) 2d+1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Self-balancing binary search trees maintain logarithmic height using rotations. Common examples include AVL Trees, Red-Black Trees, and Splay Trees. A 2-3-4 Tree is a multiway search tree and not a binary tree.",
        "target_text": "Question: Which of the following is not the self balancing binary search tree?\nChoices:\na) AVL Tree\nb) 2-3-4 Tree\nc) Red - Black Tree\nd) Splay Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Splay trees are a type of self-adjusting binary search tree. They provide amortized O(log n) time complexity for basic operations by splaying recently accessed nodes to the root.",
        "target_text": "Question: Is it True that splay trees have O(logn) amortized complexity?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: For post-order traversal to produce a specific sequence, the structure of the tree must align with the traversal rules (left-right-root). With 3 labeled nodes, there are a limited number of binary trees that satisfy a given post-order sequence.",
        "target_text": "Question: How many binary trees with 3 nodes which when traversed in post order gives the sequence A, B, C is?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are zero-indexed data structures in most programming languages. This means the first element is accessed at index 0, which is a common source of off-by-one errors.",
        "target_text": "Question: In general, the index of the first element in an array is __________\nChoices:\na) 0\nb) -1\nc) 2\nd) 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a d-ary heap, each node can have up to d children. Despite this generalization from binary heaps, parent and child indices can still be calculated using multiplication and division.",
        "target_text": "Question: Multiplication and division to find children and parents cannot be implemented in a d-heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a d-heap, inserting an element may involve bubbling it up the tree to restore the heap property. The time complexity of insertion depends on the logarithm base d of the number of elements.",
        "target_text": "Question: What is the run time efficiency of an insertion algorithm in d-heap?\nChoices:\na) O(N)\nb) O(log N)\nc) O(logd N)\nd) O(Nd)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: While depth-first traversal of graphs typically uses stacks, breadth-first traversal relies on queues to process nodes level by level.",
        "target_text": "Question: What data structure is used for breadth first traversal of a graph?\nChoices:\na) Queue\nb) Stack\nc) List\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing a queue can be done by transferring its elements to a stack and then back to the queue. This uses the LIFO property of stacks to reverse the order.",
        "target_text": "Question: Following is pseudo code of a function that takes a Queue as an argument, and uses a stack S to do processing.\nvoid fun(Queue *Q) {\n    Stack S;\n    while (!isEmpty(Q)) {\n        push(&S, deQueue(Q));\n    }\n    while (!isEmpty(&S)) {\n        enQueue(Q, pop(&S));\n    }\n}\nChoices:\na) Removes the last from Q\nb) Keeps the Q same as it was before the call\nc) Makes Q empty\nd) Reverses the Q\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: B-trees and their variants like B+-trees are optimized for systems that read and write large blocks of data. B+-trees are commonly used in databases and file systems.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) B-tree\nb) Red-black tree\nc) AVL tree\nd) Both AVL tree and Red-black tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary Decision Diagrams (BDDs) are used in graph-based representations of Boolean functions. Some logical operations like tautology checking may not be efficiently solvable in polynomial time using BDDs.",
        "target_text": "Question: Which of the following logical operation can't be implemented by polynomial time graph manipulation algorithms using Binary Decision Diagrams?\nChoices:\na) Conjunction\nb) Disjunction\nc) Negation\nd) Tautology Checking\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear probing is a collision resolution technique in open addressing where, if a key's hashed location is occupied, subsequent slots are checked sequentially until an empty one is found.",
        "target_text": "Question: Consider a 13 element hash table for which f(key)=key mod 13 is used with integer keys. Assuming linear probing is used for collision resolution, at which location would the key 103 be inserted, if the keys 661, 182, 24 and 103 are inserted in that order?\nChoices:\na) 0\nb) 1\nc) 11\nd) 12\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When limited to a single array and basic stack operations, implementing queue operations like enqueue is not feasible without additional memory or logic for handling order.",
        "target_text": "Question: Given only a single array of size 10 and no other memory is available. Which of the following operation is not feasible to implement (Given only push and pop operation)?\nChoices:\na) Push\nb) Pop\nc) Enqueue\nd) Returntop\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A B+-tree of order d and height h can store a maximum of d^h keys. This property is useful in indexing for databases and file systems, where large amounts of data must be accessed efficiently.",
        "target_text": "Question: What is the maximum number of keys that a B+ -tree of order 3 and of height 3 have?\nChoices:\na) 3\nb) 80\nc) 27\nd) 26\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In graph theory, finding the shortest path from one node to another in a directed graph can involve various path constraints. When edges are defined with specific functions like j = i+1 or j = 3i, techniques such as BFS help compute minimum edge counts.",
        "target_text": "Question: Let G be a directed graph whose vertex set is the set of numbers from 1 to 100. There is an edge from a vertex i to a vertex j if either j = i + 1 or j = 3i. The minimum number of edges in a path in G from vertex 1 to vertex 100 is\nChoices:\na) 4\nb) 7\nc) 23\nd) 99\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stacks follow the Last-In-First-Out (LIFO) principle. They are widely used in recursion, where function calls are pushed onto the call stack and popped off upon return.",
        "target_text": "Question: Stack is used for __________\nChoices:\na) CPU Resource Allocation\nb) Breadth First Traversal\nc) Recursion\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary tree, the balance factor of a node is calculated as the height of its left subtree minus the height of its right subtree. This is important in AVL trees to maintain balance.",
        "target_text": "Question: The balance factor of a node in a binary tree is defined as __________\nChoices:\na) addition of heights of left and right subtrees\nb) height of right subtree minus height of left subtree\nc) height of left subtree minus height of right subtree\nd) height of right subtree minus one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A leaf node is a node with no children. In any tree, including ternary trees, a leaf node is also considered a child of its parent node.",
        "target_text": "Question: Can leaf node be called child node in a ternary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Pairing heaps are simple and practical self-adjusting heaps that perform well in applications with frequent decrease-key operations. They often outperform binary and d-heaps in practice.",
        "target_text": "Question: Which of the following methods is the best choice for complex applications?\nChoices:\na) binary heap\nb) d-heap\nc) treap\nd) pairing heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Time complexity expresses how the runtime of an algorithm scales with input size N. Among O(N), O(N^0.5), and O(log N), the linear O(N) grows the fastest and is slowest for large N.",
        "target_text": "Question: Time complexities of three algorithms are given. Which should execute the slowest for large values of N?\nChoices:\na) O(N1/2)\nb) O(N)\nc) O(log N)\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Path compression is a technique used in the union-find data structure to flatten the tree structure, improving efficiency. It inspired self-adjusting strategies in data structures like skew heaps and splay trees.",
        "target_text": "Question: __________ is one of the earliest forms of a self-adjustment strategy used in splay trees, skew heaps.\nChoices:\na) Union by rank\nb) Equivalence function\nc) Dynamic function\nd) Path compression\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A rope is a binary tree used to store and manipulate long strings. It supports efficient operations like splitting and concatenation at arbitrary positions in the string.",
        "target_text": "Question: Is it possible to perform a split operation on a string in the rope if the split point is in the middle of the string?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sorted array can be in numeric or alphabetical order. The array's elements may also reside in contiguous memory blocks, but sorting refers specifically to element order, not memory layout.",
        "target_text": "Question: What is a sorted array?\nChoices:\na) Arrays sorted in numerical order\nb) Arrays sorted in alphabetical order\nc) Elements of the array are placed at equally spaced addresses in the memory\nd) All of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix expressions (Polish notation) can be converted to postfix (Reverse Polish notation) using a stack-based approach or by recursively parsing and rearranging the operators and operands.",
        "target_text": "Question: What is the postfix form of the following prefix *+ab-cd?\nChoices:\na) ab+cd-*\nb) abc+*\nc) ab+*cd\nd) ab+*cd\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a data structure that combines binary search tree properties with heap properties. Each node has a priority, and this priority helps maintain a randomized balance, making the structure simple yet efficient.",
        "target_text": "Question: What is the reason behind the simplicity of a treap?\nChoices:\na) Each node has data and a pointer\nb) Each node is colored accordingly\nc) It is a binary search tree following heap principles\nd) Each node has a fixed priority field\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In linked lists representing sets, operations like union and intersection require element comparisons, which take longer than simple operations like membership checks or counting elements (cardinality).",
        "target_text": "Question: Suppose each set is represented as a linked list with elements in arbitrary order. Which of the operations among union, intersection, membership, cardinality will be the slowest? (GATE CS 2004)\nChoices:\na) union \nb)  membership\nc) cardinality\nd)  union, intersection\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C++, arrays can be initialized using brace-enclosed lists. Outputting the elements using `cout` prints their values in order. This basic syntax is error-free if used correctly.",
        "target_text": "Question: What will be the output of the code below?\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int arr[2] = { 1, 2 };\n    cout << arr[0] << \", \" << arr[1] << endl;\n    return 0;\n}\nChoices:\na) 1, 2\nb) Syntax error\nc) Run time error\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Single variant hashing helps maintain a priority queue structure called a minimum hash queue. It offers a fast and efficient O(n) time complexity for insertion and access.",
        "target_text": "Question: What is the time required for single variant hashing to maintain the minimum hash queue?\nChoices:\na) O (log n!)\nb) O (n!)\nc) O (n2)\nd) O (n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When the head of a singly linked list is not given, deleting a node is only possible if it is not the last node. This is done by copying the data from the next node and updating the pointer to skip over it.",
        "target_text": "Question: Given pointer to a node X in a singly linked list. Only one pointer is given, pointer to head node is not given, can we delete the node X from given linked list?\nChoices:\na) Possible if X is not last node. Use following two steps (a) Copy the data of next of X to X. (b)Update the pointer of node X to the node after the next node. Delete next of X.\nb) Possible if size of linked list is even.\nc) Possible if size of linked list is odd\nd) Possible if X is not first node. Use following two steps (a) Copy the data of next of X to X. (b) Delete next of X.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A threaded binary tree stores null pointers as links to in-order predecessors or successors to facilitate fast traversal without recursion or a stack. Node structure includes tag bits and pointers.",
        "target_text": "Question: In general, the node content in a threaded binary tree is __________\nChoices:\na) leftchild_pointer, left_tag, data, right_tag, rightchild_pointer\nb) leftchild_pointer, left_tag\nc) leftchild_pointer, left_tag, right_tag, rightchild_pointer\nd) leftchild_pointer, left_tag, data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skew heaps use a merging strategy that helps keep the structure balanced. There are two merge operations: one for the initial comparison and another for recursively combining subtrees.",
        "target_text": "Question: How many types of the merge are available in skew heaps?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The height of a binary search tree is the longest path from the root to any leaf node. The structure depends on the insertion order of elements and affects search time.",
        "target_text": "Question: The following numbers are inserted into an empty binary search tree in the given order: 10, 1, 3, 5, 15, 12, 16. What is the height of the binary search tree (the height is the maximum distance of a leaf node from the root)? (GATE CS 2004)\nChoices:\na) 2\nb) 3\nc) 4\nd) 6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Variable-length arrays (VLAs) allow programmers to define arrays whose size is determined at runtime instead of compile time. This adds flexibility in memory usage based on user input or other runtime conditions.",
        "target_text": "Question: Which of the following is an advantage of using variable-length arrays?\nChoices:\na) Deciding the length of an array at the time of execution\nb) Memory allocation at compile time\nc) Initializing array at compile time\nd) Faster execution of code\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a rooted tree where each node has 0 or 3 children, a mathematical relationship exists between the total number of nodes and the number of leaf nodes. The number of leaves in such ternary trees can be derived using a formula.",
        "target_text": "Question: The number of leaf nodes in a rooted tree of n nodes, with each node having 0 or 3 children is:\nChoices:\na) n/2\nb) (n-1)/3\nc) (n-1)/2\nd) (2n+1)/3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Breadth First Traversal (BFS) requires a queue to manage nodes level by level. While arrays can represent data structures, they don't provide the dynamic behavior required by BFS like a queue does.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is?\nChoices:\na) Array\nb) Stack\nc) Tree\nd) Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular queue, the rear and front pointers wrap around when they reach the end of the array. This wrapping is achieved using modulo arithmetic to stay within bounds.",
        "target_text": "Question: In a circular queue, how do you increment the rear end of the queue?\nChoices:\na) rear++\nb) (rear+1) % CAPACITY\nc) (rear % CAPACITY)+1\nd) rear-\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Free lists are used in dynamic memory allocation to keep track of free memory blocks. They are often implemented using linked lists or balanced trees for efficiency in merging and splitting blocks.",
        "target_text": "Question: What datastructures can be used in implementing a free list?\nChoices:\na) only linked list\nb) linked list or sort trees\nc) arrays\nd) trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Splay trees are a type of self-adjusting binary search tree that move frequently accessed elements closer to the root, improving access times for non-uniform access patterns.",
        "target_text": "Question: What are splay trees?\nChoices:\na) self adjusting binary search trees\nb) self adjusting binary trees\nc) a tree with strings\nd) a tree with probability distributions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A k-d tree is a space-partitioning data structure used for organizing points in a k-dimensional space. Each level in the tree corresponds to splitting along a specific dimension.",
        "target_text": "Question: Each level in a k-d tree corresponds to a split along?\nChoices:\na) a specific dimension\nb) node height\nc) node color\nd) number of children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: This C++ program uses an array and calculates a count array based on conditional comparisons. It prints the final count array. Understanding of loops, memory initialization, and logical indexing is essential to interpret the output.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int arr[], int n) \n{  \n int count[n]; \n memset(count, 0, sizeof(count)); \n \n for (int i=n-2; i>=0; i--) \n { \n  if (arr[i] >= n - i - 1) \n   count[i]++; \n \n  for (int j=i+1; j < n-1 && j <= arr[i] + i; j++) \n \n   if (count[j] != -1) \n    count[i] += count[j]; \n \n  if (count[i] == 0) \n   count[i] = -1; \n } \n \n for (int i=0; i<n; i++) \n  cout << count[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 3, 5, 8, 9}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, n); \n return 0; \n}\nChoices:\na) 3\nb) 4\nc) 4 4 2 1 0\nd) 4 2 2 0 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursion is typically implemented using a stack to manage function calls. Although arrays can store data, stacks are necessary for tracking the call-return mechanism.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Array\nd) List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The height of a binary search tree (BST) depends on the order of inserted elements. A balanced BST has logarithmic height, while skewed trees can have linear height.",
        "target_text": "Question: The following numbers are inserted into an empty binary search tree in the given order: 10, 1, 3, 5, 15, 12, 16 What is the height of the binary search tree?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Merging sorted files involves comparing elements in each file. The time complexity is proportional to the total number of records across all files, making it O(n) for merging n records.",
        "target_text": "Question: Merging 4 sorted files containing 50, 10, 25 and 15 records will take __________ time\nChoices:\na) O(100)\nb) O(200)\nc) O(175)\nd) O(125)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting postfix expressions to infix requires understanding the order of operations and operator precedence. Evaluating the expression yields its numerical result.",
        "target_text": "Question: The equivalent infix expression and value for the postfix form 1 2 + 3 * 4 5 * - will be __________\nChoices:\na) 1 + 2 * 3 - 4 * 5 and -13\nb) (2 + 1) * (3 - 4) * 5 and 13\nc) 1 + 2 * (3 - 4) * 5 and -11\nd) (1 + 2) * 3 - (4 * 5) and -11\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Array representation of trees is memory efficient for complete or dense trees. However, for sparse trees, this leads to wasted space due to empty indices.",
        "target_text": "Question: Consider a situation of writing a binary tree into a file with memory storage efficiency in mind, is array representation of tree is good?\nChoices:\na) yes because we are overcoming the need of pointers and so space efficiency\nb) yes because array values are indexable\nc) No it is not efficient in case of sparse trees and remaining cases it is fine\nd) No linked list representation of tree is only fine\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Queues are used in a variety of algorithms. LRU (Least Recently Used) uses a queue to track recent usage, while Quick Sort is not implemented with queues.",
        "target_text": "Question: Which of the following option is not correct?\nChoices:\na) If the queue is implemented with a linked list, keeping track of a front pointer, Only rear pointer s will change during an insertion into an non-empty queue.\nb) Queue data structure can be used to implement least recently used (LRU) page fault algorithm and Quick short algorithm.\nc) Queue data structure can be used to implement Quick short algorithm but not least recently used (LRU) page fault algorithm.\nd) Both (A) and (C)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursive in-order traversal of a binary tree visits the left child, root, and then right child. The space complexity depends on the depth of recursion, which is equal to the depth of the tree.",
        "target_text": "Question: What is the space complexity of the in-order traversal in the recursive fashion? (d is the tree depth and n is the number of nodes)\nChoices:\na) O(1)\nb) O(nlogd)\nc) O(logd)\nd) O(d)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Travelling Salesman Problem (TSP) is a classic example of a problem solved using dynamic programming. It seeks the shortest path visiting all nodes exactly once and returning to the origin.",
        "target_text": "Question: Travelling salesman problem is an example of __________\nChoices:\na) Dynamic Algorithm\nb) Greedy Algorithm\nc) Recursive Approach\nd) Divide & Conquer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In row-major order, multi-dimensional arrays are stored row-by-row in memory. The formula for address calculation is: Base + [(i * number_of_columns) + j] * word_size.",
        "target_text": "Question: Consider a two dimensional array A[20][10]. Assume 4 words per memory cell, the base address of array A is 100, elements are stored in row-major order and first element is A[0][0]. What is the address of A[11][5]?\nChoices:\na) 560\nb) 460\nc) 570\nd) 575\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays resize themselves automatically, offering flexibility. However, they can suffer from memory leaks if allocation and deallocation are mismanaged.",
        "target_text": "Question: Which of the following is a disadvantage of dynamic arrays?\nChoices:\na) Locality of reference\nb) Data cache utilization\nc) Random access\nd) Memory leak\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tries, or prefix trees, allow fast lookup and storage of strings. Unlike hashing, tries are collision-free and support prefix-based search but often use more space.",
        "target_text": "Question: Which of the following is not True?\nChoices:\na) Trie requires less storage space than hashing\nb) Trie allows listing of all the words with same prefix\nc) Tries are collision free\nd) Trie is also known as prefix tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In linear probing, the expected number of probes for an unsuccessful search is calculated using load factor α. The formula involves analyzing probe sequences and probability.",
        "target_text": "Question: What is the formula to find the expected number of probes for an unsuccessful search in linear probing?\nChoices:\na) 1/2 * (1 + 1/(1-α))\nb) 1/2 * (1 + 1/(1-α)^2)\nc) 1/2 * (1 + 1/(1+α))\nd) 1/2 * (1 + 1/(1+α)(1-α))\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Depth First Search (DFS) explores paths as deeply as possible before backtracking, which enhances locality and cache efficiency during traversal.",
        "target_text": "Question: If locality is a concern, you can use __________ to traverse the graph.\nChoices:\na) Breadth First Search\nb) Depth First Search\nc) Either BFS or DFS\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2-3 tree is a balanced search tree where all leaves are at the same depth. It requires more complex node structures but enables more efficient search compared to traditional BSTs.",
        "target_text": "Question: Which of the following is False?\nChoices:\na) 2-3 tree requires less storage than the BST\nb) lookup in 2-3 tree is more efficient than in BST\nc) 2-3 tree is shallower than BST\nd) 2-3 tree is a balanced tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, arrays must be instantiated using the `new` keyword. The correct syntax uses square brackets and specifies the size explicitly.",
        "target_text": "Question: How do you instantiate an array in Java?\nChoices:\na) int arr[] = new int(3);\nb) int arr[];\nc) int arr[] = new int[3];\nd) int arr() = new int(3);\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Van Emde Boas tree is a priority queue data structure that performs operations like insert, delete, and search in O(log log M) time, where M = 2^m.",
        "target_text": "Question: Does Van Emde Boas data structure perform all operation in O (log (log M)) time where M = 2^m?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue is a linear data structure that follows the FIFO (First In First Out) principle. It differs from stacks and lists in access patterns.",
        "target_text": "Question: A queue is a\nChoices:\na) FIFO (First In First Out) list.\nb) LIFO (Last In First Out) list.\nc) Ordered array.\nd) Linear tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Adding an element to a binary heap involves inserting at the end and bubbling up. Time complexity is O(log n), which is also equal to the height of the heap (O(h)).",
        "target_text": "Question: What is the complexity of adding an element to the heap?\nChoices:\na) O(log n)\nb) O(h)\nc) O(log n) & O(h)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Randomized trees can be generated using probabilistic distributions. Beta distribution is one such method used in randomized modeling and tree simulations.",
        "target_text": "Question: Can mathematical randomized tree be generated using beta distribution?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Merge sort is a divide-and-conquer algorithm often used to count inversions in arrays. Although it has O(n log n) time complexity, it requires additional O(n) space for temporary arrays.",
        "target_text": "Question: What is the space complexity of the code that uses merge sort for determining the number of inversions in an array?\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing a doubly linked list involves swapping the next and prev pointers for each node. After traversal, the updated head becomes the previous tail node.",
        "target_text": "Question: Consider the following function that takes reference to head of a Doubly Linked List as parameter. Assume that a node of doubly linked list has previous pointer as prev and next pointer as next.\nvoid fun(struct node **head_ref) {\n    struct node *temp = NULL;\n    struct node *current = *head_ref;\n    while (current != NULL) {\n        temp = current->prev;\n        current->prev = current->next;\n        current->next = temp;\n        current = current->prev;\n    }\n    if (temp != NULL)\n        *head_ref = temp->prev;\n}\nChoices:\na) 2 <--> 1 <--> 4 <--> 3 <--> 6 <-->5\nb) 5 <--> 4 <--> 3 <--> 2 <--> 1 <-->6.\nc) 6 <--> 5 <--> 4 <--> 3 <--> 2 <--> 1.\nd) 6 <--> 5 <--> 4 <--> 3 <--> 1 <--> 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear probing is a collision resolution technique in open addressing. It often leads to primary clustering, where groups of occupied slots form and grow.",
        "target_text": "Question: Which of the following problems occur due to linear probing?\nChoices:\na) Primary clustering\nb) Secondary collision\nc) Separate chaining\nd) Extendible hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stacks can hold any type of data, including characters like newline '\n'. There is no inherent restriction unless enforced by application logic.",
        "target_text": "Question: An error is thrown if the character '\n' is pushed in to the character stack.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In certain problems like Jump Game, a value of 0 at the starting index means no forward movement is possible, which can make reaching the end impossible.",
        "target_text": "Question: It is not possible to reach the end of an array if starting element of the array is 0.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Exponentiation (^) is typically right-associative in most programming languages, meaning the expression evaluates from right to left, like in a^b^c = a^(b^c).",
        "target_text": "Question: The associativity of an exponentiation operator ^ is right side.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Leftist heaps are binary trees that maintain a heap property and a distance (null path length) value. Deletion of the minimum element takes O(log N) time due to recursive merging.",
        "target_text": "Question: What is the time taken to delete a minimum element in a leftist heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists use three pointers (prev, next, and possibly an additional one like random or auxiliary), increasing their memory consumption compared to doubly linked lists.",
        "target_text": "Question: Memory usage in triply linked list is higher than doubly linked list.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Serial access memory is accessed sequentially, much like the Last-In-First-Out (LIFO) behavior of a stack, where the most recent element is accessed first.",
        "target_text": "Question: The process of accessing data stored in a serial access memory is similar to manipulating data on a __________\nChoices:\na) heap\nb) queue\nc) stack\nd) binary tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Unlike static arrays which have a fixed size at compile time, dynamic arrays can grow or shrink at runtime, overcoming the limitation of fixed storage.",
        "target_text": "Question: Dynamic arrays overcome the limit of static arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sparsity measures how many zero values are present in a matrix. It is defined as the ratio of zero elements to the total number of elements in the matrix.",
        "target_text": "Question: What is sparsity of a matrix?\nChoices:\na) The fraction of zero elements over the total number of elements\nb) The fraction of non-zero elements over the total number of elements\nc) The fraction of total number of elements over the zero elements\nd) The fraction of total number of elements over the non-zero elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A dequeue (double-ended queue) allows insertion and deletion from both the front and rear ends, and can be implemented using doubly linked lists for flexibility.",
        "target_text": "Question: What is a dequeue?\nChoices:\na) A queue implemented with both singly and doubly linked lists\nb) A queue with insert/delete defined for front side of the queue\nc) A queue with insert/delete defined for both front and rear ends of the queue\nd) A queue implemented with a doubly linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: One drawback of splay trees is that accessing elements in sorted or nearly sorted order can result in a tree with linear height, reducing performance.",
        "target_text": "Question: What is the disadvantage of using splay trees?\nChoices:\na) height of a splay tree can be linear when accessing elements in non decreasing order.\nb) splay operations are difficult\nc) no significant disadvantage\nd) splay tree performs unnecessary splay when a node is only being read\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap, each node has three children. This structure allows for faster heap operations like decrease-key due to fewer comparisons per level compared to binary heaps.",
        "target_text": "Question: Is decrease priority operation performed more quickly in a ternary heap with respect to the binary heap?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing provides direct access to data using a hash function. It is a common technique used in direct search applications for fast data retrieval.",
        "target_text": "Question: A technique for direct search is __________\nChoices:\na) Binary Search\nb) Linear Search\nc) Tree Search\nd) Hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The size of a binary tree can be calculated recursively using the formula: size(left subtree) + 1 (for the current node) + size(right subtree).",
        "target_text": "Question: What may be the pseudo code for finding the size of a tree?\nChoices:\na) find_size(root_node->left_node) + 1 + find_size(root_node->right_node)\nb) find_size(root_node->left_node) + find_size(root_node->right_node)\nc) find_size(root_node->right_node) - 1\nd) find_size(root_node->left_node + 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used in online spell checkers to quickly verify the presence of words in a dictionary by hashing input strings and matching them against stored hashes.",
        "target_text": "Question: Hashing can be used in online spelling checkers.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An in-place algorithm uses a constant amount of additional memory and modifies the input directly. Rotating an array element-by-element does not require extra space, making it in-place.",
        "target_text": "Question: To rotate an array by using the algorithm of rotating its elements one by one is an in place algorithm.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary Decision Diagrams (BDDs) represent Boolean functions using Directed Acyclic Graphs (DAGs). They are used in formal verification, model checking, and circuit design.",
        "target_text": "Question: Binary Decision Diagram is a type of __________\nChoices:\na) Multigraph\nb) Cyclic Graph\nc) Directed Acyclic Graph\nd) Directed Acyclic Word Graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing involves mapping keys to values using a hash function and storing them in a hash table. All three--key, hash function, and hash table--are essential components.",
        "target_text": "Question: Which of the following are components of Hashing?\nChoices:\na) Key\nb) Hash Function\nc) Hash Table\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skew heaps are self-adjusting heaps that do not maintain strict structure. Their amortized cost per operation, such as insert or merge, is O(log N).",
        "target_text": "Question: What is the amortized cost per operation of a skew heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N²)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In stack implementation using arrays, the next free position after N elements is S[N], assuming zero-based indexing and that capacity > N.",
        "target_text": "Question: Which of the following array position will be occupied by a new element being pushed for a stack of size N elements (capacity of stack > N)?\nChoices:\na) S[N-1]\nb) S[N]\nc) S[1]\nd) S[0]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists are probabilistic data structures that use random levels to achieve fast search times. The number of forward pointers in a node is typically determined probabilistically.",
        "target_text": "Question: The nodes in a skip list may have many forward references. Their number is determined\nChoices:\na) probabilistically\nb) randomly\nc) sequentially\nd) orthogonally\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C++, the `sort()` function from the `<algorithm>` header can be used to sort strings by passing iterators to the beginning and end of the string, i.e., `sort(str.begin(), str.end())`.",
        "target_text": "Question: What is the function present to sort a string in C++?\nChoices:\na) sort();\nb) sort(str.begin(), str.end());\nc) Sort_asec();\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Ackermann function is a classic example of a recursive function that grows extremely rapidly and is not primitive recursive. It is defined such that A(1, i) = i + 1 for i >= 1.",
        "target_text": "Question: What is the definition for Ackermann's function?\nChoices:\na) A(1,i) = i+1 for i>=1\nb) A(i,j) = i+j for i>=j\nc) A(i,j) = i+j for i = j\nd) A(1,i) = i+1 for i<1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In infix-to-postfix conversion, operands are output directly, and parentheses are not included in the final postfix result. Operators are pushed based on precedence rules.",
        "target_text": "Question: Which of the following statement is incorrect with respect to infix to postfix conversion algorithm?\nChoices:\na) operand is always placed in the output\nb) operator is placed in the stack when the stack operator has lower precedence\nc) parenthesis are included in the output\nd) higher and equal priority operators follow the same condition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Generalized LR (GLR) parsing handles ambiguous grammars and has time complexity O(|G| * n), where |G| is the grammar size and n is the input length.",
        "target_text": "Question: Which among the following best represents the computational complexity of GLR parsing?\nChoices:\na) O(|G| x n)\nb) O(|G|2 x n)\nc) O(|G| x n2)\nd) O(|G|2 x n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2-3-4 tree is a B-tree of order 4 and is isometric to a red-black tree, meaning they maintain the same structure and balancing logic under different representations.",
        "target_text": "Question: 2-3-4 trees are B-trees of order 4. They are an isometric of __________ trees.\nChoices:\na) AVL\nb) AA\nc) 2-3\nd) Red-Black\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In adjacency list representation of a weighted directed graph, each vertex stores a list of its neighbors along with edge weights. The pair is usually (neighbor, weight).",
        "target_text": "Question: Complete the given snippet of code for the adjacency list representation of a weighted directed graph.\nChoices:\na) vertex, vertex\nb) neighbor, vertex\nc) neighbor, neighbor\nd) vertex, neighbor\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash table is a data structure that maps keys to values using a hash function. It is not used for stack or queue operations.",
        "target_text": "Question: What is a hash table?\nChoices:\na) A structure that maps values to keys\nb) A structure that maps keys to values\nc) A structure used for storage\nd) A structure used to implement stack and queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Infix notation places the operator between operands. It is the most familiar notation for humans, unlike prefix and postfix used in computation.",
        "target_text": "Question: Which of the following is an infix expression?\nChoices:\na) (a+b)*(c+d)\nb) ab+c*\nc) +ab\nd) abc+*\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Balanced expressions require that all types of brackets are properly opened and closed. An extra closing or unmatched symbol breaks this rule.",
        "target_text": "Question: Is the given statement ((A+B) + [C-D]] valid with respect to balancing of symbols?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In graph theory, a leaf cluster is a group of nodes connected in such a way that only one node connects to the rest of the graph. This typically means it has zero internal edges.",
        "target_text": "Question: How many edges does a leaf cluster contain?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The runtime efficiency of an insertion algorithm depends on the data structure used. In unsorted arrays or linked lists, insertion at the end or front generally takes O(N) in the worst case.",
        "target_text": "Question: What is the run time efficiency of an insertion algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N²)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stacks follow LIFO order and do not allow removal from the bottom. Such operations violate stack constraints and are generally not permitted in standard implementations.",
        "target_text": "Question: In C programming, when we remove an item from bottom of the stack, then:\nChoices:\na) The stack will fall down.\nb) Stack will rearrange items.\nc) It will convert to LIFO\nd) This operation is not allowed.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays are memory-efficient structures used in low-level system tasks like memory page tracking or Bloom filters, but not typically used for implementing vector/matrix operations.",
        "target_text": "Question: Which of the following is/are not applications of bit arrays?\nChoices:\na) Used by the Linux kernel\nb) For the allocation of memory pages\nc) Bloom filter\nd) Implementation of Vectors and Matrices\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given function performs deletion from the beginning of a circular linked list by updating the head and deleting the original first node.",
        "target_text": "Question: What is the functionality of the following code? Choose the most appropriate answer.\nint function() {\n    if (head == null)\n        return Integer.MIN_VALUE;\n    int var;\n    Node temp = head;\n    while (temp.getNext() != head)\n        temp = temp.getNext();\n    if (temp == head) {\n        var = head.getItem();\n        head = null;\n        return var;\n    }\n    temp.setNext(head.getNext());\n    var = head.getItem();\n    head = head.getNext();\n    return var;\n}\nChoices:\na) Returns data from the end of the list\nb) Returns data and deletes the node at the end of the list\nc) Returns data from the beginning of the list\nd) Returns data and deletes the node from the beginning of the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given recursive C++ function reads a string and uses recursion to delay printing each character until after the call stack unwinds, effectively reversing the string.",
        "target_text": "Question: What is the following code segment doing?\nvoid fn() {\n  char c;\n  cin.get(c);\n  if (c != '\n') {\n    fn();\n    cout.put(c);\n  }\n}\nChoices:\na) The string entered is printed as it is.\nb) The string entered is printed in reverse order.\nc) It will go in an infinite loop.\nd) It will print an empty line.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To compute the sum of nodes at alternate levels in a binary tree, you skip levels while summing values. This often involves toggling a level flag or skipping iterations.",
        "target_text": "Question: What must be the missing logic in place of missing lines for finding sum of nodes of binary tree in alternate levels?\n// e.g.: for a complete binary tree of height 3: [1,2,3,4,5,6,7], sum = 1+4+5+6+7 = 23\nn = power(2,height)-1; // total nodes\nfor (i = 1; i <= n;) {\n  for (j = 1; j <= pow(2, currentlevel-1); j++) {\n    sum = sum + a[i];\n    i = i + 1;\n  }\n  i = i + pow(2, currentlevel); // skip alternate level\n  currentlevel = currentlevel + 2;\n}\nChoices:\na) i = i + pow(2, currentlevel); currentlevel = currentlevel + 2;\nb) i = i + pow(2, currentlevel-1); currentlevel = currentlevel + 1;\nc) i = i + pow(2, currentlevel); currentlevel = currentlevel + 1;\nd) currentlevel = currentlevel + 2;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a combination of a binary search tree and a heap. The priority values determine heap order, and the condition is that a node's priority must be at least as large as its parent.",
        "target_text": "Question: What is the condition for priority of a node in a treap?\nChoices:\na) A node's priority should be greater than its parent\nb) A node's priority should be at least as large as its parent\nc) The priority is randomly assigned and can have any value\nd) A node's priority is always given in decreasing order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing with chaining, each table slot points to a linked list of entries that hash to the same slot. Although it handles collisions well, it increases space usage.",
        "target_text": "Question: What is the disadvantage of hashing with chaining?\nChoices:\na) Not easy to implement\nb) Takes more space\nc) Quite sensitive to hash function\nd) Table gets filled up easily\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In infix to postfix conversion, operators are typically associated based on their precedence. Most binary operators (like +, -, *, /) associate from left to right unless otherwise specified.",
        "target_text": "Question: In infix to postfix conversion algorithm, the operators are associated from?\nChoices:\na) Right to left\nb) Left to right\nc) Centre to left\nd) Centre to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix notation places operators before their operands. Conversion from infix to prefix involves reversing the expression and applying operator precedence.",
        "target_text": "Question: The prefix form of A-B/ (C * D ^ E) is?\nChoices:\na) -/*A B C*D^E\nb) -ABCD*^DE\nc) -A/B*C^DE\nd) -A/BC*^DE\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a linked queue implementation, overflow must be checked before inserting a new element, especially in cases where memory allocation might fail.",
        "target_text": "Question: The essential condition which is checked before insertion in a linked queue is?\nChoices:\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The smallest index value in an array is called its lower bound. In most programming languages, this value is 0 unless otherwise specified.",
        "target_text": "Question: The smallest element of an array's index is called its\nChoices:\na) lower bound\nb) upper bound\nc) range\nd) extraction\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays can lead to inefficient memory usage if allocated size exceeds actual data. This static allocation causes wasted memory when not fully utilized.",
        "target_text": "Question: What are the disadvantages of arrays?\nChoices:\na) Index value of an array can be negative\nb) Elements are sequentially accessed\nc) Data structure like queue or stack cannot be implemented\nd) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A graph is called regular if every vertex has the same degree. These graphs have uniform structure and are useful in network topology and theoretical analysis.",
        "target_text": "Question: A graph with all vertices having equal degree is known as a __________\nChoices:\na) Multi Graph\nb) Regular Graph\nc) Simple Graph\nd) Complete Graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are data structures used to store elements of the same type in contiguous memory locations. They allow indexed access and are foundational in many algorithms.",
        "target_text": "Question: Which of these best describes an array?\nChoices:\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialised\nd) Array is not a data structure\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Operating systems may periodically perform garbage collection to reclaim unused memory and consolidate it into contiguous blocks, improving performance and memory usage.",
        "target_text": "Question: The OS of a computer may periodically collect all the free memory space to form contiguous block of free space. This is called:\nChoices:\na) Concatenation\nb) Garbage collection\nc) Collision\nd) Dynamic Memory Allocation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skew heaps are self-adjusting heaps with no structural constraints. Due to their irregular nature, it is harder to determine right path lengths compared to structured heaps like leftist or binomial.",
        "target_text": "Question: Which of the following is difficult to determine the right path length?\nChoices:\na) Skew heaps\nb) Binomial tree\nc) Leftist heap\nd) d-heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Serial access memory (SAM) stores data in a linear format and can be accessed sequentially, similar to a stack, which also operates on LIFO principles.",
        "target_text": "Question: The process of accessing data stored in a serial access memory is similar to manipulating data on a __________\nChoices:\na) Heap\nb) Binary Tree\nc) Array\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An indexed skip list optimizes search time by storing metadata such as widths or levels instead of elements. This improves efficiency over basic linked lists.",
        "target_text": "Question: What is indexed skip list?\nChoices:\na) It stores width of link in place of element\nb) It stores index values\nc) Array based linked list\nd) Indexed tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash tree, or Merkle tree, generalizes a hash list by using a hierarchical tree structure where each parent node is a hash of its children.",
        "target_text": "Question: Hash tree is generalization of __________\nChoices:\na) Heap\nb) Hash list\nc) BST\nd) B - tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Operator precedence defines the order in which operations are performed. Custom or uncommon operators like # are typically assigned the lowest precedence in parsing.",
        "target_text": "Question: Of the following choices, which operator has the lowest precedence?\nChoices:\na) ^\nb) +\nc) /\nd) #\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: With augmented trees or segment trees, it is possible to track the ordinal position and ordering of keys, allowing efficient indexing and range queries.",
        "target_text": "Question: Elements in a tree can be indexed by its position under the ordering of the keys and the ordinal position of an element can be determined, both with good efficiency.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When reconstructing a heap, merging sub-heaps involves combining c children. Using pairwise merges requires c - 1 merge operations to fully reassemble the heap.",
        "target_text": "Question: If there are c children of the root, how many calls to the merge procedure is required to reassemble the heap?\nChoices:\na) c\nb) c+1\nc) c-1\nd) 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a directed graph with no self-loops, the maximum number of edges is n(n-1), where n is the number of vertices. This is because each node can have directed edges to every other node.",
        "target_text": "Question: What is the maximum possible number of edges in a directed graph with no self loops having 8 vertices?\nChoices:\na) 28\nb) 64\nc) 256\nd) 56\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Left-Leaning Red-Black (LLRB) trees are a simplified form of red-black trees that simulate 2-3 trees, maintaining a 1-1 correspondence with them for structural balance.",
        "target_text": "Question: LLRB maintains 1-1 correspondence with 2-3 trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding connected components in an undirected graph using adjacency lists takes O(n + e) time using DFS or BFS, where n is the number of vertices and e is the number of edges.",
        "target_text": "Question: An undirected graph G with n vertices and e edges is represented by adjacency list. What is the time required to generate all the connected components?\nChoices:\na) O(n)\nb) O(e)\nc) O(e+n)\nd) O(e2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A top tree is a dynamic tree data structure used to represent and maintain a forest under link and cut operations efficiently.",
        "target_text": "Question: Which data structure is used to maintain a dynamic forest using a link or cut operation?\nChoices:\na) Top Tree\nb) Array\nc) Linked List\nd) Stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a max heap, the smallest value (like 5) will percolate down to the lowest level if larger elements exist. Thus, it will end up at the last level in the heap.",
        "target_text": "Question: What will be the position of 5, when a max heap is constructed on the input elements 5, 70, 45, 7, 12, 15, 13, 65, 30, 25?\nChoices:\na) 5 will be at root\nb) 5 will be at last level\nc) 5 will be at second level\nd) 5 can be anywhere in heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In prefix trees or tries, two outgoing edges from a node cannot begin with the same character to ensure unique path prefixes.",
        "target_text": "Question: Can the two edges that are coming out of a node have labels of string beginning with the same character?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Modifying edge weights affects the structure of a graph. Squaring edge weights does not preserve MST structure or weight relation due to non-linear scaling.",
        "target_text": "Question: Let G be a weighted graph with edge weights greater than one and G' be the graph constructed by squaring the weights of edges in G. Let T and T' be the minimum spanning trees of G and G', respectively, with total weights t and t'. Which of the following statements is TRUE?\nChoices:\na) T' = T with total weight t' = t2\nb) T' = T with total weight t' < t2\nc) T' != T but total weight t' = t2\nd) None of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Ukkonen provided the first linear-time online algorithm to build a suffix tree, making suffix tree construction efficient and widely applicable in string algorithms.",
        "target_text": "Question: Who among the following provided the first online contribution of Suffix Tree?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Ukkonen\nd) Alexander Morse\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary tree is a hierarchical structure where each node has at most two children--commonly referred to as the left and right child.",
        "target_text": "Question: How many children does a binary tree have?\nChoices:\na) 2\nb) any number of children\nc) 0 or 1 or 2\nd) 0 or 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing, chaining is a collision resolution method where elements that hash to the same slot are stored in a secondary structure, such as a linked list or binary tree.",
        "target_text": "Question: Which of the following technique stores data separately in case of a collision?\nChoices:\na) Open addressing\nb) Double hashing\nc) Quadratic probing\nd) Chaining using a binary tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In tries (prefix trees), each character in a string corresponds to a node. The insertion logic includes creating new nodes when necessary and advancing the node pointer.",
        "target_text": "Question: Following code snippet is the function to insert a string in a trie. Find the missing line.\nprivate void insert(String str) {\n    TrieNode node = root;\n    for (int i = 0; i < length; i++) {\n        int index = key.charAt(i) - 'a';\n        if (node.children[index] == null)\n            node.children[index] = new TrieNode();\n        __________\n    }\n    node.isEndOfWord = True;\n}\nChoices:\na) node = node.children[index];\nb) node = node.children[str.charAt(i + 1)];\nc) node = node.children[index++];\nd) node = node.children[index++];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sentinel is a dummy value inserted at the end of a data structure like an array to simplify boundary conditions and terminate loops cleanly.",
        "target_text": "Question: The extra key inserted at the end of the array is called a __________\nChoices:\na) End Key\nb) Stop Key\nc) Sentinel\nd) Transposition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing an array reorders its elements from last to first. For example, arr[]={3,5,4,2} becomes {2,4,5,3} when reversed.",
        "target_text": "Question: What will be the resulting array after reversing arr[]={3,5,4,2}?\nChoices:\na) 2,3,5,4\nb) 4,2,3,5\nc) 5,4,2,3\nd) 2,4,5,3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A rope is a binary tree used for efficiently manipulating long strings, supporting fast operations like concatenation, splitting, and insertion.",
        "target_text": "Question: Which type of data structure does rope represent?\nChoices:\na) Array\nb) Linked List\nc) Queue\nd) Binary Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary hash tree (Merkle tree), the height is determined by the logarithm (base branching factor) of the number of records. For branching factor 2 and 8 records, height = 3.",
        "target_text": "Question: What will be the height of the hash tree with branching factor 2 and with 8 records?\nChoices:\na) 3\nb) 5\nc) 4\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Binary Decision Diagrams (BDDs), conventionally, the 0 branch is depicted using a dotted or dashed line and the 1 branch using a solid or bold line.",
        "target_text": "Question: In a Binary Decision Diagram, 0 values are represented by a __________ line and 1 values are represented by a __________ line.\nChoices:\na) dashed, bold\nb) bold, dashed\nc) dotted, bold\nd) dotted, dashed\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quick sort is a divide-and-conquer sorting algorithm. It is distinct from heap sort, merge sort, or bubble sort and thus is not synonymous with any of them.",
        "target_text": "Question: Quick sort is also known as __________\nChoices:\na) Merge sort\nb) Heap sort\nc) Bubble sort\nd) None of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Jaccard index measures similarity between two sets as the size of their intersection divided by the size of their union. If the sets are disjoint, the index is 0.",
        "target_text": "Question: What is the value of the Jaccard index when the two sets are disjoint?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue allows insertion at the rear and deletion from the front, making it a linear list with FIFO (First In, First Out) behavior.",
        "target_text": "Question: A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as a __________\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a complete binary min-heap with 1023 nodes (which forms a full tree of height 9), the value 9 can be placed as deep as level 8 while maintaining the min-heap property.",
        "target_text": "Question: A complete binary min-heap is made by including each integer in [1, 1023] exactly once. The depth of a node in the heap is the length of the path from the root of the heap to that node. Thus, the root is at depth 0. The maximum depth at which integer 9 can appear is __________\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In prefix (Polish) notation, the operator is written before its operands. Conversion follows operator precedence and associativity rules.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) +*AB*CD\nb) *+AB*CD\nc) **AB+CD\nd) +*BA*CD\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Queues are used in scenarios where data must be processed in the order it arrives. Applications include resource sharing, asynchronous data transfer, and load balancing.",
        "target_text": "Question: Which one of the following is an application of Queue Data Structure?\nChoices:\na) When a resource is shared among multiple consumers.\nb) When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes\nc) Load Balancing\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Collision resolution techniques aim to reduce clustering. Increasing the hash table size helps reduce collisions but isn't considered a collision resolution technique.",
        "target_text": "Question: Which of the following is not a technique to avoid a collision?\nChoices:\na) Make the hash function appear random\nb) Use the chaining method\nc) Use uniform hashing\nd) Increasing hash table size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays allow direct or random access using indices, making element retrieval instantaneous regardless of the array's size or content.",
        "target_text": "Question: Elements in an array are accessed __________\nChoices:\na) randomly\nb) sequentially\nc) exponentially\nd) logarithmically\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list, inserting at the head involves adjusting both the head and the last node's next pointer to point to the new head.",
        "target_text": "Question: Choose the code snippet which inserts a node to the head of the list?\nChoices\na) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nNode cur = head;\nwhile(cur.getNext() != head)\n cur = cur.getNext();\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head);\n head = temp;\n cur.setNext(temp);\n}\nsize++;\n}\nb) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nwhile(cur != head)\n cur = cur.getNext();\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head.getNext());\n cur.setNext(temp);\n}\nsize++;\n}\nc) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nif(head == null)\n{\n head = temp;\n head.setNext(head);\n}\nelse\n{\n temp.setNext(head.getNext());\n head = temp;\n}\nsize++;\n}\nd) \npublic void insertHead(int data)\n{\nNode temp = new Node(data);\nif(head == null)\n{\n head = temp;\n head.setNext(head.getNext());\n}\nelse\n{\n temp.setNext(head.getNext());\n head = temp;\n}\nsize++;\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A strictly binary tree is one in which each node has either 0 or 2 children. If a tree has 10 leaves, it has exactly 19 nodes due to the property N = 2L - 1.",
        "target_text": "Question: A strictly binary tree with 10 leaves\nChoices:\na) cannot have more than 19 nodes\nb) has exactly 19 nodes\nc) has exactly 17 nodes\nd) has exactly 20 nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear probing uses sequential slots for collision resolution and has better spatial locality, improving cache performance compared to methods like double hashing.",
        "target_text": "Question: Which of the following techniques offer better cache performance?\nChoices:\na) Quadratic probing\nb) Linear probing\nc) Double hashing\nd) Rehashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stack is a Last-In-First-Out (LIFO) data structure commonly used for parsing and matching nested structures like parentheses, making it ideal for syntax checking.",
        "target_text": "Question: Which of the following data structures can be used for parentheses matching?\nChoices:\na) n-ary tree\nb) queue\nc) priority queue\nd) stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting infix expressions to postfix (Reverse Polish Notation) using a stack requires handling operator precedence and associativity while maintaining correct operand order.",
        "target_text": "Question: Convert the following Infix expression to Postfix form using a stack.\nx + y * z + (p * q + r) * s, Follow usual precedence rule and assume that the expression is legal.\nChoices:\na) xyz*+pq*r+s*+\nb) xyz*+pq*r+s+*\nc) xyz+*pq*r+s*+\nd) xyzp+**qr+s*+\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A bounded-size dynamic array splits the array into two parts to accommodate variable sizes efficiently while limiting memory reallocation.",
        "target_text": "Question: Array is divided into two parts in __________\nChoices:\na) Hashed Array Tree\nb) Geometric Array\nc) Bounded-size dynamic array\nd) Sparse Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays allow direct or random access using indices, making element retrieval instantaneous regardless of the array's size or content.",
        "target_text": "Question: Elements in an array are accessed __________\nChoices:\na) randomly\nb) sequentially\nc) exponentially\nd) logarithmically\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the balancing parentheses algorithm, a string is typically scanned from left to right to push opening symbols and match them with closing ones using a stack.",
        "target_text": "Question: In balancing parentheses algorithm, the string is read from?\nChoices:\na) right to left\nb) left to right\nc) center to right\nd) center to left\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If the pre-order and post-order traversals of a binary tree are the same, the tree must contain only one node since traversal orders differ otherwise.",
        "target_text": "Question: The pre-order and post order traversal of a Binary Tree generates the same output. The tree can have maximum __________\nChoices:\na) Three nodes\nb) Two nodes\nc) One node\nd) Any number of nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an incidence matrix of a directed graph without self-loops, each edge connects two different nodes--one incoming and one outgoing--making the column sum 0.",
        "target_text": "Question: The column sum in an incidence matrix for a directed graph having no self loop is __________\nChoices:\na) 0\nb) 1\nc) 2\nd) equal to the number of edges\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In postorder traversal of a binary tree, the left subtree is visited first, followed by the right subtree, and then the root, making this statement True.",
        "target_text": "Question: In postorder traversal of binary tree right subtree is traversed before visiting root.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A min-wise independent permutation is a family of permutations used in approximation algorithms. The number of bits needed to specify a permutation depends on its domain size, often bounded by Ω(n).",
        "target_text": "Question: How many bits are needed to specify the single permutation by min-wise independent family?\nChoices:\na) O (log n!)\nb) O (n!)\nc) Ω (n^2)\nd) Ω (n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a stack implemented using an array, the top element is located at index S[N-1] when there are N elements. This follows the Last-In-First-Out (LIFO) structure.",
        "target_text": "Question: Which of the following array element will return the top-of-the-stack-element for a stack of size N elements (capacity of stack > N)?\nChoices:\na) S[N-1]\nb) S[N]\nc) S[N-2]\nd) S[N+1]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary min-heap has the property that every parent node is less than or equal to its children. This property must be maintained throughout the array representation.",
        "target_text": "Question: Which one of the following array elements represents a binary min heap?\nChoices:\na) 12 10 8 25 14 17\nb) 8 10 12 25 14 17\nc) 25 17 14 12 10 8\nd) 14 17 25 10 12 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tries are tree-like data structures that store strings efficiently and allow fast lookup, making them suitable for autocomplete and spell checking systems.",
        "target_text": "Question: Auto complete and spell checkers can be implemented efficiently using the trie.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting infix to prefix notation requires understanding operator precedence and using a stack to temporarily store operators during the rearrangement.",
        "target_text": "Question: What data structure is used when converting an infix notation to prefix notation?\nChoices:\na) Stack\nb) Queue\nc) B-Trees\nd) Linked-list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, dynamic arrays are implemented using the `List` interface and classes such as `ArrayList`, which allow dynamic resizing.",
        "target_text": "Question: How will you implement dynamic arrays in Java?\nChoices:\na) Set\nb) Map\nc) HashMap\nd) List\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash table allows constant-time average access to data due to direct indexing via hash functions, making it significantly faster than other structures for lookup.",
        "target_text": "Question: What is the advantage of a hash table as a data structure?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding the nearest neighbor in a k-d tree involves traversing a logarithmic path down the tree and comparing across dimensions, yielding a runtime of O(2^d * log N).",
        "target_text": "Question: What is the run time of finding the nearest neighbour in a k-d tree?\nChoices:\na) O(2+ log N)\nb) O( log N)\nc) O(2^d log N)\nd) O( N log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An in-order traversal of a binary search tree visits nodes in ascending order: left subtree, root, then right subtree.",
        "target_text": "Question: In order to get the contents of a Binary search tree in ascending order, one has to traverse it in __________\nChoices:\na) pre-order\nb) in-order\nc) post order\nd) not possible\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Space requirements differ for graphs depending on properties like directionality and weights. Directed and weighted graphs require more space than undirected and unweighted ones.",
        "target_text": "Question: For the given conditions, which of the following is in the correct order of increasing space requirement?\ni) Undirected, no weight\nii) Directed, no weight\niii) Directed, weighted\niv) Undirected, weighted\nChoices:\na) ii iii i iv\nb) i iii ii iv\nc) iv iii i ii\nd) i ii iii iv\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue restricts insertions to the rear and removals from the front. It can be implemented using linked lists with separate front and rear pointers.",
        "target_text": "Question: Which data structure represents a waiting line and limits insertions to be made at the back of the data structure and limits removals to be made from the front?\nChoices:\na) Stack\nb) Queue\nc) Binary tree\nd) Linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Syntax trees represent syntactic structures of expressions. They are constructed bottom-up using bottom-up parsing techniques like shift-reduce parsing.",
        "target_text": "Question: Which parsing approach is followed by syntax tree?\nChoices:\na) Top-down parsing\nb) Bottom-up parsing\nc) Predictive parsing\nd) Shift reduce parsing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue follows the FIFO principle, meaning the first element inserted is the first one removed. It is often implemented using arrays or linked lists.",
        "target_text": "Question: A queue follows __________\nChoices:\na) FIFO (First In First Out) principle\nb) LIFO (Last In First Out) principle\nc) Ordered array\nd) Linear tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C, variable-length arrays (VLAs) allow the use of runtime-computed expressions during declaration, offering flexibility in memory management.",
        "target_text": "Question: Arbitrary expressions can be used while declaring variable-length arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quadratic probing is a collision resolution method in open addressing. When the table size is prime, quadratic probing ensures successful insertion until the table is full.",
        "target_text": "Question: In quadratic probing, if the table size is prime, a new element cannot be inserted if the table is half full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quick Sort is a divide-and-conquer sorting algorithm that uses a pivot element to partition the list into subarrays, which are then sorted recursively.",
        "target_text": "Question: To partition an unsorted list, a pivot element is used in __________\nChoices:\na) Merge Sort\nb) Quick Sort\nc) Insertion Sort\nd) Selection Sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a 4-regular graph, each vertex has degree 4. By using the handshaking lemma (2E = dV), we find that 12 edges imply 6 vertices.",
        "target_text": "Question: Determine the number of vertices for the given Graph or Multigraph?\nG is a 4-regular Graph having 12 edges.\nChoices:\na) 3\nb) 6\nc) 4\nd) Information given is insufficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Rope data structures are typically implemented using balanced binary trees like AVL or Red-Black trees to support efficient string operations.",
        "target_text": "Question: Which type of binary tree does rope require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Full\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A K-ary tree is a tree in which every node has at most K children.",
        "target_text": "Question: How many child nodes does each node of K-ary Tree contain?\nChoices:\na) 2\nb) 3\nc) more than k\nd) at most k\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Queues are widely used in operating systems and network communication for resource allocation and scheduling, where FIFO behavior is needed.",
        "target_text": "Question: A queue data-structure can be used for __________\nChoices:\na) expression parsing\nb) recursion\nc) resource allocation\nd) all of these\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Minimum ternary heaps are used in optimization algorithms like Prim's algorithm for efficient extraction of the minimum element.",
        "target_text": "Question: Which of the following is the application of minimum ternary heap?\nChoices:\na) Prim's Algorithm\nb) Euclid's Algorithm\nc) Eight Queen Puzzle\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the given program, no modification is made to the matrix. The result of the program is simply the original matrix A.",
        "target_text": "Question: Let A be a square matrix of size n x n. Consider the following program. What is the expected output?\nChoices:\na) The matrix A itself\nb) Transpose of matrix A\nc) Adding 100 to the upper diagonal elements and subtracting 100 from diagonal elements of A\nd) Inverse of matrix A\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When the root is removed from a binary heap, the rightmost element of the last level replaces it to maintain the complete binary tree structure.",
        "target_text": "Question: In binary heap, whenever the root is removed, the rightmost element of last level is replaced by the root. Why?\nChoices:\na) It is the easiest possible way.\nb) To make sure that it is still complete binary tree.\nc) Because left and right subtree might be missing.\nd) None of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The code uses the reversal algorithm to rotate the array left by 'd' positions. The result is a rotated array.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int left, int right) \n{ \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n} \n \nvoid func(int arr[], int d, int n) \n{ \n func1(arr, 0, d-1); \n func1(arr, d, n-1); \n func1(arr, 0, n-1); \n} \n \nvoid printArray(int arr[], int size) \n{ \n for (int i = 0; i < size; i++) \n cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 2, 3, 4, 5}; \n int n = sizeof(arr)/sizeof(arr[0]); \n int d = 2; \n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\nChoices:\na) 3 2 1 4 5\nb) 3 4 5 1 2\nc) 5 4 3 2 1\nd) error\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To insert an element at the bottom of a stack using only push and pop, multiple pop/push operations are required to expose the bottom, push the new element, then restore.",
        "target_text": "Question: Consider you have a stack whose elements in it are as follows.\n5 4 3 2 << top\nWhere the top element is 2.\nYou need to get the following stack\n6 5 4 3 2 << top\nThe operations that needed to be performed are (You can perform only push and pop):\nChoices:\na) Push(pop()), push(6), push(pop())\nb) Push(pop()), push(6)\nc) Push(pop()), push(pop()), push(6)\nd) Push(6)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hash table with size 10, the index of element 7 is computed using the modulo operation. 7 % 10 = 7, so the element is placed at index 7.",
        "target_text": "Question: In a hash table of size 10, where is element 7 placed?\nChoices:\na) 6\nb) 7\nc) 17\nd) 16\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given code performs in-place array reversal using a two-pointer approach. It doesn't allocate additional memory, resulting in constant auxiliary space.",
        "target_text": "Question: What will be the auxiliary space requirement of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n} \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary search tree with 7 nodes can have height 6 if elements are inserted in strictly ascending or descending order. There are 64 such permutations.",
        "target_text": "Question: The number of ways in which the numbers 1 to 7 can be inserted in an empty binary search tree to result in height 6 is:\nChoices:\na) 2\nb) 4\nc) 64\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tree height is the length of the longest path from root to any leaf. It can be derived from tree traversals by reconstructing the tree and analyzing its depth.",
        "target_text": "Question: Given the postorder: 8, 9, 6, 7, 4, 5, 2, 3, 1 and inorder: 8, 6, 9, 4, 7, 2, 5, 1, 3, what is the height of the binary tree?\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The function f(S) likely refers to computing the number of positive integers in a stack or similar logic. The stack contains 2, -3, 2, -1, 2, with the top as 2.",
        "target_text": "Question: If a stack S contains the integers 2, -3, 2, -1, 2 in order from bottom to top, what is f(S)?\nChoices:\na) 6\nb) 4\nc) 3\nd) 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A trie, or prefix tree, is a digital tree used for storing strings where each node represents a character. It's efficient for search operations.",
        "target_text": "Question: Trie is also known as __________\nChoices:\na) Digital Tree\nb) Treap\nc) Binomial Tree\nd) 2-3 Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A node can have a minimum of one child in some trees (e.g., binary trees). However, trees may also allow leaf nodes with no children.",
        "target_text": "Question: A node can have a minimum of one child.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In AA-trees, left horizontal links (which would create balancing issues) are removed via right rotations to maintain simplified red-black tree properties.",
        "target_text": "Question: How will you remove a left horizontal link in an AA-tree?\nChoices:\na) by performing right rotation\nb) by performing left rotation\nc) by deleting both the elements\nd) by inserting a new element\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A desirable trait of a good hash function is to minimize collisions, which leads to faster lookups and better distribution of data.",
        "target_text": "Question: Which of the following trait of a hash function is most desirable?\nChoices:\na) it should cause less collisions\nb) it should cause more collisions\nc) it should occupy less space\nd) it should be easy to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In B+ trees, only the leaf nodes store data and all keys, while internal nodes guide traversal with routing keys.",
        "target_text": "Question: In a B+ tree, both the internal nodes and the leaves have keys.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary search reduces the search space in half each time, so the average number of comparisons is proportional to log2 n.",
        "target_text": "Question: In binary search, average number of comparisons required for searching an element in a list of n numbers is:\nChoices:\na) log2 n\nb) n / 2\nc) n\nd) n - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary heap, the min or max element is always at the root, making retrieval a constant-time operation: O(1).",
        "target_text": "Question: How much time does a heap take to Find Min/Max value?\nChoices:\na) O(logN)\nb) O(N)\nc) O(1)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A dynamic array is a data structure that allows resizing at runtime. It can grow or shrink based on the number of elements.",
        "target_text": "Question: What is a dynamic array?\nChoices:\na) A variable size data structure\nb) An array which is created at runtime\nc) The memory to the array is allocated at runtime\nd) An array which is reallocated every time whenever new elements have to be added\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Variable-length arrays (VLAs) in GNU C are allocated on the stack, providing flexibility in array size based on runtime values.",
        "target_text": "Question: Where does the GNU C compiler allocate memory for variable-length arrays?\nChoices:\na) Tree\nb) Stack\nc) Linked List\nd) Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A double-ended queue (deque) supports insertion and deletion from both ends. The provided code inserts an element at the front.",
        "target_text": "Question: Select the function which performs insertion at the front end of the dequeue?\nChoices:\na) Insert at the front end of the dequeue\nb) Insert at the rear end of the dequeue\nc) Fetch the element at the rear end of the dequeue\nd) Fetch the element at the front end of the dequeue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the balancing of symbols algorithm, opening parentheses are pushed onto the stack to be matched later with closing ones.",
        "target_text": "Question: What should be done when an opening parentheses is read in a balancing symbols algorithm?\nChoices:\na) push it onto the stack\nb) throw an error\nc) ignore the parentheses\nd) pop the stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an undirected graph, the sum of degrees of all vertices is equal to 2 times the number of edges: Σ deg(v) = 2e.",
        "target_text": "Question: For an undirected graph G with n vertices and e edges, the sum of the degrees of each vertex is __________\nChoices:\na) ne\nb) 2n\nc) 2e\nd) en\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A signed binary number uses the most significant bit to indicate sign. -15 in 6-bit two's complement is 101111.",
        "target_text": "Question: Express -15 as a 6-bit signed binary number.\nChoices:\na) 001111\nb) 101111\nc) 101110\nd) 001110\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Searching for a pattern in a string using a suffix array takes O(mlogn) time, where m is the pattern length and n is the text length.",
        "target_text": "Question: What is the time required to locate the occurrences of a pattern P of length m in a string of length n using a suffix array?\nChoices:\na) O(nm)\nb) O(n^2)\nc) O(mnlogn)\nd) O(mlogn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reverse Polish Notation (postfix) is not the reverse of Polish notation (prefix). The structure and evaluation rules differ.",
        "target_text": "Question: Reverse Polish Notation is the reverse of Polish Notation.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The buddy system is a memory allocation technique that may lead to internal fragmentation and difficulty detecting adjacent memory blocks for merging.",
        "target_text": "Question: What are the disadvantages in implementing buddy system algorithm for free lists?\nChoices:\na) internal fragmentation\nb) it takes so much space\nc) we no more have the hole lists in order of memory address, so it is difficult to detect if 2 holes remain adjacent in memory and shall be merged into one hole\nd) both a and c are correct\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Fully parenthesized infix expressions and postfix expressions remove ambiguity in operator precedence, thus don't need precedence rules for evaluation.",
        "target_text": "Question: Which of the following types of expressions do not require precedence rules for evaluation?\nChoices:\na) fully parenthesised infix expression\nb) postfix expression\nc) partially parenthesised infix expression\nd) more than one of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In array-based heaps, the parent of node at index i is located at index (i-1)/2 assuming 0-based indexing.",
        "target_text": "Question: Using what formula can a parent node be located in an array?\nChoices:\na) (i+1)/2\nb) (i-1)/2\nc) i/2\nd) 2i/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Self-organizing lists reorder nodes to bring frequently accessed elements to the front, reducing average search time in small lists.",
        "target_text": "Question: Which of the following data structures is preferred to have lesser search time when the list size is small?\nChoices:\na) search tree\nb) sorted list\nc) self organizing list\nd) linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In row-major order, elements of a 2D array are stored row by row. The address difference confirms row-major if A[2][1] is at a higher address than A[1][1] by row stride.",
        "target_text": "Question: If the address of A[1][1] and A[2][1] are 1000 and 1010 respectively and each element occupies 2 bytes, then the array has been stored in __________ order.\nChoices:\na) row major\nb) column major\nc) matrix major\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a queue implemented using a linked list, insertion occurs at the tail and deletion occurs at the head of the list.",
        "target_text": "Question: In linked list implementation of a queue, from where is the item deleted?\nChoices:\na) At the head of link list\nb) At the centre position in the link list\nc) At the tail of the link list\nd) Node before the tail\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A d-ary heap is a generalization of a binary heap. It is typically implemented using a priority queue for efficient access to the highest/lowest priority element.",
        "target_text": "Question: On which data structure is a d-ary heap based?\nChoices:\na) stack\nb) queue\nc) linked list\nd) priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Any general ordered tree can be converted into a binary tree by representing the first child as the left child and the next sibling as the right child.",
        "target_text": "Question: General ordered tree can be encoded into binary trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To convert an array into a max-heap, elements must be heapified. The number of interchanges depends on the number of violations of heap property.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array [89, 19, 50, 17, 12, 15, 2, 5, 7, 11, 6, 9, 100] into a max-heap is:\nChoices:\na) 4\nb) 5\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting n elements into an existing binary heap can be done efficiently in linear time (θ(n)) using bottom-up heap construction.",
        "target_text": "Question: We have a binary heap on n elements and wish to insert n more elements. What is the total time required?\nChoices:\na) θ(logn)\nb) θ(n)\nc) θ(nlogn)\nd) θ(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular queues are also called ring buffers because they wrap around in memory, reusing space in a fixed-size buffer.",
        "target_text": "Question: Circular queue is also called:\nChoices:\na) Ring Buffer\nb) Rectangular Buffer\nc) Square Buffer\nd) None\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a randomized binary search tree. It stores N nodes and its space complexity is linear, O(N).",
        "target_text": "Question: What is the space complexity of a treap algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The multiplication method for hashing is advantageous because it is less sensitive to the size of the table (m), providing good distribution with a constant multiplier.",
        "target_text": "Question: What is the advantage of the multiplication method?\nChoices:\na) only 2 steps are involved\nb) using constant\nc) value of m not critical\nd) simple multiplication\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Larger query rectangles may lead to more data being accessed, which does not always improve efficiency, especially in spatial indexing.",
        "target_text": "Question: Bigger the query rectangle the better is the query efficiency.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic equivalence problems can be solved using union-find with two main strategies: union by rank and path compression.",
        "target_text": "Question: How many strategies are followed to solve a dynamic equivalence problem?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The upper bound on access time in a Tango tree, which adapts to access patterns, is O(k + 1 * log log n), where k is the number of interleaves.",
        "target_text": "Question: What is the upper bound for a tango tree if k is the number of interleaves?\nChoices:\na) k+2 O(log(log n))\nb) k O(log n)\nc) k^2 O(log n)\nd) k+1 O(log(log n))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Pairing heaps are a type of heap that use a tree-like structure. The actual implementation uses left-child right-sibling representation, not left-right child pointers.",
        "target_text": "Question: The actual pairing heap implementation uses the right child and left child representation.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A node in a weight-balanced tree typically contains a key, pointers to left and right children, and a size field representing the number of descendants.",
        "target_text": "Question: A node of the weight balanced tree has:\nChoices:\na) key, left and right pointers, size\nb) key, value\nc) key, size\nd) key\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a suffix tree, internal nodes can have more than two children. Only the leaves are guaranteed to have no children.",
        "target_text": "Question: Do all the nodes have at least two children in a suffix tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In trees, the number of edges from the root to a given node is referred to as the depth of that node.",
        "target_text": "Question: The number of edges from the root to a node is called __________ of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an expression tree, leaf nodes contain operands while non-leaf nodes (internal) contain operators.",
        "target_text": "Question: What do the other nodes of an expression tree (except leaves) contain?\nChoices:\na) only operands\nb) only operators\nc) both operands and operators\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The adjacency matrix is an n*n matrix, while the incidence matrix is an n*e matrix (vertices * edges). They don't necessarily share the same dimensions.",
        "target_text": "Question: Do the incidence matrix and adjacency matrix of a graph always have the same dimensions?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To convert prefix to postfix, the expression must be rearranged while maintaining operator precedence. For prefix -A/B*C$DE, the postfix is ABCDE$*/-",
        "target_text": "Question: What is the postfix form of the following prefix expression -A/B*C$DE?\nChoices:\na) ABCDE$*/-\nb) A-BCDE$*/\nc) ABC$ED*/\nd) A-BCDE$*/\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, array indexing starts from 0. Accessing arr[2] gives the third element and arr[4] the fifth. For arr = {1,2,3,4,5}, the output is 3 and 5.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array\n{\n\tpublic static void main(String args[])\n\t{\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[2]);\n\t\tSystem.out.println(arr[4]);\n\t}\n}\nChoices:\na) 4 and 2\nb) 2 and 4\nc) 5 and 3\nd) 3 and 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists are layered data structures with multiple linked lists, providing search efficiency similar to balanced binary search trees.",
        "target_text": "Question: Skip lists are similar to which of the following data structures?\nChoices:\na) stack\nb) heap\nc) binary search tree\nd) balanced binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heap sort uses a binary heap, a complete binary tree where each node is greater than or equal to its children. It repeatedly extracts the max element.",
        "target_text": "Question: A sorting technique which uses the binary tree concept such that label of any node is larger than all the labels in the subtrees is called:\nChoices:\na) Selection sort\nb) Insertion sort\nc) Heap sort\nd) Quick sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a LIFO data structure ideal for reversing operations such as strings or expressions. Reversing a word is efficiently done using a stack.",
        "target_text": "Question: Which is the most appropriate data structure for reversing a word?\nChoices:\na) queue\nb) stack\nc) tree\nd) graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-black trees are used in libraries like C++ STL's map/set and Java TreeMap/TreeSet due to guaranteed log-time operations for insertion, deletion, and lookup.",
        "target_text": "Question: Which of the following is an application of Red-black trees and why?\nChoices:\na) used to store strings efficiently\nb) used to store integers efficiently\nc) can be used in process schedulers, maps, sets\nd) for efficient sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists allow dynamic memory usage, but arrays offer better cache locality and faster indexed access. Linked lists lack random access.",
        "target_text": "Question: Which of the following points is/are not True about Linked List data structure when compared with an array?\nChoices:\na) Random access is not allowed in a typical implementation of Linked Lists\nb) Access of elements in linked list takes less time than compared to arrays\nc) Arrays have better cache locality that can make them better in terms of performance\nd) It is easy to insert and delete elements in Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A lookup operation is used to find the value associated with a given key in key-value storage systems like hash maps and dictionaries.",
        "target_text": "Question: Which operation finds the value associated with a given key?\nChoices:\na) Insert\nb) Find Next\nc) Look up\nd) Delete\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tango tree is an advanced binary search tree used in competitive data structure design, structured as a hierarchy or tree of trees.",
        "target_text": "Question: Is tango tree represented as a tree of trees?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A succinct binary tree uses exactly 2n + o(n) bits for representing the structure of a binary tree with n nodes in a compressed format.",
        "target_text": "Question: How many bits would a succinct binary tree occupy?\nChoices:\na) n + o(n)\nb) 2n + o(n)\nc) n/2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A simple graph with 10 vertices cannot have both a minimum degree of 0 and a maximum of 9 due to connectivity constraints. This is allowed only in multigraphs.",
        "target_text": "Question: Which of the following statements is True?\nChoices:\na) A simple graph with 10 vertices can have min degree 0 and max degree 9\nb) A multigraph with 10 vertices can have min degree 0 and max degree 9\nc) Both multigraph and simple graph can satisfy the condition\nd) None of the mentioned\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A d-heap supports typical heap operations like insert and extract-min/max. Most implementations define only two primary operations.",
        "target_text": "Question: How many basic operations can be performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Java arrays are 0-indexed. arr[2] accesses the 3rd element and arr[4] accesses the 5th element. In the given array, these values are 3 and 5 respectively.",
        "target_text": "Question: What is the output of the following Java code?\npublic class array\n{\n\tpublic static void main(String args[])\n\t{\n\t\tint []arr = {1,2,3,4,5};\n\t\tSystem.out.println(arr[2]);\n\t\tSystem.out.println(arr[4]);\n\t}\n}\nChoices:\na) 3 and 5\nb) 5 and 3\nc) 2 and 4\nd) 4 and 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: m' is usually chosen as a prime smaller than m in double hashing to reduce collisions and ensure uniform probing. For m = 19, m' = 17 is a good choice.",
        "target_text": "Question: What is the value of m' if the value of m is 19?\nChoices:\na) 11\nb) 18\nc) 17\nd) 15\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA-trees maintain balance using fewer rotations compared to red-black trees, which can make searches faster due to simpler balancing logic.",
        "target_text": "Question: Comparing the speed of execution of Red-Black trees and AA-trees, which one has the faster search time?\nChoices:\na) AA-tree\nb) Red-Black tree\nc) Both have an equal search time\nd) It depends\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A deque (double-ended queue) supports insertion and deletion from both ends, unlike a standard queue that supports only FIFO.",
        "target_text": "Question: A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?\nChoices:\na) Queue\nb) Circular queue\nc) Dequeue\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of inversions in an array is a measure of how unsorted it is. An already sorted array has 0 inversions, and the maximum is in reverse order.",
        "target_text": "Question: What does the number of inversions in an array indicate?\nChoices:\na) mean value of the elements of array\nb) measure of how close or far the array is from being sorted\nc) the distribution of values in the array\nd) median value of the elements of array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash trees (Merkle trees) are used in blockchain and distributed systems for efficient and secure verification of large datasets.",
        "target_text": "Question: Hash tree is used in effective data verification in distributed systems.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The auxiliary space complexity refers to the extra memory used by an algorithm. The given array rotation code uses constant space.",
        "target_text": "Question: What will be the auxiliary space complexity of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int n) \n{ \n int k = arr[0], i; \n for (i = 0; i < n - 1; i++) \n  arr[i] = arr[i + 1]; \n \n arr[i] = k; \n} \n \nvoid func(int arr[], int d, int n) \n{ \n for (int i = 0; i < d; i++) \n  func1(arr, n); \n} \n \nvoid printArray(int arr[], int n) \n{ \n for (int i = 0; i < n; i++) \n  cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = { 1, 2, 3, 4, 5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n \n    int d = 3;\n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The program decreases the index j when G[i][j] == 1, leading to an infinite loop unless the matrix has only zeros (an empty graph).",
        "target_text": "Question: For which type of graph will the given program not run infinitely?\nChoices:\na) All Fully Connected Graphs\nb) All Empty Graphs\nc) All Bipartite Graphs\nd) All simple graphs\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Shell Sort is not based on divide and conquer. Merge Sort and Heap Sort divide the input and solve recursively.",
        "target_text": "Question: Which one of the below is not a divide and conquer approach?\nChoices:\na) Quick Sort\nb) Merge Sort\nc) Shell Sort\nd) Heap Sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Standard types of queues include ordinary, circular, and priority queues. Single-ended queue is not a valid queue classification.",
        "target_text": "Question: Which of the following is not the type of queue?\nChoices:\na) Ordinary queue\nb) Single ended queue\nc) Circular queue\nd) Priority queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A full binary tree is a tree in which every node other than the leaves has two children. It has 2n + 1 total nodes if there are n non-leaf (internal) nodes.",
        "target_text": "Question: A full binary tree with 'n' non-leaf nodes contains __________\nChoices:\na) log2 n nodes\nb) n+1 nodes\nc) 2n nodes\nd) 2n+1 nodes\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting infix to postfix requires use of a stack to manage operators based on precedence and associativity.",
        "target_text": "Question: Which data structure is needed to convert infix notation to postfix notation?\nChoices:\na) Branch\nb) Tree\nc) Queue\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a d-ary heap, during delete-min, a node is compared to its d children. Only (d - 1) comparisons are needed to find the minimum among d elements.",
        "target_text": "Question: How many comparisons will occur while performing a delete-min operation?\nChoices:\na) d\nb) d-1\nc) d+1\nd) 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binomial heap, heap order is maintained, but it does not enforce left or right child being greater or smaller. Hence, the given statement is False.",
        "target_text": "Question: In a binomial heap the root value is greater than left child and less than right child.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A ternary heap is a variation of a heap in which each node has up to three children instead of two, affecting the structure and heap operations.",
        "target_text": "Question: What is a ternary heap?\nChoices:\na) An array with three elements\nb) Linked list with three elements\nc) Tree with three children\nd) Heap with all nodes having three children\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Trees offer hierarchical organization and efficient search but are not typically used for linear features like undo/redo operations.",
        "target_text": "Question: Which of the following is not an advantage of trees?\nChoices:\na) Hierarchical structure\nb) Faster search\nc) Router algorithms\nd) Undo/Redo operations in a notepad\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: e = 2n + i is a known relationship in certain types of trees; but if the answer is e = i + 2n, it likely refers to a variation or reformatting of that relation.",
        "target_text": "Question: e = 2n+i\nChoices:\na) e = i+n\nb) e = i+2n or 2n+i\nc) e = 2i+n\nd) e = n-i\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An And-Inverter Graph (AIG) consists of AND gates and optional inverters. Size = #AND gates; levels = #AND gates on the longest path from input to output.",
        "target_text": "Question: Size of an And Inverter Graph is the number of __________ gates and the number of logic levels is the number of __________ gates on the __________ path from a primary input to a primary output.\nChoices:\na) AND, AND, average\nb) AND, OR, longest\nc) OR, OR, shortest\nd) AND, AND, longest\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a linked list, each node stores a data value and a reference (or link) to the next node in the list. This allows dynamic memory usage.",
        "target_text": "Question: In Linked List implementation, a node carries information regarding __________\nChoices:\na) Data\nb) Link\nc) Data and Link\nd) Node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An adjacency matrix cannot directly represent multiple parallel edges between the same pair of nodes, as it allows only one value per edge pair.",
        "target_text": "Question: An adjacency matrix representation of a graph cannot contain information of:\nChoices:\na) nodes\nb) edges\nc) direction of edges\nd) parallel edges\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The job scheduling problem selects the maximum number of non-overlapping intervals. Greedy algorithms are often used by selecting the earliest finishing job.",
        "target_text": "Question: Given the intervals [(1, 4), (3, 6), (5, 7), (8, 9)], what would be the output of a job scheduling algorithm?\nChoices:\na) [(1, 4), (5, 7), (8, 9)]\nb) [(1, 4), (3, 6), (8, 9)]\nc) [(1, 4), (3, 6)]\nd) [(1, 4), (3, 6), (5, 7)]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an adjacency matrix of a directed graph, the row sum corresponds to out-degree and column sum to in-degree.",
        "target_text": "Question: For the adjacency matrix of a directed graph the row sum is the __________ degree and the column sum is the __________ degree.\nChoices:\na) in, out\nb) out, in\nc) in, total\nd) total, out\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a randomized binary search tree. The average case for operations like search, insert, or delete takes O(log N) time.",
        "target_text": "Question: What is the average running time of a treap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Concatenation in O(1) time requires constant-time tail-to-head linking, which circular doubly linked lists support efficiently.",
        "target_text": "Question: The concatenation of two lists is to be performed in O(1) time. Which of the following implementations of a list should be used?\nChoices:\na) singly linked list\nb) doubly linked list\nc) circular doubly linked list\nd) array implementation of lists\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: String literals in C++ can be indexed like arrays. The character at index 0 of 'GFG!' is 'G' and at index 3 is '!'.",
        "target_text": "Question: What is the output of the following code?\ncout << \"GFG!\"[0] <<\" \"<<\"GFG!\"[3];\nChoices:\na) Error\nb) G !\nc) F !\nd) None\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To evaluate infix expressions, one stack is used for operands and one for operators, making a total of two stacks.",
        "target_text": "Question: How many stacks are required for applying evaluation of infix expression algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hypergraph, an edge can connect more than two vertices. All given examples qualify as hypergraphs under this definition.",
        "target_text": "Question: Which of the following is a HyperGraph, where V is the set of vertices, E is the set of edges?\nChoices:\na) V = {v1, v2, v3} E = {e1, e2} = {{v2, v3}, {v1, v3}}\nb) V = {v1, v2} E = {e1} = {{v1, v2}}\nc) V = {v1, v2, v3} E = {e1, e2, e3} = {{v2, v3}, {v3, v1}, {v2, v1}}\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Van Emde Boas trees are advanced data structures that use recursive tree layouts and are not strictly binary in structure.",
        "target_text": "Question: Which type of tree does Van Emde Boas require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Non-Binary\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: And-Inverter Graphs (AIGs) are a canonical representation of logic circuits. Multiple structurally different AIGs can represent the same logical function.",
        "target_text": "Question: Two or more And Inverter Graphs can represent the same function.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the multiplication method of hashing, the table size is typically a power of two, such as 2^p. For p = 7, the size is 2^7 = 128.",
        "target_text": "Question: What is the table size when the value of p is 7 in the multiplication method of creating hash functions?\nChoices:\na) 14\nb) 128\nc) 49\nd) 127\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear probing is a collision resolution strategy in open addressing where the step function is F(i) = i, checking successive slots linearly.",
        "target_text": "Question: Which of the following is the correct function definition for linear probing?\nChoices:\na) F(i)= 1\nb) F(i)=i\nc) F(i)=i^2\nd) F(i)=i+1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tango trees are a form of binary search trees developed by Erik Demaine, Mihai Patrascu, and John Iacono, known for competitive performance.",
        "target_text": "Question: Who developed the concept of tango tree?\nChoices:\na) Erik Demaine\nb) Mihai Patrascu\nc) John Iacono\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The transpose method is a self-organizing list technique where the searched node is swapped with its immediate predecessor to improve future access.",
        "target_text": "Question: What technique is used in the Transpose method?\nChoices:\na) searched node is swapped with its predecessor\nb) node with highest access count is moved to head of the list\nc) searched node is swapped with the head of list\nd) searched nodes are rearranged based on proximity to the head node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The merge operation in leftist heaps is performed in O(log N) time due to its skewed structure favoring the shorter path.",
        "target_text": "Question: What is the efficiency of merge used in leftist heaps?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(M log N)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an expression tree, leaf nodes represent operands (values or variables), while internal nodes represent operators.",
        "target_text": "Question: The leaves of an expression tree always contain?\nChoices:\na) operators\nb) operands\nc) null\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A collision in hashing occurs when a key is hashed to an index already occupied by a different key.",
        "target_text": "Question: The case in which a key other than the desired one is kept at the identified location is called?\nChoices:\na) Hashing\nb) Collision\nc) Chaining\nd) Open addressing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Weight balanced trees support dynamic set operations like insertion and deletion while maintaining balance, useful for dictionaries and ordered sequences.",
        "target_text": "Question: What are the applications of weight balanced tree?\nChoices:\na) dynamic sets, dictionaries, sequences, maps\nb) heaps\nc) sorting\nd) storing strings\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an array-based complete binary tree, the parent of a node at index w (w ≠ 0) is found at index floor((w-1)/2).",
        "target_text": "Question: What is the parent for a node 'w' of a complete binary tree in an array representation when w is not 0?\nChoices:\na) floor((w-1)/2)\nb) ceil((w-1)/2)\nc) (w-1)/2\nd) w/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The d-ary heap is a generalization of binary heaps introduced by Donald Johnson to improve Dijkstra's algorithm with better performance on sparse graphs.",
        "target_text": "Question: Who invented d-ary heap?\nChoices:\na) Carl Rick\nb) Alan Turing\nc) Donald Johnson\nd) Euclid\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A data structure is a specialized format for organizing, processing, and storing data to enable efficient access and modification.",
        "target_text": "Question: What is a data structure?\nChoices:\na) A programming language\nb) A collection of algorithms\nc) A way to store and organize data\nd) A type of computer hardware\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To delete a node X in a doubly linked list, the backward pointer's forward reference and the forward pointer's backward reference must be updated.",
        "target_text": "Question: A doubly linked list is declared as:\nstruct Node {\n  int Value;\n  struct Node *Fwd;\n  struct Node *Bwd;\n};\nChoices:\na) X->Bwd->Fwd = X->Fwd; X->Fwd->Bwd = X->Bwd ;\nb) X->Bwd.Fwd = X->Fwd ; X.Fwd->Bwd = X->Bwd ;\nc) X.Bwd->Fwd = X.Bwd ; X->Fwd.Bwd = X.Bwd ;\nd) X->Bwd->Fwd = X->Bwd ; X->Fwd->Bwd = X->Fwd;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular doubly linked lists allow constant-time concatenation by linking the last node of one list to the first of another without traversal.",
        "target_text": "Question: The concatenation of two lists can be performed in O(1) time. Which of the following variation of the linked list can be used?\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular doubly linked list\nd) Array implementation of list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: B+ trees minimize the number of node accesses. With an order of 100, 1 million records require about 4 node accesses in a B+ tree.",
        "target_text": "Question: In a file with 1 million records and tree order 100, what is the max number of nodes accessed in a B+ tree index?\nChoices:\na) 5\nb) 4\nc) 3\nd) 10\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a simple graph with n vertices, the maximum degree of any vertex is n-1, since it cannot be connected to itself.",
        "target_text": "Question: The maximum degree of any vertex in a simple graph with n vertices is:\nChoices:\na) n-1\nb) n+1\nc) 2n-1\nd) n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In-order traversal visits left subtree, root, and then right subtree. This order gives sorted output in binary search trees.",
        "target_text": "Question: Select the code snippet which performs in-order traversal.\nChoices:\na) \npublic void inorder(Tree root)\n{\n System.out.println(root.data);\n inorder(root.left);\n inorder(root.right);\n}\nb) \npublic void inorder(Tree root)\n{\n inorder(root.left);\n System.out.println(root.data);\n inorder(root.right);\n}\nc) \npublic void inorder(Tree root)\n{\n System.out.println(root.data);\n inorder(root.right);\n inorder(root.left);\n}\nd) \npublic void inorder(Tree root)\n{\n inorder(root.right);\n inorder(root.left);\n System.out.println(root.data);\n}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Doubly linked lists support bi-directional traversal, making insertion/deletion faster compared to singly linked lists in certain cases.",
        "target_text": "Question: What is the advantage of using a doubly linked list for chaining over singly linked list?\nChoices:\na) it takes less memory\nb) it is easy to implement\nc) it makes the process of insertion and deletion faster\nd) it causes less collisions\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A bit can be set to 1 using the bitwise OR operation with a mask where the desired bit is already 1.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 1?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NOR\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the division method of hashing, the hash index is found as key mod table_size. For key 172 and table size 157, 172 % 157 = 15.",
        "target_text": "Question: Using division method, in a given hash table of size 157, the key of value 172 will be placed at position __________\nChoices:\na) 19\nb) 72\nc) 15\nd) 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a top tree, every node represents a cluster, leaves represent edges, and the root represents the full tree. These properties make it binary.",
        "target_text": "Question: Which property makes top tree a binary tree?\nChoices:\na) Nodes as Cluster\nb) Leaves as Edges\nc) Root is Tree Itself\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary tree is both rooted (has a single root node) and ordered (left and right child are distinguishable). Hence the statement is False.",
        "target_text": "Question: A binary tree is a rooted tree but not an ordered tree.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists are efficient for search and range queries in sorted data. They support O(log n) time complexity for many operations.",
        "target_text": "Question: Are the below statements True about skip lists?\n1. Find closest element in O(log n)\n2. Count elements in range in O(log n)\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix trees allow linear-time operations for pattern matching, substring checking, and other string-processing tasks, making them optimal for substring operations.",
        "target_text": "Question: Which tree provides a linear time solution for substring operation?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To create a mirror image of a binary tree, post-order traversal is typically used to recursively swap left and right subtrees from the bottom up.",
        "target_text": "Question: One can convert a binary tree into its mirror image by traversing it in:\nChoices:\na) in-order\nb) pre-order\nc) post-order\nd) any order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An incidence matrix for a graph is a matrix with rows representing vertices and columns representing edges, so its dimensions are vertices * edges.",
        "target_text": "Question: What are the dimensions of an incidence matrix?\nChoices:\na) Number of edges * number of edges\nb) Number of edges * number of vertices\nc) Number of vertices * number of vertices\nd) Number of edges * ((1/2) * number of vertices)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A complete binary tree has all levels completely filled except possibly the last, which is filled from left to right.",
        "target_text": "Question: What is a complete binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) Completely filled tree, bottom filled right to left\nc) Completely filled tree, bottom filled left to right\nd) A tree in which all nodes have degree 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In incomplete binary trees represented as arrays, child pointers (2i, 2i+1) may not always apply, so auxiliary data can help indicate valid children.",
        "target_text": "Question: If the tree is not a complete binary tree, what changes can be made for easy access of children of a node in the array?\nChoices:\na) every node stores data saying which of its children exist in the array\nb) no need of any changes, continue with 2w and 2w+1\nc) keep a separate table telling children of a node\nd) use another array parallel to the tree array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A priority queue supports retrieval of the highest or lowest priority item. It is efficiently implemented using heaps.",
        "target_text": "Question: With what data structure can a priority queue be implemented?\nChoices:\na) Array\nb) List\nc) Heap\nd) Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists do not support random access due to their sequential memory layout, unlike arrays. Hence, they're unsuitable for direct indexing.",
        "target_text": "Question: Which of these is not an application of a linked list?\nChoices:\na) To implement file systems\nb) For separate chaining in hash-tables\nc) To implement non-binary trees\nd) Random Access of elements\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is used for parsing expressions and balancing symbols, like parentheses, brackets, and braces, using LIFO behavior.",
        "target_text": "Question: Which application of stack is used to ensure that the pair of parentheses is properly nested?\nChoices:\na) Balancing symbols\nb) Reversing a stack\nc) Conversion of an infix to postfix expression\nd) Conversion of an infix to prefix expression\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Treap is a randomized binary search tree where nodes maintain both BST order on keys and heap order on priorities, making it a randomized structure.",
        "target_text": "Question: Is Treap a randomized tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a DAG (Directed Acyclic Graph), there's always at least one node with in-degree 0 and one with out-degree 0, so the minimum in-degree + max out-degree is always 0.",
        "target_text": "Question: What is the value of the sum of the minimum in-degree and maximum out-degree of a Directed Acyclic Graph?\nChoices:\na) Depends on the graph\nb) Will always be zero\nc) Will always be greater than zero\nd) May be zero or greater than zero\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The maximum number of nodes in a binary tree of height k (root at height 0) is 2^(k+1) - 1, which forms a complete binary tree.",
        "target_text": "Question: Maximum number of nodes in a binary tree with height k (root at height 0) is:\nChoices:\na) 2^k - 1\nb) 2^(k+1) - 1\nc) 2^(k-1) + 1\nd) 2^k + 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The probability of collision in hashing with a uniform distribution is proportional to O(n/m), where n is the number of keys and m is the table size.",
        "target_text": "Question: What is the probability of a collision when hashing n keys into a hash table of size m?\nChoices:\na) O(1/n)\nb) O(n/m)\nc) O(log n)\nd) O(m/n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashmaps store key-value pairs using a hash function, requiring space proportional to the number of elements stored, hence O(N).",
        "target_text": "Question: What is the space used by programs when we use HashMap in our program?\nChoices:\na) O(1)\nb) O(Log N)\nc) O(N)\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Some operations like insertion and union in certain heap structures (e.g., binomial heap) have the same time complexity due to their structural properties.",
        "target_text": "Question: Which of these operations have the same complexities?\nChoices:\na) Insertion, find_min\nb) Find_min, union\nc) Union, Insertion\nd) Deletion, Find_max\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear data structures include arrays, stacks, and queues as their elements are organized in a sequential order.",
        "target_text": "Question: Which one of the below mentioned is a linear data structure?\nChoices:\na) Queue\nb) Stack\nc) Arrays\nd) All of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: BFS traverses the tree level by level. At depth 4, a complete binary tree will have 2^5 - 1 = 31 nodes.",
        "target_text": "Question: If BFS starts at root and visits vertex t at distance 4, what's the max value of t in the BFS traversal?\nChoices:\na) 15\nb) 16\nc) 31\nd) 32\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: All three standard tree traversals (in-order, pre-order, post-order) follow left subtree before right subtree traversal unless specified otherwise.",
        "target_text": "Question: Which of the following properties are obeyed by all three tree traversals?\nChoices:\na) Left subtrees are visited before right subtrees\nb) Right subtrees are visited before left subtrees\nc) Root node is visited before left subtree\nd) Root node is visited before right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A randomized binary search tree is generated using a stochastic (probabilistic) process such as randomized priority assignment (e.g., in Treaps).",
        "target_text": "Question: Which process forms the randomized binary search tree?\nChoices:\na) Stochastic Process\nb) Branching Process\nc) Diffusion Process\nd) Aggregation Process\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Greedy algorithms make the best decision at each step with the goal of finding a globally optimal solution. They focus on local optima.",
        "target_text": "Question: Which of these algorithmic approaches tries to achieve a localized optimum solution?\nChoices:\na) Greedy approach\nb) Divide and conquer approach\nc) Dynamic approach\nd) All of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Garbage collection using implicit free lists works by reclaiming memory that no longer has pointers referencing it, as it's considered unreachable.",
        "target_text": "Question: How does implicit free lists (garbage collection) work when adding memory to the free list?\nChoices:\na) Whichever comes last will be added to free list\nb) Whichever comes first will be added to free list\nc) Certain blocks can be freed if there are no pointers to them\nd) Makes a probabilistic guess\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A dynamic array grows automatically, whereas a dynamically allocated array requires manual resizing, making them conceptually different.",
        "target_text": "Question: Both dynamic array and dynamically memory allocated array are the same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Rebalancing an AVL tree involves rotations that occur during insertion or deletion. These rebalancing operations take O(log n) time.",
        "target_text": "Question: Re-balancing of AVL tree costs __________\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stack-life of an element is the time between its push and pop operations. The average for a sequence of n pushes and n pops includes push time, pop time, and idle time.",
        "target_text": "Question: The average stack-life of an element in a stack where push and pop take X seconds, and there's Y seconds between operations, is:\nChoices:\na) n(X + Y)\nb) 3Y + 2X\nc) n(X + Y) - X\nd) Y + 2X\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix operators do not operate on the value to their right. Instead, in postfix notation, operands precede the operator.",
        "target_text": "Question: Which of the following statements is incorrect?\nChoices:\na) Postfix operators use value to their right\nb) Postfix operators use value to their left\nc) Prefix operators use value to their right\nd) In postfix expression, operands are followed by operators\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Fibonacci heaps support amortized constant-time insertion and union operations. Hence, both have the same complexity.",
        "target_text": "Question: Choose the option with functions having same complexity for a Fibonacci heap:\nChoices:\na) Insertion, Union\nb) Insertion, Deletion\nc) extract_min, insertion\nd) Union, delete\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A complete binary tree of height h has 2^(h+1) - 1 nodes. Height is measured as the number of edges in the longest root-to-leaf path.",
        "target_text": "Question: What is the maximum number of nodes in a binary tree of height h?\nChoices:\na) 2^h - 1\nb) 2^h\nc) 2^(h+1) - 1\nd) 2^(h+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Open addressing handles collisions by finding another location in the hash table. Chaining stores collided elements in separate data structures.",
        "target_text": "Question: Which of the following techniques stores data in the hash table itself in case of a collision?\nChoices:\na) Open addressing\nb) Chaining using linked list\nc) Chaining using doubly linked list\nd) Chaining using binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The length() method in Java's String class returns the number of characters in a string.",
        "target_text": "Question: Which of these methods of class String is used to obtain the length of the String object?\nChoices:\na) get()\nb) Sizeof()\nc) lengthof()\nd) length()\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a sequential search, on average, (n + 1)/2 comparisons are made for a successful search.",
        "target_text": "Question: What is the average number of key comparisons in a successful sequential search in a list of length n?\nChoices:\na) log n\nb) (n - 1)/2\nc) n/2\nd) (n + 1)/2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of possible labeled graphs depends on the type: simple directed, pseudographs, and multigraphs. Only a few simple directed graphs exist for 2 vertices, while others are unbounded.",
        "target_text": "Question: Possible number of labeled simple Directed, Pseudo, and Multigraphs with 2 vertices?\nChoices:\na) 3, Infinite, 4\nb) 4, 3, Infinite\nc) 4, Infinite, Infinite\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash functions that use higher-order operations (like cubing) tend to distribute keys more uniformly across buckets than simple mod operations.",
        "target_text": "Question: Which one of the following hash functions distributes keys most uniformly over 10 buckets for i from 0 to 2020?\nChoices:\na) h(i) = (12 * i) mod 10\nb) h(i) = (11 * i^2) mod 10\nc) h(i) = i^3 mod 10\nd) h(i) = i^2 mod 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Binary Decision Diagram (BDD) has two terminal (leaf) nodes representing the Boolean constants True (1) and False (0).",
        "target_text": "Question: In a Binary Decision Diagram, how many types of terminal nodes exist?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash tables provide constant-time average-case access due to efficient indexing by hash functions, making them suitable for large datasets.",
        "target_text": "Question: What is the advantage of a hash table as a data structure?\nChoices:\na) easy to implement\nb) faster access of data\nc) exhibit good locality of reference\nd) very efficient for fewer entries\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists are used in stack/queue implementations and name directories due to dynamic memory allocation and easy insert/delete operations.",
        "target_text": "Question: What are the application(s) of linked list?\nChoices:\na) Implementation of stacks and queues.\nb) Maintaining a directory of names\nc) None of the above\nd) Both a and b\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Jaccard Coefficient Index is used to measure similarity between two sets by calculating the ratio of their intersection to their union.",
        "target_text": "Question: Which of the following is defined as the ratio of total elements of intersection and union of two sets?\nChoices:\na) Rope Tree\nb) Jaccard Coefficient Index\nc) Tango Tree\nd) MinHash Coefficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Hamming weight, also called population count, is the number of 1s in a bit array and is used in compression and hashing.",
        "target_text": "Question: What does Hamming weight/population count mean in bit arrays?\nChoices:\na) Finding the number of 1 bits in a bit array\nb) Finding the number of 0 bits in a bit array\nc) Finding the sum of bits in a bit array\nd) Finding the average number of 1s and 0s\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The complement of a graph G, denoted G', has the same vertices as G, but includes only the edges not present in G. Edge count: E(G') = (n(n-1)/2) - E(G).",
        "target_text": "Question: If a simple graph G has n vertices and m edges, how many edges are in its complement G'?\nChoices:\na) (n^2 - n - 2m)/2\nb) (n^2 + n + 2m)/2\nc) n(n-1)/2\n d) (n^2 - n + 2m)/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Complete graphs are cyclic, but not all cyclic graphs are complete. Paths are bipartite, and some cyclic graphs are as well. The question asks how many of these logical statements are True.",
        "target_text": "Question: How many of the following statements are correct?\ni) All cyclic graphs are complete graphs.\nii) All complete graphs are cyclic graphs.\niii) All paths are bipartite.\niv) All cyclic graphs are bipartite.\nv) There are cyclic graphs which are complete.\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the division method of hashing, the modulus value (m) is typically chosen as a prime number to distribute keys uniformly.",
        "target_text": "Question: What can be the value of m in the division method?\nChoices:\na) Any prime number\nb) Any even number\nc) 2^p - 1\nd) 2^p\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Spatial locality refers to the use of data elements within relatively close storage locations, and arrays help take advantage of this concept.",
        "target_text": "Question: Which of the following concepts make extensive use of arrays?\nChoices:\na) Binary trees\nb) Scheduling of processes\nc) Caching\nd) Spatial locality\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The maximum number of keys in a B-tree of order m and height h is (m^(h+1)) - 1. For order 4 and height 3, it's 4^4 - 1 = 255 keys.",
        "target_text": "Question: A B-tree of order 4 and of height 3 will have a maximum of __________ keys.\nChoices:\na) 255\nb) 63\nc) 127\nd) 188\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In any graph, the sum of degrees of all vertices is equal to twice the number of edges, not the number of edges itself.",
        "target_text": "Question: In a simple graph, the number of edges is equal to twice the sum of the degrees of the vertices.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, the ArrayList grows by a factor of 1.5x its current size to reduce the overhead of frequent resizing.",
        "target_text": "Question: The growth factor of ArrayList in Java is __________\nChoices:\na) 1\nb) 1.5\nc) 2\nd) 0\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an array-based binary heap starting at index 1, the parent of element at index i is at index floor(i/2).",
        "target_text": "Question: In a binary heap with n elements stored from index 1 to n, the parent of element at index i is:\nChoices:\na) i - 1\nb) floor(i/2)\nc) ceiling(i/2)\nd) (i + 1)/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The top two elements (5 and 4) on the stack are popped and the operator * is applied. The result is pushed back to the stack.",
        "target_text": "Question: Consider the stack:\n| 5 |\n| 4 |\n| 3 |\n| 2 |\nIf '*' is encountered, what operation is performed?\nChoices:\na) 5*4=20 is pushed\nb) * is pushed\nc) 2*3=6 is pushed\nd) * is ignored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Cartesian sorting is effective when data is partially sorted. It allows efficient reordering with minimal overhead.",
        "target_text": "Question: What is the speciality of cartesian sorting?\nChoices:\na) sorts partially sorted data quickly\nb) uses cartesian product\nc) sorts in less than O(log n)\nd) it is a self-balancing tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skew heaps rely on merge operations for insertion and deletion, making merging the core operation.",
        "target_text": "Question: What is the fundamental operation performed in skew heaps?\nChoices:\na) intersection\nb) difference\nc) merging\nd) sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Open addressing places all entries directly in the table, providing better cache performance than separate chaining using linked structures.",
        "target_text": "Question: Which of the following variant of a hash table has the best cache performance?\nChoices:\na) hash table using a linked list for separate chaining\nb) hash table using binary search tree for separate chaining\nc) hash table using open addressing\nd) hash table using a doubly linked list for separate chaining\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The tango tree is named after the capital of Argentina, Buenos Aires, as part of a trend to name trees after cities.",
        "target_text": "Question: After which city is tango tree named?\nChoices:\na) Vatican City\nb) Buenos Aires\nc) New York\nd) California\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treaps combine binary search trees and heaps and can perform union, intersection, and difference efficiently using structural properties.",
        "target_text": "Question: Several other operations like union, set difference, and intersection can be done in treaps.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: While XOR linked lists reduce memory usage, array-based solutions often outperform them in practice due to better memory locality and simplicity.",
        "target_text": "Question: Would using arrays and swapping elements instead of XOR linked lists be more efficient?\nChoices:\na) no not all\nb) yes arrays would have been better than XOR lists\nc) both would be same in efficiency\nd) can't say\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack can be implemented using a single queue by adjusting enqueue and dequeue logic, though multiple queues may improve performance.",
        "target_text": "Question: Minimum number of queues to implement stack is __________\nChoices:\na) 3\nb) 4\nc) 1\nd) 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A relation R is symmetric if xRy implies yRx. This is the definition of symmetry in mathematical logic.",
        "target_text": "Question: A relation R on a set S is defined such that x R y if and only if y R x. This is an example of?\nChoices:\na) reflexive relation\nb) symmetric relation\nc) transitive relation\nd) invalid relation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The first node visited in in-order traversal is the leftmost node, while in post-order it is the leftmost descendant. These differ unless it's a leaf.",
        "target_text": "Question: For a binary tree, is the first node visited in in-order and post-order traversal the same?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In d-ary heaps, delete-min takes O(log N) time, regardless of the branching factor, due to its logarithmic tree height.",
        "target_text": "Question: What is the run time efficiency of delete-min operation?\nChoices:\na) O(log N)\nb) O(logd N)\nc) O(d logd N)\nd) O(d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: SLLs use one pointer per node, while DLLs use two. Therefore, DLLs use more memory, but enable constant-time insert/delete at known positions.",
        "target_text": "Question: Which of the following statements are not correct with respect to Singly and Doubly Linked Lists?\nChoices:\na) Insertion/deletion is O(n) in SLL and O(1) in DLL\nb) SLL uses less memory per node than DLL\nc) DLL allows better backward traversal than SLL\nd) Number of node fields in SLL is more than DLL\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Character strings can represent numbers in radix (base) systems. 'pt' interpreted in base-26 yields 14452.",
        "target_text": "Question: Interpret the string 'pt' as an integer in suitable radix notation.\nChoices:\na) 14963\nb) 14392\nc) 12784\nd) 14452\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Vectors in C++ are dynamic arrays that can resize themselves automatically, unlike static arrays which have fixed sizes.",
        "target_text": "Question: Which of the following is a difference between vectors and arrays?\nChoices:\na) Access to any element using [] operator\nb) Stored in contiguous memory blocks\nc) The ability to change size dynamically\nd) Efficient direct access to any element\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Python's list data type is implemented internally using dynamic arrays, allowing resizing and random access.",
        "target_text": "Question: Which of the following arrays are used in the implementation of the list data type in Python?\nChoices:\na) Bit array\nb) Dynamic arrays\nc) Sparse arrays\nd) Parallel arrays\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To maintain the min-heap property, if a node is less than its parent, they are swapped. This ensures that the smallest value bubbles up.",
        "target_text": "Question: In the following min-heap function, what is the missing condition?\nChoices:\na) if A[m] > A[parent(m)] then swap A[m], A[parent(m)]\nb) if A[m] > A[parent(m)] then swap A[i], A[parent(m)]\nc) if A[m] < A[parent(m)] then swap A[m], A[parent(m)]\nd) if A[m] > A[parent(m)] then swap A[i], A[parent(m)]\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursive algorithms use stacks implicitly. Non-recursive implementations use explicit stacks to track function call states.",
        "target_text": "Question: What data structure would you most likely see in a non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked list\nc) Queue\nd) Trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary tree can be uniquely constructed if in-order traversal is combined with either pre-order or post-order traversal.",
        "target_text": "Question: Which of the following traversal pairs can uniquely build a binary tree?\nChoices:\na) post-order and pre-order\nb) post-order and in-order\nc) post-order and level-order\nd) level-order and preorder\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The parent of a node in a binary heap stored in an array at index i is at floor(i/2).",
        "target_text": "Question: What is the location of a parent node for any arbitrary node i?\nChoices:\na) (i/2) position\nb) (i+1)/2 position\nc) floor(i/2) position\nd) ceil(i/2) position\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Two directed graphs are isomorphic if there exists a permutation matrix P such that A = PBP^-1, where A and B are adjacency matrices.",
        "target_text": "Question: Two directed graphs G and H are isomorphic if and only if A = PBP^-1, where A and B are their adjacency matrices.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2-3 tree is a balanced search tree, which is a special case of B-trees but also shares properties with AVL trees due to balance.",
        "target_text": "Question: 2-3 tree is a specific form of __________\nChoices:\na) B-tree\nb) B+ tree\nc) AVL tree\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The van Emde Boas tree supports associative array operations like insert, delete, and lookup with fast time complexity.",
        "target_text": "Question: On which abstract data type does van Emde Boas tree perform operations?\nChoices:\na) Tree\nb) Linked List\nc) Heap\nd) Associative Array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: K-d trees support range queries, which ask for all points lying within a multidimensional rectangle or box.",
        "target_text": "Question: Several kinds of queries are possible on a k-d tree, one of which is?\nChoices:\na) partial queries\nb) range queries\nc) neighbor queries\nd) search queries\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given code pushes characters in reverse order to produce the string 'cat' when popped from the stack.",
        "target_text": "Question: What is the set of stack operations to get the output \"cat\"?\nChoices:\na) push(t), push(a), push(c), pop(), pop(), pop()\nb) push(c), pop(), push(a), pop(), push(t), pop()\nc) pop(c), pop(a), pop(t)\nd) push(c), push(a), pop(t)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A trie can store strings up to length m. In the worst case, the trie can grow to a maximum depth of m for any single string.",
        "target_text": "Question: What can be the maximum depth of a trie with n strings, each of length up to m?\nChoices:\na) log2n\nb) log2m\nc) n\nd) m\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Weight-balanced trees support basic operations like insert/delete and set operations like union, intersection, and subset testing.",
        "target_text": "Question: What operations can be performed on a weight-balanced tree?\nChoices:\na) all basic operations and set intersection, set union, subset test\nb) only basic operations\nc) only set operations\nd) only insertion and deletion\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursion uses the call stack for function calls. Each call keeps its activation record in memory, leading to high stack usage.",
        "target_text": "Question: Recursion is memory-intensive because:\nChoices:\na) Recursive functions declare many local variables.\nb) Previous calls remain open and occupy space on the stack.\nc) Many copies of function code are created.\nd) It requires large data values.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of possible undirected graphs with n vertices and self-loops but no multiple edges is 2^(n(n+1)/2).",
        "target_text": "Question: The number of undirected graphs with self-loops (no multi-edges) and n vertices is:\nChoices:\na) 2^((n(n-1))/2)\nb) 2^((n(n+1))/2)\nc) 2^(((n-1)^2)/2)\nd) 2^((n*n)/2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The maximum number of edges in a DAG (Directed Acyclic Graph) with n vertices is (n(n-1))/2. For n=7, max is 21.",
        "target_text": "Question: What is the maximum number of edges in a simple directed acyclic graph with 7 vertices?\nChoices:\na) 21\nb) 7\nc) 6\nd) 49\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Operator precedence and associativity determine the evaluation order in expressions. According to the rules, multiplication/division have higher precedence than addition/subtraction, unless otherwise stated.",
        "target_text": "Question: Assume +, -, *, / are usual arithmetic operators. + has highest precedence and is right-associative, others are left-associative. What is the output of the expression 23 * 3 - 6 + 11 - 2 * 8 / 4?\nChoices:\na) 110\nb) 100\nc) 130\nd) 120\nAnswer: 110"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-Black Trees are balanced binary search trees commonly used to maintain the structure of auxiliary trees in complex tree operations.",
        "target_text": "Question: Which special balanced binary search tree is used to store the nodes of an auxiliary tree?\nChoices:\na) Red - Black Tree\nb) Red - Brown Tree\nc) Red - Yellow Tree\nd) Red - Tango Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse array is one in which most of the elements share the same value, commonly zero. This allows for memory-efficient storage techniques.",
        "target_text": "Question: What is a sparse array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) An array in which memory is allocated at run time\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is empty when the top pointer equals -1. This check is commonly used in stack underflow condition detection.",
        "target_text": "Question: What does the following function check for?\nif (s->top == -1)\n    return 1;\nelse\n    return 0;\nChoices:\na) Full stack\nb) Invalid index\nc) Empty stack\nd) Infinite stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A d-heap is a generalization of a binary heap where each node can have up to d children. As d increases, the tree becomes shallower.",
        "target_text": "Question: d-heap is shallower than a binary heap.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In postfix expressions (Reverse Polish notation), operators appear after their operands. This form does not require parentheses for disambiguation.",
        "target_text": "Question: What type of expression places the operator after its operands?\nChoices:\na) Infix Expression\nb) Prefix Expression\nc) Postfix Expression\nd) Both Prefix and Postfix Expressions\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stack underflow refers to attempting a pop operation on an empty stack, which is an illegal memory access.",
        "target_text": "Question: What does 'stack underflow' refer to?\nChoices:\na) Accessing an item from an undefined stack\nb) Adding items to a full stack\nc) Removing items from an empty stack\nd) Index out of bounds exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Before deleting from a linked queue, underflow is checked to ensure that there are elements present in the structure.",
        "target_text": "Question: What essential condition must be checked before deleting from a linked queue?\nChoices:\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary search tree can be uniquely reconstructed using its inorder and one other traversal (either preorder or postorder).",
        "target_text": "Question: Given preorder = [15, 10, 12, 11, 20, 18, 16, 19], what is the postorder traversal?\nChoices:\na) 10, 11, 12, 15, 16, 18, 19, 20\nb) 11, 12, 10, 16, 19, 18, 20, 15\nc) 20, 19, 18, 16, 15, 12, 11, 10\nd) 19, 16, 18, 20, 11, 12, 10, 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary trees allow insertions in different ways--leftmost, rightmost, or random--depending on whether it is a full, complete, or general binary tree.",
        "target_text": "Question: How many types of insertion can be performed in a binary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Horner's method allows evaluating a polynomial with minimum number of multiplications and additions. For degree 3, 3 multiplications and 3 additions are required.",
        "target_text": "Question: What is the minimum number of multiplications and additions required to evaluate the polynomial P = 4x^3 + 3x^2 - 15x + 45?\nChoices:\na) 6 & 3\nb) 4 & 2\nc) 3 & 3\nd) 8 & 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stack is not used for asynchronous data transfer. It is used in expression evaluation, runtime variable tracking, and compiler design.",
        "target_text": "Question: Which of the following is not an application of a stack?\nChoices:\na) Data transfer between two asynchronous processes\nb) Compiler syntax analyzer\nc) Tracking local variables at runtime\nd) Parentheses balancing program\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The multiplication method for hashing consists of two steps: multiplying the key and taking the fractional part, followed by multiplying with table size.",
        "target_text": "Question: How many steps are involved in creating a hash function using the multiplication method?\nChoices:\na) 1\nb) 4\nc) 3\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In infix to postfix conversion, parentheses are not ignored. They play a key role in operator precedence and must be processed correctly.",
        "target_text": "Question: Parentheses are simply ignored in infix to postfix conversion.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a randomized binary search tree that also satisfies the heap property based on priorities.",
        "target_text": "Question: A treap is a combination of a tree and a heap.\nChoices:\na) False\nb) True\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Leftist heaps maintain both the heap order property and the leftist property, supporting three key structural constraints.",
        "target_text": "Question: How many properties does a leftist heap support?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary trees with height h can perform operations in O(log n) time due to their balanced structure.",
        "target_text": "Question: What is the time complexity for operations in a balanced binary tree?\nChoices:\na) O(n^0.5)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Java uses row-major order for multidimensional arrays. The syntax for declaring a 2D array is `int[][] arr;`.",
        "target_text": "Question: Which of the following is the correct way to declare a multidimensional array in Java?\nChoices:\na) int[] arr;\nb) int arr[[]];\nc) int[][] arr;\nd) int[[]] arr;\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA-trees are balanced binary search trees that use skew and split operations to maintain balance.",
        "target_text": "Question: What are the two different operations done in an AA-Tree?\nChoices:\na) shift and color\nb) skew and split\nc) zig and zag\nd) enqueue and dequeue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A monotonic deque maintains elements in a strictly increasing or decreasing order and is used in sliding window problems.",
        "target_text": "Question: The deque which stores elements in strictly increasing or strictly decreasing order is called __________.\nChoices:\na) Priority Queue\nb) Double-ended Queue\nc) Monotonic Deque\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In union-find structures, the number of nodes of rank r is at most N / 2^r.",
        "target_text": "Question: What is the number of nodes of rank r in a union-find data structure?\nChoices:\na) N\nb) N/2\nc) N/2^r\nd) Nr\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a linked list, each node must contain a pointer to the next node (and possibly previous), along with data.",
        "target_text": "Question: In a linked list, each node contains at least two fields. One is data. What is the other?\nChoices:\na) Pointer to character\nb) Pointer to integer\nc) Pointer to node\nd) Node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Pruning is used to reduce search space by eliminating paths that won't lead to a solution, often in decision trees or game trees.",
        "target_text": "Question: Reducing search space by eliminating irrelevant trees is known as?\nChoices:\na) pruning\nb) partial results\nc) freeing space\nd) traversing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postorder traversal follows left -> right -> root. Given a preorder sequence, the unique BST's postorder traversal can be computed.",
        "target_text": "Question: Given preorder traversal: 30, 20, 10, 15, 25, 23, 39, 35, 42. What is the postorder traversal?\nChoices:\na) 10, 20, 15, 23, 25, 35, 42, 39, 30\nb) 15, 10, 25, 23, 20, 42, 35, 39, 30\nc) 15, 20, 10, 23, 25, 42, 35, 39, 30\nd) 15, 10, 23, 25, 20, 35, 42, 39, 30\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The array q[] represents the queue. q[0] typically refers to the front of the queue in simple implementations.",
        "target_text": "Question: In a basic array implementation of a queue, which index is typically used for the front?\nChoices:\na) q[0]\nb) q[1]\nc) q[9]\nd) q[10]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap must be a complete binary tree and must follow the heap property--either max-heap or min-heap ordering.",
        "target_text": "Question: What is the necessary condition for a tree to be a heap?\nChoices:\na) Only complete tree\nb) Only heap property\nc) Complete tree and heap property\nd) None\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursion typically uses a stack for call management. Non-recursive versions explicitly simulate this with a stack.",
        "target_text": "Question: What data structure is commonly used in non-recursive implementations of recursive algorithms?\nChoices:\na) Linked List\nb) Stack\nc) Queue\nd) Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Using arrays for tree storage requires knowing the maximum number of nodes beforehand, which reduces flexibility.",
        "target_text": "Question: What is a disadvantage of implementing a tree using arrays?\nChoices:\na) Difficult to access children\nb) Difficult to find parent\nc) Maximum nodes must be known in advance\nd) Hard to implement\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a full binary tree, the total number of nodes is given by 2L - 1, where L is the number of leaves.",
        "target_text": "Question: In a full binary tree with L leaves, what is the total number of nodes N?\nChoices:\na) 2*L\nb) L + 1\nc) L - 1\nd) 2*L - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In graphs where all edges have equal weight, BFS finds the shortest path in linear time as it explores layer by layer.",
        "target_text": "Question: Given a directed graph with equal-weight edges, which algorithm efficiently finds the shortest path from source to destination?\nChoices:\na) Breadth First Traversal\nb) Dijkstra's Algorithm\nc) Neither BFS nor Dijkstra's\nd) Depth First Search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays store boolean values compactly, while bit fields are used to access or manipulate individual bits within a data structure. They are related but not the same.",
        "target_text": "Question: Bit fields and Bit arrays are the same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Singly linked lists require less memory than doubly linked lists due to having only one pointer per node, making them more space-efficient for chaining.",
        "target_text": "Question: What is the advantage of using a singly linked list over a doubly linked list for chaining in hash tables?\nChoices:\na) It takes less memory\nb) It causes more collisions\nc) It makes the process of insertion and deletion faster\nd) It causes fewer collisions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Preorder and inorder traversals can be used to reconstruct a binary tree. Using the given sequences, one can derive the corresponding postorder.",
        "target_text": "Question: The preorder and inorder traversals of a binary tree are T M L N P O Q and L M N T O P Q. What is the postorder traversal?\nChoices:\na) L N M O Q P T\nb) N M O P O L T\nc) L M N O P Q T\nd) O P L M N Q T\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In double hashing, the probe function is of the form `(h1(k) + i * h2(k)) mod m` where i is the probe count. This avoids clustering better than linear probing.",
        "target_text": "Question: What is the hash function used in Double Hashing?\nChoices:\na) (h1(k) - i*h2(k)) mod m\nb) h1(k) + h2(k)\nc) (h1(k) + i*h2(k)) mod m\nd) (h1(k) + h2(k)) mod m\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When converting infix to postfix, the position of operators and parentheses must be considered based on precedence and associativity.",
        "target_text": "Question: Convert the following infix expression to postfix: (A + B ∧ D)/(E - F) + G\nChoices:\na) A B D ∧ + E F - / G +\nb) A B D + ∧ E F - / G +\nc) A B D ∧ + E F - / - G +\nd) A B D E F + ∧ / - G +\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AVL trees maintain a stricter balance than Red-Black trees by ensuring that the balance factor of every node is -1, 0, or 1.",
        "target_text": "Question: AVL trees are more balanced than Red-black trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Accessing elements from the start is O(1) in a singly linked list, while accessing from the end requires traversal, which takes O(n) time.",
        "target_text": "Question: What are the time complexities of finding the 8th element from the beginning and from the end in a singly linked list (n > 8)?\nChoices:\na) O(1) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(n) and O(n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue follows the First-In-First-Out (FIFO) principle, so elements are removed in the same order they are added.",
        "target_text": "Question: If elements 'A', 'B', 'C', and 'D' are placed in a queue, in what order are they removed?\nChoices:\na) ABCD\nb) DCBA\nc) DCAB\nd) ABDC\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix tree is a compressed trie that represents all the suffixes of a string. An alternative structure called a PAT Tree (Practical Algorithm to Retrieve Information Coded in Alphanumeric) is also used to represent suffixes efficiently.",
        "target_text": "Question: What is the other name for Suffix Tree?\nChoices:\na) Array\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The height of a node in a tree is the number of edges on the longest downward path between that node and a leaf. This measurement helps analyze the efficiency of operations like search and insert.",
        "target_text": "Question: The number of edges from the node to the deepest leaf is called __________ of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a Binary Search Tree (BST), the in-order predecessor of a node is the maximum value node in its left subtree. This node will not have a right child.",
        "target_text": "Question: If a node in a BST has two children, then its in-order predecessor has __________.\nChoices:\na) no left child\nb) no right child\nc) two children\nd) no child\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The in-order traversal of a BST gives nodes in sorted order. To identify a valid BST from a given traversal, the property that for any node, left < root < right, must hold True.",
        "target_text": "Question: A Binary Search Tree (BST) stores values in the range 37 to 573. Consider the following sequence of keys:\nI. 81, 537, 102, 439, 285, 376, 305\nII. 52, 97, 121, 195, 242, 381, 472\nIII. 142, 248, 520, 386, 345, 270, 307\nIV. 550, 149, 507, 395, 463, 402, 270\nWhich of the following statements is TRUE?\nChoices:\na) I, II and IV are inorder sequences of three different BSTs\nb) I is a preorder sequence of some BST with 439 as the root\nc) II is an inorder sequence of some BST where 121 is the root and 52 is a leaf\nd) IV is a postorder sequence of some BST with 149 as the root\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary heap is a complete binary tree. Its inorder traversal does not guarantee sorted order. This is in contrast with a BST.",
        "target_text": "Question: Does there exist a heap with seven distinct elements so that the Inorder traversal gives the elements in sorted order?\nChoices:\na) Yes\nb) No\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Matrix representations are commonly used in graph theory, image processing, and solving linear equations, but not in sorting operations.",
        "target_text": "Question: Which of the following don't use matrices?\nChoices:\na) In solving linear equations\nb) Image processing\nc) Graph theory\nd) Sorting numbers\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The recursive function shown checks whether the elements in a singly linked list are in non-decreasing order by comparing each node with its next.",
        "target_text": "Question: Consider the function f defined below:\n#include <iostream>\nstruct item {\n int data;\n struct item *next;\n};\nint f(struct item *p) {\n return ((p == NULL) || (p->next == NULL) || ((p->data <= p->next->data) && f(p->next)));\n}\nWhat does this function check?\nChoices:\na) Not all elements have the same data value\nb) Elements are sorted in non-decreasing order\nc) Elements are sorted in non-increasing order\nd) None of them\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a Directed Acyclic Graph (DAG), a sink vertex has no outgoing edges. Every DAG must have at least one sink vertex.",
        "target_text": "Question: Every Directed Acyclic Graph has at least one sink vertex.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Interpolation search works effectively only when elements are uniformly distributed in a sorted dataset, as it estimates the position based on value range.",
        "target_text": "Question: Interpolation search is an improved variant of binary search. What is necessary for this algorithm to work?\nChoices:\na) Data collection should be in sorted form and equally distributed\nb) Data collection should be sorted but not equally distributed\nc) Data collection should be equally distributed but not sorted\nd) None of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a Binary Search Tree (BST), the left child node always contains a value less than its parent node, and the right child node always contains a value greater. Additionally, in-order traversal yields values in increasing order.",
        "target_text": "Question: Which of the following is False about a binary search tree?\nChoices:\na) The left child is always lesser than its parent\nb) The right child is always greater than its parent\nc) The left and right sub-trees should also be binary search trees\nd) In order sequence gives decreasing order of elements\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap (a heap where each node has three children), the tree is typically maintained in an array representation and leaves are filled from left to right to preserve the complete tree property.",
        "target_text": "Question: Should leaves in ternary heap be distributed from left to right.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In weight-balanced trees, each internal node stores a size value equal to the combined sizes of its children. Leaf nodes are considered to have a size of zero.",
        "target_text": "Question: The size value of various nodes in a weight balanced tree are\nleaf - zero\ninternal node - size of it's two children\nis this True?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: While min-heaps can be used for heap sort, they are not typically used for selection sort, which operates by finding the minimum element repeatedly without using a heap.",
        "target_text": "Question: Min heap can be used to implement selection sort.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Ternary heaps are stored using arrays where the children of node i are located at 3i + 1, 3i + 2, and 3i + 3. This array-based representation allows efficient access to parent and children.",
        "target_text": "Question: Which type of data structure is a ternary heap?\nChoices:\na) Array\nb) Hash\nc) Priority Queue\nd) Priority Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A self-organizing list adjusts its structure based on access patterns, reducing average access time. Frequently accessed elements are moved closer to the front.",
        "target_text": "Question: The self organizing list improves __________\nChoices:\na) average access time\nb) insertion\nc) deletion\nd) binary search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skew heaps are a form of self-adjusting binary heap that rely on a simple merging procedure, unlike leftist heaps that maintain additional structure.",
        "target_text": "Question: __________ is a self-adjusting version of a leftist heap.\nChoices:\na) Rightist heap\nb) Skew heap\nc) d-heap\nd) Binary heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a d-heap, each node has d children. Secondary operations such as sift-up and sift-down depend on the value of d, affecting the heap's structure.",
        "target_text": "Question: How many secondary operations are performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The adjacency matrix of a graph can be used to count the number of paths of a given length. The square of the adjacency matrix gives the number of paths of length 2 between vertices.",
        "target_text": "Question: Given an adjacency matrix A = [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ], The total no. of ways in which every vertex can walk to itself using 2 edges is __________\nChoices:\na) 2\nb) 4\nc) 6\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The load factor is a measure used in hash tables to determine how full the table is. It is commonly denoted by the Greek letter λ (lambda) or sometimes β.",
        "target_text": "Question: What is the correct notation for a load factor?\nChoices:\na) Ω\nb) ∞\nc) Σ\nd) λ\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash function maps input data to a fixed index in an array. This index determines where the data should be stored in a hash table for fast retrieval.",
        "target_text": "Question: What is the use of a hash function?\nChoices:\na) to calculate and return the index of corresponding data\nb) to store data\nc) to erase data\nd) to change data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-Black Trees are balanced binary search trees that ensure logarithmic height. A perfect Red-Black Tree may have all black nodes if all nodes satisfy the tree's coloring rules.",
        "target_text": "Question: Is the following statement valid? A Red-Black Tree which is also a perfect Binary Tree can have all black nodes\nChoices:\na) Yes\nb) No\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A B+ tree is a balanced tree data structure used in databases. The degree of a node determines how many children it can have and is influenced by block size and pointer size.",
        "target_text": "Question: A B+ -tree index is to be built on the Name attribute of the relation STUDENT. Assume that all student names are of length 8 bytes, disk block are size 512 bytes, and index pointers are of size 4 bytes. Given this scenario, what would be the best choice of the degree (i.e. the number of pointers per node) of the B+ -tree?\nChoices:\na) 16\nb) 42\nc) 43\nd) 44\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap is a special tree-based data structure that satisfies the heap property. In a max-heap, each parent node is greater than or equal to its children, while in a min-heap, each parent is less than or equal to its children. A leftist heap is a variant of a binary heap that is implemented as a binary tree and is optimized for efficient merging of two heaps. It maintains a special property called the null path length (npl), ensuring that the right child of any node has the shortest npl.",
        "target_text": "Question: A leftist heap is also said to be a binary heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. It is commonly used in parsing expressions, managing function calls, and checking for balanced symbols like parentheses, braces, and brackets. When validating balanced expressions, opening symbols are pushed onto the stack, and when a corresponding closing symbol is encountered, the stack is popped to check for a match.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) push it on to the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a non-linear hierarchical data structure widely used to represent relationships between elements. Specialized trees like suffix trees are used in string processing tasks. A suffix tree is a compressed trie of all the suffixes of a given string and is commonly used in applications such as text editors, search engines, and bioinformatics for pattern matching and substring queries.",
        "target_text": "Question: Can suffix tree be used in string problems occurring in a text editor?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Graphs are generalizations of tree structures that may include cycles and weights on edges. In a weighted graph, the shortest path from a source to a destination may not be unique unless additional constraints apply. For example, if all edge weights are unique, there may still be multiple paths of equal total weight due to different combinations of edges. Hence, uniqueness of edge weights does not guarantee a unique shortest path.",
        "target_text": "Question: Is the following statement valid?\nGiven a weighted graph where weights of all edges are unique (no two edges have the same weights), there is always a unique shortest path from a source to destination in such a graph.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a dynamic data structure consisting of nodes that contain data and a pointer to the next node. In compiler design, the syntax analysis phase (also called parsing) uses data structures to represent the syntactic structure of code. Although trees (especially abstract syntax trees) are common, linked lists are also used internally to manage tokens and other dynamic sequences of elements during parsing.",
        "target_text": "Question: Which data structure is used in the syntax analysis phase of the compiler?\nChoices:\na) Tree\nb) Stack\nc) Linked List\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An array is a linear data structure that stores elements in contiguous memory locations. Inversions in an array are pairs of elements that are out of their natural order (i.e., a pair (i, j) such that i < j and arr[i] > arr[j]). A completely sorted array has zero such inversions.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are used in many algorithmic applications including number system conversions. To convert a decimal number to binary, repeated division by 2 is performed, and the remainders are stored in an array. The binary representation is obtained by reading the remainders in reverse order.",
        "target_text": "Question: Which of the following code snippet is used to convert decimal to binary numbers?\nChoices:\na) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[index++] = num%2;\n num = num/2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nb) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[++index] = num%2;\n num = num/2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nc) \npublic void convertBinary(int num)\n{\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[index++] = num/2;\n num = num%2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n}\nd)\npublic void convertBinary(int num)\n {\n int bin[] = new int[50];\n int index = 0;\n while(num > 0)\n {\n bin[++index] = num/2;\n num = num%2;\n }\n for(int i = index-1;i >= 0;i--)\n {\n System.out.print(bin[i]);\n }\n }\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a LIFO (Last-In-First-Out) data structure used in various applications including function call management in programming languages. Recursion, which involves a function calling itself, uses the call stack to keep track of active function calls. Each recursive call consumes stack space, making recursion more memory-intensive than iteration.",
        "target_text": "Question: Recursion uses more memory space than iteration because __________\nChoices:\na) it uses stack instead of queue.\nb) every recursive call has to be stored.\nc) both A & B are True.\nd) None of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sorting algorithms are used to reorder elements in a list based on comparison criteria. Merging two sorted arrays is a common subroutine in merge sort and takes linear time proportional to the sum of the sizes of the arrays. If two sorted lists of sizes m and n are merged, it takes O(m + n) time to combine them into one sorted list.",
        "target_text": "Question: Time required to merge two sorted lists of size m and n, is __________\nChoices:\na) O(m | n)\nb) O(m + n)\nc) O(m log n)\nd) O(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure consisting of nodes, where each node contains data and a reference (or pointer) to the next node in the sequence. It enables efficient insertion and deletion of elements and is widely used in dynamic memory management.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of pointer is called?\nChoices:\na) Linked list\nb) Node list\nc) Primitive list\nd) Unordered list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A complete undirected graph with n vertices contains n(n-1)/2 edges. A spanning tree of a graph connects all vertices with exactly (n-1) edges and no cycles. In a weighted graph, a minimum spanning tree (MST) is a tree with the lowest possible sum of edge weights. The maximum possible weight of an MST occurs when the (n-1) smallest edges are chosen.",
        "target_text": "Question: Let G be a complete undirected graph on 4 vertices, having 6 edges with weights being 1, 2, 3, 4, 5, and 6. The maximum possible weight that a minimum weight spanning tree of G can have is:\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: During the compilation of a program, symbol tables are used to store information about variables, functions, objects, etc. Efficient implementations of symbol tables often use self-organizing lists, which adjust dynamically based on access patterns to reduce average lookup time.",
        "target_text": "Question: Symbol tables during compilation of program is efficiently implemented using __________\nChoices:\na) a singly linked list\nb) a doubly linked list\nc) a self organizing list\nd) an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sorting algorithms are used to reorder elements in a list based on comparison criteria. Merging two sorted arrays is a common subroutine in merge sort and takes linear time proportional to the sum of the sizes of the arrays. If two sorted lists of sizes m and n are merged, it takes O(m + n) time to combine them into one sorted list.",
        "target_text": "Question: Time required to merge two sorted lists of size m and n, is __________\nChoices:\na) O(m | n)\nb) O(m + n)\nc) O(m log n)\nd) O(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash tree, also known as a Merkle tree, is a tree in which each leaf node contains a hash of a data block, and each non-leaf node contains a hash of its child nodes. It is widely used in blockchain and distributed systems to verify data integrity efficiently.",
        "target_text": "Question: Hash tree is also known as __________\nChoices:\na) Merkle tree\nb) T-tree\nc) Hash table\nd) Bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A memory-efficient doubly linked list can be implemented using XOR (exclusive OR) of previous and next node addresses. This technique, known as XOR linked list, saves space by storing a single pointer per node that encodes both previous and next pointers using bitwise XOR.",
        "target_text": "Question: How do you calculate the pointer difference in a memory-efficient doubly linked list?\nChoices:\na) head xor tail\nb) pointer to previous node xor pointer to next node\nc) pointer to previous node - pointer to next node\nd) pointer to next node - pointer to previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In postfix expression evaluation (Reverse Polish Notation), operands are pushed onto the stack. When an operator is encountered, the last two operands are popped, the operation is applied, and the result is pushed back onto the stack. This method is commonly used in compilers and calculators.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) Push it directly onto the stack\nb) Pop 2 operands, evaluate them, and push the result onto the stack\nc) Pop the entire stack\nd) Ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A weight-balanced tree is a type of balanced binary tree in which the weight (often measured by the number of nodes or size of subtrees) of left and right subtrees at each node maintains a specific proportion. This is governed by a balance factor 'a', ensuring the tree remains efficiently balanced for operations like insertions and deletions.",
        "target_text": "Question: What is the condition for a tree to be weight-balanced, where a is a factor and n is a node?\nChoices:\na) weight[n.left] >= aweight[n] and weight[n.right] >= aweight[n]\nb) weight[n.left] >= aweight[n.right] and weight[n.right] >= aweight[n]\nc) weight[n.left] >= aweight[n.left] and weight[n.right] >= aweight[n]\nd) weight[n] is a non-zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are fixed-size data structures that allow direct access to elements using indices. However, they have some limitations, such as fixed size and inefficient insertions or deletions at arbitrary positions. Random access, on the other hand, is a major advantage as it allows constant-time retrieval.",
        "target_text": "Question: Which of the following is not a disadvantage to the usage of array?\nChoices:\na) Fixed size\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Insertion based on position\nd) Accessing elements at specified positions\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing, a collision occurs when two different keys are mapped to the same hash value or index in a hash table. Collisions are inherent in hash functions and are typically handled through techniques like chaining or open addressing.",
        "target_text": "Question: Collision is caused due to the presence of two keys having the same value.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A min heap is a complete binary tree where the value of each node is less than or equal to the values of its children. This ensures that the smallest element is always at the root, and such trees are used in priority queues and efficient sorting algorithms.",
        "target_text": "Question: Min heap is a complete binary tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a data structure that combines properties of binary search trees and heaps. It is also called a randomized binary search tree. Each node has a key (for BST property) and a randomly assigned priority (for heap property). The structure maintains both properties simultaneously.",
        "target_text": "Question: A treap is a cartesian tree with __________\nChoices:\na) additional value, which is a priority value to the key generated randomly\nb) additional value, which is a priority value to the key generated sequentially\nc) additional heap rule\nd) additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue is a FIFO (First-In-First-Out) data structure. When implemented using recursion, elements can be removed from the front and reinserted at the rear to reverse the order of elements. This technique can be used to reverse a queue using recursion.",
        "target_text": "Question: Suppose you are given an implementation of a queue of integers.\nConsider the following function:\nvoid f(queue<int> &Q) {\n int i;\n if (!Q.empty()) {\n i = Q.front();\n Q.pop();\n f(Q);\n Q.push(i);\n }\n}\nChoices:\na) Leaves the queue Q unchanged\nb) Reverses the order of the elements in the queue Q\nc) Deletes the element at the front of the queue Q and inserts it at the rear keeping the other elements in the same order\nd) Empties the queue Q\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary tree, internal nodes are nodes that have at least one child. A node of degree 1 has only one child, and a node of degree 2 has two children. The number of leaf nodes in a binary tree can be derived from the structure using various tree properties and formulas.",
        "target_text": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is:\nChoices:\na) 10\nb) 11\nc) 12\nd) 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix (Reverse Polish) expressions are evaluated using a stack. Operands are pushed onto the stack, and when an operator is encountered, the appropriate number of operands are popped, the operation is applied, and the result is pushed back. In the expression abcd+, values are substituted and operations follow the postfix order.",
        "target_text": "Question: What is the result of the following postfix expression?\nabcd+ where a=2, b=2, c=3, d=4.\nChoices:\na) 16\nb) 12\nc) 14\nd) 10\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In graph theory, a multigraph allows multiple edges between the same set of vertices. When such graphs also allow self-loops--edges that connect a vertex to itself--they are referred to as pseudographs. These structures are useful in modeling certain real-world networks and edge-weighted systems.",
        "target_text": "Question: MultiGraphs having self-loops are called PseudoGraphs?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursive functions are functions that call themselves with modified parameters. The function in the question calculates the factorial of a number. The factorial of a number n (denoted as n!) is the product of all positive integers less than or equal to n.",
        "target_text": "Question: What value does function mystery return when called with a value of 4?\nint mystery ( int number ) {\n if ( number <= 1 )\n return 1;\n else\n return number * mystery( number - 1 );\n}\nChoices:\na) 0\nb) 1\nc) 4\nd) 24\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In dynamic programming and combinatorics, reaching the end of an array can be modeled by counting the number of valid jumps from each position based on allowed step values. This type of problem appears in variants of the staircase or jump game problems.",
        "target_text": "Question: In how many different ways can we reach the end of the array arr[]={1,3,5,8,9}?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing an array involves swapping elements from the two ends toward the center. The number of swaps required is floor(n/2) for an array of length n. If n is odd, the middle element doesn't require a swap.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1)/2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA-trees are a form of balanced binary search tree that simplify the balancing logic of red-black trees. Though they perform fewer types of rotations (only right and left skew), they may require more frequent rotations to maintain balance, particularly in worst-case insertion sequences.",
        "target_text": "Question: AA-Trees make more rotations than a red-black tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing an array inverts the order of its elements, while rotation shifts the elements cyclically. The output of reversal and rotation differs in most cases, as they are fundamentally different operations. Therefore, applying both will not consistently produce the same result.",
        "target_text": "Question: When array reversal and rotation are applied to the same array, the output produced will also be the same every time.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a complete binary tree, every level is completely filled except possibly the last. A full binary tree with n leaf nodes contains 2n - 1 total nodes, based on the structural properties of binary trees.",
        "target_text": "Question: A full binary tree with n leaf nodes contains how many total nodes?\nChoices:\na) n nodes\nb) log 2 n nodes\nc) 2n -1 node\nd) 2 n nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash tree, also known as a Merkle tree, is used in blockchain systems and digital currencies like Bitcoin and Ethereum to efficiently and securely verify the integrity of large datasets. Each non-leaf node is a hash of its child nodes, enabling quick and tamper-evident verification.",
        "target_text": "Question: Where is the hash tree used?\nChoices:\na) in digital currency\nb) in sorting of large data\nc) for indexing in databases\nd) in encryption of data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A skew heap is a variant of a binary heap that is self-adjusting, with no structural constraints like leftist heaps. This makes the relationship between skew heaps and leftist heaps similar to that between splay trees (self-adjusting) and AVL trees (strictly balanced).",
        "target_text": "Question: The relationship of skew heaps to leftist heaps is analogous to that of?\nChoices:\na) Splay tree and AVL tree\nb) Red black tree and AVL tree\nc) Binary tree and Splay tree\nd) Binary tree and Red black tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A balanced binary tree ensures that the height of the tree remains logarithmic with respect to the number of elements. This allows for efficient search, insertion, and deletion operations, all of which run in O(log n) worst-case time.",
        "target_text": "Question: A balanced binary tree with n items allows the lookup of an item in __________ worst-case time.\nChoices:\na) O(log n)\nb) O(nlog 2)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C, arrays can be initialized during declaration using curly braces and a comma-separated list of values. The correct syntax for initializing an array of three integers is int arr[3] = {1, 2, 3};.",
        "target_text": "Question: How do you initialize an array in C?\nChoices:\na) int arr[3] = (1,2,3);\nb) int arr(3) = {1,2,3};\nc) int arr[3] = {1,2,3};\nd) int arr(3) = (1,2,3);\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A simple connected graph with n vertices and n edges forms a single cycle. The number of different spanning trees in such a graph depends on how many edges can be removed without disconnecting the graph. It can be shown that such a graph has at least 3 spanning trees.",
        "target_text": "Question: What is the largest integer m such that every simple connected graph with n vertices and n edges contains at least m different spanning trees?\nChoices:\na) 1\nb) 2\nc) 3\nd) n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear probing is a collision resolution technique in open addressing where the next index is computed as (hash + f(i)) mod table_size, where f(i) = i. So the probing function is linear, and the hash function used is typically H(x) = (key + i) % table_size.",
        "target_text": "Question: What is the hash function used in linear probing?\nChoices:\na) H(x)= key mod table size\nb) H(x)= (key+ F(i2)) mod table size\nc) H(x)= (key+ F(i)) mod table size\nd) H(x)= X mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion in an array is a pair of indices (i, j) such that i < j and A[i] > A[j]. The expected number of inversions in a randomly ordered array of n distinct elements is n(n-1)/4, which is half of the worst-case (reversed array) count.",
        "target_text": "Question: Let A[1...n] be an array of n distinct numbers. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. What is the expected number of inversions in any permutation on n elements?\nChoices:\na) n(n-1)/2\nb) n(n-1)/4\nc) n(n+1)/4\nd) 2n[logn]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A skew heap is a form of self-adjusting heap that does not impose any structural constraints like leftist heaps. Swapping during merge operations is done unconditionally, without maintaining specific balance factors, hence no fixed constraints are required.",
        "target_text": "Question: In skew heaps, certain constraints are to be met in order to perform swapping.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When finding both the smallest and largest elements in an array, a more efficient approach than scanning twice can be used. By comparing elements in pairs, the number of comparisons can be reduced. The optimal method requires about n + (n/2 - 1) comparisons.",
        "target_text": "Question: The total comparisons in finding both smallest and largest elements are:\nChoices:\na) 2*n + 2\nb) n + ((n+1)/2) - 2\nc) n + logn\nd) n^2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tree traversals define the order in which nodes are visited. In postorder traversal, the left subtree is visited first, then the right subtree, and finally the node itself. This is often used in deleting trees or evaluating postfix expressions.",
        "target_text": "Question: What does the following piece of code do?\npublic void func(Tree root)\n{\n func(root.left());\n func(root.right());\n System.out.println(root.data());\n}\nChoices:\na) Preorder traversal\nb) Inorder traversal\nc) Postorder traversal\nd) Level order traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A plane graph is a graph drawn on a plane without any edge crossings. Euler's formula states that for any connected plane graph, V - E + R = 2. If a plane graph has multiple connected components, the formula generalizes to V - E + R = C + 1, where C is the number of components.",
        "target_text": "Question: Given a plane graph, G having 2 connected components, 6 vertices, 7 edges and 4 regions, what will be the number of connected components?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an infix expression, operators are placed between operands. This is the common human-readable format for arithmetic expressions. The recursive pattern of producing left expression -> operator -> right expression characterizes infix notation.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Rope data structure is a binary tree used to efficiently store and manipulate very long strings. In programming, a Rope is also known as a Cord. It allows for efficient concatenation and substring operations.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) cord\nb) string\nc) array\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Two balanced binary search trees with m and n elements can be merged into one balanced BST in O(m+n) time. The process typically involves converting both trees to sorted arrays, merging them, and reconstructing a balanced BST from the merged array.",
        "target_text": "Question: Two balanced binary trees are given with m and n elements respectively. They can be merged into a balanced binary search tree in __________ time.\nChoices:\na) o(m+n)\nb) o(mn)\nc) o(m)\nd) o(mlog n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of binary trees that can be formed with a given set of nodes and a specific traversal sequence depends on the properties of binary trees and Catalan numbers. For 3 nodes with a fixed postorder traversal (e.g., N, M, L), only a limited number of trees can match that sequence.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A full binary tree is a tree in which every node has either 0 or 2 children. In such a tree, if the number of internal nodes is I, then the number of leaves (L) is always L = I + 1. This is a fundamental property derived from the structure of full binary trees.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of leaves L are?\nChoices:\na) l = 2i\nb) l = i + 1\nc) l = i - 1\nd) l = 2i - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a singly linked list, accessing the k-th element from the beginning can be done in O(1) time if a pointer to the head is maintained and traversed. However, finding the k-th element from the end generally requires a full traversal of the list or use of two pointers, making the time complexity O(n).",
        "target_text": "Question: What are the time complexities of finding 8th element from beginning and 8th element from end in a singly linked list? Let n be the number of nodes in linked list, you may assume that n > 8.\nChoices:\na) o(n) and o(n)\nb) o(1) and o(1)\nc) o(n) and o(1)\nd) o(1) and o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: B-trees and B+ trees are used in databases and file systems to maintain sorted data and allow searches, insertions, and deletions in logarithmic time. B+ trees usually have a greater fanout than B-trees and support simpler deletion. However, B+ trees do not necessarily have greater depth than B-trees, making that statement False.",
        "target_text": "Question: Which of the following is false?\nChoices:\na) compared to b-tree, b+ -tree has larger fanout\nb) deletion in b-tree is more complicated than in b+ -tree\nc) b+ -tree has greater depth than corresponding b-tree\nd) both b-tree and b+ -tree have same search and insertion efficiencies\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA-trees are a form of balanced binary search trees that simplify the balancing operations of red-black trees. The tree structure is designed to consider only two shapes when performing rotations: skew and split, which simplifies rebalancing. Thus, only 2 structural shapes need to be handled.",
        "target_text": "Question: How many different shapes does maintenance of AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix tree is a specialized data structure that allows efficient operations on substrings of a string, such as pattern matching, longest repeated substring, or finding substrings in linear time. This makes it ideal for fast string operations.",
        "target_text": "Question: Which tree allows fast implementation of string operation?\nChoices:\na) rope tree\nb) suffix tree\nc) tango tree\nd) top tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Separate chaining is a method used in hashing to handle collisions by maintaining a linked list of all elements that hash to the same index. Although effective in managing collisions, this technique requires additional memory due to the use of pointers and linked lists.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining using linked lists?\nChoices:\na) it requires many pointers\nb) it requires linked lists\nc) it uses array\nd) it does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An edge cluster in graph theory typically refers to a grouping of edges that are densely connected or form a small subgraph. If an edge cluster is defined as a minimal group, it usually starts with a single edge connecting two vertices.",
        "target_text": "Question: How many edges are present in edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Cartesian tree is a binary tree derived from a sequence of values where the in-order traversal yields the original sequence and each node follows heap property. It is not height-balanced, and if the input values are distinct, the Cartesian tree is uniquely determined.",
        "target_text": "Question: Which of the below statements are true?\ni. cartesian tree is not a height balanced tree\nii. cartesian tree of a sequence of unique numbers can be uniquely generated\nChoices:\na) both statements are true\nb) only i. is true\nc) only ii. is true\nd) both are false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, the Stack class from java.util throws an EmptyStackException if a pop operation is attempted on an empty stack. This exception is a subclass of RuntimeException and is thrown at runtime.",
        "target_text": "Question: What happens when you pop from an empty stack while implementing using the stack adt in java?\nChoices:\na) undefined error\nb) compiler displays a warning\nc) emptystackexception is thrown\nd) nostackexception is thrown\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2-3 tree is a balanced search tree in which every internal node has either two or three children. The height of a 2-3 tree with n elements lies between log base 3 of (n+1) and log base 2 of (n+1), ensuring logarithmic search time.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log3(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse array is a data structure that efficiently stores and processes arrays with a large number of zero or default values. Instead of allocating space for every element, it stores only non-zero values and their positions, making it memory-efficient compared to a naive array.",
        "target_text": "Question: What is the difference between a normal (naive) array and a sparse array?\nChoices:\na) sparse array can hold more elements than a normal array\nb) sparse array is memory efficient\nc) sparse array is dynamic\nd) a naive array is more efficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The trace of a matrix is defined as the sum of its diagonal elements from the top-left to the bottom-right. This is commonly calculated by iterating over the matrix where row and column indices are equal (i == j).",
        "target_text": "Question: What does the following piece of code do?\nfor(int i = 0; i < row; i++)\n{ \n for(int j = 0; j < column; j++)\n {\n if(i == j)\n sum = sum + (array[i][j]);\n }\n}\nSystem.out.println(sum);\nChoices:\na) normal of a matrix\nb) trace of a matrix\nc) square of a matrix\nd) transpose of a matrix\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In separate chaining hashing, collisions are resolved using linked lists. The load factor is defined as the number of elements divided by the number of buckets. A load factor of 1 is typically optimal, meaning the number of elements is equal to the number of buckets.",
        "target_text": "Question: What should be the load factor for separate chaining hashing?\nChoices:\na) 0.5\nb) 1\nc) 1.5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Rotating an array by k positions involves moving the elements such that each element shifts by k places. For example, rotating [1, 2, 3, 4, 5] by 2 positions to the left results in [3, 4, 5, 1, 2].",
        "target_text": "Question: What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?\nChoices:\na) 2, 1, 3, 4, 5\nb) 3, 4, 5, 1, 2\nc) 4, 5, 1, 2, 3\nd) 1, 2, 3, 5, 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Universal hashing is a method where the hash function is chosen at random from a family of functions. This randomization provides good average-case performance and protects against worst-case scenarios caused by poor hash function choices.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) hashing by division\nb) hashing by multiplication\nc) universal hashing\nd) open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A doubly linked list allows traversal in both forward and backward directions using two pointers per node. While more flexible, it requires extra space and pointer handling, making it more complex to implement than a singly linked list.",
        "target_text": "Question: Which of the following is false about a doubly linked list?\nChoices:\na) we can navigate in both the directions\nb) it requires more space than a singly linked list\nc) the insertion and deletion of a node take a bit longer\nd) implementing a doubly linked list is easier than singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a Directed Acyclic Graph (DAG), the shortest paths from a single source can be computed efficiently using topological sorting. Once the vertices are sorted, the shortest paths can be calculated in linear time with respect to the number of vertices and edges.",
        "target_text": "Question: Which of the following algorithms can be used to efficiently calculate single source shortest paths in a directed acyclic graph?\nChoices:\na) dijkstra\nb) bellman-ford\nc) topological sort\nd) strongly connected component\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Many recursive algorithms can be rewritten in a non-recursive way using an explicit stack. This is common when converting recursive implementations to iterative versions for better memory control or performance.",
        "target_text": "Question: What data structure would you most likely see in non-recursive implementation of a recursive algorithm?\nChoices:\na) stack\nb) linked list\nc) tree\nd) queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the linked list implementation of a queue, the rear pointer is updated when a new node is inserted. The front pointer remains unchanged unless the queue is empty before insertion.",
        "target_text": "Question: In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) only front pointer\nb) only rear pointer\nc) both front and rear pointer\nd) no pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A circular queue is a linear data structure in which the last position is connected back to the first to make a circle. It is also known as a ring buffer and is used in buffering and scheduling.",
        "target_text": "Question: Circular Queue is also known as __________\nChoices:\na) ring buffer\nb) square buffer\nc) rectangle buffer\nd) curve buffer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a Last-In-First-Out (LIFO) data structure, meaning the last element pushed onto the stack is the first one to be popped off. So if A, B, C, and D are pushed in that order, the removal order will be D, C, B, A.",
        "target_text": "Question: If the elements 'A', 'B', 'C' and 'D' are placed in a stack and are deleted one at a time, what is the order of removal?\nChoices:\na) abcd\nb) dcba\nc) dcab\nd) abdc\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary search tree (BST), the left child has a value less than its parent, but in general binary trees this condition may not hold. Thus, the statement only applies to BSTs, not to all trees.",
        "target_text": "Question: Left child of parent node has value lesser than the parent node.\nChoices:\na) true\nb) false\nc) only in binary search trees\nd) only in heaps\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a max-heap, the largest key is always located at the root node because each parent must be greater than or equal to its children. This structure supports efficient maximum retrieval in constant time.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) leaf node\nb) first node of left sub tree\nc) root node\nd) first node of right sub tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Top Tree data structure is used to dynamically maintain information in trees. It relies on the divide and conquer paradigm by breaking trees into clusters and solving problems in a recursive fashion.",
        "target_text": "Question: Which algorithm is used in the top tree data structure?\nChoices:\na) divide and conquer\nb) greedy\nc) backtracking\nd) branch\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A full binary tree is a binary tree in which every node has either 0 or 2 children. In such trees, the number of total nodes is given by the formula 2n - 1, where n is the number of leaves.",
        "target_text": "Question: A full binary tree with n leaves contains __________.\nChoices:\na) n nodes\nb) log n2 nodes\nc) 2n - 1 nodes\nd) 2n nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In algorithms that use stacks (e.g., expression evaluation, syntax checking), it is expected that the stack is empty at the end if all operations are properly matched. If the stack is not empty, it indicates an error such as unbalanced parentheses.",
        "target_text": "Question: An error is reported when the stack is not empty at the end.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An Inverter Graph is a type of Directed Acyclic Graph (DAG), used in applications like digital logic and dataflow modeling where the graph represents dependencies that must not form cycles.",
        "target_text": "Question: An Inverter Graph is a type of __________\nChoices:\na) multigraph\nb) cyclic graph\nc) directed acyclic graph\nd) directed acyclic word graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists are dynamic data structures ideal for situations where data sizes change frequently. They allow for efficient insertion and deletion operations, making them well-suited for structures that frequently grow and shrink.",
        "target_text": "Question: Linked lists are best suited __________\nChoices:\na) for relatively permanent collections of data.\nb) for the size of the structure and the data in the structure are constantly changing.\nc) data structure\nd) for none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In linked list implementation of a queue, available nodes are often managed using a separate free list called the AVAIL list. When inserting a new node, one is taken from this AVAIL list and linked into the queue.",
        "target_text": "Question: In case of insertion into a linked queue, a node borrowed from the __________ list is inserted in the queue.\nChoices:\na) avail\nb) front\nc) rear\nd) null\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A pseudograph is a graph that allows both multiple edges between nodes and loops (edges that connect a vertex to itself). In an adjacency matrix, loops are indicated by non-zero entries along the diagonal.",
        "target_text": "Question: Given Adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0} {0,1}}\nii) {{0,1} {1,0}}\niii) {{0,0,1} {0,1,0} {1,0,0}}\nChoices:\na) only i\nb) ii and iii\nc) i and iii\nd) i, ii, and iii\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a decision tree that sorts n elements, the height of the tree corresponds to the minimum number of comparisons needed in the worst case. Since at least n - 1 comparisons are required, the height is in Ω(n).",
        "target_text": "Question: Any decision tree that sorts n elements has height\nChoices:\na) Ω(n)\nb) Ω(log n)\nc) Ω(n log n)\nd) Ω(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hypergraph, an edge (called a hyperedge) can connect any number of vertices. The degree of a vertex is the number of hyperedges it belongs to. The degree sequence is the list of vertex degrees sorted in non-increasing order.",
        "target_text": "Question: What is the degree sequence of the given HyperGraph, in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3,2,1,1,1,1\nb) 3,2,2,2,1,1\nc) 3,2,2,2,2,1\nd) 3,2,2,1,1,1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Topological sorting of a Directed Acyclic Graph (DAG) involves ordering its vertices such that for every directed edge u -> v, u appears before v. It can be done in linear time using Depth First Search (DFS) or Kahn's algorithm.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) cubic\nb) quadratic\nc) linear\nd) logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of distinct binary search trees (BSTs) that can be formed with n distinct keys is given by the nth Catalan number. For 4 keys, the number is C(4) = 14.",
        "target_text": "Question: How many distinct binary search trees can be created out of 4 distinct keys?\nChoices:\na) 4\nb) 14\nc) 24\nd) 42\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A priority queue is a special type of queue where each element has a priority. Elements with higher priority are dequeued before those with lower priority. Priority queues can be implemented as ascending or descending order queues depending on whether the highest or lowest value has the highest priority.",
        "target_text": "Question: Which of the following is the type of priority queue?\nChoices:\na) ascending order priority queue\nb) descending order priority queue\nc) deque\nd) both a and b\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary tree is a binary search tree (BST) if an in-order traversal of the tree results in a sorted (non-decreasing) sequence of values. This property helps distinguish BSTs from other binary trees.",
        "target_text": "Question: One can determine whether a binary tree is a binary search tree by traversing it in __________.\nChoices:\na) pre-order\nb) in-order\nc) post-order\nd) any of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: DNA sequence alignment is commonly solved using dynamic programming algorithms like Needleman-Wunsch or Smith-Waterman, not traditional string-matching algorithms like Rabin-Karp or KMP, which are better suited for exact matching rather than similarity-based alignment.",
        "target_text": "Question: In DNA sequence alignment, which string-matching algorithm is commonly used to identify similarities between two DNA sequences efficiently?\nChoices:\na) rabin-karp algorithm\nb) knuth-morris-pratt algorithm\nc) z function\nd) none of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays allow fast random access due to contiguous memory allocation and have better cache locality. Linked lists allow faster insertion and deletion but lack random access and generally have higher access time due to pointer traversal.",
        "target_text": "Question: Which of the following points is/are not true about linked list data structure when it is compared with an array?\nChoices:\na) arrays have better cache locality that can make them better in terms of performance\nb) it is easy to insert and delete elements in linked list\nc) random access is not allowed in a typical implementation of linked lists\nd) access of elements in linked list takes less time than compared to arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A skip list is a data structure that allows fast search within an ordered sequence of elements. It uses multiple layers of linked lists to achieve average-case logarithmic time complexity for search, insertion, and deletion operations.",
        "target_text": "Question: What is a skip list?\nChoices:\na) a linked list with size value in nodes\nb) a linked list that allows faster search within an ordered sequence\nc) a linked list that allows slower search within an ordered sequence\nd) a tree which is in the form of linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are data structures used to store multiple elements of the same type in contiguous memory. They support indexing, which makes access efficient, and are preferred when working with homogeneous data.",
        "target_text": "Question: What are the advantages of arrays?\nChoices:\na) objects of mixed data types can be stored\nb) elements in an array cannot be sorted\nc) index of first element of an array is 1\nd) easier to store elements of same data type\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary search tree (BST), the maximum element is always found by traversing the rightmost path starting from the root, since all right children have greater values.",
        "target_text": "Question: How will you find the maximum element in a binary search tree?\nChoices:\na) \npublic void max(Tree root)\n{\n while(root.left() != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nb)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.left();\n }\n System.out.println(root.data());\n}\nc)\npublic void max(Tree root)\n{\n while(root.right() != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nd)\npublic void max(Tree root)\n{\n while(root != null)\n {\n  root = root.right();\n }\n System.out.println(root.data());\n}\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-Black trees and AVL trees are both self-balancing binary search trees. Red-Black trees are less rigidly balanced but require fewer rotations. AVL trees store balance factors in each node, which can increase space and time complexity for updates.",
        "target_text": "Question: Why prefer red-black trees over AVL trees?\nChoices:\na) because red-black is more rigidly balanced\nb) avl tree stores balance factor in every node which costs space\nc) avl tree fails at scale\nd) red-black is more efficient\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If the weights of all edges in a graph are multiplied by a positive constant, the relative order of path weights remains the same. Therefore, the shortest path remains unchanged; only the total cost scales accordingly.",
        "target_text": "Question: Is the following statement valid about shortest paths? Given a graph, suppose we have calculated shortest path from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains same, only the total weight of path changes.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A graph can be drawn in many ways, with different visual representations based on layout, orientation, and position of nodes and edges. However, the structure (connectivity) remains the same. Hence, a graph does not have a unique drawing representation.",
        "target_text": "Question: All graphs have unique representation on paper.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash table is a data structure that allows efficient insertion, deletion, and search of data. It maps keys to values using a hash function and is commonly used in associative arrays and databases.",
        "target_text": "Question: Which of the following operations are done in a hash table?\nChoices:\na) Insert only\nb) Search only\nc) Insert and search\nd) Replace\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Java, the `BitSet` class from the `java.util` package can be used to represent a bit array, where individual bits can be set, cleared, and queried efficiently.",
        "target_text": "Question: Which class in Java can be used to represent bit array?\nChoices:\na) bitset\nb) bitvector\nc) bitarray\nd) bitstream\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In formal language theory, each parse tree corresponds to a leftmost and a rightmost derivation. Therefore, the number of parse trees equals the number of leftmost and rightmost derivation trees.",
        "target_text": "Question: Which of the following is correct with respect to a parse tree for a given grammar?\nChoices:\na) n parse tree = n leftmost derivation tree = n rightmost derivation tree\nb) n parse tree = n leftmost derivation tree\nc) n parse tree = n rightmost derivation tree\nd) n parse tree = n non-terminals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A d-heap is a generalization of a binary heap where each node can have d children. Operations like insert, delete, and create can be performed efficiently. However, finding an arbitrary element (not the min/max) is not directly supported.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A palindrome is a string that reads the same backward as forward. Examples include 'madam' and 'racecar'. This property can be checked by comparing the string with its reversed version.",
        "target_text": "Question: What is a palindromic string?\nChoices:\na) the string of length 0\nb) the string having a special character\nc) the string having an uppercase letter\nd) the string whose reversed string is equal to the original string\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dijkstra and Bellman-Ford algorithms both compute the shortest path in weighted graphs with positive weights. Although the actual path may differ, the total weight of the shortest path from a source to a destination remains the same.",
        "target_text": "Question: Is the following statement valid?\nGiven a graph where all edges have positive weights, the shortest paths produced by Dijkstra and Bellman-Ford algorithms may be different, but the path weight would always be the same.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a doubly linked list, each node has two pointers--`prev` and `next`. When inserting a node, four pointers are typically updated: the new node's two pointers and one each from its neighboring nodes. Thus, the number of affected pointers is 4.",
        "target_text": "Question: In a doubly linked list, the number of pointers affected for an insertion operation will be:\nChoices:\na) 5\nb) 0\nc) 1\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The provided code inserts a new node at the end of a singly linked list by traversing from the head to the last node and updating the last node's `next` pointer to point to the new node.",
        "target_text": "Question: What is the functionality of the following code?\npublic void function(Node node)\n{\n if(size == 0)\n  head = node;\n else\n {\n  Node temp, cur;\n  for(cur = head; (temp = cur.getNext()) != null; cur = temp);\n  cur.setNext(node);\n }\n size++;\n}\nChoices:\na) Inserting a node at the beginning of the list\nb) Deleting a node at the beginning of the list\nc) Inserting a node at the end of the list\nd) Deleting a node at the end of the list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Splay trees are a type of self-adjusting binary search tree where recently accessed elements are moved to the root. This provides better performance for sequences of non-uniform access and simplifies implementation compared to more strictly balanced trees.",
        "target_text": "Question: Why prefer splay trees?\nChoices:\na) easier to program\nb) space efficiency\nc) easier to program and faster access to recently accessed items\nd) quick searching\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a K-ary tree, the height is defined as the number of edges from the root to the deepest leaf. If the tree has only the root node, the height is 0 since there are no edges.",
        "target_text": "Question: What is the height of a K-ary tree having only a root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Transposing a matrix involves swapping elements across its diagonal, i.e., converting row elements to column elements and vice versa. The given code snippet does this by swapping A[i][j] with A[j][i] for all i < j.",
        "target_text": "Question: Let A be a matrix of size n x n. Consider the following program. What is the expected output?\nvoid fun(int A[][N])\n{\n    for (int i = 0; i < N; i++)\n        for (int j = i + 1; j < N; j++)\n            swap(A[i][j], A[j][i]);\n}\nChoices:\na) matrix a\nb) diagonal of matrix a\nc) transpose of matrix a\nd) none\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used in digital signature systems, not to encrypt or decrypt the signature directly, but to generate a fixed-size hash of the message that is encrypted with a private key. This allows verification using the corresponding public key.",
        "target_text": "Question: Hashing can be used to encrypt and decrypt digital signatures.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a B-tree, the number of disk accesses required for a search operation depends on the height of the tree. The height h is logarithmic in the number of keys n with respect to the minimum degree t, giving a complexity of θ(logₜ n).",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) θ(logₙ h * t)\nb) θ(logₜ n * h)\nc) θ(logₕ n)\nd) θ(logₜ n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a binary search tree (based on keys) that also maintains heap property based on priority. The root node always has the highest priority because it must be greater than its children with respect to heap ordering.",
        "target_text": "Question: Which node has the lowest priority in a treap?\nChoices:\na) Root node\nb) Leaf node\nc) Null node\nd) Centre node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Operator precedence determines the order in which operators are evaluated in expressions. Among the given options, the bitwise NOT '~' and XOR '^' have higher precedence than arithmetic operators like '+' and '*'.",
        "target_text": "Question: Which of these operators have the highest order of precedence?\nChoices:\na) '(' and ')'\nb) '*' and '/'\nc) '~' and '^'\nd) '+' and '-'\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix array is a sorted array of all suffixes of a string. If constructed using comparison-based sorting algorithms like merge sort, it will take O(n^2 log n) time due to repeated comparisons of strings of length up to n.",
        "target_text": "Question: If a comparison-based sorting algorithm is used to construct the suffix array, what will be the time required to construct the suffix array?\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n^2 log n)\nd) O(n^3)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When simulating a stack using a priority queue, to ensure LIFO behavior, elements inserted later must have higher priority. This is achieved by assigning strictly decreasing keys to newer elements so that they are removed first using DELETEMIN.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K), where K is an integer key chosen by the implementation. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys chosen are in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2-d tree (or kd-tree in 2 dimensions) is an extension of a binary search tree where each level alternates the key used for comparison (e.g., x and y coordinates). Insertion follows similar logic as a binary search tree.",
        "target_text": "Question: Insertion into a 2-d tree is a trivial extension of insertion into a binary search tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix expressions (also known as Polish notation) are evaluated from right to left. The expression +-9 2 7 is interpreted as: subtract 2 from 7, then add -9 to the result: -9 + (2 - 7) = -9 + (-5) = -14.",
        "target_text": "Question: Using the evaluation of prefix algorithm, evaluate +-9 2 7.\nChoices:\na) 10\nb) 4\nc) 17\nd) -14\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists differ from arrays in that they allow dynamic resizing and efficient insertions/deletions, but they lack random access. Arrays, on the other hand, offer better cache performance and allow direct element access by index.",
        "target_text": "Question: Which of the following points is/are True about Linked List data structure when it is compared with array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance.\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) The size of array has to be pre-decided, linked lists can change their size any time\ne) All of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In binomial heaps or Fibonacci heaps, merging two trees of order k results in a single tree of order k+1, which has a height increased by one due to the new root-child relationship.",
        "target_text": "Question: What is the order of the resultant heap after merging two trees of order k?\nChoices:\na) 2*k\nb) k+1\nc) k*k\nd) k+logk\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash function satisfies the simple uniform hashing condition if each key is equally likely to be hashed to any of the slots. The function h(k) = floor(km), where m is a constant and 0 < m < 1, is an example that attempts to spread keys uniformly.",
        "target_text": "Question: Which hash function satisfies the condition of simple uniform hashing?\nChoices:\na) h(k) = lowerbound(km)\nb) h(k) = upperbound(mk)\nc) h(k) = lowerbound(k)\nd) h(k) = upperbound(k)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When parsing expressions using a stack to match brackets or parentheses, failure to find a matching closing or opening bracket indicates an imbalance, which is treated as an error in the parser or compiler.",
        "target_text": "Question: When the corresponding end bracket/braces/parentheses is not found, what happens?\nChoices:\na) The stack is popped\nb) Ignore the parentheses\nc) An error is reported\nd) It is treated as an exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A good hashing function distributes keys uniformly across the hash table, avoiding clustering caused by predictable patterns. Therefore, a good hash should be independent of any patterns in the data.",
        "target_text": "Question: A good hash approach is to derive the hash value that is expected to be dependent on any patterns that might exist in the data.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The provided C++ code reverses the first `k` elements in an array if `k <= n`. It swaps the values symmetrically within the first `k` elements. For the input {1, 2, 3, 4, 5} and k = 3, it produces {3, 2, 1, 4, 5}.",
        "target_text": "Question: What will be the output of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\nChoices:\na) 3 2 1 4 5\nb) 5 4 3 2 1\nc) 1 2 5 4 3\nd) error\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An AVL tree is a self-balancing binary search tree where the height is logarithmic in the number of nodes. The maximum height for `p` nodes is O(log p), ensuring fast search, insertion, and deletion.",
        "target_text": "Question: What is the maximum height of an AVL tree with p nodes?\nChoices:\na) p\nb) log(p)\nc) log(p)/2\nd) p/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a normal array, all elements including nulls are counted in the size. In contrast, a sparse array efficiently stores only non-null or non-zero elements. So, the size is 6 in the normal case and 2 in the sparse representation.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10};\nWhat would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an undirected graph, an adjacency list uses O(V + E) space, where V is the number of vertices and E is the number of edges. This is more space-efficient than adjacency matrices for sparse graphs.",
        "target_text": "Question: Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is __________\nChoices:\na) O(E)\nb) O(V*V)\nc) O(E + V)\nd) O(V)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To check if an expression has balanced parentheses, a stack is used. Each time an opening symbol is encountered, it is pushed to the stack. A closing symbol pops the top element. If the stack is empty at the end, the expression is balanced.",
        "target_text": "Question: The data structure required to check whether an expression contains a balanced parenthesis is?\nChoices:\na) Queue\nb) Stack\nc) Tree\nd) Array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap is a complete binary tree that satisfies the heap property. In a max-heap, the parent node is greater than or equal to its children. In a min-heap, the parent is less than or equal to its children.",
        "target_text": "Question: Heap exhibits the property of a binary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix (or Reverse Polish Notation) expressions do not require parentheses and can be evaluated from left to right using a stack, making them easier and faster for computers to process than infix expressions.",
        "target_text": "Question: It is easier for a computer to process a postfix expression than an infix expression.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A XOR linked list is a memory-efficient version of a doubly linked list where each node stores the XOR of the memory addresses of the previous and next nodes. This allows traversal in both directions using XOR operations.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) Every node stores the XOR of addresses of previous and next nodes\nb) Actual memory address of the next node\nc) Every node stores the XOR of addresses of previous and next two nodes\nd) Every node stores XOR of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In binary tree rotations, a right rotation repositions nodes to maintain balance. The given pseudocode updates pointers to rotate a node to the right, making its left child the new root of the subtree.",
        "target_text": "Question: What output does the below pseudo code produce?\nTree_node function(Tree_node x)\n{\n    Tree_node y = x.left;\n    x.left = y.right;\n    y.right = x;\n    return y;\n}\nChoices:\na) Right rotation of subtree\nb) Left rotation of subtree\nc) Zig-zag operation\nd) Zig-zig operation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Prefix notation (Polish notation) places the operator before its operands. For the expression a | b & c, the AND operation is evaluated first, followed by OR, resulting in | a & b c -> |a&bc.",
        "target_text": "Question: What would be the Prefix notation for the given equation?\nChoices:\na) a|&bc\nb) &|abc\nc) |a&bc\nd) ab&|c\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The van Emde Boas (vEB) tree is a tree-based data structure that supports fast predecessor/successor queries. It was invented by Peter van Emde Boas.",
        "target_text": "Question: Who invented the vEB tree, also known as the van Emde Boas Tree?\nChoices:\na) Peter Van Emde Boas\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A weak heap is a variant of the binary heap that is used in the weak heap sort algorithm. It is also known as a relaxed heap due to its weaker structural constraints compared to binary heaps.",
        "target_text": "Question: What is the other name of a weak heap?\nChoices:\na) min-heap\nb) max-heap\nc) relaxed-heap\nd) leonardo heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Common types of queues include ordinary queue (FIFO), circular queue (wrap-around structure), and priority queue (based on priority). A 'single-ended queue' is not a standard type of queue.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) Priority queue\nb) Circular queue\nc) Single-ended queue\nd) Ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In column-major order, the elements of a matrix are stored column by column in memory. For a 3*3 matrix with elements arranged as:\na b c\nd e f\ng h i\nThe order of elements in memory will be: a, d, g, b, e, h, c, f, i -> adgbehcfi.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A max-heap maintains the property that each parent node is greater than or equal to its children. Inserting 1 and then 7 into a heap that has level-order [10, 8, 5, 3, 2] results in a new structure that reorders to preserve the heap property.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. The level-order traversal of the heap after the insertion of the elements is:\nChoices:\na) 10, 8, 5, 7, 2, 1, 3\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A descending priority queue gives higher priority to larger elements. It can be efficiently implemented using a max-heap, where the largest element is always at the root and removed first.",
        "target_text": "Question: A descending priority queue can be implemented using __________\nChoices:\na) Max heap\nb) Min heap\nc) Min-max heap\nd) Trie\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A max-heap ensures that the maximum element is at the root. To build a max-heap from an array, the heapify procedure swaps elements to restore the heap property. The number of swaps required depends on how far elements are from satisfying the property.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is:\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Direct addressing is a technique where data is stored at an index equal to its key. Since it allows direct access without traversal, the search time complexity is O(1).",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing with open addressing, the probe sequence determines which slots to inspect. The sequence often depends on the key (k) and constants (e.g., in quadratic probing), but ultimately the key determines the pattern of probing.",
        "target_text": "Question: On what value does the probe sequence depend?\nChoices:\na) c1\nb) k\nc) c2\nd) m\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a min-heap, the minimum element is always at the root, so FindMin() takes O(1) time. Deleting the minimum involves replacing the root with the last element and re-heapifying, which takes O(log n).",
        "target_text": "Question: The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in a min-heap take __________\nChoices:\na) constant and linear time respectively\nb) constant and linear time respectively\nc) constant and quadratic time respectively\nd) constant and logarithmic time respectively\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C, dynamic memory allocation is performed using `malloc()`. When creating a new node for a linked list, the correct syntax involves using `sizeof(NODE)` and casting the return value to a pointer of the appropriate type.",
        "target_text": "Question: Consider the following definition in C programming language:\nstruct node\n{\n    int data;\n    struct node * next;\n};\ntypedef struct node NODE;\nNODE *ptr;\nWhich of the following C code is used to create a new node?\nChoices:\na) ptr = (NODE*)malloc(sizeof(NODE));\nb) ptr = (NODE*)malloc(NODE);\nc) ptr = (NODE*)malloc(sizeof(NODE*));\nd) ptr = (NODE)malloc(sizeof(NODE));\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If only push and pop operations are allowed, simulating an enqueue operation in an array-based queue (via two stacks) involves moving elements from one stack to another and back. Each move takes time, and multiple moves are required to insert an element.",
        "target_text": "Question: You are on a planet where computational power is slow. You have an array of size 10. You want to enqueue an element using only push and pop operations (each takes 1 second). What is the total time required to perform the enqueue operation?\nChoices:\na) 20\nb) 40\nc) 42\nd) 43\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Based on the birthday paradox, in a hash table of size 20, inserting 10 keys leads to a collision probability exceeding 0.5. This concept illustrates how quickly collisions can occur even in modestly filled hash tables.",
        "target_text": "Question: Consider a hash function that distributes keys uniformly. The hash table size is 20. After hashing how many keys will the probability that any new key collides with an existing one exceed 0.5?\nChoices:\na) 5\nb) 6\nc) 7\nd) 10\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The minimum number of jumps to reach the end of an array depends on the value at each index. If certain sections are blocked by 0 and no forward path exists, it's impossible to reach the end.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) Not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A top tree is a type of data structure used in dynamic trees. If a tree has only a single vertex, there are no edges to break or cluster, hence no valid top trees can be formed.",
        "target_text": "Question: How many top trees are there in a tree with a single vertex?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary heap, the number of nodes at height h in an n-element heap can be calculated using the formula ceil(n / 2^(h+1)). This is derived from the complete binary tree structure of the heap.",
        "target_text": "Question: The number of nodes of height h in any n-element heap is __________.\nChoices:\na) h\nb) 2h\nc) ceil(n/2h)\nd) ceil(n/2^(h+1))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A triply linked list extends a doubly linked list by including a third pointer. This extra pointer, often named `top`, can be used for specialized navigational or hierarchical operations, and it is typically positioned logically as an additional link from the node.",
        "target_text": "Question: Where does a triply linked list contain an extra pointer in comparison to a doubly linked list?\nChoices:\na) top of the node\nb) bottom of the node\nc) before the node\nd) after the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In tree terminology, the height of a node is defined as the number of edges on the longest path from the node to a leaf. The height of a root node in any tree (including ternary trees) is 0 if the node has no children.",
        "target_text": "Question: What is the height of the root node of a ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: MinHash is a probabilistic technique for efficiently estimating the similarity between datasets. It is commonly used in applications like association rule learning, document similarity, and clustering.",
        "target_text": "Question: Is MinHash used as a tool for association rule learning?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tree traversals define the order in which nodes are visited. Level-order traversal, also known as breadth-first traversal, visits nodes level by level from left to right, typically implemented using a queue.",
        "target_text": "Question: Which traversal's pseudo code is written here?\nChoices:\na) level order\nb) pre-order\nc) post-order\nd) in-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Auxiliary trees are temporary or helper trees used during tree operations. The 'join' operation combines two auxiliary trees into one while preserving the properties of the tree structure.",
        "target_text": "Question: Which operation is used to combine two auxiliary trees?\nChoices:\na) join\nb) combinatorial\nc) add\nd) concatenation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure where each element (node) points to the next node using a pointer. This allows dynamic memory allocation and flexible insertion/deletion operations.",
        "target_text": "Question: A linear collection of data elements where the linear node is given by means of a pointer is called __________.\nChoices:\na) linked list\nb) node list\nc) primitive list\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Free lists manage available memory blocks. Allocation strategies like best fit, first fit, and worst fit differ in how memory is chosen. Among these, first fit is generally considered the simplest to implement.",
        "target_text": "Question: What are different ways of implementing free lists and which is simple among them?\nChoices:\na) best fit, first fit, worst fit; first fit is simplest\nb) best fit, first fit, worst fit; best fit is simplest\nc) best fit, first fit, worst fit; worst fit is simplest\nd) first fit, best fit, worst fit; worst fit is simplest\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When two stacks share a single array growing from opposite ends, the condition for stack overflow occurs when their tops are about to collide. That is, when top1 == top2 - 1.",
        "target_text": "Question: A single array A[1..MAXSIZE] is used to implement two stacks growing from opposite ends. If top1 and top2 point to the top elements of each stack and top1 < top2, what is the condition for 'stack full'?\nChoices:\na) (top1 = MAXSIZE/2) and (top2 = MAXSIZE/2+1)\nb) top1 + top2 + 1 = MAXSIZE\nc) (top1 = MAXSIZE/2) or (top2 = MAXSIZE)\nd) top1 = top2 - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary tree is a hierarchical structure in which each node can have at most two children--commonly referred to as the left and right child. This is a defining property of binary trees.",
        "target_text": "Question: What is the maximum number of children that a binary tree node can have?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Fibonacci heaps offer better amortized time complexity for decrease-key and delete operations than other heap types. Although more complex to implement, they are theoretically faster in certain scenarios, such as Dijkstra's algorithm with many decrease-key operations.",
        "target_text": "Question: Out of the following given options, which is the fastest algorithm?\nChoices:\na) fibonacci heap\nb) pairing heap\nc) d-ary heap\nd) binary heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An expression tree is a type of binary tree used to represent expressions. Operands are stored in leaves, and operators are stored in internal nodes. The structure obeys the binary tree property.",
        "target_text": "Question: An expression tree is a kind of?\nChoices:\na) binary search tree\nb) fibonacci tree\nc) binary tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C++, the `delete` operator releases memory allocated by `new`, but it doesn't delete the pointer itself. After the delete operation, the pointer still exists and should be set to `nullptr` to avoid dangling pointer issues.",
        "target_text": "Question: Given that the line `delete newPtr;` just executed, what can you conclude?\nChoices:\na) the memory referenced by newPtr is released only if it is needed by the system.\nb) the pointer newPtr is of type void *.\nc) the pointer newPtr only exists if there was an error freeing the memory.\nd) the pointer newPtr still exists.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack can be implemented using two queues. One queue is used to store the elements and the second helps simulate the Last-In-First-Out (LIFO) behavior by rearranging the elements during pop or push operations.",
        "target_text": "Question: To implement a stack using queues (with only enqueue and dequeue operations), how many queues will you need?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To convert a postfix expression to prefix, reverse the postfix, swap operators/operands accordingly, and apply precedence rules. For AB+CD-* the prefix form is *+AB-CD.",
        "target_text": "Question: The prefix expression of the postfix expression AB+CD-* is __________\nChoices:\na) (A+B)*(C-D)\nb) +ab*-cd\nc) a+*bcd-\nd) *+ab-cd\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Balancing symbols such as parentheses, braces, or brackets is a common problem in compilers and expression parsing. A stack is the ideal data structure for this task due to its LIFO behavior, allowing correct matching of opening and closing symbols.",
        "target_text": "Question: Which is the most appropriate data structure for applying the balancing of symbols algorithm?\nChoices:\na) stack\nb) queue\nc) tree\nd) graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix array is a sorted array of all suffixes of a string. Compared to suffix trees, suffix arrays are more space efficient as they use linear space and simpler structures, making them preferable for large-scale string processing.",
        "target_text": "Question: Suffix array is space efficient compared to the suffix tree.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A graph is bipartite if its vertices can be divided into two disjoint sets such that no edge connects vertices within the same set. While all paths are bipartite, not all cyclic graphs are--especially those with an odd number of vertices in the cycle.",
        "target_text": "Question: All paths and cyclic graphs are bipartite graphs.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays grow and shrink automatically based on their usage. To avoid wasting space, if the size of the array drops below a certain threshold (commonly 30% of the allocated size), the array is deallocated or shrunk.",
        "target_text": "Question: The size of the dynamic array is deallocated if the array size is less than __________% of the backend physical size.\nChoices:\na) 30\nb) 40\nc) 10\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binomial heap, the decrease-key operation adjusts the value of a node and may require restructuring the heap to maintain the heap property. This process takes O(log n) time because the heap is organized as a collection of binomial trees.",
        "target_text": "Question: Time taken in decreasing the node value in a binomial heap is:\nChoices:\na) o(n)\nb) o(1)\nc) o(log n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The evaluation of prefix expressions (Polish notation) is guided by operator precedence and associativity. This determines the correct order in which operands and operators are processed during computation.",
        "target_text": "Question: What determines the order of evaluation of a prefix expression?\nChoices:\na) precedence and associativity\nb) precedence only\nc) associativity only\nd) depends on the parser\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting an infix expression to postfix (Reverse Polish Notation) involves using a stack to manage operators based on their precedence and associativity, ensuring correct evaluation order.",
        "target_text": "Question: One can convert an infix expression to a postfix expression using a __________.\nChoices:\na) stack\nb) queue\nc) deque\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear probing is a collision resolution technique in hashing. It is widely used in applications such as database indexing, cache management, and compiler symbol tables where fast lookups and space efficiency are needed.",
        "target_text": "Question: What are the applications of linear probing?\nChoices:\na) databases\nb) caching\nc) compiler design\nd) all of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A complete binary tree of depth `d` has (2^d - 1) nodes and (2^{d+1} - 1) pointers in total. The number of unused (null) pointers corresponds to the number of leaves, which in a complete tree is (2^d). For depth 5, that is 32 leaves, each having 2 null children pointers, so 16 unused pointers.",
        "target_text": "Question: The number of unused pointers in a complete binary tree of depth 5 is:\nChoices:\na) 4\nb) 8\nc) 16\nd) 32\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack follows the Last-In-First-Out (LIFO) principle, where the last item added is the first to be removed. A real-world analogy is a stack of chairs or plates, where the topmost item is accessed first.",
        "target_text": "Question: Which of the following real-world scenarios would you associate with a stack data structure?\nChoices:\na) piling up of chairs one above the other\nb) people standing in a line to be serviced at a counter\nc) offer services based on the priority of the customer\nd) tatkal ticket booking in irctc\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Universal hashing refers to a class of hash functions that minimize the probability of collision by choosing a function at random from a family of hash functions. It offers better average performance than traditional methods like division or multiplication.",
        "target_text": "Question: Which hashing scheme provides good performance?\nChoices:\na) open addressing\nb) universal hashing\nc) hashing by division\nd) hashing by multiplication\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Deleting a linked list involves traversing it and deallocating memory for each node. This can be done in-place without needing additional memory, making the space complexity O(1).",
        "target_text": "Question: What is the space complexity for deleting a linked list?\nChoices:\na) o(1)\nb) o(n)\nc) either o(1) or o(n)\nd) o(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In nearest neighbor search using kd-trees, three primary concepts are crucial: (1) pruning using bounding boxes, (2) recursive traversal, and (3) backtracking to search the opposite subtree if necessary. These techniques optimize search in multidimensional spaces.",
        "target_text": "Question: How many prime concepts are available in nearest neighbor search in a kd tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a 2-dimensional kd-tree, the root node is typically chosen based on the value of the first dimension. Often, to break ties or for simplicity, the first node inserted (or an arbitrary odd-positioned node) is used as the root.",
        "target_text": "Question: In a two-dimensional search tree, the root is arbitrarily chosen to be?\nChoices:\na) even\nb) odd\nc) depends on subtrees\nd) random node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists support dynamic memory usage and allow insertions and deletions at any position. This is a major advantage over arrays, which require shifting elements.",
        "target_text": "Question: In general, linked lists allow:\nChoices:\na) insertions and removals anywhere.\nb) insertions and removals only at one end.\nc) insertions at the back and removals from the front.\nd) none of the above.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary min-heap, the maximum element resides in the leaf nodes. For a complete binary tree with 1023 elements, 512 nodes are leaves. Finding the maximum among them requires 511 comparisons.",
        "target_text": "Question: Consider the array representation of a binary min-heap containing 1023 elements. The minimum number of comparisons required to find the maximum in the heap is:\nChoices:\na) 510\nb) 511\nc) 512\nd) 255\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In disjoint set union (union-find), rank is used to limit the depth of trees. A node with rank r must have at least 2^r descendants. This ensures logarithmic time performance with union by rank.",
        "target_text": "Question: When executing a sequence of Unions, a node of rank r must have at least 2^r descendants.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an undirected simple graph with (n) vertices, each pair of distinct vertices can have at most one edge, resulting in (n(n-1)/2) edges. In a directed graph, each pair can have two directed edges (one in each direction), leading to (n(n-1)) possible non-zero entries in the adjacency matrix.",
        "target_text": "Question: What is the maximum number of possible non-zero values in an adjacency matrix of a simple graph with n vertices?\nChoices:\na) (n*(n-1))/2\nb) (n*(n+1))/2\nc) n*(n-1)\nd) n*(n+1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To convert a binary tree into its mirror image, you recursively swap the left and right subtrees. This is typically performed during a pre-order traversal, where the current node is processed before its children.",
        "target_text": "Question: A binary tree can be converted into its mirror image by traversing it in __________.\nChoices:\na) in-order\nb) pre-order\nc) post-order\nd) any order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Level-order traversal is a breadth-first traversal of a tree. It visits nodes level by level and is implemented using a queue to process nodes in FIFO order.",
        "target_text": "Question: Level order traversal of a tree is formed with the help of:\nChoices:\na) breadth-first search\nb) depth-first search\nc) dijkstra's algorithm\nd) prim's algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Parallel arrays store related data across multiple arrays using a shared index. While useful in languages that don't support records, they can be inefficient for insertion and deletion due to the need to maintain synchronization across arrays.",
        "target_text": "Question: Which of the following is a disadvantage of parallel arrays over traditional arrays?\nChoices:\na) when a language does not support records, parallel arrays can be used\nb) increased locality of reference\nc) ideal cache behaviour\nd) insertion and deletion becomes tedious\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The height of a tree node is the number of edges on the longest path to a leaf. In a K-ary tree, the height of the root depends on the total number of levels. For some tree definitions, if the tree has multiple levels and the root is at level 0, then its height may be 3.",
        "target_text": "Question: What is the height of the root node of a K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given recursive function prints the data of a linked list node, then skips the next node (if it exists), and calls itself recursively. After returning from recursion, it prints the same node again. This produces a symmetric output from first, third, fifth, then in reverse.",
        "target_text": "Question: What is the output of the following function if start is pointing to the first node of the linked list 1->2->3->4->5->6?\n#include <iostream>\nusing namespace std;\nstruct Node {\n    int data;\n    Node* next;\n    Node() { data = 0; next = nullptr; } \n};\nvoid fun(Node* start) {\n    if (start == nullptr)\n        return;\n    cout << start->data << \"  \";\n    \n    if (start->next != nullptr)\n        fun(start->next->next);\n    cout << start->data << \"  \";\n}\nChoices:\na) 1 4 6 6 4 1\nb) 1 3 5 1 3 5\nc) 1 2 3 5\nd) 1 3 5 5 3 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a minimum spanning tree (MST), the number of edges is always (V - 1). If the weight of each edge in the graph is increased by a constant, the structure of the MST remains the same, and the total weight increases by (V - 1) * constant.",
        "target_text": "Question: Let G be a connected undirected graph with 100 vertices and 300 edges. The weight of a minimum spanning tree of G is 500. When the weight of each edge of G is increased by five, the weight of a minimum spanning tree becomes __________.\nChoices:\na) 1000\nb) 995\nc) 2000\nd) 1995\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In bracket matching algorithms, opening brackets are pushed onto the stack. When a closing bracket is encountered, the top of the stack is popped to check for a match. This maintains balanced structure.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) push it onto the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix tree is a compressed trie of all suffixes of a given string. It is highly useful in text editors and search engines for string matching, substring search, and pattern recognition.",
        "target_text": "Question: Can a suffix tree be used in string problems occurring in a text editor?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Even if all edge weights in a graph are unique, multiple paths can have different weights, but uniqueness of edge weights does not guarantee that the shortest path between any two nodes is unique.",
        "target_text": "Question: Is the following statement valid?\nGiven a weighted graph where weights of all edges are unique, there is always a unique shortest path from a source to destination.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion in an array is a pair of indices (i, j) such that i < j and arr[i] > arr[j]. A sorted array has zero such inversions, indicating it is already ordered.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursion uses a call stack to keep track of function calls. Each recursive call is pushed onto the stack, increasing memory usage. Iteration, in contrast, does not rely on the call stack for execution.",
        "target_text": "Question: Recursion uses more memory space than iteration because __________.\nChoices:\na) it uses stack instead of queue.\nb) every recursive call has to be stored.\nc) both a & b are true.\nd) none of the above.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An almost complete binary tree of depth 'd' is one where all levels are fully filled except possibly the last, and all leaves appear as far left as possible. It includes both the conditions described in options A and B.",
        "target_text": "Question: A binary tree of depth 'd' is an almost complete binary tree if:\nChoices:\na) each leaf in the tree is either at level 'd' or at level 'd-1'\nb) for any node 'n' in the tree with a right descendant at level 'd', all the left descendants of 'n' that are leaves, are also at level 'd'\nc) both (a) & (b)\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Merging two sorted arrays of sizes m and n involves iterating over both arrays once, making comparisons and appending the smaller element. This takes linear time: θ(m + n).",
        "target_text": "Question: Time required to merge two sorted lists of size m and n is __________.\nChoices:\na) θ(m | n)\nb) θ(m + n)\nc) θ(m log n)\nd) θ(n log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A complete undirected graph with 4 vertices has 6 edges. To form a minimum spanning tree (MST), we need (V-1) = 3 edges with the smallest weights. Choosing edges with weights 1, 2, and 3 gives the minimal total weight: 6.",
        "target_text": "Question: Let G be a complete undirected graph on 4 vertices, having 6 edges with weights 1, 2, 3, 4, 5, and 6. What is the weight of the minimum spanning tree of G?\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A self-organizing list is a type of linked list that reorders elements based on access patterns to reduce average lookup time. It's used in symbol tables to improve compiler performance during variable/function lookup.",
        "target_text": "Question: Symbol tables during compilation of a program are efficiently implemented using __________\nChoices:\na) a singly linked list\nb) a doubly linked list\nc) a self-organizing list\nd) an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash tree, also known as a Merkle tree, is a tree in which every leaf node is a hash of a data block and every non-leaf node is a hash of its children. It's widely used in blockchain and data verification.",
        "target_text": "Question: A hash tree is also known as __________\nChoices:\na) merkle tree\nb) t-tree\nc) hash table\nd) bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A memory-efficient doubly linked list uses XOR linking, where each node contains a single pointer that stores the XOR of addresses of the previous and next nodes. This reduces memory usage by eliminating an extra pointer field.",
        "target_text": "Question: How do you calculate the pointer difference in a memory-efficient doubly linked list?\nChoices:\na) head xor tail\nb) pointer to previous node xor pointer to next node\nc) pointer to previous node - pointer to next node\nd) pointer to next node - pointer to previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix (Reverse Polish Notation) expressions are evaluated using a stack. When an operator is encountered, the top two operands are popped, the operation is performed, and the result is pushed back onto the stack.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) push it directly onto the stack\nb) pop 2 operands, evaluate them and push the result onto the stack\nc) pop the entire stack\nd) ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A weight-balanced tree ensures that the weight (or size) of the left and right subtrees of any node n is at least a certain fraction 'a' of the weight of the node itself. This helps in maintaining balanced access times.",
        "target_text": "Question: What is the condition for a tree to be weight balanced, where 'a' is a factor and 'n' is a node?\nChoices:\na) weight[n.left] >= a * weight[n] and weight[n.right] >= a * weight[n]\nb) weight[n.left] >= a * weight[n.right] and weight[n.right] >= a * weight[n]\nc) weight[n.left] >= a * weight[n.left] and weight[n.right] >= a * weight[n]\nd) weight[n] is a non-zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A treap is a randomized binary search tree that also satisfies the heap property using a priority value assigned randomly to each node. It is also known as a Cartesian tree with priorities.",
        "target_text": "Question: A treap is a Cartesian tree with __________\nChoices:\na) additional value, which is a priority value to the key generated randomly\nb) additional value, which is a priority value to the key generated sequentially\nc) additional heap rule\nd) additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary tree, internal nodes are those with at least one child. The number of leaf nodes can be derived using the relation: L = N + 1, where L is leaf nodes and N is internal nodes with two children. Here, 5 nodes have one child, and 10 have two children, giving 11 leaf nodes.",
        "target_text": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is:\nChoices:\na) 10\nb) 11\nc) 12\nd) 15\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The given function is a recursive implementation of the factorial. For input 4, it computes 4 * 3 * 2 * 1 = 24.",
        "target_text": "Question: What value does function mystery return when called with a value of 4?\nint mystery (int number) {\n    if (number <= 1)\n        return 1;\n    else\n        return number * mystery(number - 1);\n}\nChoices:\na) 0\nb) 1\nc) 4\nd) 24\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing an array requires swapping elements from both ends toward the center. For an array with n elements, floor(n/2) swaps are needed. If n is odd, this simplifies to (n-1)/2.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1) / 2\nb) n / 2\nc) (n / 2) - 1\nd) (n + 1) / 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quick sort is a divide-and-conquer algorithm that partitions the array around a pivot element such that elements less than or equal to the pivot come before it, and elements greater come after it. This process is repeated recursively.",
        "target_text": "Question: The sorting technique where the array to be sorted is partitioned again and again in such a way that all elements less than or equal to the partitioning element appear before it and those which are greater appear after it is called __________.\nChoices:\na) merge sort\nb) quick sort\nc) selection sort\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a balanced binary tree, the height is minimized, ensuring logarithmic time complexity for search operations. Lookup in such a tree is efficient, with worst-case time O(log n).",
        "target_text": "Question: A balanced binary tree with n items allows the lookup of an item in __________ worst-case time.\nChoices:\na) o(log n)\nb) o(n log 2)\nc) o(n)\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear probing is a collision resolution technique in open addressing where a key is placed at the next available location in the array. The formula is: H(x) = (key + F(i)) mod table size.",
        "target_text": "Question: What is the hash function used in linear probing?\nChoices:\na) h(x) = key mod table size\nb) h(x) = (key + f(i^2)) mod table size\nc) h(x) = (key + f(i)) mod table size\nd) h(x) = x mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Queues are widely used to simulate limited resource allocation in operating systems and networks, where processes or requests are handled in FIFO order as resources become available.",
        "target_text": "Question: Queues serve a major role in __________\nChoices:\na) simulation of recursion\nb) simulation of arbitrary linked list\nc) simulation of limited resource allocation\nd) simulation of heap sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary tree, the number of nodes with two children is always one less than the number of leaves in a full binary tree. If a tree has 20 leaves, it will have 19 nodes with two children.",
        "target_text": "Question: A binary tree T has 20 leaves. The number of nodes in T having two children is:\nChoices:\na) 18\nb) 19\nc) 17\nd) any number between 10 and 20\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Postfix (or Reverse Polish) notation places operators after operands. For example, the infix expression (A + B) becomes AB+ in postfix notation.",
        "target_text": "Question: In Postfix expressions, the operators come after the operands.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In infix expressions, operators are placed between operands. When parsed recursively, the structure results in a left expression, followed by an operator, then a right expression, which defines infix notation.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) parenthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A rope (or cord) is a data structure used for efficiently manipulating large strings. It is implemented as a binary tree of strings and is also referred to as a cord structure.",
        "target_text": "Question: Which of the following is also known as the Rope data structure?\nChoices:\na) cord\nb) string\nc) array\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of binary trees that can be created with `n` distinct nodes follows the Catalan number sequence. For 3 nodes, the number of structurally unique binary trees is 5.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order?\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a full binary tree, each internal node has exactly two children. The number of leaves L in such a tree is always L = I + 1, where I is the number of internal nodes.",
        "target_text": "Question: In a full binary tree, if the number of internal nodes is I, then the number of leaves L is?\nChoices:\na) l = 2* i\nb) l = i + 1\nc) l = i - 1\nd) l = 2* i - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Accessing the k-th element from the beginning of a singly linked list is O(1) if pointer starts from the head. Finding the k-th element from the end requires a traversal or two-pointer method, making it O(n).",
        "target_text": "Question: What are the time complexities of finding the 8th element from the beginning and 8th element from the end in a singly linked list? Let n > 8.\nChoices:\na) O(n) and O(n)\nb) O(1) and O(1)\nc) O(n) and O(1)\nd) O(1) and O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA-Trees are a type of balanced binary search tree that simulate red-black trees using simpler rules. Maintenance of an AA-tree involves two operations: skew (right rotation) and split (left rotation), making the number of structural shapes to consider just two.",
        "target_text": "Question: How many different shapes does maintenance of an AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix trees are used for efficient implementation of string operations such as substring search, longest common substring, and pattern matching. They allow these operations in linear time with respect to the string length.",
        "target_text": "Question: Which tree allows fast implementation of string operations?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Separate chaining is a method for handling collisions in hash tables using linked lists. Although it effectively resolves collisions, it increases pointer usage and memory overhead.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining with linked lists?\nChoices:\na) it requires many pointers\nb) it requires linked lists\nc) it uses array\nd) it does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An edge cluster in graph theory typically refers to a tightly connected group of nodes. The minimum number of edges to define such a cluster is one--connecting two nodes--hence, the simplest form includes one edge.",
        "target_text": "Question: How many edges are present in an edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2-3 tree is a balanced search tree where each node can have two or three children. The height of a 2-3 tree with `n` elements lies between log₃(n + 1) and log2(n + 1), due to its structure supporting varying degrees.",
        "target_text": "Question: The height of a 2-3 tree with n elements is __________\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log₃(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To compute the sum of values between two nodes L and H in a balanced BST, you skip subtrees that are completely out of range. The query takes time O(log n) for traversal and O(m) for m matching elements. The full time bound may include constants a, b, c, and d to model deeper operations.",
        "target_text": "Question: Suppose we have a balanced binary search tree T holding n numbers. We are given two numbers L and H and wish to sum up all the numbers in T that lie between L and H. Suppose there are m such numbers in T. If the tightest upper bound on the time to compute the sum is O(n^a log^b n + m*c log^d n), the value of a + 10b + 100c + 1000d is __________.\nChoices:\na) 60\nb) 110\nc) 210\nd) 50\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Universal hashing is a technique that chooses the hash function at random from a carefully designed class of functions, offering better average-case performance by minimizing collision probability.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) Hashing by division\nb) Hashing by multiplication\nc) Universal hashing\nd) Open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A doubly linked list contains two pointers per node: one to the next node and one to the previous. This allows bidirectional traversal but also increases space usage and complexity compared to a singly linked list.",
        "target_text": "Question: Which of the following is False about a doubly linked list?\nChoices:\na) We can navigate in both directions\nb) It requires more space than a singly linked list\nc) The insertion and deletion of a node take a bit longer\nd) Implementing a doubly linked list is easier than a singly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Recursive algorithms often use the system call stack to maintain state across function calls. A non-recursive version of such algorithms requires explicit use of a stack data structure to emulate this behavior.",
        "target_text": "Question: What data structure would you most likely see in a non-recursive implementation of a recursive algorithm?\nChoices:\na) Stack\nb) Linked List\nc) Tree\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a queue implemented with a linked list, new elements are added at the rear and removed from the front. During insertion into a non-empty queue, only the `rear` pointer is updated.",
        "target_text": "Question: In a linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\nChoices:\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary search tree (BST), the left child must have a value less than the parent. The given statement implies this is True for all trees, which is incorrect. It only applies to BSTs, not general binary trees.",
        "target_text": "Question: Left child of a parent node has value lesser than the parent node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a max-heap, the heap property ensures that the largest element is always located at the root. This structure allows constant-time access to the maximum element.",
        "target_text": "Question: In a max-heap, the element with the greatest key is always in which node?\nChoices:\na) Leaf node\nb) First node of left subtree\nc) Root node\nd) First node of right subtree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists are dynamic structures ideal for collections where the size may change frequently. They allow efficient insertion and deletion, making them suitable for non-permanent or frequently modified data.",
        "target_text": "Question: Linked lists are best suited __________.\nChoices:\na) For relatively permanent collections of data.\nb) For the size of the structure and the data in the structure are constantly changing.\nc) Data structure\nd) For none of the above situations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A pseudograph is a graph that allows self-loops and multiple edges. An adjacency matrix representing a graph with non-zero diagonal entries indicates the presence of self-loops, identifying a pseudograph.",
        "target_text": "Question: Given adjacency matrices, determine which of them are PseudoGraphs?\ni) {{1,0}, {0,1}}\nii) {{0,1}, {1,0}}\niii) {{0,0,1}, {0,1,0}, {1,0,0}}\nChoices:\na) only i)\nb) ii) and iii)\nc) i) and iii)\nd) i), ii), and iii)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Any decision tree that sorts n elements must have at least n leaves, and therefore a height of at least Ω(n) in the worst case, as each comparison decision leads to a distinct permutation of input.",
        "target_text": "Question: Any decision tree that sorts n elements has height:\nChoices:\na) Ω(n)\nb) Ω(log n)\nc) Ω(n log n)\nd) Ω(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hypergraph, a hyperedge can connect any number of vertices. The degree of a vertex is the number of hyperedges it is part of. The degree sequence is the list of degrees sorted in non-increasing order.",
        "target_text": "Question: What is the degree sequence of the given hypergraph in non-increasing order?\nV = {v1,v2,v3,v4,v5,v6}, E = {{v1,v4,v5}, {v2,v3,v4,v5}, {v2}, {v1}, {v1,v6}}\nChoices:\na) 3, 2, 1, 1, 1, 1\nb) 3, 2, 2, 2, 1, 1\nc) 3, 2, 2, 2, 2, 1\nd) 3, 2, 2, 1, 1, 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Topological sorting of a Directed Acyclic Graph (DAG) can be done in linear time using either Depth First Search (DFS) or Kahn's algorithm. The time complexity is O(V + E), where V is the number of vertices and E is the number of edges.",
        "target_text": "Question: The topological sorting of any DAG can be done in __________ time.\nChoices:\na) Cubic\nb) Quadratic\nc) Linear\nd) Logarithmic\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays provide contiguous memory allocation and support random access. Linked lists allow flexible size but have slower access due to pointer traversal. Access speed is generally better in arrays.",
        "target_text": "Question: Which of the following points is/are not True about the linked list data structure when compared with an array?\nChoices:\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in linked lists\nc) Random access is not allowed in a typical implementation of linked lists\nd) Access of elements in a linked list takes less time than in arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A skip list is a linked structure designed for fast search operations. It uses multiple levels of linked lists with skip pointers to allow logarithmic search time.",
        "target_text": "Question: What is a skip list?\nChoices:\na) A linked list with size value in nodes\nb) A linked list that allows faster search within an ordered sequence\nc) A linked list that allows slower search within an ordered sequence\nd) A tree which is in the form of a linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If all edge weights in a graph are multiplied by a constant, the shortest path remains the same. This is because path weights scale proportionally and the relative path order does not change.",
        "target_text": "Question: Is the following statement valid about shortest paths?\nGiven a graph, suppose we have calculated shortest paths from a source to all other vertices. If we modify the graph such that weights of all edges become double the original weight, then the shortest path remains the same--only the total weight of the path changes.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a d-heap (a generalization of a binary heap where each node has d children), operations like insert, delete, and create are well-defined. However, a generic `find` operation is not directly supported since heaps are not designed for search.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a K-ary tree, the height of a tree with only the root node is 0 because there are no edges from the root to any other node.",
        "target_text": "Question: What is the height of a K-ary tree having only the root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A B-tree of minimum degree t and height h has a search time complexity of θ(logₕ n), where n is the number of keys. This allows for efficient disk-based searching in large datasets.",
        "target_text": "Question: The number of disk page accesses in a B-tree search, where h is height, n is the number of keys, and t is the minimum degree, is:\nChoices:\na) θ(log n h * t)\nb) θ(log t n * h)\nc) θ(log h n)\nd) θ(log t n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA-trees are simplified versions of red-black trees. They maintain balance using right-child-only 'red' links and a level field instead of colors. Coding practices (e.g., recursion) are not structural rules, hence statement 2 is incorrect.",
        "target_text": "Question: Of the following rules that are followed by an AA-tree, which of the following is incorrect?\n1. Only right children can be red\n2. Procedures are coded recursively\n3. Instead of storing colors, the level of a node is stored\n4. There should not be any left children\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To implement a stack using a priority queue, each new item must be assigned a priority that ensures it is removed before earlier items. This is achieved by assigning strictly decreasing keys, so the last pushed item is removed first.",
        "target_text": "Question: A priority queue Q is used to implement a stack S that stores characters. PUSH(C) is implemented as INSERT(Q, C, K) where K is a key. POP is implemented as DELETEMIN(Q). For a sequence of operations, the keys should be in:\nChoices:\na) Non-increasing order\nb) Non-decreasing order\nc) Strictly increasing order\nd) Strictly decreasing order\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Compared to arrays, linked lists provide dynamic memory allocation, efficient insertion/deletion, and do not require a fixed size. However, they lack random access and have lower cache locality.",
        "target_text": "Question: Which of the following points is/are true about the Linked List data structure when compared with arrays?\nChoices:\na) arrays have better cache locality that can make them better in terms of performance\nb) it is easy to insert and delete elements in linked list\nc) random access is not allowed in a typical implementation of linked lists\nd) the size of array has to be pre-decided, linked lists can change their size any time\ne) all of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse array stores only non-null (or non-zero) elements, saving memory. In contrast, a normal array of length 6 stores all elements, including nulls. So its logical size is 6, but the sparse representation only stores 2 meaningful elements.",
        "target_text": "Question: Suppose the contents of an array A are, A = {1, null, null, null, null, 10}; What would be the size of the array considering it as a normal array and a sparse array?\nChoices:\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a XOR linked list, each node stores the XOR of the addresses of the previous and next nodes instead of maintaining two separate pointers. This saves memory in comparison to traditional doubly linked lists.",
        "target_text": "Question: What does a XOR linked list have?\nChoices:\na) every node stores the xor of addresses of previous and next nodes\nb) actual memory address of next node\nc) every node stores the xor of addresses of previous and next two nodes\nd) every node stores xor of 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The van Emde Boas (vEB) tree is a tree data structure that supports fast predecessor, successor, and minimum/maximum queries in O(log log U) time. It was introduced by Peter van Emde Boas.",
        "target_text": "Question: Who invented the vEB tree, also known as Van Emde Boas Tree?\nChoices:\na) peter van emde boas\nb) samuel f. b. morse\nc) friedrich clemens gerke\nd) alexander morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Queues are abstract data structures with several variations including ordinary queue (FIFO), circular queue (with wrap-around logic), and priority queue (based on priority levels). 'Single ended queue' is not a standard classification.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) priority queue\nb) circular queue\nc) single ended queue\nd) ordinary queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In column-major order, elements of a matrix are stored column by column in memory. For the matrix:\n```\na b c\nd e f\ng h i\n```\nthe order will be a, d, g, b, e, h, c, f, i.",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory?\n```\na b c\nd e f\ng h i\n```\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a max-heap, new elements are inserted at the next available leaf position and then 'heapified up' to maintain the heap property. The level-order traversal changes depending on the heapification process.",
        "target_text": "Question: A priority queue is implemented as a max-heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. What is the level-order traversal of the heap after insertion?\nChoices:\na) 10, 8, 7, 3, 2, 1, 5\nb) 10, 8, 7, 2, 3, 1, 5\nc) 10, 8, 7, 1, 2, 3, 5\nd) 10, 8, 7, 5, 3, 2, 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: The minimum number of interchanges needed to convert the array 89, 19, 40, 17, 12, 10, 2, 5, 7, 11, 6, 9, 70 into a heap with the maximum element at the root is\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Associative arrays can be implemented using __________\nChoices:\na) b-tree\nb) a doubly linked list\nc) a single linked list\nd) a self balancing binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In parse trees, every internal node represents a non-terminal and every leaf node represents a terminal.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the other name for a postfix expression?\nChoices:\na) normal polish notation\nb) reverse polish notation\nc) warsaw notation\nd) infix notation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following is the implementation of the ternary tree?\nChoices:\na) avl tree\nb) ternary heap\nc) hash table\nd) dictionary\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the expected error for estimating the Jaccard index using MinHash scheme for k different hash functions?\nChoices:\na) o (log k!)\nb) o (k!)\nc) o (k^2)\nd) o (1/√k)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: The maximum number of binary trees that can be formed with three unlabelled nodes is:\nChoices:\na) 1\nb) 5\nc) 4\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Abstract syntax tree is an input to which phase of compiler?\nChoices:\na) lexical analysis\nb) syntax analysis\nc) semantic analysis\nd) intermediate code generation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: Who invented the MinHash technique?\nChoices:\na) weiner\nb) samuel f. b. morse\nc) friedrich clemens gerke\nd) andrei broder\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider a linked list of n elements. What is the time taken to insert an element after an element pointed by some pointer?\nChoices:\na) o(1)\nb) o(log2 n)\nc) o(n)\nd) o(n log2 n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A program to search a contact from phone directory can be implemented efficiently using __________\nChoices:\na) a bst\nb) a trie\nc) a balanced bst\nd) a binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the other name or Van Emde Boas Tree data structure?\nChoices:\na) van emde boas array\nb) van emde boas stack\nc) van emde boas priority queue\nd) van emde boas heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sorting algorithms arrange elements in a particular order (ascending or descending). Adaptive sorting algorithms improve performance when data is partially sorted.",
        "target_text": "Question: An adaptive sorting algorithm __________\nChoices:\na) adapts to new computers\nb) takes advantage of already sorted elements\nc) takes input which is already sorted\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is not a disadvantage of bit array?\nChoices:\na) without compression, they might become sparse\nb) accessing individual bits is expensive\nc) compressing bit array to byte/word array, the machine also has to support byte/word addressing\nd) storing and manipulating in the register set for long periods of time\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: B Trees are generally\nChoices:\na) very deep and narrow\nb) very wide and shallow\nc) very deep and very wide\nd) cannot say\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is balanced and is a height balanced tree\nb) a tree which is unbalanced and is a height balanced tree\nc) a tree with three children\nd) a tree with atmost 3 children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient insertion\nb) to have efficient deletion\nc) to have efficient region query\nd) to have efficient traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: To convert the postfix expression into the infix expression we use stack and scan the postfix expression from left to right.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is the load factor?\nChoices:\na) average array size\nb) average key size\nc) average chain length\nd) average hash table length\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which pattern is used to evaluate abstract syntax tree?\nChoices:\na) visitor pattern\nb) singleton pattern\nc) proxy pattern\nd) adapter pattern\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is an advantage of parallel arrays?\nChoices:\na) poor locality of reference for non-sequential access\nb) very little direct language support\nc) expensive to shrink or grow\nd) increased locality of reference\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Recursive procedures are implemented by   using __________ data structure.\nChoices:\na) queues\nb) stacks\nc) linked lists\nd) strings\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Can child node be always called Leaf node in the K-ary tree?\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: A balance factor in AVL tree is used to check __________\nChoices:\na) what rotation to make\nb) if all child nodes are at same level\nc) when the last rotation occurred\nd) if the tree is unbalanced\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Quick sort running time depends on the   selection of __________\nChoices:\na) size of array\nb) pivot element\nc) sequence of values\nd) none of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Which type of binary search tree is imitated for construction of tango tree?\nChoices:\na) complete binary search tree\nb) perfect binary search tree\nc) balanced binary search tree\nd) degenerate binary search tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: In order traversal of binary search tree will produce __________\nChoices:\na) unsorted list\nb) reverse of input\nc) sorted list\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: Reversing a word using stack can be used to find if the given word is a palindrome or not.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: The number of items used by the dynamic array contents is its __________\nChoices:\na) physical size\nb) capacity\nc) logical size\nd) random size\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: __________ is not a theoretical problem but actually occurs in real implementations of probing.\nChoices:\na) hashing\nb) clustering\nc) rehashing\nd) collision\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: Which of the following has search efficiency of Ω(1)?\nChoices:\na) tree\nb) heap\nc) hash table\nd) linked-list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Dijkstra's Algorithm will work for both negative and positive weights?\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What will be the auxiliary space complexity of the code to rotate an array by using the reversal algorithm (d = number of rotations)?\nChoices:\na) o(1)\nb) o(n)\nc) o(d)\nd) o(n*d)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Is Top tree used for maintaining Dynamic set of trees called forest.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure where elements are stored in nodes, each containing a reference to the next. Variants like singly, doubly, and triply linked lists vary by the number of pointers per node.",
        "target_text": "Question: Consider an implementation of unsorted single linked list. Suppose it has its representation with a head and a tail pointer (i.e. pointers to the first and last nodes of the linked list). Given the representation, which of the following operation can not be implemented in O(1) time ?\nChoices:\na) insertion at the front of the linked list.\nb) insertion at the end of the linked list.\nc) deletion of the front node of the linked list.\nd) deletion of the last node of the linked list.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths. Topological sorting applies to Directed Acyclic Graphs (DAGs).",
        "target_text": "Question: Which of the given statement is True?\nChoices:\na) all acyclic directed graphs have topological sortings and all cyclic directed graphs have none\nb) all cyclic directed graphs have topological sortings\nc) all directed graphs have topological sortings\nd) none of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) Distinct array position for every possible key\nb) Fewer array positions than keys\nc) Fewer keys than array positions\nd) Same array position for all keys\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: What is the range of β in finding the length of the longest path in a randomized binary search tree?\nChoices:\na) (-1, 0)\nb) (1, 0)\nc) (0, 5)\nd) (0, 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. Algorithms like Floyd-Warshall and Dijkstra compute shortest paths. Simple graphs do not allow loops or multiple edges.",
        "target_text": "Question: Which of the following properties does a simple graph not hold?\nChoices:\na) must be connected\nb) must be unweighted\nc) must have no loops or multiple edges\nd) must be undirected\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees.",
        "target_text": "Question: Can leaf node be called child node in a K-ary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: Given a queue with a linked list implementation. the Rear pointer points to the rear node of the queue. and the front node of the queue points to the front node of the queue, Which of the following operations is impossible to do in O(1) time?\nChoices:\na) delete the front item from the list.\nb) delete the rear from the list.\nc) insert at the front of the list.\nd) none\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: How many stacks are required for evaluation of prefix expression?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Trees are used to represent data with hierarchical relationships and have various types such as binary trees, AVL trees, and B-trees. AA-trees are a balanced binary search tree variant using skew and split operations.",
        "target_text": "Question: In an AA-tree, we process split first, followed by a skew.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Path Compression algorithm performs in which of the following operations?\nChoices:\na) Create operation\nb) Insert operation\nc) Find operation\nd) Delete operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Given an array of element 5, 7, 9, 1, 3, 10, 8, 4. Which of the following are the correct sequences of elements after inserting all the elements in a min-heap?\nChoices:\na) 1,3,4,5,7,8,9,10\nb) 1,4,3,9,8,5,7,10\nc) 1,3,4,5,8,7,9,10\nd) 1,3,8,4,5,10,9,7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and collision handling techniques such as open addressing and separate chaining are key to practical implementations.",
        "target_text": "Question: What are the methods to handle collision:\nChoices:\na) separate chaining\nb) open addressing\nc) both of the above\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In hashing theory, probe sequences like linear and quadratic probing determine how collisions are resolved. Expression evaluation and conversion also fall under theory topics, such as converting infix to postfix using stacks.",
        "target_text": "Question: Which of the following is not the rearranging method used to implement self-organizing lists?\nChoices:\na) count method\nb) move to front method\nc) ordering method\nd) least frequently used\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. Sparse arrays are used when most elements are zero and can be optimized in memory by only storing non-zero entries.",
        "target_text": "Question: When do you use a sparse array?\nChoices:\na) when there are unique elements in the array\nb) when the array has more occurrence of zero elements\nc) when the data type of elements differ\nd) when elements are sorted\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The incidence matrix of a connected graph has a rank that depends on the number of vertices and the structure of the graph. For a connected graph with n vertices, the rank is at most n-1.",
        "target_text": "Question: If a connected Graph (G) contains n vertices what would be the rank of its incidence matrix?\nChoices:\na) n-1\nb) values greater than n are possible\nc) values less than n-1 are possible\nd) insufficient information is given\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: What is the average retrieval time when n keys hash to the same slot?\nChoices:\na) Θ(n)\nb) Θ(n²)\nc) Θ(n log n)\nd) o(n²)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. JavaScript provides many built-in array methods, including reverse(), sort(), and slice().",
        "target_text": "Question: Which of the following is the predefined function for array reversal in javascript?\nChoices:\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. The degree sum formula for undirected graphs states that the sum of degrees equals twice the number of edges.",
        "target_text": "Question: For an undirected graph with n vertices and e   edges, the sum of the degree of each vertex is equal   to:\nChoices:\na) 2n\nb) (2n-1)/2\nc) 2e\nd) e2/2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A weight-balanced tree is a binary tree in which each node maintains balance based on subtree sizes. The height of such trees can be bounded using logarithmic relationships.",
        "target_text": "Question: A weight-balanced tree is a binary tree in which for each node the number of nodes in the left subtree is at least half and at most twice the number of nodes in the right subtree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on n nodes is best described by which of the following?\nChoices:\na) log_2 n\nb) log_{4/3} n\nc) log_3 n\nd) log_{3/2} n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The adjacency matrix of a graph with n vertices is an n x n matrix. Each entry indicates the presence or absence of an edge.",
        "target_text": "Question: The number of elements in the adjacency matrix of a graph having 7 vertices is __________\nChoices:\na) 7\nb) 14\nc) 36\nd) 49\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions, and the probability of collisions can be analyzed using principles from probability theory.",
        "target_text": "Question: The goal of hashing is to produce a search that   takes __________\nChoices:\na) o(1) time\nb) o(n2) time\nc) o(log n) time\nd) o(n log n) time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A B+ tree is a type of self-balancing search tree where all records are stored at the leaf level and internal nodes only store keys. It remains balanced because the paths from the root to all leaves are of the same length.",
        "target_text": "Question: B+ Trees are considered BALANCED because\nChoices:\na) the lengths of the paths from the root to all leaf nodes are all equal.\nb) the lengths of the paths from the root to all leaf nodes differ from each other by at most 1.\nc) the number of children of any two non-leaf sibling nodes differ by at most 1.\nd) the number of records in any two leaf nodes differ by at most 1.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure where each element is stored in a node containing a pointer to the next node. Searching through a linked list is a linear-time operation.",
        "target_text": "Question: Linked list search complexity is __________\nChoices:\na) Ω(1)\nb) Ω(n)\nc) Ω(log n)\nd) Ω(log log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: Which of the following is the limitation of the array?\nChoices:\na) elements can be accessed from anywhere.\nb) the size of the array is fixed.\nc) indexing starts from zero.\nd) memory waste if an array's elements are smaller than the size allotted to them\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Graphs can be represented using adjacency matrices or lists. Matrix representations offer efficient lookups at the cost of higher space complexity.",
        "target_text": "Question: Which of the following is an advantage of matrices?\nChoices:\na) internal complexity\nb) searching through a matrix is complex\nc) not space efficient\nd) constant-time edge lookup\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure where each element is stored in a node containing a pointer to the next. Trie data structures, though tree-based, can outperform linked lists and BSTs for dictionary word searches.",
        "target_text": "Question: Which of the following is the efficient data structure for searching words in dictionaries?\nChoices:\na) bst\nb) linked list\nc) balanced bst\nd) trie\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays are linear data structures that store elements in contiguous memory locations. They allow indexed access, but resizing and dynamic operations can be inefficient compared to other structures like lists.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a linear data structure used in expression evaluation, symbol balancing, and function call tracking. It operates on the LIFO principle.",
        "target_text": "Question: Which of the following is not an application of stack?\nChoices:\na) evaluation of postfix expression\nb) conversion of infix to postfix expression\nc) balancing symbols\nd) line at ticket counter\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A linked list is a linear data structure where each node contains data and a reference to the next node. In a queue implemented using a linked list, new elements are typically added at the tail (rear).",
        "target_text": "Question: In linked list implementation of a queue, where does a new element be inserted?\nChoices:\na) at the head of the linked list\nb) at the centre position in the linked list\nc) at the tail of the linked list\nd) at any position in the linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. It supports operations like enqueue (insert) and dequeue (remove), commonly used in scheduling and buffering.",
        "target_text": "Question: A priority queue can efficiently implemented using which of the following data structures? Assume that the number of insert and peek (operation to see the current highest priority item) and extraction (remove the highest priority item) operations are almost same.\nChoices:\na) array\nb) linked list\nc) heap data structures like binary heap, fibonacci heap\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A B-tree is a self-balancing tree data structure. During insertions, a node may split if it exceeds its capacity. The number of splits depends on how often insertions cause overflow.",
        "target_text": "Question: A B-tree of order 4 is built from scratch by 10 successive insertions. What is the maximum number of node splitting operations that may take place?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap is a binary tree where each node follows a specific heap property. In a min-heap, each parent is less than or equal to its children. In a max-heap, the opposite is True.",
        "target_text": "Question: The ascending heap property is __________\nChoices:\na) a[parent(i)] = a[i]\nb) a[parent(i)] <= a[i]\nc) a[parent(i)] >= a[i]\nd) a[parent(i)] > 2 * a[i]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Graphs are collections of nodes connected by edges. They can be directed or undirected and are used to model pairwise relations. The incidence matrix of a simple graph has columns that sum to 2 for each edge.",
        "target_text": "Question: The column sum in an incidence matrix for a simple graph is __________\nChoices:\na) depends on number of edges\nb) always greater than 2\nc) equal to 2\nd) equal to the number of edges\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Efficient hashing minimizes collisions. Double hashing is an open addressing technique that reduces clustering.",
        "target_text": "Question: Double hashing is one of the best methods available for open addressing.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue is a linear data structure that follows the First In First Out (FIFO) principle. Common operations include enqueue (insertion), dequeue (removal), and peek (access front without removing).",
        "target_text": "Question: Which of the following is NOT a common operation in a queue data structure?\nChoices:\na) enqueue\nb) dequeue\nc) peek\nd) shuffle\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inversions in an array occur when a pair of elements is out of order. Counting inversions is useful in analyzing sorting algorithms like merge sort.",
        "target_text": "Question: Which of the following form inversion in the array arr = {1,5,4,2}?\nChoices:\na) (5,4), (5,2)\nb) (5,4), (5,2), (4,2)\nc) (1,5), (1,4), (1,2)\nd) (1,5)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Cartesian tree is a binary tree derived from a sequence of numbers. It satisfies the heap property and its in-order traversal yields the original sequence.",
        "target_text": "Question: What is a Cartesian tree?\nChoices:\na) a skip list in the form of tree\nb) a tree which obeys cartesian product\nc) a tree which obeys heap property and whose inorder traversal yields the given sequence\nd) a tree which obeys heap property only\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a heap data structure, a binary heap can be of two types: max-heap and min-heap. Operations like insertion, deletion, and finding the minimum/maximum element have specific time complexities depending on the heap type.",
        "target_text": "Question: In what time can a leftist heap be built?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(log n)\nd) o(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix trees are used in string matching and compression. Farach's algorithm is one of the linear-time algorithms that can construct suffix trees efficiently, especially in external memory settings.",
        "target_text": "Question: Who among the following algorithm is used in external memory and compression of the suffix tree?\nChoices:\na) weiner's algorithm\nb) farach's algorithm\nc) ukkonen's algorithm\nd) alexander morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Queues are FIFO data structures, but self-balancing binary search trees can be used for efficient implementations of priority queues due to ordered access and rebalancing features.",
        "target_text": "Question: A self - balancing binary search tree can be used to implement __________\nChoices:\na) priority queue\nb) hash table\nc) heap sort\nd) priority queue and heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stacks can be implemented using arrays or linked lists. Stacks follow LIFO (Last In First Out) behavior, unlike queues which follow FIFO.",
        "target_text": "Question: Which of the following statements about stacks   is incorrect?\nChoices:\na) stacks can be implemented using linked lists.\nb) stacks are first-in, first-out (FIFO) data structures.\nc) new nodes can only be added to the top of the stack.\nd) the last node (at the bottom) of a stack has a null (0) link.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. AVL trees and 2-3 trees are both self-balancing, but they differ in how they manage balance and insertion.",
        "target_text": "Question: AVL trees provide better insertion than 2-3 trees.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In propositional logic, directed acyclic graphs (DAGs) can represent expressions and computations. Leaves in such graphs may represent boolean constants or variables.",
        "target_text": "Question: In a Propositional Directed Acyclic Graph Leaves maybe labelled with a boolean variable.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AVL trees are height-balanced binary search trees. The difference in height between left and right subtrees of every node is at most 1.",
        "target_text": "Question: In __________, the difference between the height of   the left sub tree and height of the right tree, for each   node, is almost one.\nChoices:\na) Binary search tree\nb) AVL - tree\nc) Complete tree\nd) Threaded binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Searching algorithms are used to retrieve data from structures. Binary search is an efficient method to find elements in sorted arrays with time complexity O(log n).",
        "target_text": "Question: The complexity of searching an element from a   set of n elements using Binary search algorithm is __________\nChoices:\na) O(n)\nb) O(log n)\nc) O(n2)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A full binary tree can be uniquely constructed using both preorder and postorder traversals. One traversal alone is not sufficient.",
        "target_text": "Question: A full binary tree can be generated using __________\nChoices:\na) post-order and pre-order traversal\nb) pre-order traversal\nc) post-order traversal\nd) in-order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A pairing heap is a type of heap-ordered multiway tree. It supports many priority queue operations efficiently and is simpler to implement than Fibonacci heaps.",
        "target_text": "Question: How is a pairing heap represented?\nChoices:\na) binary tree\nb) fibonacci tree\nc) heap ordered tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In any rooted tree, the node with no ancestors is the root. All other nodes are descendants.",
        "target_text": "Question: How many nodes in a tree have no ancestors?\nChoices:\na) 0\nb) 1\nc) 2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Union-find data structures with union by size and path compression techniques achieve nearly constant time complexity, amortized over a series of m operations on n elements.",
        "target_text": "Question: What is the worst-case running time of unions done by size and path compression?\nChoices:\na) o(n)\nb) o(logn)\nc) o(n logn)\nd) o(m logn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Abstract Syntax Trees (ASTs) are used in compilers to represent the structure of source code. Operators are represented as internal nodes and operands as leaves.",
        "target_text": "Question: In an abstract syntax tree, each internal node represents an operand and each leaf node represents an operator.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Unrolled linked lists store multiple elements per node, reducing memory allocation and access overhead, which improves insertion and deletion performance.",
        "target_text": "Question: Insertion and deletion are much faster in an unrolled linked list than in a singly linked list.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Arrays can represent binary trees in sequential memory where the height determines the number of elements. A tree of height l has up to 2^l - 1 nodes.",
        "target_text": "Question: What must be the ideal size of array if the height of tree is 'l'?\nChoices:\na) 2^l - 1\nb) l - 1\nc) l\nd) 2^l\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a full binary tree, every node has either 0 or 2 children. A full binary tree with 2n+1 total nodes always contains exactly n non-leaf (internal) nodes.",
        "target_text": "Question: A full binary tree with 2n+1 nodes contain __________.\nChoices:\na) n leaf nodes\nb) n non-leaf nodes\nc) n-1 leaf nodes\nd) n-1 non-leaf nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Expression trees can be built from prefix, infix, or postfix expressions. Only infix cannot uniquely determine an expression tree.",
        "target_text": "Question: Only infix expression can be made into an expression tree.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In separate chaining, each hash bucket contains a list of all elements that hash to the same bucket. A doubly linked list is often used for chaining in hash tables.",
        "target_text": "Question: Which of the following technique stores data in a separate entity in case of a collision?\nChoices:\na) open addressing\nb) chaining using doubly linked list\nc) linear probing\nd) double hashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Binary Search Tree (BST) is a binary tree where the left subtree contains only nodes with keys less than the parent node and the right subtree only nodes with keys greater. The number of distinct BSTs that can be formed with n keys is the nth Catalan number.",
        "target_text": "Question: How many distinct BSTs can be constructed with 3 distinct keys?\nChoices:\na) 4\nb) 5\nc) 6\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Poor hash functions can lead to clustering, especially when the modulus operator is used with closely packed keys.",
        "target_text": "Question: Which of the following hash functions is most likely to cause clustering in a hash table? Here k is the input key value and m is hash table size. You may assume that all four hash functions generate valid indexes in the hash table.\nChoices:\na) h(k) = k % m\nb) h(k) = floor(m * (k mod 1))\nc) h(k) = k\nd) h(k) = ((k / m) + k * m) + k % m\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: MinHash is a probabilistic technique for estimating similarity between sets. It was originally used to cluster web documents based on shared content (like shingles or n-grams).",
        "target_text": "Question: Which technique was firstly used clustering documents using the similarity of two words or strings?\nChoices:\na) minhash\nb) stack\nc) priority queue\nd) pat tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bitwise XOR is used to toggle specific bits in a binary representation. It flips a bit from 0 to 1 or from 1 to 0.",
        "target_text": "Question: Which of the following bitwise operations will you use to toggle a particular bit?\nChoices:\na) or\nb) and\nc) xor\nd) not\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: MinHash was used in the AltaVista search engine to detect duplicate pages. It's a fast method to compute Jaccard similarity between large sets.",
        "target_text": "Question: Which technique was firstly used to remove duplicate web pages from search results in AltaVista search engine?\nChoices:\na) minhash\nb) stack\nc) priority queue\nd) pat tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A tree is a hierarchical data structure consisting of nodes. Splay trees are self-adjusting binary search trees where recently accessed elements are moved to the root for fast access.",
        "target_text": "Question: In which of the following self-balancing binary search trees is the recently accessed element moved to the root for quick future access?\nChoices:\na) avl tree\nb) aa tree\nc) splay tree\nd) red-black tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is used to map data to fixed-size values using a hash function. Collision resolution techniques like separate chaining, linear probing, and quadratic probing manage collisions, whereas hashing itself is the overall process.",
        "target_text": "Question: Which of the following is not a collision resolution technique?\nChoices:\na) separate chaining\nb) linear probing\nc) quadratic probing\nd) hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The symbol balancing algorithm checks whether parentheses, brackets, and braces are balanced. It is typically implemented using a stack.",
        "target_text": "Question: Which of the following statement is incorrect with respect to balancing symbols algorithm?\nChoices:\na) {[()]}\nb) ([ )]\nc) {( )}\nd) {[ ]}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear search is a sequential search technique, while binary search divides the search space. Binary search is more efficient in large, sorted arrays.",
        "target_text": "Question: Linear search is highly inefficient compared to binary search when dealing with:\nChoices:\na) small, unsorted arrays\nb) small, sorted arrays\nc) large, unsorted arrays\nd) large, sorted arrays\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Separate chaining is a common technique used in hash tables where each bucket is a linked list. A typical hash function for this method is x mod table size.",
        "target_text": "Question: Which of the following is the hashing function for separate chaining?\nChoices:\na) h(x) = (hash(x) + f(i)) mod table size\nb) h(x) = hash(x) + i^2 mod table size\nc) h(x) = x mod table size\nd) h(x) = x mod (table size * 2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Threaded binary trees reduce the need for stack and queue memory by using NULL pointers to point to in-order predecessor or successor. Efficiency, not memory size, is a primary concern.",
        "target_text": "Question: Identify the reason which doesn't play a key role to use threaded binary trees?\nChoices:\na) the storage required by stack and queue is more\nb) the pointers in most of nodes of a binary tree are null\nc) it is difficult to find a successor node\nd) they occupy less size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In simple uniform hashing, every key is equally likely to hash to any slot, which makes the expected search time constant.",
        "target_text": "Question: In simple uniform hashing, what is the search complexity?\nChoices:\na) o(n)\nb) o(logn)\nc) o(nlogn)\nd) o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Randomized hashing techniques like universal and double hashing reduce clustering and collision frequency by generating hashes independent of the data.",
        "target_text": "Question: Collisions can be reduced by choosing a hash function randomly in a way that is independent of the keys that are actually to be stored.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In memory storage, row-major order stores elements of a 2D array row by row. For a 3x3 matrix, the elements are stored sequentially as they appear row-wise.",
        "target_text": "Question: If row-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inversions represent the number of pairs of elements that are out of order. A sorted array has zero inversions, which is the minimum.",
        "target_text": "Question: Under what condition the number of inversions in an array are minimum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an AVL tree, after inserting a node, the balance factor of nodes along the path to the root may need to be updated. This ensures the tree remains balanced.",
        "target_text": "Question: To restore the AVL property after inserting an element, we start at the insertion point and move towards the root of the tree. Is this statement true?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Breadth First Traversal (BFS) is implemented using a queue. This data structure allows level-order traversal in graphs or trees.",
        "target_text": "Question: The data structure required for Breadth First Traversal on a graph is?\nChoices:\na) stack\nb) array\nc) queue\nd) tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In array-based representation of binary trees, left and right children of node at index i can be found at 2i+1 and 2i+2 respectively.",
        "target_text": "Question: If binary trees are represented in arrays, what formula can be used to locate a left child, if the node has an index i?\nChoices:\na) 2i+1\nb) 2i+2\nc) 2i\nd) 4i\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing-based searches use probing for insertion and lookup. On average, linear probing requires 2.5 probes for insertion and 1.5 for successful search.",
        "target_text": "Question: How many probes are required on average for insertion and successful search?\nChoices:\na) 4 and 10\nb) 2 and 6\nc) 2.5 and 1.5\nd) 3.5 and 1.5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a linear data structure following the Last In First Out (LIFO) principle. It supports operations like push and pop and can be implemented using arrays or linked lists. Stack memory is also used in function calls and recursion.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) effective usage of memory\nb) easier computations\nc) to delete elements based on priority\nd) implement LIFO principle in queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Balanced parentheses checks often use stacks because of their LIFO structure, which mirrors the nesting of brackets. Arrays can store stack data.",
        "target_text": "Question: One can determine whether an infix expression has balanced parenthesis or not by using __________\nChoices:\na) array\nb) queue\nc) stack\nd) tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A heap is a special tree-based data structure that satisfies the heap property and can efficiently support priority queue operations.",
        "target_text": "Question: Heap can be used as __________\nChoices:\na) priority queue\nb) stack\nc) a decreasing order array\nd) normal array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quadratic probing is a collision resolution technique in open addressing where the hash index is computed as (h(k) + c1*i + c2*i^2) % table_size. Often simplified as f(i) = i^2.",
        "target_text": "Question: Which of the following is the correct function definition for quadratic probing?\nChoices:\na) f(i)=i^2\nb) f(i)=i\nc) f(i)=i+1\nd) f(i)=i^2+1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The `charAt()` method in Java's `String` class is used to return the character located at a specific index.",
        "target_text": "Question: Which of these methods from the String class is used to extract a single character from an object of String?\nChoices:\na) CHARAT()\nb) charAt()\nc) CharAt()\nd) charAT()\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix tree is a compressed trie that contains all the suffixes of a given string. For a string of length n, the tree has n leaves and helps in efficient string pattern matching.",
        "target_text": "Question: Which statement is correct of suffix tree with a string of length n?\nChoices:\na) The tree has n leaves.\nb) The tree has n roots\nc) Height of tree is n\nd) Depth of tree is n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Propositional Directed Acyclic Graphs (PDAGs) are used to represent Boolean functions efficiently. They help in logical inference and are fundamental in knowledge representation and reasoning systems.",
        "target_text": "Question: In which of the following case does a Propositional Directed Acyclic Graph is used for?\nChoices:\na) representation of boolean functions\nb) string matching\nc) searching\nd) sorting of number\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-Black trees are chosen for frequent insertions, AVL trees for fast lookups due to strict balancing, and B-trees for handling large datasets and disk-based storage.",
        "target_text": "Question: When to choose Red-Black tree, AVL tree and B-trees?\nChoices:\na) many inserts, many searches and when managing more items respectively\nb) many searches, when managing more items respectively and many inserts respectively\nc) sorting, sorting and retrieval respectively\nd) retrieval, sorting and retrieval respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A weight balanced tree is a binary tree where each node stores the size (or weight) of its subtrees to maintain balance. It helps in ensuring efficient insertions, deletions, and access operations.",
        "target_text": "Question: What is a weight balanced tree?\nChoices:\na) a binary tree that stores the sizes of subtrees in nodes\nb) a binary tree with an additional attribute of weight\nc) a height balanced binary tree\nd) a normal binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binomial heap, the number of binomial trees with n nodes corresponds to the number of 1's in the binary representation of n, which is approximately log(n).",
        "target_text": "Question: The number of trees in a binomial heap with n nodes is\nChoices:\na) log n\nb) n\nc) n log n\nd) n/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A doubly linked list allows traversal in both directions and provides direct access to the previous node, which makes deletion of a known node location more efficient compared to a singly linked list.",
        "target_text": "Question: Which of the following operations is performed more efficiently by doubly linked list than by linear linked list?\nChoices:\na) deleting a node whose location is given\nb) searching an unsorted list for a given item\nc) inserting a node after the node with a given location\nd) traversing the list to process each node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When converting expressions or evaluating them using a stack, operands are typically placed directly into the output stream or output list.",
        "target_text": "Question: When an operand is read, which of the following is done?\nChoices:\na) it is placed on to the output\nb) it is placed in operator stack\nc) it is ignored\nd) operator stack is emptied\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An optimal binary search tree minimizes the expected search cost based on known frequencies of access. It is constructed when the access pattern of the keys is known and remains unchanged.",
        "target_text": "Question: What are the conditions for an optimal binary search tree and what is its advantage?\nChoices:\na) the tree should not be modified and you should know how often the keys are accessed, it improves the lookup cost\nb) you should know the frequency of access of the keys, improves the lookup time\nc) the tree can be modified and you should know the number of elements in the tree before hand, it improves the deletion time\nd) the tree should be just modified and improves the lookup time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: It is possible to find the minimum number of steps to reach the end of an array using a greedy or dynamic programming approach in linear time, contrary to common belief.",
        "target_text": "Question: It is not possible to find the minimum number of steps to reach the end of an array in linear time.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A spanning tree of a connected graph with `n` vertices always contains exactly `n-1` edges. It is a subgraph that connects all the vertices without forming any cycle.",
        "target_text": "Question: The spanning tree of connected graph with 10 vertices contains __________\nChoices:\na) 9 edges\nb) 11 edges\nc) 10 edges\nd) 9 vertices\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a linked list, overflow can occur if a node creation is attempted but there is no available memory (i.e., the free space pool is empty).",
        "target_text": "Question: Overflow condition in linked list may occur when attempting to __________\nChoices:\na) create a node when free space pool is empty.\nb) traverse the nodes when free space pool is empty.\nc) create a node when linked list is empty.\nd) none of these.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary Search is the most efficient technique to search in a sorted array, requiring O(log n) time.",
        "target_text": "Question: To search for an element in a sorted array, which searching technique can be used?\nChoices:\na) linear search\nb) jump search\nc) binary search\nd) fibonacci search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing is a technique used to map data (keys) to specific addresses in memory using hash functions. It enables constant-time average-case access.",
        "target_text": "Question: Hashing is the problem of finding an appropriate mapping of keys into addresses.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A single traversal like inorder, preorder, or postorder is not sufficient to uniquely reconstruct a binary tree. At least two traversals (such as inorder and preorder) are required.",
        "target_text": "Question: Can a tree stored in an array using either one of inorder or post order or pre order traversals be again reformed?\nChoices:\na) yes just traverse through the array and form the tree\nb) no we need one more traversal to form a tree\nc) no in case of sparse trees\nd) yes by using both inorder and array elements\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C/C++, the `strcmp()` function compares two strings. If both strings are identical, it returns `0`.",
        "target_text": "Question: If two string s are identical, then strcmp() functions returns __________\nChoices:\na) -1\nb) 1\nc) yes\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a randomized binary search tree, the expected number of leaves is generally (n + 1)/3, assuming uniform insertion probabilities.",
        "target_text": "Question: What is the expected number of leaves in a randomized binary search tree?\nChoices:\na) n + 1\nb) (n + 1)/3\nc) (n + 1)/2\nd) n + 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A stack is a Last-In First-Out (LIFO) structure. Saying it is FIFO is incorrect. Stacks are commonly implemented using linked lists where the top points to the most recently added node.",
        "target_text": "Question: Which of the following statement(s) about stack data structure is/are NOT correct?\nChoices:\na) linked list are used for implementing stacks\nb) top of the stack always contain the new node\nc) stack is the fifo data structure\nd) null link is present in the last node at the bottom of the stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A complete graph with n vertices has an edge between every pair of distinct vertices. The number of edges is given by the formula (n*(n-1))/2.",
        "target_text": "Question: What is the number of edges present in a complete graph having n vertices?\nChoices:\na) (n*(n+1))/2\nb) (n*(n-1))/2\nc) n\nd) information given is insufficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays are memory-efficient data structures that enable compact storage and bit-level operations. However, accessing individual bits can be slower due to bit masking and shifting.",
        "target_text": "Question: Which of the following is not an advantage of bit array?\nChoices:\na) exploit bit level parallelism\nb) maximal use of data cache\nc) can be stored and manipulated in the register set for long periods of time\nd) accessing individual elements is easy\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a randomized binary search tree (RBST), the expected depth of a node is approximately 2 * log(n) + O(1), based on probabilistic balancing during insertion.",
        "target_text": "Question: What is the expected depth of a node in a randomized binary search tree?\nChoices:\na) log n\nb) n!\nc) n²\nd) 2 log n + o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In threaded binary trees, null pointers are replaced with special pointers (threads) to the in-order predecessor or successor. A single-threaded tree has one such pointer, while a double-threaded tree has two.",
        "target_text": "Question: What are double and single threaded trees?\nChoices:\na) when both left, right nodes are having null pointers and only right node is null pointer respectively\nb) having 2 and 1 node\nc) using single and double linked lists\nd) using heaps and priority queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a k-d tree, the 'k' refers to the number of dimensions. It is a space-partitioning data structure for organizing points in a k-dimensional space.",
        "target_text": "Question: In a k-d tree, k originally meant?\nChoices:\na) number of dimensions\nb) size of tree\nc) length of node\nd) weight of node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Cartesian trees are used in scenarios requiring range minimum queries and lowest common ancestor computations. They combine properties of a heap and binary search tree.",
        "target_text": "Question: Cartesian trees are most suitable for?\nChoices:\na) searching\nb) finding nth element\nc) minimum range query and lowest common ancestors\nd) self balancing a tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix tree can be constructed using a suffix array and an LCP (Longest Common Prefix) array, which together allow efficient representation and search in strings.",
        "target_text": "Question: LCP array and __________ is used to construct suffix tree.\nChoices:\na) hash tree\nb) hash trie\nc) suffix array\nd) balanced tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a min heap, the value of the parent node is always less than or equal to its child nodes. This ensures the minimum element is always at the root.",
        "target_text": "Question: In a min heap:\nChoices:\na) minimum values are stored.\nb) child nodes have less value than parent nodes.\nc) parent nodes have less value than child nodes.\nd) maximum value is contained by the root node.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix trees are widely used in bioinformatics for tasks like DNA sequence alignment, pattern matching, and repeat finding.",
        "target_text": "Question: Can suffix tree be used in bioinformatics problems and solutions.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a randomized binary search tree, the longest path during insertion can be analyzed probabilistically. The expected maximum depth for inserting a node is around 4.311 * log(x).",
        "target_text": "Question: What is the longest length path for a node x in random binary search tree for the insertion process?\nChoices:\na) log x\nb) x²\nc) x!\nd) 4.311 log x\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Searching for a specific element in a heap requires scanning each node, as heaps are not designed for search operations. Therefore, the worst-case time complexity is O(n).",
        "target_text": "Question: What is the time complexity of searching in a heap?\nChoices:\na) o(logn)\nb) o(n)\nc) o(1)\nd) o(nlogn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heap data structures are widely used in various real-world applications such as medical systems (task scheduling), file compression (Huffman coding), and stock market analysis (priority queues).",
        "target_text": "Question: What are the applications of the heap data structure?\nChoices:\na) medical applications\nb) file compression\nc) stock market\nd) all of these\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The time complexity for multiplying two matrices of order m*n and n*p using standard matrix multiplication is O(mnp), where m, n, and p are the respective dimensions.",
        "target_text": "Question: The complexity of multiplying two matrices of order m*n and n*p is __________.\nChoices:\na) mnp\nb) mp\nc) mn\nd) np\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular queues optimize memory use by treating the queue as a circular buffer. They are beneficial in memory management, traffic systems, and CPU scheduling.",
        "target_text": "Question: Which of the following is/are advantages of circular queue?\nChoices:\na) memory management\nb) traffic system\nc) cpu scheduling\nd) all of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In direct addressing, each key has a unique position in an array, meaning there's a one-to-one correspondence between keys and array indices. This allows constant-time access but requires large arrays if the key range is large.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) distinct array position for every possible key\nb) fewer array positions than keys\nc) fewer keys than array positions\nd) distinct array positions for keys based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Priority scheduling can cause issues like starvation and indefinite blocking for low-priority processes. However, interrupt handling is a standard OS function and not a specific disadvantage of this scheduling.",
        "target_text": "Question: What is not a disadvantage of priority scheduling in operating systems?\nChoices:\na) a low priority process might have to wait indefinitely for the cpu\nb) if the system crashes, the low priority systems may be lost permanently\nc) interrupt handling\nd) indefinite blocking\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular queues are used to optimize memory usage by wrapping around when the end of the array is reached, unlike linear queues which can waste space after deletions.",
        "target_text": "Question: What is the need for a circular queue?\nChoices:\na) easier computations\nb) implement lifo principle in queues\nc) effective usage of memory\nd) to delete elements based on priority\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary search tree (BST), an inorder traversal visits the nodes in sorted (increasing) order. This property makes it useful for producing sorted output.",
        "target_text": "Question: What is the speciality about the inorder traversal of a binary search tree?\nChoices:\na) it traverses in a non increasing order\nb) it traverses in an increasing order\nc) it traverses in a random fashion\nd) it traverses based on priority of the node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Computational geometry is a field of computer science that deals with the study and development of algorithms to solve geometric problems. It plays an important role in computer graphics, robotics, and more.",
        "target_text": "Question: What is computational geometry?\nChoices:\na) study of geometry using a computer\nb) study of geometry\nc) study of algorithms\nd) study of algorithms related to geometry\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In evaluating infix expressions using stacks, the precedence of operators determines the evaluation order. Higher precedence should not trigger immediate evaluation--only lower or equal precedence should.",
        "target_text": "Question: Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?\nChoices:\na) operand is pushed on to the stack\nb) if the precedence of operator is higher, pop two operands and evaluate\nc) if the precedence of operator is lower, pop two operands and evaluate\nd) the result is pushed on to the operand stack\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An AVL tree is a height-balanced binary search tree. For every node, the difference in height between its left and right subtrees (called balance factor) must be at most 1.",
        "target_text": "Question: An AVL tree is a self - balancing binary search tree, in which the heights of the two child sub trees of any node differ by __________\nChoices:\na) at least one\nb) at most one\nc) two\nd) at most two\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary search tree (BST), in-order traversal visits nodes in the left-root-right order, which yields values in ascending sorted order.",
        "target_text": "Question: In a binary search tree, which of the following traversals would print the numbers in the ascending order?\nChoices:\na) level-order traversal\nb) pre-order traversal\nc) post-order traversal\nd) in-order traversal\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Height-balanced binary trees like AVL trees maintain balance to prevent skewed shapes, which helps achieve faster access and insertion times, improving overall efficiency.",
        "target_text": "Question: Why do we need a height-balanced binary tree?\nChoices:\na) to avoid formation of skew trees\nb) to save memory\nc) to attain faster memory access\nd) to simplify storing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Open addressing handles collisions by probing alternative locations in the hash table. Common techniques include linear probing, quadratic probing, and double hashing. Rehashing, however, refers to resizing the hash table, not collision resolution.",
        "target_text": "Question: Which of the following is not a collision resolution strategy for open addressing?\nChoices:\na) linear probing\nb) quadratic probing\nc) double hashing\nd) rehashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a B+ tree with n pointers, the number of keys in a leaf node ranges from ceil((n-1)/2) to n-1. If the node can hold 7 pointers, it can hold up to 6 keys, with a minimum of ceil(6/2) = 3.",
        "target_text": "Question: A B+ tree can contain a maximum of 7 pointers in a node. What is the minimum number of keys in leaves?\nChoices:\na) 6\nb) 3\nc) 4\nd) 7\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In syntax trees or parse trees used by compilers, an in-order traversal returns the original infix expression, which is the same as the original input string.",
        "target_text": "Question: While evaluating the parse tree, which traversal technique is used to give the original input string?\nChoices:\na) pre-order traversal\nb) in-order traversal\nc) post-order traversal\nd) breadth-first traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The maximum number of nodes in a binary tree of depth `d` is given by the formula 2^d - 1. For depth 5, it would be 2^5 - 1 = 31.",
        "target_text": "Question: The maximum number of nodes in a binary tree of depth 5 is __________\nChoices:\na) 31\nb) 16\nc) 32\nd) 15\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A 2D search tree, also known as a k-d tree, uses alternate dimensions for comparison at different levels. At odd levels, comparisons are typically made using the first key.",
        "target_text": "Question: The 2d search tree has the simple property that branching on odd levels is done with respect to the first key.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A full binary tree is a binary tree in which every node other than the leaves has two children. A balanced full binary tree with `n` leaves has height log₂(n). For 8 leaves, height is log₂(8) = 3.",
        "target_text": "Question: What will be the height of a balanced full binary tree with 8 leaves?\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A self-balancing binary search tree ensures logarithmic height. The minimum height for `n` nodes in such a tree is approximately log2(n).",
        "target_text": "Question: The minimum height of self balancing binary search tree with n nodes is __________\nChoices:\na) log2(n)\nb) n\nc) 2n + 1\nd) 2n - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Random trees are generated using probabilistic algorithms. AVL trees are deterministic and follow strict balancing rules, making them non-random trees.",
        "target_text": "Question: Which of the following is not a random tree?\nChoices:\na) treap\nb) random binary tree\nc) uniform spanning tree\nd) avl tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: XOR linked lists use a single pointer per node that stores the XOR of previous and next node addresses. This reduces memory usage compared to traditional doubly linked lists.",
        "target_text": "Question: Is it possible to create a doubly linked list using only one pointer with every node.\nChoices:\na) not possible\nb) yes, possible by storing xor of addresses of previous and next nodes\nc) yes, possible by storing xor of current node and next node\nd) yes, possible by storing xor of current node and previous node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A special sparse matrix has mostly zero elements but follows a specific structure. A band matrix is one such type, where non-zero elements are confined to a diagonal band.",
        "target_text": "Question: Which one of the following is a special sparse matrix?\nChoices:\na) band matrix\nb) skew matrix\nc) null matrix\nd) unit matrix\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: XOR linked lists use a single field to store the XOR of the addresses of previous and next nodes. The first node XORs NULL and the address of the second node; the last node XORs its previous node and NULL.",
        "target_text": "Question: What do the first and last nodes of an XOR linked list contain? (let the addresses of the first and last nodes be A and B)\nChoices:\na) null xor a and b xor null\nb) null and null\nc) a and b\nd) null xor a and b\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Simple uniform hashing assumes that every key is equally likely to hash into any of the available slots in the hash table, resulting in uniform distribution.",
        "target_text": "Question: What is simple uniform hashing?\nChoices:\na) every element has equal probability of hashing into any of the slots\nb) a weighted probabilistic method is used to hash elements into the slots\nc) elements have random probability of hashing into array slots\nd) elements are hashed based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A suffix tree is a compressed trie used for efficient full-text searches, particularly in string processing and bioinformatics.",
        "target_text": "Question: Which of the following special type of trie is used for fast searching of the full texts?\nChoices:\na) ctrie\nb) hash tree\nc) suffix tree\nd) t tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In queue data structures, attempting to insert an element into a full queue results in an overflow condition, especially in fixed-size implementations like arrays.",
        "target_text": "Question: What is the term for inserting into a full queue known as?\nChoices:\na) overflow\nb) underflow\nc) null pointer exception\nd) program won't be compiled\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In C, memory allocated using `malloc` or `calloc` should be released using `free`. For deleting nodes in an expression tree, `free` is used to deallocate the memory.",
        "target_text": "Question: An expression tree's nodes can be deleted by calling?\nChoices:\na) malloc\nb) calloc\nc) delete\nd) free\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In data structures and algorithms, a naive merge strategy can sometimes still apply in skewed merges, depending on the case. The claim that naive merge cannot be done is False.",
        "target_text": "Question: Naive merge cannot be done in a skew merge.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing an array involves swapping pairs of elements from both ends toward the center. For an array of even length n, exactly n/2 swaps are required.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an even number?\nChoices:\na) (n-1) / 2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Height-balanced binary search trees (like AVL trees) can efficiently implement abstract data types such as sets and priority queues due to their balanced structure and fast lookup and update times.",
        "target_text": "Question: Which of the following data structures can be efficiently implemented using height balanced binary search tree?\nChoices:\na) sets\nb) priority queue\nc) heap\nd) both sets and priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A leftist heap is a variant of a binary heap that is designed to support efficient merging of two heaps. Merging is the fundamental operation upon which others like insertion and deletion are based.",
        "target_text": "Question: What is the fundamental operation on leftist heap?\nChoices:\na) insertion\nb) merging\nc) deletion\nd) swapping\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binary tree supports three primary traversal orders: in-order, pre-order, and post-order. Level-order traversal is also applicable, but generally the number of basic traversal orders is considered to be 3.",
        "target_text": "Question: How many orders of traversal are applicable to a binary tree (In General)?\nChoices:\na) 1\nb) 4\nc) 2\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In any K-ary tree, the root node is always at depth 0. Depth is defined as the number of edges from the root to a given node.",
        "target_text": "Question: What is the depth of the root node of K-ary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The average depth of a binary tree gives an idea of how far nodes are from the root on average. It is often approximated by O(sqrt(N)) in randomly constructed binary trees.",
        "target_text": "Question: The average depth of a binary tree is given as?\nChoices:\na) O(N)\nb) O(log N)\nc) O(M log N)\nd) O(sqrt(N))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a B-tree of minimum degree t, each node can have at most 2t children (pointers), and hence a maximum of 2t pointers.",
        "target_text": "Question: A B-tree of minimum degree t can maximum __________ pointers in a node.\nChoices:\na) t-1\nb) 2t-1\nc) 2t\nd) t\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a singly or doubly linked list, searching requires sequential traversal from the head node, leading to a linear time complexity of O(n).",
        "target_text": "Question: The time required to search an element in a linked list of length n is\nChoices:\na) O(log n)\nb) O(n)\nc) O(1)\nd) O(n²)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Splay trees are self-adjusting binary search trees. They are used in applications such as cache implementation where frequently accessed elements are moved closer to the root.",
        "target_text": "Question: Which of the following options is an application of splay trees?\nChoices:\na) cache implementation\nb) networks\nc) send values\nd) receive values\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A queue is a linear data structure where insertion (enqueue) occurs at the rear and deletion (dequeue) occurs at the front. This behavior classifies it as FIFO.",
        "target_text": "Question: A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as __________\nChoices:\na) queue\nb) stack\nc) tree\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When a node with two children is deleted in a binary search tree, it is typically replaced with its in-order successor (the next larger node) to maintain the BST properties.",
        "target_text": "Question: If a node having two children is deleted from a binary tree, it is replaced by its __________\nChoices:\na) in-order predecessor\nb) in-order successor\nc) pre-order predecessor\nd) none of these\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A priority queue allows elements to be processed based on priority. While it efficiently handles priority-based operations, arbitrary deletions (deleting any element) are not straightforward or efficient.",
        "target_text": "Question: Which of the following is not an advantage of a priority queue?\nChoices:\na) easy to implement\nb) processes with different priority can be efficiently handled\nc) applications with differing requirements\nd) easy to delete elements in any case\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heaps are typically complete binary trees, which are well-suited to array representations. Arrays provide better memory efficiency and caching compared to linked tree structures.",
        "target_text": "Question: Why is heap implemented using array representations than tree(linked list) representations though both tree representations and heaps have same complexities?\nThen why go with array representation when both are having same values ?\nChoices:\na) arrays can store trees which are complete and heaps are not complete\nb) lists representation takes more memory hence memory efficiency is less and go with arrays and arrays have better caching\nc) lists have better caching\nd) in lists insertion and deletion is difficult\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Open addressing and separate chaining are two methods to resolve hash collisions. Open addressing can be easier to implement because it does not require additional data structures like linked lists.",
        "target_text": "Question: Which of the following is an advantage of open addressing over separate chaining?\nChoices:\na) it is simpler to implement\nb) table never gets full\nc) it is less sensitive to hash function\nd) it has better cache performance\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In threaded binary trees, null pointers are replaced with references to in-order predecessors and successors to allow for efficient non-recursive traversal.",
        "target_text": "Question: What are null nodes filled with in a threaded binary tree?\nChoices:\na) inorder predecessor for left node and inorder successor for right node information\nb) right node with inorder predecessor and left node with inorder successor information\nc) they remain null\nd) some other values randomly\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a d-heap (a generalization of a binary heap where each node has d children), most operations like insert and delete are efficient, but merging two d-heaps is not efficient without specialized data structures.",
        "target_text": "Question: Which operation is not efficiently performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) merge\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list representation of a queue, maintaining a single pointer to the rear node allows both enQueue (insert at rear) and deQueue (delete from front) operations to be performed in constant time.",
        "target_text": "Question: A circularly linked list is used to represent a Queue. A single variable p is used to access the Queue. To which node should p point such that both the operations enQueue and deQueue can be performed in constant time? (GATE 2004) \nChoices:\na) rear node\nb) front node\nc) not possible with a single pointer\nd) node next to front\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A binomial heap supports efficient union operations, unlike binary heaps. It consists of a collection of binomial trees, allowing union in logarithmic time.",
        "target_text": "Question: The main distinguishable characterstic of a binomial heap from a binary heap is that\nChoices:\na) it allows union operations very efficiently\nb) it does not allow union operations that could easily be implemented in binary heap\nc) the heap structure is not similar to complete binary tree\nd) the location of child node is not fixed i.e child nodes could be at level (h-2) or (h-3), where h is height of heap and h>4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: For pre-order and post-order traversals to be the same, the tree must have only one node. With more than one node, the traversal orders will differ.",
        "target_text": "Question: The maximum number of nodes in a tree for which post-order and pre-order traversals may be equal is __________\nChoices:\na) 3\nb) 1\nc) 2\nd) any number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If a Directed Acyclic Graph (DAG) has more than one valid topological sort, then it cannot have exactly one Hamiltonian path. A unique topological sort would imply exactly one such path.",
        "target_text": "Question: If there are more than 1 topological sorting of a DAG is possible, which of the following is True.\nChoices:\na) many Hamiltonian paths are possible\nb) no Hamiltonian path is possible\nc) exactly 1 Hamiltonian path is possible\nd) given information is insufficient to comment anything\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AVL trees are more strictly balanced than Red-Black trees, which may result in more rotations during insertion and deletion. Red-Black trees allow faster updates but are less balanced.",
        "target_text": "Question: Which of the following is True\nChoices:\na) the avl trees are more balanced compared to red black trees, but they may cause more rotations during insertion and deletion.\nb) heights of avl and red-black trees are generally same, but avl trees may cause more rotations during insertion and deletion.\nc) red black trees are more balanced compared to avl trees, but may cause more rotations during insertion and deletion.\nd) heights of avl and red-black trees are generally same, but red black trees may cause more rotations during insertion and deletion.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Hash tree (or Merkle tree) uses hashing to support direct access and data integrity verification. It does not provide sequential access.",
        "target_text": "Question: Which of the following is True for a Hash tree?\nChoices:\na) hashing is used for sequential access\nb) indexing is used for direct access\nc) hash tree allows only sequential access\nd) hashing is used for direct access\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A triply linked list is an extension of doubly linked lists and is dynamic in nature, allowing flexible memory usage. It supports forward and backward traversal and an additional pointer for special operations.",
        "target_text": "Question: Which of the following is True about a triply linked list?\nChoices:\na) dynamic in nature\nb) allows random access\nc) less memory wastage\nd) reverse traversing is difficult\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A graph can consist of only vertices and no edges (called an edgeless graph). However, it cannot contain edges without vertices, since edges must connect vertices.",
        "target_text": "Question: Which of the following is True?\nChoices:\na) a graph may contain no edges and many vertices\nb) a graph may contain many edges and no vertices\nc) a graph may contain no edges and no vertices\nd) a graph may contain no vertices and many edges\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The number of inversions in an array indicates how far the array is from being sorted. A common method to compute inversions efficiently is via a modified merge sort algorithm.",
        "target_text": "Question: Choose the correct function from the following which determines the number of inversions in an array?\nChoices:\na) using bubble sort comparisons\nb) using merge sort with inversion count logic\nc) using simple count of unequal elements\nd) using linear scan for each element\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A B+ tree is a type of self-balancing tree structure that allows both rapid sequential access (via leaf node chaining) and rapid random access (through internal indexing).",
        "target_text": "Question: Which of the following is True?\nChoices:\na) b+ tree allows only the rapid random access\nb) b+ tree allows only the rapid sequential access\nc) b+ tree allows rapid random access as well as rapid sequential access\nd) b+ tree allows rapid random access and slower sequential access\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Priority queues can be implemented using multiple queues for different priority levels. A minimum of 2 queues is required--one for high and one for low priority elements.",
        "target_text": "Question: Minimum number of queues required for priority queue implementation?\nChoices:\na) 5\nb) 4\nc) 3\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Standard operator precedence rules apply: division and multiplication before addition. The expression `a/b + c*d` with values a=4, b=2, c=2, d=1 becomes 2 + 2 = 4.",
        "target_text": "Question: Evaluate the following and choose the correct answer.\na/b+c*d where a=4, b=2, c=2, d=1.\nChoices:\na) 1\nb) 4\nc) 5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When implementing a queue with a linked list, inserting at one end (e.g., rear) and deleting from the other (e.g., front) maintains FIFO order. Option a describes this behavior correctly.",
        "target_text": "Question: Which of the following is True about linked list implementation of queue?\nChoices:\na) In push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end\nb) In push operation, if new nodes are inserted at the beginning, then in pop operation, nodes must be removed from the beginning\nc) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from end\nd) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from beginning\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: According to operator precedence, multiplication is done before addition and subtraction. The expression `1+2*3-2` evaluates as `1 + 6 - 2 = 5`.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 1+2*3-2\nChoices:\na) 3\nb) 6\nc) 5\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In Binary Search Tree deletion, when a node has two children, it's replaced with its inorder successor or predecessor. The inorder successor is either a leaf or has no left child.",
        "target_text": "Question: In delete operation of BST, we need inorder successor (or predecessor) of a node when the node to be deleted has both left and right child as non-empty. Which of the following is True about inorder successor needed in delete operation?\nChoices:\na) Inorder successor is always a leaf node\nb) Inorder successor is always either a leaf node or a node with empty left child\nc) Inorder successor may be an ancestor of the node\nd) Inorder successor is always either a leaf node or a node with empty right child\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Move-To-Front heuristic reorganizes data to improve access time. However, it may bring infrequently accessed nodes to the front, potentially decreasing performance.",
        "target_text": "Question: Which of the following is True about the Move-To-Front Method for rearranging nodes?\nChoices:\na) node with highest access count is moved to head of the list\nb) requires extra storage\nc) may over-reward infrequently accessed nodes\nd) requires a counter for each node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Searching in AVL trees is θ(log n) due to their balanced nature, while unbalanced BSTs may degrade to O(n) in worst case.",
        "target_text": "Question: Which of the following is TRUE?\nChoices:\na) The cost of searching an AVL tree is θ (log n) but that of a binary search tree is O(n)\nb) The cost of searching an AVL tree is θ (log n) but that of a complete binary tree is θ (n log n)\nc) The cost of searching a binary search tree is O (log n ) but that of an AVL tree is θ(n)\nd) The cost of searching an AVL tree is θ (n log n) but that of a binary search tree is O(n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a linked list implementation of a queue, you can insert at the beginning and remove from the end, or vice versa, depending on your implementation. Both configurations are valid.",
        "target_text": "Question: Which of the following is True about linked list implementation of queue?\nChoices:\na) in push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end.\nb) in push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from the beginning.\nc) both of the above\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In B-trees, the higher the order (maximum number of children), the more keys each node can hold. This reduces the frequency of splits because nodes can accommodate more insertions.",
        "target_text": "Question: Which of the following is True?\nChoices:\na) larger the order of b-tree, less frequently the split occurs\nb) larger the order of b-tree, more frequently the split occurs\nc) smaller the order of b-tree, more frequently the split occurs\nd) smaller the order of b-tree, less frequently the split occurs\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a trie (prefix tree), strings are stored such that the path from the root to a leaf represents a string. Each node contains character edges to its children.",
        "target_text": "Question: Which of the following is True about the trie?\nChoices:\na) root is letter a\nb) path from root to the leaf yields the string\nc) children of nodes are randomly ordered\nd) each node stores the associated keys\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In normal binary trees, many pointers in the structure may be null (especially in leaf nodes), which leads to space inefficiency. Threaded binary trees solve this by reusing null pointers.",
        "target_text": "Question: What are the disadvantages of normal binary tree traversals?\nChoices:\na) there are many pointers which are null and thus useless\nb) there is no traversal which is efficient\nc) complexity in implementing\nd) improper traversals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary trees can be both complete and full, but not all binary trees satisfy these properties. Therefore, none of the listed options are universally True.",
        "target_text": "Question: Which of the following is True about Binary Trees?\nChoices:\na) every binary tree is either complete or full\nb) every complete binary tree is also a full binary tree\nc) every full binary tree is also a complete binary tree\nd) no binary tree is both complete and full\ne) none of the above\nAnswer: e"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Standard infix evaluation respects operator precedence: multiplication/division before addition/subtraction. The expression `4*2 + 3 - 5/5` = `8 + 3 - 1` = `10`.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 4*2+3-5/5\nChoices:\na) 10\nb) 11\nc) 16\nd) 12\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a weak-heap, each right child has a greater value than its parent. It is a relaxed version of the min-heap with specific rules enabling better performance in certain cases.",
        "target_text": "Question: Choose the correct properties of weak-heap.\nChoices:\na) every node has value greater than the value of child node\nb) every right child of node has greater value than parent node\nc) every left child of node has greater value than parent node\nd) every left and right child of node has same value as parent node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A threaded binary tree replaces null pointers with pointers to in-order predecessor or successor, enabling traversal without stacks or queues.",
        "target_text": "Question: What is a threaded binary tree traversal?\nChoices:\na) a binary tree traversal using stacks\nb) a binary tree traversal using queues\nc) a binary tree traversal using stacks and queues\nd) a binary tree traversal without using stacks and queues\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If delete and decrease-key operations are rare and provided with direct access, an unsorted array allows O(1) insertions and direct deletions, making it optimal for minimizing total cost.",
        "target_text": "Question: An algorithm performs (logN)^1/2 find operations, N insert operations, (logN)^1/2 delete operations, and (logN)^1/2 decrease-key operations on a set of data items with keys drawn from a linearly ordered set. For a delete operation, a pointer is provided to the record that must be deleted. For the decrease-key operation, a pointer is provided to the record that has its key decreased. Which one of the following data structures is the most suited for the algorithm to use, if the goal is to achieve the best total asymptotic complexity considering all the operations?\nChoices:\na) unsorted array\nb) min-heap\nc) sorted array\nd) sorted doubly linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hash table with chaining using a list head, deleting an element pointed to by a reference is done in constant time, giving a time complexity of O(1).",
        "target_text": "Question: What is the time complexity of delete function in the hash table using list head?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: AA-Trees are balanced binary search trees with worst-case time complexity for operations like search, insert, and delete being O(log N), similar to AVL or Red-Black trees.",
        "target_text": "Question: What is the worst case analysis of an AA-Tree?\nChoices:\na) o(n)\nb) o(log n)\nc) o(n log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap, each node has 3 children. The height is log base 3 of n. Decreasing a key may involve bubbling down the tree, taking O(3 * log n / log 3) time in the worst case.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(3 log n / log 3)\nc) o(n)\nd) o(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list, searching for a specific element still requires traversing up to n elements in the worst case, giving a time complexity of O(n).",
        "target_text": "Question: What is the time complexity of searching for an element in a circular linked list?\nChoices:\na) o(n)\nb) o(nlogn)\nc) o(1)\nd) o(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding all tandem repeats (repeated substrings appearing consecutively) can be done using suffix trees in O(n log n + z), where z is the number of such repeats.",
        "target_text": "Question: What is a time complexity for finding all the tandem repeats?\nChoices:\na) θ(n)\nb) θ(n!)\nc) θ(1)\nd) o(n log n + z)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: While hash tables offer O(1) average-case time complexity, self-balancing BSTs offer O(log n). Hence, BSTs are worse than hash tables in the average case.",
        "target_text": "Question: Self - balancing binary search trees have a much better average-case time complexity than hash tables.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Generalized suffix trees can be used to find the longest palindromic substring in linear time using clever traversal and string manipulations.",
        "target_text": "Question: What is a time complexity for finding the longest palindromic substring in a string by using the generalized suffix tree?\nChoices:\na) linear time\nb) exponential time\nc) logarithmic time\nd) cubic time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays provide amortized O(1) time complexity for insertion at the end. But resizing may take O(n), so worst case is O(n).",
        "target_text": "Question: What is the time complexity of inserting at the end in dynamic arrays?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) either o(1) or o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When using separate chaining with a list head in a hash table, if a key is present at the head, it can be found in constant time O(1) on average.",
        "target_text": "Question: What is the time complexity of search function in a hash table using list head?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding the minimum number of steps to reach the end of an array (e.g., jump game) can be solved using greedy or dynamic programming in O(n) time.",
        "target_text": "Question: What is the minimum possible time complexity to find the number of steps to reach the end of an array?\nChoices:\na) o(n)\nb) o(n^2)\nc) o(n^{3/2})\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Appending to a variable-length array may cause reallocation when capacity is exceeded, leading to O(n) time in the worst case.",
        "target_text": "Question: Which among the following is the worst-case time complexity for appending an element in a variable-length array?\nChoices:\na) o(n)\nb) o(1)\nc) o(n^2)\nd) o(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A Van Emde Boas (vEB) tree can store up to M elements with linear space O(M). It offers fast operations like insert, delete, and search in O(log log M) time.",
        "target_text": "Question: What is the time complexity for storing the maximum number of elements in Van Emde Boas tree if M is the maximum number of elements?\nChoices:\na) o(log m)\nb) o(m!)\nc) o(m)\nd) o(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap, each node has up to 3 children. The height of the heap is log base 3 of n, so inserting takes O(log n / log 3) time in the worst case.",
        "target_text": "Question: What is the time complexity for inserting a new item in a ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(n!)\nc) o(n)\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Implementing a stack using queues (especially a single queue) can lead to O(n) time complexity for some operations, making it inefficient for large datasets.",
        "target_text": "Question: Why is implementation of stack operations on queues not feasible for a large dataset (Assume the number of elements in the stack to be n)?\nChoices:\na) because of its time complexity o(n)\nb) because of its time complexity o(log(n))\nc) extra memory is not required\nd) there are no problems\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Merge Sort is a divide-and-conquer algorithm with a guaranteed worst-case time complexity of O(n log n), unlike other elementary sorts like Bubble or Insertion Sort.",
        "target_text": "Question: Which of the following sorting algorithms does not have a worst case running time of O(n^2) ?\nChoices:\na) insertion sort\nb) merge sort\nc) quick sort\nd) bubble sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a singly or doubly linked list, searching for a specific element requires traversing the list from the head to the desired node, resulting in O(n) time in the worst case.",
        "target_text": "Question: What would be the asymptotic time complexity to find an element in the linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(n^2)\nd) o(n^4)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting at the second position in a linked list requires only a single traversal step and pointer adjustment, which takes constant time, i.e., O(1).",
        "target_text": "Question: What would be the asymptotic time complexity to insert an element at the second position in the linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(n^2)\nd) o(n^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary min-heap, the maximum element is not necessarily at the root and could be in any of the leaf nodes. To find it requires scanning up to n/2 leaf nodes, giving \u03b8(n) time.",
        "target_text": "Question: Let H be a binary min-heap consisting of n elements implemented as an array. What is the worst case time complexity of an optimal algorithm to find the maximum element in H?\nChoices:\na) \u03b8(1)\nb) \u03b8(log n)\nc) \u03b8(n)\nd) \u03b8(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In separate chaining, the worst-case scenario occurs when all elements hash to the same bucket, resulting in a linear search through a linked list. This gives O(n) worst-case search time.",
        "target_text": "Question: What is the worst case search time of a hashing using separate chaining algorithm?\nChoices:\na) O(n log n)\nb) O(n)\nc) O(n^2)\nd) O(n^3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Build Heap operation for constructing a binary heap from an array of n elements has a time complexity of O(n), not O(n log n), due to the reduced cost of heapifying lower levels.",
        "target_text": "Question: What is the time complexity of Build Heap operation? \n(Build Heap is used to build a max(or min) binary heap from a given array. Build Heap is used in Heap Sort as a first step for sorting.)\nChoices:\na) O(n log n)\nb) O(n^2)\nc) O(n)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When a binary search tree is used for chaining in a hash table, insertion into the tree (assuming it is balanced) takes O(log n), but inserting at the head or tail of a list in chaining takes O(1).",
        "target_text": "Question: What is the time complexity of insert function in a hash table using a binary tree?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting n^2 elements into an AVL tree with n initial elements involves multiple insertions, each costing O(log n), leading to a total time complexity of \u03b8(n^2 log n).",
        "target_text": "Question: What is the worst case time complexity of inserting n^2 elements into an AVL-tree with n elements initially ?\nChoices:\na) \u03b8(n^4)\nb) \u03b8(n^2)\nc) \u03b8(n^2 log n)\nd) \u03b8(n^3)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list, to count nodes we loop until we reach the head again. The correct method must check `while(temp != head)` and increment the count properly.",
        "target_text": "Question: How do you count the number of elements in the circular linked list?\nChoices:\na) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\nb) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != null)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\nc) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp != null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\nd) \npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp == null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Level order traversal visits nodes breadth-first, processing each node once. The total complexity is linear in the number of nodes, O(n).",
        "target_text": "Question: What is the time complexity of level order traversal?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-black trees are preferred over hash tables when ordered data or range queries are needed. Hash tables require resizing and do not maintain order.",
        "target_text": "Question: Why red-black trees are preferred over hash tables though hash tables have constant time complexity?\nChoices:\na) no they are not preferred\nb) because of resizing issues of hash table and better ordering in red-black trees\nc) because they can be implemented using trees\nd) because they are balanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash tables generally have lower average-case time complexity for insert, search, and delete compared to Binary Search Trees (BST), which may degrade to O(n) in the worst case.",
        "target_text": "Question: What is the disadvantage of BST over the hash table?\nChoices:\na) bst is easier to implement\nb) bst can get the keys sorted by just performing inorder traversal\nc) bst can perform range query easily\nd) time complexity of hash table in inserting, searching and deleting is less than that of bst\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Van Emde Boas (vEB) tree provides extremely fast operations for search, insert, and delete, with time complexity O(log log M), where M is the universe size.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(m!)\nc) o(m^2)\nd) o(log log m)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists improve over linked lists by allowing fast search, insertion, and deletion in expected O(log n) time, compared to O(n) in regular linked lists.",
        "target_text": "Question: What is the time complexity improvement of skip lists from linked lists in insertion and deletion?\nChoices:\na) o(n) to o(log n) where n is number of elements\nb) o(n) to o(1) where n is number of elements\nc) no change\nd) o(n) to o(n^2) where n is number of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting a node at the end of a singly linked list requires traversing all nodes from the head unless a tail pointer is maintained, resulting in O(n) time.",
        "target_text": "Question: What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\nChoices:\na) o(1)\nb) o(n)\nc) θ(n)\nd) both o(n) and θ(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In heapsort, multiple heapify operations may be required depending on element swaps. The array snapshot suggests at least two heapify operations were done at the root.",
        "target_text": "Question: Suppose we are sorting an array of eight integers using heapsort, and we have just finished some heapify (either maxheapify or minheapify) operations. The array now looks like this: 16 14 15 10 12 27 28. How many heapify operations have been performed on root of heap?\nChoices:\na) 1\nb) 2\nc) 3 or 4\nd) 5 or 6\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a skewed binary search tree (like a linked list), all operations--search, insert, and delete--take linear time in the number of nodes, i.e., O(n).",
        "target_text": "Question: What is the worst case time complexity for search, insert and delete operations in a general Binary Search Tree for a skewed tree ?\nChoices:\na) O(n) for all\nb) O(log n) for all\nc) O(log n) for search and insert, and O(n) for delete\nd) O(log n) for search, and O(n) for insert and delete\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The best-case height of a B-tree with k keys and order n is logₙ(k+1) - 1. This occurs when the tree is perfectly balanced and maximally filled.",
        "target_text": "Question: What is the best case height of a B-tree of order n and which has k keys?\nChoices:\na) logₙ(k+1) - 1\nb) nk\nc) logₖ(n+1) - 1\nd) k log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular linked lists are suitable for implementing both stacks and queues due to their ability to cycle through elements without needing null termination.",
        "target_text": "Question: A circular linked list can be used for __________\nChoices:\na) stack\nb) queue\nc) both stack & queue\nd) neither stack or queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In sparse matrix addition, only the non-zero elements need to be processed. Hence, the worst-case time complexity is O(n), where n is the number of non-zero elements.",
        "target_text": "Question: Is O(n) the worst case time complexity for addition of two sparse matrices?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Both the reversal algorithm and the juggling algorithm for array rotation have linear time complexity O(n), though they use different approaches and space.",
        "target_text": "Question: Reversal algorithm and juggling algorithm for array rotation have the same time complexity.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: To count the number of elements in a singly or circular linked list, each node must be visited once. This results in linear time complexity, O(n).",
        "target_text": "Question: What is the time complexity to count the number of elements in the linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Using suffix automaton or enhanced string techniques, it is possible to find the longest common prefix between any suffix in constant time, i.e., \u03b8(1), after preprocessing.",
        "target_text": "Question: What is a time complexity for finding the longest prefix that is common between suffix in a string?\nChoices:\na) \u03b8(n)\nb) \u03b8(n!)\nc) \u03b8(1)\nd) o(log n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Merging two max-heaps of size n can be done by copying elements from both into an array and using Build-Heap, which has a linear time complexity of O(n).",
        "target_text": "Question: Given two max heaps of size n each, what is the minimum possible time complexity to make a one max-heap of size from elements of two max heaps?\nChoices:\na) o(n^2)\nb) o(n log log n)\nc) o(n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skew heaps are self-adjusting heaps where operations like insert and delete have an amortized time of O(log n), but the worst-case time complexity can reach O(n).",
        "target_text": "Question: The worst case running time of all operations in a skew heap is given as?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(n^2)\nd) o(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the worst case, a query operation over a set of n elements (e.g., a linear scan or unindexed search) can take O(n) time.",
        "target_text": "Question: What is the worst case time complexity of query operation (n is the number of candidates)?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In simple chaining used for hash tables, a doubly linked list can make deletion more efficient by allowing constant-time removal without needing to search for the previous node.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) singly linked list\nb) doubly linked list\nc) circular linked list\nd) binary trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary search has a worst-case complexity of O(log n), which is significantly better than linear search. However, in edge cases (like unsorted data), both may fall back to linear scanning.",
        "target_text": "Question: The worst case complexity of binary search matches with __________\nChoices:\na) interpolation search\nb) linear search\nc) merge sort\nd) none of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Tango trees are a type of binary search tree that achieve a competitive ratio of O(log log n) using preferred path decomposition and auxiliary trees.",
        "target_text": "Question: What is the time complexity of for achieving competitive ratio by tango tree?\nChoices:\na) o(log n)\nb) o(n^2)\nc) o(n!)\nd) o(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an adjacency list representation, checking if an edge exists between two vertices may require scanning the list of one vertex, resulting in O(degree) = O(E) in worst case.",
        "target_text": "Question: Time complexity to check if an edge exists between two vertices would be __________\nChoices:\na) o(v^2)\nb) o(v + e)\nc) o(1)\nd) o(e)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Deleting an arbitrary node from a binary heap involves locating the node (O(n)), replacing it with the last node, and then heapifying (O(log n)). Combined worst-case: O(n).",
        "target_text": "Question: The worst case complexity of deleting any arbitrary node value element from heap is __________\nChoices:\na) o(log n)\nb) o(n)\nc) o(n log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If each bin has a constant number of candidates and m bins are checked, the time complexity of insertion is proportional to the number of bins: O(m).",
        "target_text": "Question: What will be the time complexity of insertion operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) o(1)\nb) o(m)\nc) o(m^2)\nd) o(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting an alphabet into a tree-like structure using a hash map can be done in constant time assuming ideal hashing and constant-time insert in each map level.",
        "target_text": "Question: What is a time complexity for inserting an alphabet in the tree using hash maps?\nChoices:\na) o(log n!)\nb) o(n!)\nc) o(n^2)\nd) o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quick Sort is a classic example of the Divide and Conquer design paradigm where the array is divided into parts based on a pivot, and each part is recursively sorted.",
        "target_text": "Question: The quick sort algorithm exploit __________ design technique.\nChoices:\na) greedy\nb) dynamic programming\nc) divide and conquer\nd) backtracking\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Van Emde Boas tree supports insertion, deletion, and search operations in O(log log M) time, where M is the size of the universe of keys.",
        "target_text": "Question: What is the time complexity for deleting a key or integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(log log m)\nc) o(m!)\nd) o(m^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing a word using a stack involves pushing each character and then popping them to reverse the order. This process takes linear time O(N).",
        "target_text": "Question: What is the time complexity of reversing a word using stack algorithm?\nChoices:\na) o(n log n)\nb) o(n^2)\nc) o(n)\nd) o(m log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Rope data structures are used for efficient string manipulation, especially insertions and concatenations, which can be done in O(log n) time.",
        "target_text": "Question: What is the time complexity for inserting the string and forming a new string in the rope data structure?\nChoices:\na) o(log n)\nb) o(n!)\nc) o(n^2)\nd) o(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Merge Sort is the most suitable sorting algorithm for linked lists due to its efficient O(n log n) time and ability to be implemented without random access.",
        "target_text": "Question: Which of the following sorting algorithms can be used to sort a random linked list with minimum time complexity?\nChoices:\na) insertion sort\nb) quick sort\nc) heap sort\nd) merge sort\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When chaining is implemented using a list head, the worst-case scenario occurs when all keys hash to the same bucket, requiring a linear search through a linked list, giving O(n) time for insertion.",
        "target_text": "Question: What is the worst case time complexity of insert function in the hash table when the list head is used for chaining?\nChoices:\na) o(1)\nb) o(n log n)\nc) o(log n)\nd) o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a queue implemented with an array or linked list, enqueue (insertion at the rear) takes constant time O(1) in the average and worst case.",
        "target_text": "Question: What is the time complexity of enqueue operation?\nChoices:\na) o(log n)\nb) o(n log n)\nc) o(n)\nd) o(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: If elements are evenly distributed among bins, deletion from a bin takes O(m), where m is the number of bins intersected during deletion.",
        "target_text": "Question: What will be the time complexity of delete operation if all the candidates are evenly spaced so that each bin has constant number of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) o(1)\nb) o(m)\nc) o(m^2)\nd) o(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: One key advantage of chained hashing (external hashing) over open addressing is ease of deletion, as linked list operations allow direct removal without shifting elements.",
        "target_text": "Question: An advantage of chained hash table (external hashing) over the open addressing scheme is\nChoices:\na) worst case complexity of search operations is less\nb) space used is less\nc) deletion is easier\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Rope data structures allow efficient editing of large strings. Deletion in a rope takes O(log n) time by splitting and concatenating balanced tree nodes.",
        "target_text": "Question: What is the time complexity for deleting the string to form a new string in the rope data structure?\nChoices:\na) o(n^2)\nb) o(n!)\nc) o(log n)\nd) o(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a priority queue, inserting a node based on position (priority) may require traversing or adjusting elements, resulting in worst-case linear time complexity O(n).",
        "target_text": "Question: What is the time complexity to insert a node based on position in a priority queue?\nChoices:\na) o(n log n)\nb) o(log n)\nc) o(n)\nd) o(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hash tables typically offer constant average-case time complexity for insert, delete, and search operations, which is better than the O(log n) average of balanced BSTs.",
        "target_text": "Question: What is the advantage of a hash table over BST?\nChoices:\na) hash table has a better average time complexity for performing insert, delete and search operations\nb) hash table requires less space\nc) range query is easy with hash table\nd) easier to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Selection sort has the same time complexity in best, average, and worst cases--O(n^2)--making it the slowest among common algorithms even in the best case.",
        "target_text": "Question: Which of the sorting techniques has highest best-case runtime complexity?\nChoices:\na) quick sort\nb) selection sort\nc) insertion sort\nd) bubble sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular linked lists are commonly used in CPU scheduling (Round Robin) because they allow the scheduler to cycle through processes efficiently.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) undo operation\nb) recursive function calls\nc) allocating cpu to resources\nd) implement hash tables\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The average-case height of a binary search tree is O(log n) when nodes are inserted in random order, making searches and updates efficient.",
        "target_text": "Question: What is the average case time complexity for finding the height of the binary tree?\nChoices:\na) h = O(log log n)\nb) h = O(n log n)\nc) h = O(n)\nd) h = O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hash table using a binary tree (e.g., in chaining), delete operations in a balanced binary search tree take O(log n) time, not constant.",
        "target_text": "Question: What is the time complexity of the delete function in the hash table using a binary tree?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A hash tree (Merkle tree) is used for data synchronization and verification. In the worst case, all nodes may need to be compared, resulting in O(n) time complexity.",
        "target_text": "Question: Hash tree is used in data synchronisation. In the worst case the data synchronisation takes __________ time.\nChoices:\na) o(log n)\nb) o(n^2)\nc) o(n log n)\nd) o(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap, each node has three children, so the height is log base 3 of n. Deleting the root requires bubbling down and comparing up to 3 children per level, giving time complexity O(3 log n / log 3).",
        "target_text": "Question: What is the time complexity for deleting root key in a ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(3 log n / log 3)\nc) o(n)\nd) o(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Binary tree sort using a self-balancing BST ensures sorted output and guarantees O(n log n) time in the worst case by keeping the tree balanced.",
        "target_text": "Question: The binary tree sort implemented using a self-balancing binary search tree takes __________ time in worst case.\nChoices:\na) o(n log n)\nb) o(n)\nc) o(n^2)\nd) o(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list, all nodes are connected in a circle, making it appear as though there is no True beginning or end.",
        "target_text": "Question: In a circular linked list:\nChoices:\na) components are all linked together in some sequential manner.\nb) there is no beginning and no end.\nc) components are arranged hierarchically.\nd) forward and backward traversal within the list is permitted.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a self-organizing list with linear search, the worst-case scenario requires traversing all elements, giving O(n) time complexity.",
        "target_text": "Question: The worst case running time of a linear search on the self-organizing list is __________\nChoices:\na) o(1)\nb) o(log n)\nc) o(n)\nd) o(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linear search checks each element sequentially until the target is found or the end is reached, resulting in a worst-case time complexity of \u03b8(n).",
        "target_text": "Question: What is the worst case time complexity of linear search algorithm?\nChoices:\na) \u03b8(1)\nb) \u03b8(n)\nc) \u03b8(log n)\nd) \u03b8(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap, each node has 3 children. Increasing the priority of a key involves bubbling it up the tree, which takes O(log n / log 3) time.",
        "target_text": "Question: What is the time complexity for increasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The worst case of Quick Sort occurs when the pivot selection leads to unbalanced partitions, causing O(n^2) time complexity.",
        "target_text": "Question: The worst case of quick sort has order __________.\nChoices:\na) O(n^2)\nb) O(n)\nc) O(n log^2 n)\nd) O(log^2 n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Chaining in hashing is less sensitive to the choice of hash function because collisions are handled using separate lists rather than probing schemes.",
        "target_text": "Question: What is the advantage of hashing with chaining?\nChoices:\na) cache performance is good\nb) uses less space\nc) less sensitive to hash function\nd) has a time complexity of O(n) in the worst case\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Both AVL trees and B-trees maintain balanced structures that ensure logarithmic time complexity O(log n) in the worst case for insertion and deletion.",
        "target_text": "Question: B-tree and AVL tree have the same worst case time complexity for insertion and deletion.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The juggling algorithm for array rotation performs element swaps based on the greatest common divisor (GCD) of the array size and rotation steps. Its time complexity is O(n).",
        "target_text": "Question: What is the time complexity of the juggling algorithm to rotate an array?\nChoices:\na) o(1)\nb) o(n)\nc) o(d)\nd) o(n*d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting infix expressions to postfix (Reverse Polish Notation) using a stack-based algorithm can be done in linear time O(n), where n is the length of the expression.",
        "target_text": "Question: What is the time complexity of an infix to postfix conversion algorithm?\nChoices:\na) o(n log n)\nb) o(n)\nc) o(n^2)\nd) o(m log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting into a doubly linked list takes O(1) time if the pointer to the insertion point is known. However, finding the correct position can take O(n) in the worst case.",
        "target_text": "Question: What is the worst case time complexity of inserting a node in a doubly linked list?\nChoices:\na) o(n log n)\nb) o(log n)\nc) o(n)\nd) o(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding the most frequent substring of a given minimum length can be done using a sliding window and hashmap or suffix tree in linear time O(n).",
        "target_text": "Question: What is a time complexity for finding frequently occurring substring of minimum length in a string?\nChoices:\na) θ(n)\nb) θ(n!)\nc) o(n^2 + n)\nd) o(log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a balanced binary search tree with 2ⁿ elements, search operations take time proportional to the tree height, which is O(log n). So the worst-case time is θ(log n).",
        "target_text": "Question: The worst case running time to search for an element in a balanced binary search tree with n = 2^k elements is:\nChoices:\na) θ(n log n)\nb) θ(n*2ⁿ)\nc) θ(n)\nd) θ(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing a string involves swapping characters from both ends toward the center, which takes O(n) time where n is the string length.",
        "target_text": "Question: What is the time complexity to reverse a string?\nChoices:\na) O(n^2)\nb) O(1)\nc) O(log n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In rope data structures, creating a new node and concatenating ropes are done using tree operations that can take O(1) time when no balancing is required.",
        "target_text": "Question: What is the time complexity for creating a new node and then performing concatenation in the rope data structure?\nChoices:\na) O(log n)\nb) O(n!)\nc) O(n^2)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bubble Sort performs pairwise comparisons and swaps in nested loops, giving a worst-case time complexity of O(n^2).",
        "target_text": "Question: Consider that n elements are to be sorted. What is the worst case time complexity of Bubble sort?\nChoices:\na) O(1)\nb) O(log^2 n)\nc) O(n)\nd) O(n^2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In circular linked lists, nodes are linked in a loop without a terminating NULL, and traversal can start at any point. Valid statements about their structure often include loop-based properties like P1 and P4.",
        "target_text": "Question: Which of the following Statement is correct about Circular Linked List?\nChoices:\na) only p4\nb) only p1\nc) p1 and p2\nd) p1 and p4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In array-based stack implementations, the pop operation simply decrements the index (top pointer) and is therefore done in constant time, O(1).",
        "target_text": "Question: What is the time complexity of pop() operation when the stack is implemented using an array?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting a node at the beginning of a linked list requires changing the head pointer and the next pointer of the new node, which is a constant time O(1) operation.",
        "target_text": "Question: What is the time complexity to insert a node at the beginning of the list?\nChoices:\na) o(log n)\nb) o(n)\nc) o(1)\nd) none\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hash table with chaining using doubly linked lists, insertions occur at the head or tail of the list and take constant time, i.e., O(1).",
        "target_text": "Question: What is the time complexity of insert function in a hash table using a doubly linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The worst-case height of an AVL tree is approximately 1.44 log2(n), where n is the number of nodes. This follows from AVL balancing rules.",
        "target_text": "Question: What is the worst case possible height of AVL tree?\nChoices:\na) 2 log n (assume base of log is 2)\nb) 1.44 log n (assume base of log is 2)\nc) depends upon implementation\nd) \u03b8(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hash tree (e.g., Merkle tree), insertion can involve O(log\u2096(n)) time, where k is the arity of the tree and n is the number of elements.",
        "target_text": "Question: What is the worst case time complexity of the insertion in the hash tree?\nChoices:\na) O(log\u2096(n))\nb) O(n^2)\nc) O(n log\u2096(n))\nd) O(k*n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a suffix tree, the number of nodes in the worst case is 2n where n is the length of the string, because each suffix may form a new branch.",
        "target_text": "Question: For what size of nodes, the worst case of usage of space in suffix tree seen?\nChoices:\na) n nodes\nb) 2n nodes\nc) 2n nodes\nd) n! nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap, increasing a key's priority may require bubbling it up through levels. The height is log base 3 of n, and with up to 3 comparisons per level, time is O(3 log n / log 3).",
        "target_text": "Question: What is the time complexity for increasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) o(log n / log 3)\nb) o(3 log n / log 3)\nc) o(n)\nd) o(1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic Programming uses memoization to store intermediate results of subproblems, which helps avoid redundant computations and improve efficiency.",
        "target_text": "Question: Which of the following uses memorization?\nChoices:\na) Greedy approach\nb) Divide and conquer approach\nc) Dynamic programming approach\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Van Emde Boas tree supports operations like finding the minimum and maximum in constant O(1) time due to its structure and recursive splitting of the universe.",
        "target_text": "Question: What is the time complexity for finding a maximum and minimum integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(m!)\nc) o(1)\nd) o(log log m)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding all maximal palindromes in a string can be done in linear time O(n) using Manacher's algorithm.",
        "target_text": "Question: What is a time complexity for finding all the maximal palindrome in a string?\nChoices:\na) θ(n)\nb) θ(n!)\nc) θ(1)\nd) θ(log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Interpolation search is efficient on uniformly distributed, sorted data. It achieves a time complexity of θ(log log n) in the best case when distribution is ideal.",
        "target_text": "Question: If the data collection is in sorted form and equally distributed then the run time complexity of interpolation search is __________\nChoices:\na) θ(n)\nb) θ(1)\nc) θ(log n)\nd) θ(log log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting at the beginning of a triply linked list (similar to a doubly linked list but with an extra pointer) still takes O(1) time when the pointer to the head is known.",
        "target_text": "Question: Which among the following is the time complexity for inserting at the beginning of a triply linked list?\nChoices:\na) o(n)\nb) o(1)\nc) o(log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Rope data structures enable efficient string manipulation. Splitting a string in a rope (balanced binary tree) can be done in O(log n) time.",
        "target_text": "Question: What is the time complexity for splitting the string into two new strings in the rope data structure?\nChoices:\na) O(n^2)\nb) O(n!)\nc) O(log n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Finding x-pattern occurrences of length n can be done in θ(n + x) time using pattern matching algorithms like KMP or Aho-Corasick.",
        "target_text": "Question: What is a time complexity for x pattern occurrence of length n?\nChoices:\na) o(log n!)\nb) θ(n!)\nc) o(n^2)\nd) θ(n + x)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Quick Sort uses the Divide and Conquer paradigm, where the array is partitioned recursively based on pivots.",
        "target_text": "Question: Quick sort algorithm is an example of __________.\nChoices:\na) greedy approach\nb) improved binary search\nc) dynamic programming\nd) divide and conquer\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a singly linked list, deleting a node is O(1) if a pointer to the node and its previous node is already available. This is the best-case time complexity.",
        "target_text": "Question: What is the best case time complexity of deleting a node in a Singly Linked list?\nChoices:\na) O(n)\nb) O(n^2)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the worst case, deleting an element from an unsorted data structure may require scanning all elements, resulting in O(n) time.",
        "target_text": "Question: What is the worst case time complexity of delete operation (n is the number of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a hash table using chaining with doubly linked lists, insertion is done at the head or tail in O(1) time, and search operations can also be optimized to O(1) under ideal hashing.",
        "target_text": "Question: What is the time complexity of search function in a hash table using a doubly linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A skew heap uses recursion to perform merges. A recursive implementation can fail if the stack depth exceeds limits, especially in degenerate cases. Hence, stack space becomes a limitation.",
        "target_text": "Question: Why would a recursive implementation fail in skew heaps?\nChoices:\na) skew heaps are self adjusting\nb) efficiency gets reduced\nc) lack of stack space\nd) time complexity\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-Black Trees provide logarithmic time complexity for insert, delete, and search operations, including finding predecessor and successor.",
        "target_text": "Question: What are the operations that could be performed in O(log n) time complexity by red-black tree?\nChoices:\na) insertion, deletion, finding predecessor, successor\nb) only insertion\nc) only finding predecessor, successor\nd) for sorting\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Free memory blocks in memory management systems are typically maintained in a circular linked list and organized by increasing address to support merging of adjacent blocks.",
        "target_text": "Question: How are free blocks linked together mostly and in what addressing order?\nChoices:\na) circular linked list and increasing addressing order\nb) linked list and decreasing addressing order\nc) linked list and in no addressing order\nd) none of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Performing θ(n) delete, O(log n) insert and find, and θ(n) decrease-key operations on a sorted doubly linked list gives an overall complexity of O(n log n).",
        "target_text": "Question: n items are stored in a sorted doubly linked list. For a delete operation, a pointer is provided to the record to be deleted. For a decrease-key operation, a pointer is provided to the record on which the operation is to be performed. An algorithm performs the following operations on the list in this order: θ(n) delete, θ(log n) insert, θ(log n) find, and θ(n) decrease-key. What is the time complexity of all these operations put together?\nChoices:\na) θ(log² n)\nb) θ(n)\nc) θ(n log n)\nd) θ(n² log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Circular linked lists are often used in CPU scheduling, such as round-robin schedulers, to allocate time slices to multiple processes in a loop.",
        "target_text": "Question: Which of the following application makes use of a circular linked list?\nChoices:\na) recursive function calls\nb) undo operation in a text editor\nc) implement hash tables\nd) allocating cpu to resources\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The naive nearest neighbor search in an unsorted list of N items requires scanning all points, resulting in O(N) time in the worst case.",
        "target_text": "Question: What is the worst case time complexity of finding the nearest neighbour?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(log n)\nd) o(n^3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Maintaining dynamic sets of weighted trees using advanced data structures (like union-find with union by rank and path compression) can be achieved in O(log n) time.",
        "target_text": "Question: What is the time complexity for maintaining a dynamic set of weighted trees?\nChoices:\na) o(n)\nb) o(n^2)\nc) o(log n)\nd) o(n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular linked list, the last node's 'next' pointer points back to the head instead of NULL, ensuring the list loops continuously.",
        "target_text": "Question: What differentiates a circular linked list from a normal linked list?\nChoices:\na) you cannot have the 'next' pointer point to null in a circular linked list\nb) it is faster to traverse the circular linked list\nc) in a circular linked list, each node points to the previous node instead of the next node\nd) head node is known in circular linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In an unrolled linked list, insertion may require shifting elements in the array part or splitting nodes, which could take linear time O(n) in the worst case.",
        "target_text": "Question: Which among the following is the time complexity for inserting an element in an unrolled linked list?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a ternary heap (where each node has 3 children), decreasing a key's priority involves bubbling up, taking θ(log n / log 3) time.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) O(log n / log 3)\nb) O(n!)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a priority queue implemented using a linear array, insertion based on key requires scanning for the correct position, leading to O(n) time complexity.",
        "target_text": "Question: What is the time complexity to insert a node based on key in a priority queue?\nChoices:\na) o(n log n)\nb) o(log n)\nc) o(n)\nd) o(n^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Pairing heaps are self-adjusting heaps. Their time complexity analysis was inspired by that of splay trees, which also use amortized analysis.",
        "target_text": "Question: Pairing heaps time complexity was inspired by that of?\nChoices:\na) splay tree\nb) treap\nc) red-black tree\nd) avl tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In chaining with a list head, inserting at the beginning of the linked list takes constant time O(1) under ideal hashing assumptions.",
        "target_text": "Question: What is the time complexity of insert function in a hash table using list head?\nChoices:\na) o(1)\nb) o(n)\nc) o(log n)\nd) o(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Van Emde Boas trees offer fast operations for search, insert, and delete in O(log log M) time, where M is the universe size.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) o(m!)\nb) o(log m!)\nc) o(log log m)\nd) o(m^2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Hashing provides O(1) time complexity on average for search operations, assuming a good hash function and low collision rate.",
        "target_text": "Question: Which searching technique takes O(1) time complexity for searching the data?\nChoices:\na) binary search\nb) linear search\nc) avl tree search\nd) hashing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In the worst case (e.g., sorted input), Quick Sort's partitioning may lead to unbalanced recursion, giving time complexity O(n^2/2).",
        "target_text": "Question: In worst case Quick Sort has order __________.\nChoices:\na) o(n log n)\nb) o(n^2/2)\nc) o(log n)\nd) o(n^2/4)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Inserting n elements into a sorted linked list one by one requires traversal for each insert, resulting in a total time of θ(n²) in the worst case.",
        "target_text": "Question: What is the worst case time complexity of inserting n elements into an empty linked list, if the linked list needs to be maintained in sorted order?\nChoices:\na) θ(n)\nb) θ(n log n)\nc) θ(n²)\nd) θ(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Converting prefix notation to infix using a stack-based approach processes each token once, resulting in O(n) time where n is the number of symbols.",
        "target_text": "Question: The time complexity of converting a prefix notation to infix notation is __________\nChoices:\na) o(n) where n is the length of the equation\nb) o(n) where n is number of operands\nc) o(1)\nd) o(log n) where n is length of the equation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Tower of Hanoi problem has exponential time complexity O(2^n), making it one of the slowest recursive algorithms with the highest runtime.",
        "target_text": "Question: Program with highest run-time complexity is __________\nChoices:\na) tower of hanoi\nb) fibonacci series\nc) prime number series\nd) none of these\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Van Emde Boas trees support operations like insert, delete, and search in O(log log M) time, where M is the universe size.",
        "target_text": "Question: What is the time complexity for inserting a key or integer in Van Emde Boas data structure?\nChoices:\na) o(log m!)\nb) o(m!)\nc) o(m^2)\nd) o(log log m)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The θ (Θ) notation in asymptotic analysis represents the tight bound, usually associated with the average case but also applies when upper and lower bounds match.",
        "target_text": "Question: The θ notation in asymptotic evaluation represents __________\nChoices:\na) base case\nb) average case\nc) worst case\nd) null case\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Red-Black trees are preferred over AVL trees in scenarios with frequent insertions and deletions because they require fewer rotations and offer faster amortized performance.",
        "target_text": "Question: When would it be optimal to prefer Red-black trees over AVL trees?\nChoices:\na) when there are more insertions or deletions\nb) when more search is needed\nc) when tree must be balanced\nd) when log(nodes) time complexity is needed\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Evaluating a postfix expression (Reverse Polish Notation) using a stack processes each token once, leading to linear time complexity O(n).",
        "target_text": "Question: What is the time complexity of evaluation of postfix expression algorithm?\nChoices:\na) o(n)\nb) o(n log n)\nc) o(n^2)\nd) o(m log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: The Floyd-Warshall algorithm applies dynamic programming to solve the all-pairs shortest path problem in a weighted graph.",
        "target_text": "Question: The Floyd-Warshall algorithm for all-pair shortest paths computation is based on:\nChoices:\na) greedy paradigm\nb) divide-and-conquer paradigm\nc) dynamic programming paradigm\nd) none of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In naive merging of two sorted arrays (or lists), each element must be compared and placed into a new array, resulting in a worst-case time complexity of O(N).",
        "target_text": "Question: The worst case analysis for a naive merge is given as?\nChoices:\na) o(n)\nb) o(log n)\nc) o(n log n)\nd) o(n^2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a binary search tree (BST), the worst case occurs when the tree becomes skewed, leading to O(n) complexity. The average case for balanced BSTs is O(log n).",
        "target_text": "Question: What are the worst case and average case complexities of a binary search tree?\nChoices:\na) o(n), o(n)\nb) o(log n), o(log n)\nc) o(log n), o(n)\nd) o(n), o(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Direct addressing uses base + i·w to fetch A[i]; random access is O(1) under the RAM model with aligned words; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the time complexity of accessing an element in an array by index?\nChoices:\na) O(n)\nb) O(1)\nc) O(log n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: JVM zero-initializes int[] elements on allocation; references default to null while primitives default to 0; array length is fixed after creation.",
        "target_text": "Question: What is the default value of an integer array in Java?\nChoices:\na) 0\nb) null\nc) -1\nd) undefined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Java exposes the length of any array via the final field .length (not a method); bounds checks occur on each A[i] access in O(1).",
        "target_text": "Question: How do you find the length of an array in Java?\nChoices:\na) array.size();\nb) array.length;\nc) array.length();\nd) array.size;\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Fixed-size C++ arrays can be value-initialized with a brace list; size is compile-time constant and elements placed contiguously in storage; use stack or static duration.",
        "target_text": "Question: Which of the following correctly initializes an array in C++?\nChoices:\na) int array[3] = {1, 2, 3};\nb) int array = new int[3];\nc) int array(3) = {1, 2, 3};\nd) int array[] = new int[3];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Appending to a plain fixed-size array writes to the next slot only if capacity permits; without dynamic growth, shifting is unnecessary; cost is O(1) for the write.",
        "target_text": "Question: What is the time complexity of inserting an element at the end of an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Plain arrays have a fixed length decided at allocation; resizing requires a new buffer and copy; indexing provides O(1) address computation.",
        "target_text": "Question: Which of the following statements is true about arrays?\nChoices:\na) Arrays are dynamic in size\nb) Arrays have a fixed size\nc) Arrays cannot store primitive data types\nd) Arrays elements are always initialized\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A multidimensional array is modeled as an array of arrays; indexing like A[i][j] performs two address calculations; row-major layout typical in C/C++.",
        "target_text": "Question: What is a multidimensional array?\nChoices:\na) An array with multiple data types\nb) An array containing multiple arrays\nc) An array with a flexible size\nd) An array with elements of different types\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Row-major layout stores rows consecutively, mapping A[i][j] to base + ((i·cols)+j)·w; column-major swaps roles of i and j; address arithmetic is O(1).",
        "target_text": "Question: How are elements stored in a 2D array in memory?\nChoices:\na) Row-major order\nb) Column-major order\nc) Random order\nd) Both row-major and column-major order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: With 0-based indexing, the third logical element resides at offset 2; address = base + 2·w; bounds checks apply in safe languages.",
        "target_text": "Question: What is the correct way to access the third element of an array?\nChoices:\na) array[2]\nb) array[3]\nc) array(2)\nd) array.get(2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bulk copy uses System.arraycopy(src, s, dst, d, len) which performs a native memmove; runs in Θ(len) and preserves overlapping ranges.",
        "target_text": "Question: Which of the following methods can be used to copy an array in Java?\nChoices:\na) System.copy()\nb) Arrays.copyOf()\nc) Collections.copy()\nd) System.arraycopy()\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Without order or auxiliary index, linear scan examines up to n elements; expected Θ(n) probes; no better worst-case without extra structure.",
        "target_text": "Question: What is the time complexity of searching for an element in an unsorted array?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Plain arrays have a fixed length decided at allocation; resizing requires a new buffer and copy; indexing provides O(1) address computation.",
        "target_text": "Question: Which of the following is a disadvantage of arrays?\nChoices:\na) Random access\nb) Fixed size\nc) Cache friendliness\nd) Ease of use\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Use nested lists with independent inner lists to avoid aliasing; prefer list comprehensions to build m×n grids so updates don't share rows.",
        "target_text": "Question: How do you declare a 2D array in Python?\nChoices:\na) array = [[0]*m]*n\nb) array = array([[0]*m]*n)\nc) array = [[0 for i in range(m)] for j in range(n)]\nd) array = [0, 0, 0, 0]\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sequential elements improve spatial locality and prefetch efficiency; scans are cache-friendly with stride-1 access; time per access ~O(1).",
        "target_text": "Question: What is the advantage of using arrays over linked lists?\nChoices:\na) Dynamic size\nb) Better cache locality\nc) Easier insertion and deletion\nd) Lower memory usage\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Removing from the interior requires shifting trailing elements left by one; worst-case Θ(n) moves; stable layout preserved.",
        "target_text": "Question: What is the time complexity of deleting an element from an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is true about array indexes?\nChoices:\na) They start from 1\nb) They can be negative\nc) They start from 0\nd) They start from a user-defined value\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the correct way to initialize an array of size 5 in Python?\nChoices:\na) array = [0] * 5\nb) array = {0, 0, 0, 0, 0}\nc) array = (0, 0, 0, 0, 0)\nd) array = new array[5]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is an advantage of using arrays?\nChoices:\na) Dynamic size\nb) Random access\nc) Ease of insertion and deletion\nd) Lower memory usage\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of merging two sorted arrays?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(n2)\nd) O(m + n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Plain arrays have a fixed length decided at allocation; resizing requires a new buffer and copy; indexing provides O(1) address computation.",
        "target_text": "Question: Which of the following statements is true about dynamic arrays?\nChoices:\na) They have a fixed size\nb) They can change size during runtime\nc) They do not allow random access\nd) They are implemented using linked lists\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Plain arrays have a fixed length decided at allocation; resizing requires a new buffer and copy; indexing provides O(1) address computation.",
        "target_text": "Question: In which language do arrays have a fixed size and cannot be resized?\nChoices:\na) Java\nb) Python\nc) JavaScript\nd) C\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Reversing a List in Java can use Collections.reverse on a List view; arrays need boxing or manual two-pointer swap in Θ(n).",
        "target_text": "Question: How do you reverse an array in Java?\nChoices:\na) Collections.reverse(array)\nb) array.reverse()\nc) Arrays.reverse(array)\nd) ArrayUtils.reverse(array)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Single pass maintains a running maximum; Θ(n) comparisons; no auxiliary structure required; constant extra space.",
        "target_text": "Question: What is the best way to find the largest element in an unsorted array?\nChoices:\na) Sort the array and pick the first element\nb) Iterate through the array and track the largest element\nc) Use a binary search\nd) Use a hash table\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays from the free store use new T[n] and must be released with delete[]; pointer arithmetic gives O(1) indexing.",
        "target_text": "Question: How do you dynamically allocate an array in C++?\nChoices:\na) int* array = new int[size];\nb) int array = new int[size];\nc) int array[size];\nd) int* array = malloc(size * sizeof(int));\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Java multi-dimensional arrays are arrays of arrays; sizes per dimension can differ; A[x][y][z] resolves via nested references in O(1) per dereference.",
        "target_text": "Question: Which of the following is the correct way to declare a 3D array in Java?\nChoices:\na) int[][][] array = new int[3][3][3];\nb) int array[][][] = new int[3][3][3];\nc) int array[3][3][3];\nd) int[] array = new int[3][3][3];\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Array-backed lists achieve amortized O(1) append and O(1) indexing; linked lists give O(1) edge insertions but O(n) indexing.",
        "target_text": "Question: Which of the following data structures is best suited for implementing an array list in Java?\nChoices:\na) ArrayList\nb) LinkedList\nc) Stack\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How do you find the maximum element in an array in Python?\nChoices:\na) max(array)\nb) array.max()\nc) max(array[])\nd) array.maximum()\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: C/C++ do not perform bounds checks on built-in arrays; accessing beyond limits yields undefined behavior per the standard.",
        "target_text": "Question: What happens when you access an array element out of bounds in C++?\nChoices:\na) The program crashes\nb) The compiler throws an error\nc) The runtime throws an error\nd) Undefined behavior\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Block copy using memcpy runs in Θ(n) bytes; requires non-overlapping or memmove for overlap; POD types are safe for raw copies.",
        "target_text": "Question: How do you copy an array in C++?\nChoices:\na) std::copy\nb) copyArray\nc) memcpy\nd) copy()\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In JavaScript, const binds the variable, not the object; elements remain mutable; array methods still work; reference cannot be reassigned.",
        "target_text": "Question: Which of the following is a correct way to declare a constant array in JavaScript?\nChoices:\na) const array = [1, 2, 3];\nb) constant array = [1, 2, 3];\nc) array = constant [1, 2, 3];\nd) array.constant = [1, 2, 3];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: Which matrix has most of the elements (not all) as Zero?\nChoices:\na) Identity Matrix\nb) Unit Matrix\nc) Sparse Matrix\nd) Zero Matrix\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; treat indices as 0-based and element size fixed.",
        "target_text": "Question: It is not possible to find the minimum number of steps to reach the end of an array in linear time.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Row-major layout stores rows consecutively, mapping A[i][j] to base + ((i·cols)+j)·w; column-major swaps roles of i and j; address arithmetic is O(1).",
        "target_text": "Question: If column-major order is used, how is the following matrix stored in memory? a b c d e f g h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Juggling rotates using gcd(n,d) cycles and repeated swaps; touches each element once → Θ(n) time, O(1) extra space.",
        "target_text": "Question: What is the time complexity of the juggling algorithm to rotate an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: What will be the suffix array of the string \"engineering\"?\nChoices:\na) 2 3 8 4 9 1 7 5 0 6 10\nb) 5 0 6 1 4 9 1 7 0 2 3 8\nc) 5 0 6 10 2 4 9 1 7 3 8\nd) 5 0 6 10 2 3 8 4 9 1 7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is not an application of sorted array?\nChoices:\na) Commercial computing\nb) Priority Scheduling\nc) Discrete Mathematics\nd) Hash Tables\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: What is a bit array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) Array in which elements are not present in continuous locations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 1?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NOR\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; amortized analysis allowed where noted.",
        "target_text": "Question: What are parallel arrays?\nChoices:\na) Arrays of the same size\nb) Arrays allocated one after the other\nc) Arrays of the same number of elements\nd) Arrays allocated dynamically\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is an advantage of parallel arrays?\nChoices:\na) Poor locality of reference for non-sequential access\nb) Very little direct language support\nc) Expensive to shrink or grow\nd) Increased Locality of Reference\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is an advantage of matrices?\nChoices:\na) Internal complexity\nb) Searching through a matrix is complex\nc) Not space efficient\nd) Graph Plotting\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following is not a disadvantage of bit array?\nChoices:\na) Without compression, they might become sparse\nb) Accessing individual bits is expensive\nc) Compressing bit array to byte/word array, the machine also has to support byte/word addressing\nd) Storing and Manipulating in the register set for long periods of time\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is the correct syntax to declare an ArrayList in Java?\nChoices:\na) ArrayList al = new ArrayList();\nb) ArrayList al = new ArrayList[];\nc) ArrayList al() = new ArrayList();\nd) ArrayList al[] = new ArrayList[];\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity for inserting/deleting at the beginning of the array?\nChoices:\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(nlogn\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume uniform hashing where applicable.",
        "target_text": "Question: What is the worst case time complexity of inserting an element into the sorted array?\nChoices:\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Juggling rotates using gcd(n,d) cycles and repeated swaps; touches each element once → Θ(n) time, O(1) extra space.",
        "target_text": "Question: Which of the following algorithm to rotate an array has the maximum time complexity?\nChoices:\na) rotate elements one by one\nb) juggling algorithm\nc) reversal algorithm\nd) using a temporary array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: Which of the following is false?\nChoices:\na) Suffix array is always sorted\nb) Suffix array is used in string matching problems\nc) Suffix array is always unsorted\nd) Suffix array contains all the suffixes of the given string\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: Suffix array of the string \"statistics\" is . . . . . . . .\nChoices:\na) 2 8 7 4 9 0 5 1 6 3\nb) 2 7 4 9 8 0 5 1 6 3\nc) 2 4 9 0 5 7 8 1 6 3\nd) 2 8 7 0 5 1 6 9 4 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: The matrix contains m rows and n columns. The matrix is called Sparse Matrix if . . . . . . . .\nChoices:\na) Total number of Zero elements > (m*n)/2\nb) Total number of Zero elements = m + n\nc) Total number of Zero elements = m/n\nd) Total number of Zero elements = m-n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; load factor α remains below 0.75.",
        "target_text": "Question: Both Dynamic array and Dynamically memory allocated array are same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the order of a matrix?\nChoices:\na) number of rows X number of columns\nb) number of columns X number of rows\nc) number of rows X number of rows\nd) number of columns X number of columns\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Juggling rotates using gcd(n,d) cycles and repeated swaps; touches each element once → Θ(n) time, O(1) extra space.",
        "target_text": "Question: Reversal algorithm and juggling algorithm for array rotation have the same time complexity.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: Who coined the term Sparse Matrix?\nChoices:\na) Harry Markowitz\nb) James Sylvester\nc) Chris Messina\nd) Arthur Cayley\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the relation between Sparsity and Density of a matrix?\nChoices:\na) Sparsity = 1 - Density\nb) Sparsity = 1 + Density\nc) Sparsity = Density*Total number of elements\nd) Sparsity = Density/Total number of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When reallocation is expensive or predictable capacity exists, avoid frequent resizes; pre-reserve capacity to keep appends amortized O(1).",
        "target_text": "Question: Arbitrary expressions can be used while declaring variable-length arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion is pair (i,j) with i<j and A[i]>A[j]; merge-sort-based counting runs in Θ(n log n) using cross-inversion merges.",
        "target_text": "Question: How many inversions does a sorted array have?\nChoices:\na) 0\nb) 1\nc) 2\nd) cannot be determined\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following can be called a parallel array implementation?\nChoices:\na) firstName  = ['Joe','Bob','Frank','Hans']\nlastName   = ['Smith','Seger','Sinatra','Schultze']\nheightInCM = [169,158,201,199]\n\nfor i in xrange(len(firstName)):\n    print \"Name:\",firstName[i], lastName[i]\n    print \"Height in CM:,\",heightInCM[i]\nb) firstName  = ['Joe','Bob','Frank','Hans']\nlastName   = ['Smith','Seger']\nheightInCM = [169,158]\n\nfor i in xrange(len(firstName)):\n    print \"Name:\",firstName[i], lastName[i]\n    print \"Height in CM:,\",heightInCM[i]\nc) firstName  = ['Joe','Bob']\nlastName   = ['Smith','Seger','Sinatra','Schultze']\nheightInCM = [169,158]\n\nfor i in xrange(len(firstName)):\n    print \"Name:\",firstName[i], lastName[i]\n    print \"Height in CM:,\",heightInCM[i]\nd) firstName  = ['Joe','Bob']\nlastName   = ['Smith','Seger' ,'Schultze']\nheightInCM = [169,158]\n\nfor i in xrange(len(firstName)):\n    print \"Name:\",firstName[i], lastName[i]\n    print \"Height in CM:,\",heightInCM[i]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is the disadvantage of sparse matrices over normal matrices?\nChoices:\na) Size\nb) Speed\nc) Easily compressible\nd) Algorithm complexity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; amortized analysis allowed where noted.",
        "target_text": "Question: In special case, the time complexity of inserting/deleting elements at the end of dynamic array is . . . . . . . .\nChoices:\na) O (n)\nb) O (n1/2)\nc) O (log n)\nd) O (1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: Suffix array can be created by performing . . . . . . . . traversal of a suffix tree.\nChoices:\na) breadth-first\nb) level order\nc) depth-first\nd) either breadth-first or level order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: If comparison based sorting algorithm is used construct the suffix array, then what will be time required to construct the suffix array?\nChoices:\na) O(nlogn)\nb) O(n2)\nc) O(n2logn)\nd) O(n2) + O(logn)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Sequential elements improve spatial locality and prefetch efficiency; scans are cache-friendly with stride-1 access; time per access ~O(1).",
        "target_text": "Question: Which of the following is/are advantages suffix array one suffix tree?   I. Lesser space requirement   II. Improved cache locality   III. Easy construction in linear time\nChoices:\na) Only I\nb) All I, II and III\nc) Only I and III\nd) Only II and III\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following bitwise operations will you use to toggle a particular bit?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NOT\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is a disadvantage of dynamic arrays?\nChoices:\na) Locality of reference\nb) Data cache utilization\nc) Random access\nd) Memory leak\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following is/are not applications of bit arrays?\nChoices:\na) Used by the Linux kernel\nb) For the allocation of memory pages\nc) Bloom filter\nd) Implementation of Vectors and Matrices\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following don't use matrices?\nChoices:\na) In solving linear equations\nb) Image processing\nc) Graph theory\nd) Sorting numbers\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an odd number?\nChoices:\na) (n-1) / 2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; balanced BST buckets are not used here.",
        "target_text": "Question: Array is divided into two parts in . . . . . . . .\nChoices:\na) Hashed Array Tree\nb) Geometric Array\nc) Bounded-size dynamic array\nd) Sparse Array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; amortized analysis allowed where noted.",
        "target_text": "Question: To search for an element in a sorted array, which searching technique can be used?\nChoices:\na) Linear Search\nb) Jump Search\nc) Binary Search\nd) Fibonacci Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Run-Length encoding is used to compress data in bit arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In how many different ways we can reach the end of the array arr[]={1,3,5,8,9}?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which among the following is the worst-case time complexity for appending an element in a variable-length array?\nChoices:\na) O(n)\nb) O(1)\nc) O(n2)\nd) O(log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following is not an advantage of bit array?\nChoices:\na) Exploit bit level parallelism\nb) Maximal use of data cache\nc) Can be stored and manipulated in the register set for long periods of time\nd) Accessing Individual Elements is easy\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: Suffix array can be created in O(nlogn) time.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: What is the time required to locate the occurrences of a pattern P of length m in a string of length n using suffix array?\nChoices:\na) O(nm)\nb) O(n2)\nc) O(mnlogn)\nd) O(mlogn\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion is pair (i,j) with i<j and A[i]>A[j]; merge-sort-based counting runs in Θ(n log n) using cross-inversion merges.",
        "target_text": "Question: How many inversions are there in the array arr = {1,5,4,2,3}?\nChoices:\na) 0\nb) 3\nc) 4\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Bit fields and Bit arrays are same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: LCP array and . . . . . . . . is used to construct suffix tree.\nChoices:\na) Hash tree\nb) Hash trie\nc) Suffix array\nd) Balanced tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays track logical size and allocated capacity; growing by factor γ amortizes append to O(1); shrinking may trigger reallocation thresholds.",
        "target_text": "Question: The size of the dynamic array is deallocated if the array size is less than . . . . . . . .% of the backend physical size.\nChoices:\na) 30\nb) 40\nc) 10\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Row-major layout stores rows consecutively, mapping A[i][j] to base + ((i·cols)+j)·w; column-major swaps roles of i and j; address arithmetic is O(1).",
        "target_text": "Question: If row-major order is used, how is the following matrix stored in memory?   a b c   d e f   g h i\nChoices:\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Matrix product C=A×B uses triple loop i,j,k accumulating a[i][k]*b[k][j]; naive algorithm is Θ(n^3); cache tiling optimizes locality.",
        "target_text": "Question: Which of the following property does not hold for matrix multiplication?\nChoices:\na) Associative\nb) Distributive\nc) Commutative\nd) Additive Inverse\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is a dynamic array?\nChoices:\na) A variable size data structure\nb) An array which is created at runtime\nc) The memory to the array is allocated at runtime\nd) An array which is reallocated everytime whenever new elements have to be added\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: Is O(n) the Worst case Time Complexity for addition of two Sparse Matrix?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays track logical size and allocated capacity; growing by factor γ amortizes append to O(1); shrinking may trigger reallocation thresholds.",
        "target_text": "Question: The growth factor of ArrayList in Java is . . . . . . . .\nChoices:\na) 1\nb) 1.5\nc) 2\nd) 0\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays track logical size and allocated capacity; growing by factor γ amortizes append to O(1); shrinking may trigger reallocation thresholds.",
        "target_text": "Question: What is meant by physical size in a dynamic array?\nChoices:\na) The size allocated to elements\nb) The size extended to add new elements\nc) The size of the underlying array at the back-end\nd) The size visible to users\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the difference between a normal(naive) array and a sparse array?\nChoices:\na) Sparse array can hold more elements than a normal array\nb) Sparse array is memory efficient\nc) Sparse array is dynamic\nd) A naive array is more efficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Matrix product C=A×B uses triple loop i,j,k accumulating a[i][k]*b[k][j]; naive algorithm is Θ(n^3); cache tiling optimizes locality.",
        "target_text": "Question: Select the code snippet which performs matrix multiplication.(a and b are the two given matrices, resultant marix is c)\nChoices:\na) for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { for (int k = 0; k < n; k++) { c[i][j] = c[i][j] + a[i][k] * b[k][j]; } } }\nb) for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { for (int k = 0; k < n; k++) { c[i][j] = c[i][j] * a[i][k] * b[k][j]; } } }\nc) for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { for (int k = 0; k < n; k++) { c[i][j] = c[i][j] + a[i][k] + b[k][j]; } } }\nd) for (int i = 0; i < n; i++) { for (int j = 0; j < n; j++) { for (int k = 0; k < n; k++) { c[i][j] = c[i][j] + a[i][j] + b[k][j]; } } }\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: Which one of the following is a Special Sparse Matrix?\nChoices:\na) Band Matrix\nb) Skew Matrix\nc) Null matrix\nd) Unit matrix\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion is pair (i,j) with i<j and A[i]>A[j]; merge-sort-based counting runs in Θ(n log n) using cross-inversion merges.",
        "target_text": "Question: What does the number of inversions in an array indicate?\nChoices:\na) mean value of the elements of array\nb) measure of how close or far the array is from being sorted\nc) the distribution of values in the array\nd) median value of the elements of array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What will be the resulting array after reversing arr[]={3,5,4,2}?\nChoices:\na) 2,3,5,4\nb) 4,2,3,5\nc) 5,4,2,3\nd) 2,4,5,3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is a sparse array?\nChoices:\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) An array in which memory is allocated in run time\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; no resize in this operation and invariants maintained.",
        "target_text": "Question: How will you implement dynamic arrays in Java?\nChoices:\na) Set\nb) Map\nc) HashMap\nd) List\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following bitwise operations will you use to set a particular bit to 0?\nChoices:\na) OR\nb) AND\nc) XOR\nd) NAND\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following arrays are used in the implementation of list data type in python?\nChoices:\na) Bit array\nb) Dynamic arrays\nc) Sparse arrays\nd) Parallel arrays\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: In what way the Symmetry Sparse Matrix can be stored efficiently?\nChoices:\na) Heap\nb) Binary tree\nc) Hash table\nd) Adjacency List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion is pair (i,j) with i<j and A[i]>A[j]; merge-sort-based counting runs in Θ(n log n) using cross-inversion merges.",
        "target_text": "Question: What is the time complexity of the code that uses merge sort for determining the number of inversions in an array?\nChoices:\na) O(n2)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Dynamic arrays track logical size and allocated capacity; growing by factor γ amortizes append to O(1); shrinking may trigger reallocation thresholds.",
        "target_text": "Question: The number of items used by the dynamic array contents is its . . . . . . . .\nChoices:\na) Physical size\nb) Capacity\nc) Logical size\nd) Random size\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Array rotation by k positions can use reversal (3 reversals) or juggling; both run in Θ(n) time and O(1) space; indices modulo n.",
        "target_text": "Question: To rotate an array by using the algorithm of rotating its elements one by one is an in place algorithm.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; load factor α remains below 0.75.",
        "target_text": "Question: What is a sorted array?\nChoices:\na) Arrays sorted in numerical order\nb) Arrays sorted in alphabetical order\nc) Elements of the array are placed at equally spaced addresses in the memory\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: When do you use a sparse array?\nChoices:\na) When there are unique elements in the array\nb) When the array has more occurrence of zero elements\nc) When the data type of elements differ\nd) When elements are sorted\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the minimum possible time complexity to find the number of steps to reach the end of an array?\nChoices:\na) O(n)\nb) O(n2)\nc) O(n3/2)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion is pair (i,j) with i<j and A[i]>A[j]; merge-sort-based counting runs in Θ(n log n) using cross-inversion merges.",
        "target_text": "Question: Under what condition the number of inversions in an array are minimum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: What does Hamming weight/population count mean in Bit arrays?\nChoices:\na) Finding the number of 1 bit in a bit array\nb) Finding the number of 0 bit in a bit array\nc) Finding the sum of bits in a bit array\nd) Finding the average number of 1's and 0's in bit arrays\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume uniform hashing where applicable.",
        "target_text": "Question: Dynamic arrays overcome the limit of static arrays.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: Is Sparse Matrix also known as Dense Matrix?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: An inversion is pair (i,j) with i<j and A[i]>A[j]; merge-sort-based counting runs in Θ(n log n) using cross-inversion merges.",
        "target_text": "Question: Under what condition the number of inversions in an array are maximum?\nChoices:\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; balanced BST buckets are not used here.",
        "target_text": "Question: It is not possible to reach the end of an array if starting element of the array is 0.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When reallocation is expensive or predictable capacity exists, avoid frequent resizes; pre-reserve capacity to keep appends amortized O(1).",
        "target_text": "Question: Which of the following is an advantage of using variable-length arrays?\nChoices:\na) Deciding the length of an array at the time of execution\nb) Memory allocation at compile time\nc) Initializing array at compile time\nd) Faster execution of code\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A sparse matrix has most entries equal to 0; specialized storage (CSR/CSC) saves space; arithmetic exploits sparsity patterns.",
        "target_text": "Question: Which of the following is not the method to represent Sparse Matrix?\nChoices:\na) Dictionary of Keys\nb) Linked List\nc) Array\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the condition for two elements arr[i] and arr[j] to form an inversion?\nChoices:\na) arr[i]<arr[j]\nb) i < j\nc) arr[i] < arr[j] and i < j\nd) arr[i] > arr[j] and i < j\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; treat indices as 0-based and element size fixed.",
        "target_text": "Question: When array reversal and rotation is applied to the same array then the output produced will also be the same every time.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; no resize in this operation and invariants maintained.",
        "target_text": "Question: How do you allocate a matrix using a single pointer in C?(r and c are the number of rows and columns respectively)\nChoices:\na) int *arr = malloc(r * c * sizeof(int));\nb) int *arr = (int *)malloc(r * c * sizeof(int));\nc) int *arr = (int *)malloc(r + c * sizeof(int));\nd) int *arr = (int *)malloc(r * c * sizeof(arr));\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which one of the following operations returns the first occurrence of bit 1 in bit arrays?\nChoices:\na) Find First Zero\nb) Find First One\nc) Counting lead Zeroes\nd) Counting lead One\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume uniform hashing where applicable.",
        "target_text": "Question: How many swaps are required for reversing an array having n elements where n is an even number?\nChoices:\na) (n-1) / 2\nb) n/2\nc) (n/2) - 1\nd) (n+1)/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Suffix arrays store starting indices of sorted suffixes; LCP arrays speed pattern search to O(m log n) or O(m) with RMQ; space is O(n).",
        "target_text": "Question: Suffix array is space efficient than the suffix tree.\nChoices:\na) True\nb) Fasle\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is a disadvantage of parallel array over the traditional arrays?\nChoices:\na) When a language does not support records, parallel arrays can be used\nb) Increased locality of reference\nc) Ideal cache behaviour\nd) Insertion and Deletion becomes tedious\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Array rotation by k positions can use reversal (3 reversals) or juggling; both run in Θ(n) time and O(1) space; indices modulo n.",
        "target_text": "Question: What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?\nChoices:\na) 2, 1, 3, 4, 5\nb) 3, 4, 5, 1, 2\nc) 4, 5, 1, 2, 3\nd) 1, 2, 3, 5, 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Bit arrays pack k bits per word, enabling word-level ops; set/clear via OR/AND masks; population count counts 1s in O(n/w) words.",
        "target_text": "Question: Which of the following bitwise operator will you use to invert all the bits in a bit array?\nChoices:\na) OR\nb) NOT\nc) XOR\nd) NAND\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: When reallocation is expensive or predictable capacity exists, avoid frequent resizes; pre-reserve capacity to keep appends amortized O(1).",
        "target_text": "Question: In which of the following cases dynamic arrays are not preferred?\nChoices:\na) If the size of the array is unknown\nb) If the size of the array changes after few iterations\nc) If the memory reallocation takes more time i.e. expensive\nd) If the array holds less number of elements\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?\nChoices:\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Treat A as 0-based with fixed element width; address math gives O(1) indexing; operations may cost Θ(n) when shifting or resizing is required; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Each Section contains maximum **100 MCQs question** on **Arrays in Data Structures**.\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Updating head to a new node is a constant-time pointer splice; no traversal needed; cost O(1) on a singly or doubly linked list.",
        "target_text": "Question: What is the time complexity of inserting an element at the beginning of a linked list?\nChoices:\na) O(1\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node stores at least one pointer, increasing per-element overhead; poor cache locality vs arrays; random access is Θ(n).",
        "target_text": "Question: Which of the following is a disadvantage of linked lists compared to arrays?\nChoices:\na) Dynamic size\nb) Random access\nc) Ease of insertion and deletion\nd) Memory overhead\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: What is a circular linked list?\nChoices:\na) A list where each node points to the next\nb) A list where the last node points to the first node\nc) A list where each node points to itself\nd) A list where the nodes are in a circle\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node stores prev and next enabling O(1) deletions with a node pointer; bidirectional traversal supported.",
        "target_text": "Question: Which of the following is true about a doubly linked list?\nChoices:\na) Each node has one pointer\nb) Each node has two pointers\nc) It is a type of tree\nd) It can be traversed in one direction only\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Length isn't stored by default; compute via traversal incrementing a counter; Θ(n) time, O(1) extra space.",
        "target_text": "Question: How do you find the length of a linked list?\nChoices:\na) Using the length property\nb) Using the size property\nc) Iterating through the list\nd) Using the count property\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Given a node and its predecessor (or prev in DLL), adjust pointers to unlink in O(1); singly lists require predecessor reference.",
        "target_text": "Question: What is the time complexity of deleting an element from a singly linked list if the node is known?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: In a singly linked list, what does each node contain?\nChoices:\na) Data only\nb) Data and a pointer to the next node\nc) Data and two pointers\nd) Only pointers\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Linked lists grow/shrink with O(1) edge updates; they trade O(1) index access for cheaper splices; allocation per node.",
        "target_text": "Question: What is the primary advantage of using a linked list over an array?\nChoices:\na) Better cache locality\nb) Dynamic resizing\nc) Constant time access\nd) Reduced memory usage\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: Which type of linked list allows for traversal in both directions?\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Self-referential linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: What happens if you try to access the next pointer of the last node in a singly linked list?\nChoices:\na) Segmentation fault\nb) Null reference\nc) Points to the head of the list\nd) Accesses the first node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: How do you insert a new node at the end of a linked list?\nChoices:\na) Update the head pointer\nb) Update the tail pointer\nc) Traverse to the last node and update its next pointer\nd) Directly insert at the last index\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: No index access; must traverse sequentially comparing keys; worst-case Θ(n) probes; cache locality is poor.",
        "target_text": "Question: What is the time complexity of searching for an element in a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Which of the following operations is the most efficient in a linked list compared to an array?\nChoices:\na) Insertion at the beginning\nb) Accessing an element by index\nc) Finding the maximum element\nd) Sorting\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: How do you remove a node from a doubly linked list?\nChoices:\na) Update the previous node's next pointer and the next node's previous pointer\nb) Update the head pointer\nc) Update the tail pointer\nd) Directly remove the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A dummy head/tail node removes null checks at boundaries, simplifying insert/delete logic while preserving invariants.",
        "target_text": "Question: What is a sentinel node in the context of linked lists?\nChoices:\na) A node that marks the beginning of the list\nb) A node that marks the end of the list\nc) A special node that simplifies edge cases\nd) A node that points to itself\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: What is the space complexity of a linked list with n elements?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Which of the following is an application of linked lists?\nChoices:\na) Implementing stacks\nb) Implementing queues\nc) Both A and B\nd) None of the above\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Use two pointers moving at speeds 1 and 2; meeting implies a cycle; runs in O(n) time and O(1) space.",
        "target_text": "Question: How do you detect a cycle in a linked list?\nChoices:\na) Using a stack\nb) Using two pointers (Floyd's Cycle-Finding Algorithm)\nc) Using recursion\nd) Using a hash table\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: What is the result of reversing a singly linked list?\nChoices:\na) A circular linked list\nb) A doubly linked list\nc) A linked list with nodes in reverse order\nd) An error\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: In a doubly linked list, which of the following is true about the last node?\nChoices:\na) Its next pointer is null\nb) Its previous pointer is null\nc) It points to the first node\nd) It has no pointers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: What is the time complexity for accessing the last element in a singly linked list?\nChoices:\na) O(1\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: Which of the following is NOT a type of linked list?\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Indexed linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: How can you reverse a doubly linked list?\nChoices:\na) Swap the pointers in each node\nb) Traverse the list and update next pointers only\nc) Use a stack to reverse\nd) Reverse the list in place\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: In which scenario is a circular linked list particularly useful?\nChoices:\na) Implementing a queue\nb) Implementing a stack\nc) When you need a dynamic array\nd) When you need an ordered list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A dummy head/tail node removes null checks at boundaries, simplifying insert/delete logic while preserving invariants.",
        "target_text": "Question: What is the primary reason to use a sentinel node in linked lists?\nChoices:\na) To simplify boundary conditions\nb) To increase the list size\nc) To decrease memory usage\nd) To make the list circular\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: How do you detect if a linked list is sorted?\nChoices:\na) Traverse the list and check order\nb) Use a binary search\nc) Use a hash table to store elements\nd) Check the head pointer\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: What is the result of merging two unsorted linked lists?\nChoices:\na) A merged unsorted linked list\nb) A sorted linked list\nc) An error occurs\nd) A circular linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Which of the following operations requires O(n) time in a doubly linked list?\nChoices:\na) Accessing an element by index\nb) Deleting a node at the end\nc) Inserting a node at the beginning\nd) Traversing the list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: How do you implement a priority queue using a linked list?\nChoices:\na) Using a singly linked list\nb) Using a doubly linked list\nc) Using a circular linked list\nd) Using a self-referential linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: In a circular doubly linked list, how is the last node connected to the first node?\nChoices:\na) Through a null pointer\nb) Through the head pointer\nc) Through the next pointer of the first node\nd) Through the previous pointer of the first node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: What happens if you forget to update the next pointer of a node when deleting it in a singly linked list?\nChoices:\na) The node remains in the list\nb) The list becomes circular\nc) The next node's data is lost\nd) The list becomes corrupted\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: Which of the following correctly describes a skip list?\nChoices:\na) A linked list with multiple levels of nodes\nb) A circular linked list with skips\nc) A doubly linked list with skips\nd) A singly linked list with hash pointers\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: How do you efficiently find the kth to last element in a singly linked list?\nChoices:\na) Using a single pointer to traverse the list\nb) Using two pointers (k steps apart)\nc) Using a stack to store elements\nd) Using a binary search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Which of the following operations is most efficient in a singly linked list?\nChoices:\na) Deletion from the end\nb) Accessing the middle element\nc) Insertion at the beginning\nd) Deletion from the beginning\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Use two pointers moving at speeds 1 and 2; meeting implies a cycle; runs in O(n) time and O(1) space.",
        "target_text": "Question: In a linked list, what is a dummy node typically used for?\nChoices:\na) To simplify insertion and deletion\nb) To mark the end of the list\nc) To store extra information\nd) To create a cycle in the list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stores prev⊕next addresses to halve pointer memory; requires pointer arithmetic tricks and is non-portable; traversal uses XOR with prior address.",
        "target_text": "Question: In the above question would using arrays and swaping of elements in place of xor linked list would have been more efficient?\nChoices:\na) no not all\nb) yes arrays would have been better than xor lists\nc) both would be same in efficiency\nd) can't say\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A free list tracks available blocks; buddy systems merge adjacent buddies by address/size; metadata choices affect fragmentation and coalescing.",
        "target_text": "Question: What are the disadvantages in implementing buddy system algorithm for free lists?\nChoices:\na) internal fragmentation\nb) it takes so much space\nc) we no more have the hole lists in order of memory address, so it is difficult to detect if 2 holes remain adjacent in memory and shall be merged into one hole\nd) both a and c are correct\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heuristics like Move-to-Front or Transpose adapt ordering to access frequency; average lookup improves when locality exists.",
        "target_text": "Question: The self organizing list improves . . . . . . . .\nChoices:\na) average access time\nb) insertion\nc) deletion\nd) binary search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: Which of the following is true about a triply linked list?\nChoices:\na) Dynamic in nature\nb) Allows random access\nc) Less memory wastage\nd) Reverse traversing is difficult\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node holds an array of up to B elements, reducing pointer overhead and improving locality; operations may rebalance between nodes.",
        "target_text": "Question: Which among the following is a typical declaration of an unrolled linked list in C?\nChoices:\na) #define SIZE N\nstruct node\n{\n    int node_count;\n    int arr[SIZE];\n    struct node *next;\n};\nb) #define SIZE N\nstruct node\n{\n    int arr[SIZE];\n    struct node *prev;\n    struct node *top;\n};\nc) #define SIZE N\nstruct node\n{\n    int node_count;\n    struct node *next;\n};\nd) #define SIZE N\nstruct node\n{\n    int node_count;\n    int arr[SIZE];\n};\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stores prev⊕next addresses to halve pointer memory; requires pointer arithmetic tricks and is non-portable; traversal uses XOR with prior address.",
        "target_text": "Question: What does first and last nodes of a xor linked lists contain ? (let address of first and last be A and B)\nChoices:\na) NULL xor A and B xor NULL\nb) NULL and NULL\nc) A and B\nd) NULL xor A and B\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heuristics like Move-to-Front or Transpose adapt ordering to access frequency; average lookup improves when locality exists.",
        "target_text": "Question: Which of the following data structure is preferred to have lesser search time when the list size is small?\nChoices:\na) search tree\nb) sorted list\nc) self organizing list\nd) linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stores prev⊕next addresses to halve pointer memory; requires pointer arithmetic tricks and is non-portable; traversal uses XOR with prior address.",
        "target_text": "Question: What is xor linked list?\nChoices:\na) uses of bitwise XOR operation to decrease storage requirements for doubly linked lists\nb) uses of bitwise XOR operation to decrease storage requirements for linked lists\nc) uses of bitwise operations to decrease storage requirements for doubly linked lists\nd) just another form of linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: What are implicit and explicit implementations of freelists?\nChoices:\na) garbage collection and new or malloc operators respectively\nb) new or malloc and garbage collection respectively\nc) implicit implementation is not favored\nd) explicit implementation is not favored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node holds an array of up to B elements, reducing pointer overhead and improving locality; operations may rebalance between nodes.",
        "target_text": "Question: Which among the following is the time complexity for inserting an element in an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heuristics like Move-to-Front or Transpose adapt ordering to access frequency; average lookup improves when locality exists.",
        "target_text": "Question: Which of the following method performs poorly when elements are accessed in sequential order?\nChoices:\na) count method\nb) move to front method\nc) transpose method\nd) ordering method\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: Skip lists are similar to which of the following datastructure?\nChoices:\na) stack\nb) heap\nc) binary search tree\nd) balanced binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heuristics like Move-to-Front or Transpose adapt ordering to access frequency; average lookup improves when locality exists.",
        "target_text": "Question: What technique is used in Transpose method?\nChoices:\na) searched node is swapped with its predecessor\nb) node with highest access count is moved to head of the list\nc) searched node is swapped with the head of list\nd) searched nodes are rearranged based on their proximity to the head node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node holds an array of up to B elements, reducing pointer overhead and improving locality; operations may rebalance between nodes.",
        "target_text": "Question: What happens if a node cannot fit an element in an unrolled linked list?\nChoices:\na) The element is discarded\nb) The elements are moved to the next node\nc) The node is discarded\nd) Error message is shown\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Unrolled linked-list requires more storage space for pointers compared to a singly linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A free list tracks available blocks; buddy systems merge adjacent buddies by address/size; metadata choices affect fragmentation and coalescing.",
        "target_text": "Question: What datastructures can be used in implementing a free list?\nChoices:\na) only linked list\nb) linked list or sort trees\nc) arrays\nd) trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: Consider the 2-level skip list. How to access 38?\nChoices:\na) travel 20-30-35-38\nb) travel 20-30-40-38\nc) travel 20-38\nd) travel 20-40-38\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: To which datastructure are skip lists similar to in terms of time complexities in worst and best cases?\nChoices:\na) balanced binary search trees\nb) binary search trees\nc) binary trees\nd) linked lists\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heuristics like Move-to-Front or Transpose adapt ordering to access frequency; average lookup improves when locality exists.",
        "target_text": "Question: The worst case running time of a linear search on the self organizing list is . . . . . . . .\nChoices:\na) O(1)\nb) O(logn)\nc) O(n)\nd) O(n2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: Is a skip list like balanced tree?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: For which of the following purpose a top pointer can be used?\nChoices:\na) Storing the address of the head pointer\nb) Storing the address of the previous node\nc) Storing the address of the next node\nd) Storing equal values on the same level\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: Suppose, in a triply linked list, the elements 2, 3, 3, 5, 5, 5 and 6 are inserted in the given sequence. To which of the following elements will the top pointer point, if the linked list is traversed starting from the head?\nChoices:\na) 2    3 top → 3    5 top → 5    5 top → 6\nb) 2 top → 3    3 top → 5    5    5 top → 6\nc) 2    3 top → 3    5 top → 5 top → 5    6\nd) 2 top → 3 top → 3 top → 5    5    5    6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node holds an array of up to B elements, reducing pointer overhead and improving locality; operations may rebalance between nodes.",
        "target_text": "Question: The algorithm given is for deleting an element in an unrolled linked list. What should be the correct statement for the blank given below?\nChoices:\na) merge nodes a and a.next\ndelete node a.next\nb) delete node a\nmerge nodes a.prev and a.next\nc) a.elementNum--\na.elementNum++\nd) a.next.elementNum--\na.next.elementNum++\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: The nodes in a skip list may have many forward references. their number is determined\nChoices:\na) probabilistically\nb) randomly\nc) sequentially\nd) orthogonally\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: What is a skip list?\nChoices:\na) a linkedlist with size value in nodes\nb) a linkedlist that allows faster search within an ordered sequence\nc) a linkedlist that allows slower search within an ordered sequence\nd) a tree which is in the form of linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node stores at least one pointer, increasing per-element overhead; poor cache locality vs arrays; random access is Θ(n).",
        "target_text": "Question: Which of the following is a drawback of an unrolled linked list?\nChoices:\na) Small memory overhead\nb) Cache management\nc) High overhead per node\nd) Slow insertion and deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Which of the following is not the properties of XOR lists?\nChoices:\na) X⊕X = 0\nb) X⊕0 = X\nc) (X⊕Y)⊕Z = X⊕(Y⊕Z)\nd) X⊕0 = 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Which of the following is true about the Move-To-Front Method for rearranging nodes?\nChoices:\na) node with highest access count is moved to head of the list\nb) requires extra storage\nc) may over-reward infrequently accessed nodes\nd) requires a counter for each node\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: Are the below statements true about skiplists? In a sorted set of elements skip lists can implement the below operations i.given a element find closest element to the given value in the sorted set in O(logn) ii.find the number of elements in the set whose values fall a given range in O(logn)\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: Where does a triply linked list contains an extra pointer in comparison to a doubly linked list?\nChoices:\na) Top of the node\nb) Bottom of the node\nc) Before the node\nd) After the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: In a circular list the tail.next references the head; traversal can loop indefinitely; tail pointer enables O(1) append.",
        "target_text": "Question: How are free blocks linked together mostly and in what addressing order?\nChoices:\na) circular linked list and increasing addressing order\nb) linked list and decreasing addressing order\nc) linked list and in no addressing order\nd) none of the mentioned\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heuristics like Move-to-Front or Transpose adapt ordering to access frequency; average lookup improves when locality exists.",
        "target_text": "Question: Symbol tables during compilation of program is efficiently implemented using . . . . . . . .\nChoices:\na) a singly linked list\nb) a doubly linked list\nc) a self organizing list\nd) an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stores prev⊕next addresses to halve pointer memory; requires pointer arithmetic tricks and is non-portable; traversal uses XOR with prior address.",
        "target_text": "Question: Which of the following statements are true? i) practical application of XOR linked lists are in environments with limited space requirements, such as embedded devices. ii)xor lists are not suitable because most garbage collectors will fail to work properly with classes or structures that don't contain literal pointers iii)in order to calculate the address of the next node you need to remember the address of the previous node iv)xor lists are much efficient than single, doubly linked lists and arrays\nChoices:\na) i, ii, iii, iv\nb) i, ii, iii\nc) i, ii\nd) i\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: Which of the following is a typical declaration of a triply linked list in C?\nChoices:\na) struct node { int data; struct node *previous; struct node *top; };\nb) struct node { int data; struct node *next; struct node *top; };\nc) struct node { int data; struct node *next; struct node *previous; struct node *top; };\nd) struct node { int data; struct node *next; struct node *previous; };\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: Which among the following is the time complexity for inserting at the beginning of a triply linked list?\nChoices:\na) O(n)\nb) O(1)\nc) O(log n)\nd) O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: What is the time complexity improvement of skip lists from linked lists in insertion and deletion?\nChoices:\na) O(n) to O(logn) where n is number of elements\nb) O(n) to O(1) where n is number of elements\nc) no change\nd) O(n) to O(n2) where n is number of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A free list tracks available blocks; buddy systems merge adjacent buddies by address/size; metadata choices affect fragmentation and coalescing.",
        "target_text": "Question: What is buddy memory management of free lists ?\nChoices:\na) modified version of first fit\nb) buddy allocation keeps several free lists, each one holds blocks which are of one particular size\nc) modified version of best fit\nd) a tree representation of free lists\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A free list tracks available blocks; buddy systems merge adjacent buddies by address/size; metadata choices affect fragmentation and coalescing.",
        "target_text": "Question: How does implicit free lists(garbage collection) works in adding memory to free list ?\nChoices:\na) whichever comes last will be added to free list\nb) whichever comes first will be added to free list\nc) certain blocks cannot be used if there are no pointers to them and hence they can be freed\nd) makes a probabilistic guess\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stores prev⊕next addresses to halve pointer memory; requires pointer arithmetic tricks and is non-portable; traversal uses XOR with prior address.",
        "target_text": "Question: Given 10,8,6,7,9 swap the above numbers such that finally you got 6,7,8,9,10 so now reverse 10 9,7,6,8,10 now reverse 9 8,6,7,9,10 7,6,8,9,10 6,7,8,9,10 at this point 6 is ahead so no more reversing can be done so stop. To implement above algorithm which datastructure is better and why ?\nChoices:\na) linked list. because we can swap elements easily\nb) arrays. because we can swap elements easily\nc) xor linked list. because there is no overhead of pointers and so memory is saved\nd) doubly linked list. because you can traverse back and forth\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A free list tracks available blocks; buddy systems merge adjacent buddies by address/size; metadata choices affect fragmentation and coalescing.",
        "target_text": "Question: Accessing free list very frequently for wide range of addresses can lead to\nChoices:\na) paging\nb) segmentation fault\nc) memory errors\nd) cache problems\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: In . . . . . . . . method, whenever a node is accessed, it might move to the head of the list if its number of accesses becomes greater than the records preceding it.\nChoices:\na) least recently used\nb) count\nc) traspose\nd) exchange\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Stores prev⊕next addresses to halve pointer memory; requires pointer arithmetic tricks and is non-portable; traversal uses XOR with prior address.",
        "target_text": "Question: What does a xor linked list have?\nChoices:\na) every node stores the XOR of addresses of previous and next nodes\nb) actuall memory address of next node\nc) every node stores the XOR of addresses of previous and next two nodes\nd) every node stores xor 0 and the current node address\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node holds an array of up to B elements, reducing pointer overhead and improving locality; operations may rebalance between nodes.",
        "target_text": "Question: Which of the following represents the space complexity for an unrolled linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A free list tracks available blocks; buddy systems merge adjacent buddies by address/size; metadata choices affect fragmentation and coalescing.",
        "target_text": "Question: Free lists are used in\nChoices:\na) static memory allocation\nb) dynamic memory allocation\nc) contagious allocations\nd) are used for speeding up linked list operations\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node holds an array of up to B elements, reducing pointer overhead and improving locality; operations may rebalance between nodes.",
        "target_text": "Question: Insertion and deletion are much faster in an unrolled linked list than in a singly linked list.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Heuristics like Move-to-Front or Transpose adapt ordering to access frequency; average lookup improves when locality exists.",
        "target_text": "Question: Which of the following is not the rearranging method used to implement self-organizing lists?\nChoices:\na) count method\nb) move to front method\nc) ordering method\nd) least frequently used\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: Memory usage in triply linked list is higher than doubly linked list.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Which of the following is an advantage of XOR list?\nChoices:\na) Almost of debugging tools cannot follow the XOR chain, making debugging difficult\nb) You need to remember the address of the previously accessed node in order to calculate the next node's address\nc) In some contexts XOR of pointers is not defined\nd) XOR list decreases the space requirement in doubly linked list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: Consider the following algorithm to insert an element in a triply linked list. Which of the following option is best suited to fill the blank?\nChoices:\na) initializing previous, next and top pointers to null\n    pointing the head and tail to the node created\nb) pointing previous, next and top pointers to the node created\n    initializing the head and tail to null\nc) initializing previous, next and top pointers to null\n    initializing the head and tail to null\nd) pointing previous, next and top pointers to the node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: What is indexed skip list?\nChoices:\na) it stores width of link in place of element\nb) it stores index values\nc) array based linked list\nd) indexed tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Triply linked lists add a third auxiliary link (e.g., same-key vertical stack) to group duplicates; updates maintain cross-links.",
        "target_text": "Question: A node will be rejected while inserting if the given node is already present in a triply linked list.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Skip lists add probabilistic express lanes with level pointers; search, insert, delete average O(log n) with geometric level distribution.",
        "target_text": "Question: How to maintain multi-level skip list properties when insertions and deletions are done?\nChoices:\na) design each level of a multi-level skip list with varied probabilities\nb) that cannot be maintained\nc) rebalancing of lists\nd) reconstruction\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Each node holds an array of up to B elements, reducing pointer overhead and improving locality; operations may rebalance between nodes.",
        "target_text": "Question: An unrolled linked list consists of which of the following data structures?\nChoices:\na) Linked-list and array\nb) Linked-list and stack\nc) Stack and array\nd) Array and queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: A free list tracks available blocks; buddy systems merge adjacent buddies by address/size; metadata choices affect fragmentation and coalescing.",
        "target_text": "Question: What are different ways of implementing free lists and which is simple among them?\nChoices:\na) best fit, first fit, worst fit, simple-first fit\nb) best fit, first fit, worst fit, simple-best fit\nc) best fit, first fit, worst fit, simple-worst fit\nd) best fit simple-best fit\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Nodes store payload and pointers; pointer rewiring drives O(1) edge updates; sequential traversal dominates to locate positions (Θ(n)).",
        "target_text": "Question: Each Section contains maximum **100 MCQs question** on **Linked Lists in Data Structures**.\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the time complexity of push operation in a stack implemented using an array?\nChoices:\na) O(1\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following operations is performed last in a stack?\nChoices:\na) Push\nb) Pop\nc) Peek\nd) Size\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the stack's behavior when it's described as LIFO?\nChoices:\na) Last In First Out\nb) Last In Last Out\nc) First In First Out\nd) First In Last Out\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How can you implement a stack using a linked list?\nChoices:\na) By using a singly linked list\nb) By using a doubly linked list\nc) By using a circular linked list\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which data structure would you use to evaluate a postfix expression?\nChoices:\na) Queue\nb) Stack\nc) Linked list\nd) Binary Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the result of calling the pop operation on an empty stack?\nChoices:\na) An error is thrown\nb) The stack returns null\nc) The stack remains unchanged\nd) It creates a new stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How do you check if a stack is empty?\nChoices:\na) Check if the top pointer is null\nb) Check if the size is zero\nc) Check if the top pointer is zero\nd) Check if the last element is null\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which operation on a stack is used to retrieve the top element without removing it?\nChoices:\na) Pop\nb) Push\nc) Peek\nd) Size\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In which scenario is a stack particularly useful?\nChoices:\na) For implementing recursion\nb) For implementing a queue\nc) For implementing a graph\nd) For implementing a priority queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: How would you implement a stack with constant space complexity?\nChoices:\na) By using a dynamic array\nb) By using a linked list\nc) By using a fixed-size array\nd) By using a hash table\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the space complexity of a stack implemented using a linked list with n elements?\nChoices:\na) O(1\nb) O(n)\nc) O(log n)\nd) O(n^2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the maximum number of elements that can be held in a stack with a fixed size of 10?\nChoices:\na) 10\nb) 11\nc) 9\nd) Unlimited\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What happens when a stack overflows?\nChoices:\na) The program crashes\nb) The top element is lost\nc) An error is thrown\nd) The stack size increases dynamically\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How can you reverse a stack using recursion?\nChoices:\na) By using a temporary stack\nb) By using a queue\nc) By using a linked list\nd) By using additional recursive calls\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is NOT a valid operation for a stack?\nChoices:\na) Peek\nb) Push\nc) Pop\nd) Enqueue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following problems can be solved efficiently using a stack?\nChoices:\na) Balanced parentheses\nb) Sorting\nc) Searching\nd) Finding shortest path\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In a stack implemented using an array, what happens if the stack exceeds its predefined size?\nChoices:\na) The stack expands dynamically\nb) The stack overflows\nc) The stack shrinks\nd) The program crashes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity for accessing the top element in a stack implemented using an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which operation is NOT typically associated with stacks?\nChoices:\na) Push\nb) Pop\nc) Enqueue\nd) Peek\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the main advantage of using a linked list to implement a stack compared to an array?\nChoices:\na) No fixed size limit\nb) Better cache locality\nc) Faster access time\nd) Simpler implementation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How can you implement a stack using two queues?\nChoices:\na) By using one queue to store elements and the other to reverse the order\nb) By alternating between queues for push and pop\nc) By using one queue for stack operations and another for temporary storage\nd) By using one queue to manage the size of the stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the result of performing a pop operation on a stack that contains elements [5, 10, 15]?\nChoices:\na) The stack becomes [5, 10]\nb) The stack becomes [5, 10, 15]\nc) The stack becomes [10, 15]\nd) The stack becomes [5]\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In which scenario would a stack not be suitable for use?\nChoices:\na) Evaluating expressions\nb) Reversing elements\nc) Implementing a breadth-first search\nd) Undo operations in a text editor\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How do you implement a stack with O(1) time complexity for both push and pop operations?\nChoices:\na) Using an array with dynamic resizing\nb) Using a linked list\nc) Using a fixed-size array\nd) Using a doubly linked list\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the effect of a stack's top pointer being NULL?\nChoices:\na) The stack is empty\nb) The stack is full\nc) The stack is corrupted\nd) The stack size is zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the correct order of stack operations when performing the infix to postfix conversion?\nChoices:\na) Push operators onto the stack and pop them according to precedence\nb) Pop operators from the stack and push them according to precedence\nc) Directly append operators to the result\nd) Push and pop all operands\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How can you check if two stacks are equal?\nChoices:\na) Compare their sizes and elements\nb) Compare their top elements only\nc) Compare their sizes only\nd) Compare their last elements only\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of peeking at the top element of a stack implemented using a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a stack, what does the push operation do?\nChoices:\na) Adds an element to the top of the stack\nb) Removes the top element from the stack\nc) Retrieves the top element without removing it\nd) Resizes the stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which stack operation is typically used to undo the most recent action in applications?\nChoices:\na) Push\nb) Pop\nc) Peek\nd) Swap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a stack, what is the term used to describe the condition when elements are removed until it is empty?\nChoices:\na) Overflow\nb) Underflow\nc) Reset\nd) Collapse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How would you implement a stack that supports minimum element retrieval in constant time?\nChoices:\na) Use an additional stack to keep track of minimums\nb) Use a doubly linked list\nc) Use a hash table to store minimums\nd) Use a binary search tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following operations cannot be performed in O(1) time in a stack?\nChoices:\na) Push\nb) Pop\nc) Peek\nd) Search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What happens when you push an element onto a stack that is already full (in a fixed-size stack)?\nChoices:\na) The element overwrites the existing one\nb) The stack shrinks\nc) An overflow error occurs\nd) The element is ignored\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following problems can be efficiently solved using a stack?\nChoices:\na) Evaluating infix expressions\nb) Finding the shortest path in a graph\nc) Checking for cycles in a graph\nd) Sorting elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How do you implement a stack using two stacks?\nChoices:\na) By using one stack for push and the other for pop operations\nb) By using one stack to keep elements and the other to reverse them\nc) By alternating between two stacks\nd) By using two stacks for different data types\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of accessing an element at the bottom of a stack implemented using a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How can you check if a given sequence of brackets is balanced using a stack?\nChoices:\na) Push each opening bracket and pop on closing brackets\nb) Directly compare brackets without stack\nc) Use a queue to process brackets\nd) Track the balance using a counter\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a common use case for a stack in web browsers?\nChoices:\na) Maintaining a history of visited pages\nb) Storing user credentials\nc) Caching images\nd) Handling cookies\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following correctly describes a stack's push operation in terms of its effect on the stack?\nChoices:\na) Adds an element to the top of the stack\nb) Removes the top element of the stack\nc) Retrieves the top element without removal\nd) Checks the stack size\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the maximum number of elements that can be held in a stack if it has a capacity of 20 and 5 elements are pushed and then 3 elements are popped?\nChoices:\na) 22\nb) 17\nc) 15\nd) 20\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What type of stack implementation allows for the stack to grow dynamically as needed?\nChoices:\na) Static array implementation\nb) Dynamic array implementation\nc) Fixed-size array implementation\nd) Circular buffer implementation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Evaluate the following and choose the correct answer.   a/b+c*d where a=4, b=2, c=2, d=1.\nChoices:\na) 1\nb) 4\nc) 5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of balancing parentheses algorithm?\nChoices:\na) O (N)\nb) O (N log N)\nc) O (M log N)\nd) O (N2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Using the evaluation of infix expression, evaluate a^b+c and choose the correct answer. (a=2, b=2, c=2)\nChoices:\na) 12\nb) 8\nc) 10\nd) 6\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Evaluate the postfix expression ab + cd/- where a=5, b=4, c=9, d=3.\nChoices:\na) 23\nb) 15\nc) 6\nd) 10\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What would be the solution to the given prefix notation? / / / 16 4 2 1\nChoices:\na) 1\nb) 4\nc) 2\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of an infix to postfix conversion algorithm?\nChoices:\na) O(N log N)\nb) O(N)\nc) O(N2)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Is the given statement ((A+B) + [C-D]] valid with respect to balancing of symbols?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What would be the Prefix notation for the given equation? A+B*C^D\nChoices:\na) +A*B^CD\nb) +A^B*CD\nc) *A+B^CD\nd) ^A*B+CD\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Consider the stack | 5 | | 4 | | 3 | | 2 |. At this point, '*' is encountered. What has to be done?\nChoices:\na) 5*4=20 is pushed into the stack\nb) * is pushed into the stack\nc) 2*3=6 is pushed into the stack\nd) * is ignored\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What would be the solution to the given prefix notation? - + 1 2 * 3 / 6 2\nChoices:\na) 6\nb) -6\nc) 3\nd) -3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Parentheses are simply ignored in the conversion of infix to postfix expression.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity for converting decimal to binary numbers?\nChoices:\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(nlogn)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What should be done when an opening parentheses is read in a balancing symbols algorithm?\nChoices:\na) push it on to the stack\nb) throw an error\nc) ignore the parentheses\nd) pop the stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the value of the postfix expression 2 3 + 4 5 6 - - *\nChoices:\na) 19\nb) 21\nc) -4\nd) 25\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Evaluation of infix expression is done based on precedence of operators.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?\nChoices:\na) Operand is pushed on to the stack\nb) If the precedence of operator is higher, pop two operands and evaluate\nc) If the precedence of operator is lower, pop two operands and evaluate\nd) The result is pushed on to the operand stack\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Reverse Polish Notation is the reverse of a Polish Notation.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Using the evaluation of prefix algorithm, evaluate +-9 2 7.\nChoices:\na) 10\nb) 4\nc) 17\nd) 14\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following statement is incorrect with respect to balancing symbols algorithm?\nChoices:\na) {[()]}\nb) ([ )]\nc) {( )}\nd) {[ ]}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: An error is reported when the stack is not empty at the end.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many stacks are required for reversing a word algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Evaluate the following infix expression using algorithm and choose the correct answer. a+b*c-d/e^f where a=1, b=2, c=3, d=4, e=2, f=2.\nChoices:\na) 6\nb) 8\nc) 9\nd) 7\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What would be the solution to the given prefix notation? + 9 * 3 / 8 4\nChoices:\na) 14\nb) 15\nc) 18\nd) 12\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How many stacks are required for applying evaluation of infix expression algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How many stacks are required for evaluation of prefix expression?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In Postfix expressions, the operators come after the operands.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The system throws an error if parentheses are encountered in an infix expression evaluation algorithm.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Out of the following operators (^, *, +, &, $), the one having highest priority is . . . . . . . .\nChoices:\na) +\nb) $\nc) ^\nd) &\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following data structure is used to convert postfix expression to infix expression?\nChoices:\na) Stack\nb) Queue\nc) Linked List\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Given two processes (conversion of postfix equation to infix notation and conversion of prefix notation to infix notation), which of the following is easier to implement?\nChoices:\na) Both are easy to implement\nb) Conversion of postfix equation to infix equation is harder than converting a prefix notation to infix notation\nc) Conversion of postfix equation to infix equation is easier than converting a prefix notation to infix notation\nd) Insufficient data\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Express -15 as a 6-bit signed binary number.\nChoices:\na) 001111\nb) 101111\nc) 101110\nd) 001110\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The equivalent infix expression and value for the postfix form 1 2 + 3 * 4 5 * - will be . . . . . . . .\nChoices:\na) 1 + 2 * 3 - 4 * 5 and -13\nb) (2 + 1) * (3 - 4) * 5 and 13\nc) 1 + 2 * (3 - 4) * 5 and -11\nd) (1 + 2) * 3 - (4 * 5) and -11\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 1+2*3-2\nChoices:\na) 3\nb) 6\nc) 5\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the postfix expression for the infix expression? a-b-c\nChoices:\na) -ab-c\nb) ab - c -\nc) - -abc\nd) -ab-c\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which is the predefined method available in Java to convert decimal to binary numbers?\nChoices:\na) toBinaryInteger(int)\nb) toBinaryValue(int)\nc) toBinaryNumber(int)\nd) toBinaryString(int)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the corresponding postfix expression for the given infix expression? a*(b+c)/d\nChoices:\na) ab*+cd/\nb) ab+*cd/\nc) abc*+/d\nd) abc+d/\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What determines the order of evaluation of a prefix expression?\nChoices:\na) precedence and associativity\nb) precedence only\nc) associativity only\nd) depends on the parser\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: To convert the postfix expression into the infix expression we use stack and scan the postfix expression from left to right.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the time complexity of reversing a word using stack algorithm?\nChoices:\na) O (N log N)\nb) O (N2)\nc) O (N)\nd) O (M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following statement is invalid with respect to balancing symbols?\nChoices:\na) [(A+B) + (C-D)]\nb) [{A+B}-{C-[D+E]}]\nc) ((A+B) + (C+D)\nd) {(A+B) + [C+D]}\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: When the corresponding end bracket/braces/parentheses is not found, what happens?\nChoices:\na) The stack is popped\nb) Ignore the parentheses\nc) An error is reported\nd) It is treated as an exception\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following does the balancing symbols algorithm include?\nChoices:\na) balancing double quotes\nb) balancing single quotes\nc) balancing operators and brackets\nd) balancing parentheses, brackets and braces\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which data structure can be used to test a palindrome?\nChoices:\na) Tree\nb) Heap\nc) Stack\nd) Priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 4*2+3-5/5\nChoices:\na) 10\nb) 11\nc) 16\nd) 12\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The result of the postfix expression 5 3 * 9 + 6 / 8 4 / + is . . . . . . . .\nChoices:\na) 8\nb) 6\nc) 10\nd) 9\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: When an operand is read, which of the following is done?\nChoices:\na) It is placed on to the output\nb) It is placed in operator stack\nc) It is ignored\nd) Operator stack is emptied\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is an example for a postfix expression?\nChoices:\na) a*b(c+d)\nb) abc*+de-+\nc) +ab\nd) a+b-c\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What should be done when a left parenthesis '(' is encountered?\nChoices:\na) It is ignored\nb) It is placed in the output\nc) It is placed in the operator stack\nd) The contents of the operator stack is emptied\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Of the following choices, which operator has the lowest precedence?\nChoices:\na) ^\nb) +\nc) /\nd) #\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: It is easier for a computer to process a postfix expression than an infix expression.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: If -\\*+abcd = 11, find a, b, c, d using evaluation of prefix algorithm.\nChoices:\na) a=2, b=3, c=5, d=4\nb) a=1, b=2, c=5, d=4\nc) a=5, b=4, c=7,d=5\nd) a=1, b=2, c=3, d=4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The associativity of an exponentiation operator ^ is right side.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\nChoices:\na) push it directly on to the stack\nb) pop 2 operands, evaluate them and push the result on to the stack\nc) pop the entire stack\nd) ignore the operator\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Identify the infix expression from the list of options given below.\nChoices:\na) a/b+(c-d)\nb) abc\\*+d+ab+cd+\\*ce-f-\nc) ab-c-\nd) +ab\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The optimal data structure used to solve Tower of Hanoi is . . . . . . . .\nChoices:\na) Tree\nb) Heap\nc) Priority queue\nd) Stack\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which among the following is not a palindrome?\nChoices:\na) Madam\nb) Dad\nc) Malayalam\nd) Maadam\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: How many passes does the balancing symbols algorithm makes through the input?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: While evaluating a prefix expression, the string is read from?\nChoices:\na) left to right\nb) right to left\nc) center to right\nd) center to left to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Reversing a word using stack can be used to find if the given word is a palindrome or not.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is not an application of stack?\nChoices:\na) evaluation of postfix expression\nb) conversion of infix to postfix expression\nc) balancing symbols\nd) line at ticket counter\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many passes does the evaluation of infix expression algorithm makes through the input?\nChoices:\na) One\nb) Two\nc) Three\nd) Four\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following statement is incorrect with respect to infix to postfix conversion algorithm?\nChoices:\na) operand is always placed in the output\nb) operator is placed in the stack when the stack operator has lower precedence\nc) parenthesis are included in the output\nd) higher and equal priority operators follow the same condition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: When converting the prefix notation into an infix notation, the first step to be followed is . . . . . . . .\nChoices:\na) Reverse the equation\nb) Push the equation to the stack\nc) Push the equation onto the queue\nd) Push the equation to the stack or queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How many types of input characters are accepted by this algorithm?\nChoices:\na) one\nb) two\nc) three\nd) four\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Consider the postfix expression 4 5 6 a b 7 8 a c, where a, b, c are operators. Operator a has higher precedence over operators b and c. Operators b and c are right associative. Then, equivalent infix expression is\nChoices:\na) 4 a 5 6 b 7 8 a c\nb) 4 a 5 c 6 b 7 a 8\nc) 4 b 5 a 6 c 7 a 8\nd) 4 a 5 b 6 c 7 a 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In infix to postfix conversion algorithm, the operators are associated from?\nChoices:\na) right to left\nb) left to right\nc) centre to left\nd) centre to right\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is an infix expression?\nChoices:\na) (a+b)*(c+d)\nb) ab+c*\nc) +ab\nd) abc+*\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Evaluate and write the result for the following postfix expression   abc*+de*f+g*+ where a=1, b=2, c=3, d=4, e=5, f=6, g=2.\nChoices:\na) 61\nb) 59\nc) 60\nd) 55\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: For the given expression tree, write the correct postfix expression.\nChoices:\na) abc*+\nb) abc+*\nc) ab+c*\nd) a+bc*\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Operations required for reversing a word or a string using stack are push() and pop().\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In balancing parentheses algorithm, the string is read from?\nChoices:\na) right to left\nb) left to right\nc) center to right\nd) center to left\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What will be the word obtained if the word \"abbcabb\" is reversed using a stack?\nChoices:\na) bbabbca\nb) abbcabb\nc) bbacbba\nd) bbacabb\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following statement is incorrect?\nChoices:\na) Postfix operators use value to their right\nb) Postfix operators use value to their left\nc) Prefix operators use value to their right\nd) In postfix expression, operands are followed by operators\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the postfix expression for the following infix expression? a/b^c-d\nChoices:\na) abc^/d-\nb) ab/cd^-\nc) ab/^cd-\nd) abcd/-\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the other name for a postfix expression?\nChoices:\na) Normal polish Notation\nb) Reverse polish Notation\nc) Warsaw notation\nd) Infix notation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Given a prefix and a postfix notation what are the difference between them?\nChoices:\na) The postfix equation is solved starting from the left whereas the prefix notation is solved from the right\nb) The postfix equation is solved starting from the right whereas the prefix notation is solved from the left\nc) Both equations are solved starting from the same side(right)\nd) Both equations are solved starting from the same side(left)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the result of the following postfix expression? ab*cd*+ where a=2,b=2,c=3,d=4.\nChoices:\na) 16\nb) 12\nc) 14\nd) 10\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: From the given Expression tree, identify the correct postfix expression from the list of options.\nChoices:\na) ab*cd*+\nb) ab*cd-+\nc) abcd-*+\nd) ab*+cd-\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the result of the given postfix expression? abc*+ where a=1, b=2, c=3.\nChoices:\na) 4\nb) 5\nc) 6\nd) 7\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What will be output if the following sequence of operations are executed? Push(a,s); Push(b,s); Pop(b); Push(c,s);\nChoices:\na) abc\nb) b\nc) ac\nd) acb\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of evaluation of postfix expression algorithm?\nChoices:\na) O (N)\nb) O (N log N)\nc) O (N2)\nd) O (M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which application of stack is used to ensure that the pair of parentheses is properly nested?\nChoices:\na) Balancing symbols\nb) Reversing a stack\nc) Conversion of an infix to postfix expression\nd) Conversion of an infix to prefix expression\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What are the set of functions that are to be executed to get the following output?   cat\nChoices:\na) push(c, s); push(a, s); push(t, s);\n\npop(s); pop(s); pop(s);\nb) push(c,s); pop(s); push(a,s); pop(s);push(t,s);pop(s);\nc) pop(c ); pop(a); pop(t);\nd) push(c,s); push(a,s); pop(t);\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What will be result if the given stack is popped?\nChoices:\na) pat\nb) tap\nc) atp\nd) apt\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What data structure is used when converting an infix notation to prefix notation?\nChoices:\na) Stack\nb) Queue\nc) B-Trees\nd) Linked-list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\nChoices:\na) push it on to the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which is the most appropriate data structure for applying balancing of symbols algorithm?\nChoices:\na) stack\nb) queue\nc) tree\nd) graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Out of the following operators (|, *, +, &, $), the one having lowest priority is . . . . . . . .\nChoices:\na) +\nb) $\nc) |\nd) &\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the main purpose of a stack in data structures?\nChoices:\na) To store data in a First In First Out (FIFO) manner.\nb) To store data in a Last In First Out (LIFO) manner.\nc) To store data in a random order.\nd) To store data in a sorted order.\nAnswer: To store data in a Last In First Out (LIFO) manner."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which operation is not performed on a stack?\nChoices:\na) Push\nb) Pop\nc) Peek\nd) Search\nAnswer: Searching for an element."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is a stack?\nChoices:\na) A linear data structure\nb) A non-linear data structure\nc) A data structure that follows FIFO\nd) None of the above\nAnswer: A stack is a linear data structure that follows the Last In First Out (LIFO) principle."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following operations can be performed on a stack?\nChoices:\na) Push only\nb) Pop only\nc) Push and Pop\nd) None of the above\nAnswer: Push and Pop operations can be performed on a stack."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity of push and pop operations in a stack?\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n^2\nAnswer: The time complexity of push and pop operations in a stack is O(1)."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In which data structure can you find the 'top' element?\nChoices:\na) Queue\nb) Stack\nc) Linked List\nd) Array\nAnswer: In a stack, you can find the 'top' element."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the main use of a stack?\nChoices:\na) Data storage\nb) Function calls\nc) Sorting\nd) Searching\nAnswer: Stacks are used for function calls, expression evaluation, and backtracking algorithms."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the maximum size of a stack?\nChoices:\na) Fixed size\nb) Dynamic size\nc) Depends on the implementation\nd) None of the above\nAnswer: The maximum size of a stack is determined by the system's memory."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In which scenario would you use a stack?\nChoices:\na) Reversing a string\nb) Sorting data\nc) Searching data\nd) None of the above\nAnswer: When you need to reverse a string or evaluate expressions."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Each Section contains maximum 100 MCQs question on Stacks in Data Structures.\nChoices:\na) Stacks in Data Structures - Section 1\nb) Stacks in Data Structures - Section 2\nAnswer: To get more questions visit other sections."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the main characteristic of a queue data structure?\nChoices:\na) Last In, First Out (LIFO)\nb) First In, First Out (FIFO)\nc) Last In, Last Out (LILO)\nd) First In, Last Out (FILO)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following operations is used to add an element to the end of a queue?\nChoices:\na) Enqueue\nb) Dequeue\nc) Peek\nd) Push\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of the dequeue operation in a queue implemented using a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which queue implementation is used for circular buffering?\nChoices:\na) Circular queue\nb) Priority queue\nc) Double-ended queue\nd) Simple queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity of accessing the front element in a queue implemented using an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How can you efficiently implement a queue using two stacks?\nChoices:\na) By using one stack for enqueue and the other for dequeue\nb) By using one stack to store elements and the other to reverse them\nc) By alternating between two stacks\nd) By using two stacks for different operations\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the main disadvantage of a queue implemented using a fixed-size array?\nChoices:\na) Fixed size limits capacity\nb) Inefficient memory usage\nc) Slow operations\nd) Complexity in implementation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In which scenario is a priority queue particularly useful?\nChoices:\na) When elements need to be processed in a specific order\nb) When elements need to be added or removed in any order\nc) When all elements have equal priority\nd) When you need a simple queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What does the term \"enqueue\" refer to in a queue data structure?\nChoices:\na) Removing an element from the front\nb) Adding an element to the back\nc) Retrieving the element at the front\nd) Clearing all elements from the queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following operations is NOT supported by a standard queue?\nChoices:\na) Enqueue\nb) Dequeue\nc) Peek\nd) Insert at specific position\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary advantage of using a circular queue over a linear queue?\nChoices:\na) Better utilization of memory\nb) Faster operations\nc) Simpler implementation\nd) No advantage\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What will happen if you try to dequeue from an empty queue?\nChoices:\na) An error is thrown\nb) The operation succeeds with a null value\nc) The queue automatically grows\nd) Nothing happens\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In a queue, how do you determine if the queue is full when using a fixed-size array?\nChoices:\na) By comparing the current size to the array size\nb) By checking if the front index is equal to the rear index\nc) By checking if the rear index is one less than the front index\nd) By checking if the queue is empty\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of the enqueue operation in a queue implemented using a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How can you implement a deque (double-ended queue) using a linked list?\nChoices:\na) By using a doubly linked list\nb) By using two single-ended queues\nc) By using a circular buffer\nd) By using a priority queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the time complexity of the front operation in a queue implemented using a circular array?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which type of queue allows elements to be added or removed from both ends?\nChoices:\na) Circular Queue\nb) Priority Queue\nc) Deque\nd) Simple Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the primary purpose of a queue in a multi-threaded environment?\nChoices:\na) To manage task execution order\nb) To perform sorting operations\nc) To optimize search operations\nd) To handle recursive calls\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: How can you implement a queue using two stacks efficiently?\nChoices:\na) By using one stack for enqueue and the other for dequeue\nb) By using one stack to reverse elements and the other to process them\nc) By using two stacks to manage elements and orders\nd) By using one stack to store elements and the other to manage order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following operations in a queue involves removing an element from the front?\nChoices:\na) Enqueue\nb) Dequeue\nc) Peek\nd) Insert\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What type of queue implementation is typically used in round-robin scheduling?\nChoices:\na) Circular Queue\nb) Priority Queue\nc) Deque\nd) Simple Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is a characteristic feature of a priority queue?\nChoices:\na) Elements are processed based on priority\nb) Elements are processed in FIFO order\nc) Elements are processed in LIFO order\nd) Elements are processed in sorted order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the key difference between a regular queue and a priority queue?\nChoices:\na) Priority queues have ordered elements\nb) Regular queues have unordered elements\nc) Priority queues use LIFO order\nd) Regular queues use priority-based processing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a fixed-size queue implemented using an array, how do you manage the wrap-around situation?\nChoices:\na) By using a circular array\nb) By increasing the array size\nc) By resetting the array index\nd) By using a dynamic array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the main advantage of using a queue over a stack in certain applications?\nChoices:\na) Queues support FIFO ordering\nb) Queues support LIFO ordering\nc) Queues use less memory\nd) Queues have faster access times\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following queue implementations would be ideal for handling real-time data streams?\nChoices:\na) Circular Queue\nb) Priority Queue\nc) Deque\nd) Simple Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How does a priority queue differ from a queue when handling tasks?\nChoices:\na) It processes tasks based on priority\nb) It processes tasks based on arrival time\nc) It processes tasks in reverse order\nd) It processes tasks in random order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What will happen if you attempt to enqueue an element in a queue that is full (in a fixed-size queue)?\nChoices:\na) The element is added to the queue\nb) The queue automatically resizes\nc) An overflow error occurs\nd) The element is ignored\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a queue, what operation is used to view the element at the front without removing it?\nChoices:\na) Peek\nb) Dequeue\nc) Enqueue\nd) Insert\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: How do you determine if a queue implemented using a circular array is empty?\nChoices:\na) Check if the front and rear pointers are equal\nb) Check if the front pointer is null\nc) Check if the rear pointer is null\nd) Check if the queue size is zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the typical application of a queue in operating systems?\nChoices:\na) Managing job scheduling\nb) Performing arithmetic operations\nc) Sorting data\nd) Storing function calls\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which queue type allows elements to be inserted at both ends and removed from both ends?\nChoices:\na) Circular Queue\nb) Priority Queue\nc) Double-ended Queue (Deque)\nd) Simple Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the primary advantage of using a priority queue over a simple queue?\nChoices:\na) Processing elements based on priority\nb) Processing elements in FIFO order\nc) Supporting random access\nd) Allowing element insertion at both ends\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How is a queue typically implemented in a breadth-first search algorithm?\nChoices:\na) Using a priority queue\nb) Using a circular queue\nc) Using a simple queue\nd) Using a double-ended queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the result of enqueuing an element into an empty queue?\nChoices:\na) The queue size increases by one\nb) The element replaces the front element\nc) The queue is unchanged\nd) An error occurs\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is true about a queue implemented using a singly linked list?\nChoices:\na) Elements are enqueued at the end and dequeued from the front\nb) Elements are enqueued at the front and dequeued from the end\nc) Elements are enqueued and dequeued from the front\nd) Elements are enqueued and dequeued from the end\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How do you handle the overflow situation in a queue implemented using a circular buffer?\nChoices:\na) By resizing the buffer dynamically\nb) By wrapping around when the end is reached\nc) By resetting the buffer size\nd) By adding elements at a different position\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following operations is used to view the last element in a queue without removing it?\nChoices:\na) Peek\nb) Dequeue\nc) Enqueue\nd) Front\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What does it mean if a queue is described as \"full\" in the context of a fixed-size implementation?\nChoices:\na) No more elements can be added\nb) All elements have been removed\nc) The queue is empty\nd) The queue size is zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In which scenario would a double-ended queue (Deque) be particularly useful?\nChoices:\na) When you need to add or remove elements from both ends\nb) When you need to sort elements\nc) When you need to manage tasks by priority\nd) When you need to store elements sequentially\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the time complexity of the enqueue and dequeue operations in a queue implemented using a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which type of queue is suitable for implementing a queue with priority levels?\nChoices:\na) Circular Queue\nb) Priority Queue\nc) Simple Queue\nd) Double-ended Queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What happens if you dequeue an element from a queue that is currently full?\nChoices:\na) The queue remains unchanged\nb) An overflow error occurs\nc) The queue automatically resizes\nd) An underflow error occurs\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How can you determine if a queue is full when using a fixed-size array implementation?\nChoices:\na) By checking if the rear pointer is at the maximum capacity\nb) By checking if the front pointer is equal to the rear pointer\nc) By checking if the size equals the array size\nd) By checking if the array is null\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What type of queue implementation would be best for implementing a scheduling algorithm?\nChoices:\na) Priority Queue\nb) Circular Queue\nc) Double-ended Queue\nd) Simple Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is a queue?\nChoices:\na) A linear data structure\nb) A non-linear data structure\nc) A data structure that follows LIFO\nd) None of the above\nAnswer: A queue is a linear data structure that follows the First In First Out (FIFO) principle."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is a queue operation?\nChoices:\na) Push\nb) Pop\nc) Enqueue\nd) Insert\nAnswer: Enqueue and Dequeue are the primary operations of a queue."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of enqueue operation in a queue?\nChoices:\na) O(n)\nb) O(1)\nc) O(log n)\nd) O(n log n\nAnswer: The time complexity of enqueue operation is O(1)."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which data structure is used to implement a queue?\nChoices:\na) Array\nb) Linked List\nc) Both A and B\nd) None of the above\nAnswer: A queue can be implemented using arrays or linked lists."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is a circular queue?\nChoices:\na) A queue that is circular\nb) A queue that is linear\nc) A queue that is non-linear\nd) None of the above\nAnswer: A circular queue is a linear data structure that follows the FIFO principle but connects the last position back to the first position."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the main purpose of a queue in data structures?\nChoices:\na) To manage data in a last-in, first-out (LIFO) manner.\nb) To manage data in a first-in, first-out (FIFO) manner.\nc) To manage data in a random order.\nd) To manage data in a sorted order.\nAnswer: To manage data in a first-in, first-out (FIFO) manner."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is a common application of queues?\nChoices:\na) Memory management.\nb) Scheduling tasks in operating systems.\nc) Data sorting.\nd) Searching algorithms.\nAnswer: Scheduling tasks in operating systems."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What data structure is used to implement a queue?\nChoices:\na) Tree.\nb) Graph.\nc) Linked list or array.\nd) Hash table.\nAnswer: Linked list or array."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of enqueue operation in a queue implemented using a linked list?\nChoices:\na) O(n).\nb) O(1).\nc) O(log n).\nd) O(n log n).\nAnswer: O(1)."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity of dequeue operation in a queue implemented using an array?\nChoices:\na) O(1).\nb) O(n).\nc) O(log n).\nd) O(n log n).\nAnswer: O(n)."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is a characteristic of a queue?\nChoices:\na) LIFO (Last In First Out)\nb) FIFO (First In First Out)\nc) Random Access\nd) None of the above\nAnswer: FIFO (First In First Out)"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In a circular queue, the last position is connected back to the first position. What is this feature called?\nChoices:\na) Wrap Around\nb) Circular Link\nc) Circular Reference\nd) None of the above\nAnswer: Wrap Around"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which data structure is used for implementing a queue?\nChoices:\na) Stack\nb) Linked List or Array\nc) Tree\nd) Graph\nAnswer: Linked List or Array"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the main advantage of using a circular queue over a linear queue?\nChoices:\na) Easier implementation\nb) Efficient use of space\nc) Faster access\nd) None of the above\nAnswer: Efficient use of space"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the main advantage of a circular queue?\nChoices:\na) Utilizes space efficiently\nb) Easier to implement\nc) Faster than linear queue\nd) None of the above\nAnswer: The main advantage of a circular queue is that it utilizes space efficiently."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the difference between a queue and a stack?\nChoices:\na) FIFO vs LIFO\nb) Both are linear data structures\nc) Both can be implemented using arrays\nd) None of the above\nAnswer: A queue follows FIFO while a stack follows LIFO."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is a double-ended queue?\nChoices:\na) A queue that allows operations from both ends\nb) A queue that follows FIFO\nc) A queue that follows LIFO\nd) None of the above\nAnswer: A double-ended queue allows insertion and deletion from both ends."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the maximum size of a queue?\nChoices:\na) Fixed size\nb) Dynamic size\nc) Depends on implementation\nd) None of the above\nAnswer: The maximum size of a queue is determined by the implementation (array or linked list)."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the purpose of a queue?\nChoices:\na) Manage data in order\nb) Store data randomly\nc) Access data in any order\nd) None of the above\nAnswer: The purpose of a queue is to manage data in a sequential order."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following operations is not typically associated with a queue?\nChoices:\na) Enqueue\nb) Dequeue\nc) Peek\nd) Display\nAnswer: Peek operation is not typically associated with a queue."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In which scenario would you use a queue?\nChoices:\na) When you need to manage tasks in the order they arrive.\nb) When you need to manage tasks in any order.\nc) When you need to manage tasks based on priority.\nd) When you need to manage tasks in reverse order.\nAnswer: When you need to manage tasks in the order they arrive."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is not a type of queue?\nChoices:\na) Circular queue.\nb) Priority queue.\nc) Double-ended queue.\nd) Simple queue.\nAnswer: Priority queue is not a type of queue."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a circular queue, what happens when the rear pointer reaches the end of the array?\nChoices:\na) It stops accepting new elements.\nb) It wraps around to the beginning of the array.\nc) It resets to zero.\nd) It throws an error.\nAnswer: It wraps around to the beginning of the array."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which operation is used to add an element to the queue?\nChoices:\na) Dequeue.\nb) Enqueue.\nc) Peek.\nd) Pop.\nAnswer: Enqueue."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which operation is used to remove an element from the queue?\nChoices:\na) Enqueue.\nb) Dequeue.\nc) Peek.\nd) Push.\nAnswer: Dequeue."
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the maximum number of children a node in a binary tree can have?\nChoices:\na) 2\nb) 3\nc) 4\nd) Any number\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In a binary tree, what is the term for the node with no children?\nChoices:\na) Root\nb) Leaf\nc) Parent\nd) Sibling\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which traversal method of a binary tree involves visiting the left subtree, then the root, and then the right subtree?\nChoices:\na) Inorder\nb) Preorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How many edges does a full binary tree with n nodes have?\nChoices:\na) n-1\nb) n\nc) 2n-1\nd) 2n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the height of a binary tree with a single node?\nChoices:\na) 0\nb) 1\nc) 2\nd) It depends on the tree's balance\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In a binary search tree (BST), which property is true about the nodes?\nChoices:\na) All left subtree nodes are less than the root node\nb) All right subtree nodes are less than the root node\nc) All nodes in the right subtree are greater than the root node\nd) The left and right subtrees are equal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What type of binary tree has all levels fully filled except possibly the last level?\nChoices:\na) Complete binary tree\nb) Full binary tree\nc) Perfect binary tree\nd) Balanced binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is NOT a type of binary tree traversal?\nChoices:\na) Inorder\nb) Preorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a level-order traversal of a binary tree, which data structure is commonly used?\nChoices:\na) Stack\nb) Queue\nc) Array\nd) Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the degree of a node in a tree?\nChoices:\na) The number of edges connecting to the node\nb) The number of children the node has\nc) The height of the node\nd) The level of the node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is a key characteristic of a balanced binary tree?\nChoices:\na) The height difference between the left and right subtrees is at most 1\nb) The left subtree is always smaller than the right subtree\nc) The right subtree is always smaller than the left subtree\nd) All levels of the tree are completely filled\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In which type of binary tree is every node with two children in the internal node?\nChoices:\na) Full Binary Tree\nb) Complete Binary Tree\nc) Perfect Binary Tree\nd) Binary Search Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the main advantage of an AVL tree over a standard binary search tree?\nChoices:\na) AVL trees maintain balance, ensuring O(log n) operations\nb) AVL trees allow faster search operations\nc) AVL trees require less space\nd) AVL trees are easier to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a Red-Black tree, which property ensures that the tree remains balanced?\nChoices:\na) Every node is either red or black\nb) The root is always black\nc) Every path from a node to its descendant leaves has the same number of black nodes\nd) Every node has at most two children\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which traversal method of a binary tree visits the root node first?\nChoices:\na) Preorder\nb) Inorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In a Binary Search Tree (BST), what is the time complexity of searching for an element in the worst case?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What type of tree traversal involves visiting the root node, then recursively visiting the left subtree, and finally the right subtree?\nChoices:\na) Preorder\nb) Inorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which type of binary tree traversal is useful for creating a sorted list of elements?\nChoices:\na) Inorder\nb) Preorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the key difference between a complete binary tree and a full binary tree?\nChoices:\na) A complete binary tree is filled completely at all levels except possibly the last, while a full binary tree has all nodes with either 0 or 2 children.\nb) A full binary tree is filled completely at all levels except possibly the last, while a complete binary tree has all nodes with either 0 or 2 children.\nc) A complete binary tree has only one level, while a full binary tree has multiple levels.\nd) There is no difference.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which type of binary tree is specifically designed to store key-value pairs and supports efficient search, insertion, and deletion operations?\nChoices:\na) AVL Tree\nb) Red-Black Tree\nc) B-Tree\nd) Splay Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a binary tree, what is the term used to describe a node with no parent?\nChoices:\na) Root\nb) Leaf\nc) Child\nd) Sibling\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What property distinguishes a binary tree from a general tree?\nChoices:\na) Each node in a binary tree has at most two children, whereas in a general tree, nodes can have more than two children.\nb) Binary trees are balanced, while general trees are not.\nc) Binary trees only have one level, while general trees have multiple levels.\nd) Binary trees have a fixed height, while general trees have a variable height.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which traversal method is typically used for creating a mirrored image of a binary tree?\nChoices:\na) Postorder\nb) Inorder\nc) Preorder\nd) Level-order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of inserting an element into an AVL tree in the worst case?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How does a Splay Tree ensure that recently accessed elements are quick to access again?\nChoices:\na) By performing rotations to move accessed nodes to the root\nb) By balancing the tree after each operation\nc) By using a self-balancing mechanism\nd) By storing elements in a sorted manner\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In a B-Tree, what is the significance of the \"order\" of the tree?\nChoices:\na) It determines the maximum number of children each node can have\nb) It determines the minimum height of the tree\nc) It determines the number of levels in the tree\nd) It determines the maximum number of levels\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is a common use case for a Trie data structure?\nChoices:\na) Storing a dictionary for fast prefix-based searches\nb) Performing binary search operations\nc) Implementing balanced search trees\nd) Storing hierarchical data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a Red-Black Tree, what does the property that \"every path from a node to its descendant leaves has the same number of black nodes\" ensure?\nChoices:\na) It ensures the tree remains balanced\nb) It ensures nodes are always red\nc) It ensures the tree is full\nd) It ensures the tree is complete\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the maximum number of nodes at level L of a binary tree?\nChoices:\na) 2L\nb) 2(L+1)\nc) 2(L-1)\nd) 2(L+2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the key difference between a binary heap and a binary search tree?\nChoices:\na) A binary heap maintains a heap property and is typically used to implement priority queues, while a binary search tree maintains sorted order of elements.\nb) A binary heap is a type of balanced tree, while a binary search tree is an unbalanced tree.\nc) A binary heap stores elements in sorted order, while a binary search tree does not.\nd) A binary heap supports fast insertion and deletion, while a binary search tree supports fast search.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following statements about AVL trees is true?\nChoices:\na) They are a type of self-balancing binary search tree.\nb) They allow duplicate keys.\nc) They do not require balancing.\nd) They only support insertion operations.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What does the term \"inorder successor\" refer to in a binary search tree (BST)?\nChoices:\na) The node that comes immediately after a given node in an inorder traversal.\nb) The node that comes immediately before a given node in an inorder traversal.\nc) The node with the maximum value in the left subtree.\nd) The node with the minimum value in the right subtree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which traversal technique would you use to create a depth-first search of a binary tree?\nChoices:\na) Inorder, Preorder, or Postorder\nb) Level-order\nc) Breadth-first search\nd) Randomized order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the main characteristic of a splay tree?\nChoices:\na) It performs rotations to move accessed elements closer to the root.\nb) It maintains balance by performing rotations.\nc) It allows elements to be stored in a balanced order.\nd) It ensures the height is minimized by reordering elements.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In a Binary Search Tree (BST), what is the time complexity of deleting a node?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How do you determine if a binary tree is a binary search tree?\nChoices:\na) By checking if each node's left children are smaller and right children are larger.\nb) By ensuring the tree is balanced.\nc) By verifying that all nodes have two children.\nd) By checking the height of the tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the main advantage of using a Red-Black Tree over a regular binary search tree?\nChoices:\na) It guarantees O(log n) time complexity for insertion, deletion, and search operations.\nb) It uses less memory compared to a regular BST.\nc) It allows duplicate keys to be stored.\nd) It automatically sorts elements.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a binary tree, which type of node traversal will visit nodes in increasing order?\nChoices:\na) Inorder\nb) Preorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a complete binary tree, which property holds true?\nChoices:\na) All levels are completely filled except possibly the last level, which is filled from left to right.\nb) All nodes have exactly two children.\nc) The tree is perfectly balanced.\nd) All nodes have only one child.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the height of a complete binary tree with n nodes where n is a power of 2?\nChoices:\na) log2(n)\nb) log2(n) - 1\nc) 2*log2(n)\nd) log2(n) + 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What type of tree is used in databases for indexing?\nChoices:\na) B-Tree\nb) AVL Tree\nc) Red-Black Tree\nd) Binary Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the primary use of a Trie data structure?\nChoices:\na) Efficiently storing and retrieving strings, especially for prefix searches.\nb) Performing quick sort operations.\nc) Managing hierarchical data.\nd) Performing binary search.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In a B-Tree, what is the minimum number of keys in a non-root node?\nChoices:\na) ⌈t/2⌉ - 1 where t is the minimum degree\nb) ⌈t/2⌉\nc) ⌈t/2⌉ + 1\nd) t - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the primary benefit of using a B+ Tree over a B-Tree?\nChoices:\na) B+ Trees have all values stored in leaf nodes, which improves range queries.\nb) B+ Trees use less memory.\nc) B+ Trees are simpler to implement.\nd) B+ Trees guarantee a balanced height.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which property is maintained in a Red-Black Tree to ensure balanced height?\nChoices:\na) Each path from a node to its descendant leaves has the same number of black nodes.\nb) The tree is always a complete binary tree.\nc) The root node is always black.\nd) All nodes have at most two children.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Who is the ancestor of Node G?\nChoices:\na) C\nb) F\nc) H\nd) A\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Bigger the query rectangle the better is the query efficiency.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Consider the given syntax tree. Assume that division has the lowest precedence than addition, subtraction and multiplication. Addition and subtraction have the same precedence but more than multiplication. Which of the following expression can be given by the following syntax tree?\nChoices:\na) [5 / (p + q) * (q - r)]\nb) [5 * (p + q) / (q - r)]\nc) [5 + (p + q) * (q - r)]\nd) [5 / (p + q) + (q - r)]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the depth of the root node of K-ary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In an expression tree algorithm, what happens when an operand is encountered?\nChoices:\na) create one node pointing to a stack\nb) pop the nodes from the stack\nc) clear stack\nd) merge all the nodes\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How many extra nodes are there in Full K-ary tree than complete K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) Both have same number of nodes\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the depth of the root node of the ternary tree?\nChoices:\na) 2\nb) 1\nc) 0\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the Height of the given ternary tree?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which node is the Leaf node in the following K-ary tree?\nChoices:\na) A\nb) B\nc) D\nd) F\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which node is the root node of the following ternary tree?\nChoices:\na) A\nb) B\nc) C\nd) D\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What will be the time complexity of delete operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) O(1)\nb) O(m)\nc) O(m2)\nd) O(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How many properties will an equivalent relationship satisfy?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the size of Node B in given K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which data structure is used in the syntax analysis phase of the compiler?\nChoices:\na) Tree\nb) Stack\nc) Linked List\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What will be the time complexity of insertion operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)\nChoices:\na) O(1\nb) O(m)\nc) O(m2)\nd) O(log m)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the worst case time complexity of insertion operation(n =no. of candidates)?\nChoices:\na) O(1\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the condition for an equivalence relation if two cities are related within a country?\nChoices:\na) the two cities should have a one-way connection\nb) the two cities should have a two-way connection\nc) the two cities should be in different countries\nd) no equivalence relation will exist between two cities\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: When executing a sequence of Unions, a node of rank r must have at least 2r descendants.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In an abstract syntax tree, each internal node represents an operand and each leaf node represents an operator.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Parse tree is constructed from the tokens produced by lexical analyzer.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which node is the child node of the Node D in the following ternary tree?\nChoices:\na) A\nb) C\nc) B\nd) No child node\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which node is the child node of the Node B in the following K-ary tree?\nChoices:\na) A\nb) C\nc) B\nd) No child node\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: While evaluating the parse tree, which traversal technique is used to give the original input string?\nChoices:\na) Pre-order traversal\nb) In-order traversal\nc) Post-order traversal\nd) Breadth-first traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the definition for Ackermann's function?\nChoices:\na) A(1,i) = i+1 for i>=1\nb) A(i,j) = i+j for i>=j\nc) A(i,j) = i+j for i = j\nd) A(1,i) = i+1 for i<1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the run time of finding the nearest neighbour in a k-d tree?\nChoices:\na) O(2+ log N)\nb) O( log N)\nc) O(2d log N)\nd) O( N log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: An expression tree is a kind of?\nChoices:\na) Binary search tree\nb) Fibonacci tree\nc) Binary tree\nd) Treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What will be the correct sequence of insertion for the following k-d tree?\nChoices:\na) (30,40),(5,25),(70,70),(10,12),(50,30),(35,45)\nb) (40,30),(5,25),(12,10),(70,70),(30,50),(45,35)\nc) (30,40),(5,25),(10,12),(70,70),(50,30),(35,45)\nd) (40,30),(25,5),(12,10),(70,70),(50,30),(45,35)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Can leaf node be called child node in a ternary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which node is the root node of the following K-ary tree?\nChoices:\na) A\nb) B\nc) C\nd) D\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: A node can have a minimum of one child.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Is parent node of Node 4 and root node of the given K-ary tree same?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How many strategies are followed to solve a dynamic equivalence problem?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Path Compression algorithm performs in which of the following operations?\nChoices:\na) Create operation\nb) Insert operation\nc) Find operation\nd) Delete operation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Assume +, -, *, / are usual arithmetic operator, + has highest precedence and right associative and -, *, / have equal precedence and left associative. What is the output of the expression 23 * 3 - 6 + 11 - 2 * 8 / 4?\nChoices:\na) 110\nb) 100\nc) 130\nd) 120\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which node is the parent node of Node 6?\nChoices:\na) 1\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the other name or Van Emde Boas Tree data structure?\nChoices:\na) Van Emde Boas Array\nb) Van Emde Boas Stack\nc) Van Emde Boas Priority Queue\nd) Van Emde Boas Heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: On which abstract data type does van Emde Boas tree performs the operation?\nChoices:\na) Tree\nb) Linked List\nc) Heap\nd) Associative Array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Is Node A sibling of Node B in the given K-ary tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Each level in a k-d tree is made of?\nChoices:\na) dimension only\nb) cutting and dimension\nc) color code of node\nd) size of the level\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Suppose X is the starting symbol of the given grammar with the following transition rules. Compute the value of X as the root of the parse tree for the expression: 3 & 4 % 7.   X → X1 & B | B {X.value = X1.value + B.value, X.value = B.value}   B → B1 % D | D {B.value = B1.value * D.value, B.value = D.value}   D → num {D.value = num.value}\nChoices:\na) 31\nb) 32\nc) 33\nd) 34\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Only infix expression can be made into an expression tree.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which nodes are the siblings of Node D of given ternary tree?\nChoices:\na) E\nb) C\nc) F\nd) H\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity for finding a maximum and minimum integer in Van Emde Boas data structure?\nChoices:\na) O (log M!)\nb) O (M!)\nc) O (1)\nd) O (log (log M))\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which operation find the value associated with a given key?\nChoices:\na) Insert\nb) Find Next\nc) Look up\nd) Delete\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the height of a K-ary tree having only root node?\nChoices:\na) 1\nb) 0\nc) 2\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which pattern is used to evaluate abstract syntax tree?\nChoices:\na) Visitor pattern\nb) Singleton Pattern\nc) Proxy pattern\nd) Adapter pattern\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Reducing search space by eliminating irrelevant trees is known as?\nChoices:\na) pruning\nb) partial results\nc) freeing space\nd) traversing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many child nodes does each node of Ternary Tree contain?\nChoices:\na) 4\nb) 6\nc) 5\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the size of the given ternary tree?\nChoices:\na) 3\nb) 2\nc) 6\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is the implementation of the ternary tree?\nChoices:\na) AVL Tree\nb) Ternary Heap\nc) Hash Table\nd) Dictionary\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is the name of the node having child nodes?\nChoices:\na) Brother\nb) Sister\nc) Mother\nd) Parent\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What will be the time complexity of query operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (k = number of bins query rectangle intersects)\nChoices:\na) O(1)\nb) O(k)\nc) O(k2)\nd) O(log k)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: A relation R on a set S, defined as x R y if and only if y R x. This is an example of?\nChoices:\na) reflexive relation\nb) symmetric relation\nc) transitive relation\nd) invalid relation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is computational geometry?\nChoices:\na) study of geometry using a computer\nb) study of geometry\nc) study of algorithms\nd) study of algorithms related to geometry\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Assume +, -, * are usual arithmetic operators. * has the lowest precedence, + has the highest precedence and the precedence of - is medium. + and * are left-associative whereas - is right-associative. What is the value of the expression 3 - 8 + 2 - 9 * 3?\nChoices:\na) 4\nb) 6\nc) 8\nd) 10\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Can child node be always called Leaf node in the K-ary tree?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Can operation like Find Next and Find Previous be implemented.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the depth of any tree if the union operation is performed by height?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity for deleting a key or integer in Van Emde Boas data structure?\nChoices:\na) O (log M!)\nb) O (log (log M))\nc) O (M!)\nd) O (M2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Does Van Emde Boas data structure perform all operation in O (log (log M)) time where M = 2m.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from?\nChoices:\na) leaf to root\nb) root to node\nc) root to leaf\nd) left subtree to right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the size of Node A?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Bin is an example of a range query data structure.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Syntax trees are comparatively denser than parse trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Electrical connectivity is an example of equivalence relation.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the Height of the root node of ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?\nChoices:\na) prefix expression\nb) infix expression\nc) postfix expression\nd) paranthesized expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many prime concepts are available in nearest neighbour search in a kd tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which year was Van Emde Boas tree invented?\nChoices:\na) 1972\nb) 1973\nc) 1974\nd) 1975\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity for storing the maximum number of elements in Van Emde Boas tree if M is the maximum number of elements?\nChoices:\na) O (log M)\nb) O (M!)\nc) O (M)\nd) O (1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Efficiency of bin depends upon . . . . . . . .\nChoices:\na) size of query and candidates\nb) location of query and candidates\nc) location and size of query and candidates\nd) depends on the input\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Is parent node of Node 3 and root node of the given ternary tree same?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Can leaf node be called child node in a K-ary tree?\nChoices:\na) True\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Who is descendant of Node C?\nChoices:\na) A\nb) E\nc) D\nd) G\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time taken for a range query for a perfectly balanced tree?\nChoices:\na) O(N)\nb) O(log N)\nc) O(√N+M)\nd) O(√N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the total time spent for N-1 merges in a dynamic equivalence problem?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity for inserting a key or integer in Van Emde Boas data structure?\nChoices:\na) O (log M!)\nb) O (M!)\nc) O (M2)\nd) O (log (log M))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the use of the bin data structure?\nChoices:\na) to have efficient insertion\nb) to have efficient deletion\nc) to have efficient region query\nd) to have efficient traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which type of tree does Van Emde Boas require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Non - Binary\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the worst case time complexity of delete operation(n is the no. of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: ++a*bc*+defg is an?\nChoices:\na) postfix expression\nb) infix expression\nc) prefix expression\nd) invalid expression\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How many extra nodes are there in Full ternary tree than a complete ternary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) Both have same number of nodes\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the postfix expression for the following expression tree?\nChoices:\na) abcde++**\nb) ab+cde++**\nc) abc+de++**\nd) abcd+*e+*\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: An expression tree is created using?\nChoices:\na) postfix expression\nb) prefix expression\nc) infix expression\nd) paranthesized expression\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the worst case of finding the nearest neighbour?\nChoices:\na) O(N)\nb) O(N log N)\nc) O( log N)\nd) O(N3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which node is the parent node of Node 5?\nChoices:\na) 1\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What does the other nodes of an expression tree(except leaves) contain?\nChoices:\na) only operands\nb) only operators\nc) both operands and operators\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many child nodes does each node of K-ary Tree contain?\nChoices:\na) 2\nb) 3\nc) more than k\nd) at most k\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which parsing approach is followed by syntax tree?\nChoices:\na) Top-down parsing\nb) Bottom-up parsing\nc) Predictive parsing\nd) Shift reduce parsing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Abstract syntax tree is an input to which phase of compiler?\nChoices:\na) Lexical analysis\nb) Syntax Analysis\nc) Semantic Analysis\nd) Intermediate code generation\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: An expression tree's nodes can be deleted by calling?\nChoices:\na) malloc\nb) calloc\nc) delete\nd) free\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which one of the following is the correct formulae to find the parent node at index I?\nChoices:\na) (I-1)/K\nb) (I+1)/K\nc) (I*1)/K\nd) (I-2)/K\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In parse trees, every internal node represents a non-terminal and every leaf node represents a terminal.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the worst-case running time of unions done by size and path compression?\nChoices:\na) O(N)\nb) O(logN)\nc) O(N logN)\nd) O(M logN)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Parse tree for the expression p & q % r % s & t & u is given below. Which of the following is correct for the given parse tree?\nChoices:\na) % has lower precedence than &\nb) % is right associative\nc) & has lower precedence than %\nd) & is left associative\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a two-dimensional search tree, the root is arbitrarily chosen to be?\nChoices:\na) even\nb) odd\nc) depends on subtrees\nd) 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity for searching a key or integer in Van Emde Boas data structure?\nChoices:\na) O (log M!)\nb) O (M!)\nc) O (M2)\nd) O (log (log M))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the depth of Node G in the given ternary tree?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The 2d search tree has the simple property that branching on odd levels is done with respect to the first key.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which among the following best represents the computational complexity of GLR parsing?\nChoices:\na) O(|G| x n)\nb) O(|G|2 x n)\nc) O(|G| x n2)\nd) O(|G|2 x n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In a k-d tree, k originally meant?\nChoices:\na) number of dimensions\nb) size of tree\nc) length of node\nd) weight of node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The leaves of an expression tree always contain?\nChoices:\na) operators\nb) operands\nc) null\nd) expression\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the worst case time complexity of query operation(n is the no. of candidates)?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which node is the child node of Node D in the following ternary tree?\nChoices:\na) A\nb) C\nc) G\nd) H\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the value for the number of nodes of rank r?\nChoices:\na) N\nb) N/2\nc) N/2r\nd) Nr\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the Height of the given K-ary tree?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the Height of the root node of K-ary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: . . . . . . . . is one of the earliest forms of a self-adjustment strategy used in splay trees, skew heaps.\nChoices:\na) Union by rank\nb) Equivalence function\nc) Dynamic function\nd) Path compression\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the worst case efficiency for a path compression algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(M log N\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Several kinds of queries are possible on a k-d called as?\nChoices:\na) partial queries\nb) range queries\nc) neighbour queries\nd) search queries\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Who Invented The vEB also known as Van Emde Boas Tree?\nChoices:\na) Peter Van Emde Boas\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is correct with respect to a parse tree for a given grammar?\nChoices:\na) n parse tree = n leftmost derivation tree = n rightmost derivation tree\nb) n parse tree = n leftmost derivation tree\nc) n parse tree = n rightmost derivation tree\nd) n parse tree = n non-terminals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is an application of abstract syntax tree?\nChoices:\na) Static code analyzing\nb) Implement indexing in databases\nc) Used for dynamic memory allocation\nd) To represent networks of communication\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is the simplest data structure that supports range searching?\nChoices:\na) Heaps\nb) binary search trees\nc) AA-trees\nd) K-d trees\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which node is the Leaf node in the following ternary tree?\nChoices:\na) A\nb) B\nc) D\nd) G\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which tree traversal technique is used to evaluate the expression represented by syntax tree?\nChoices:\na) Pre-order traversal\nb) In-order traversal\nc) Post-order traversal\nd) Breadth first traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Each Section contains maximum **100 MCQs question** on **Trees in Data Structures**.\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of searching for an element in a Binary Search Tree (BST) in the worst case?\nChoices:\na) O(1\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which traversal method of a BST will produce a sorted sequence of node values?\nChoices:\na) Inorder\nb) Preorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the maximum number of children a node in a Binary Search Tree (BST) can have?\nChoices:\na) 1\nb) 2\nc) 3\nd) Any number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How can you determine if a Binary Tree is a Binary Search Tree (BST)?\nChoices:\na) Verify if all nodes in the left subtree are less than the root and all nodes in the right subtree are greater than the root.\nb) Check if the tree is balanced.\nc) Ensure all nodes have exactly two children.\nd) Verify the height of the tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following operations can be performed in O(log n) time on a balanced Binary Search Tree?\nChoices:\na) Insertion\nb) Deletion\nc) Search\nd) All of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What happens when you delete a node with two children from a BST?\nChoices:\na) The node is replaced by its predecessor or successor, and then the predecessor or successor is removed.\nb) The node is simply removed.\nc) The node's right child replaces it.\nd) The node is moved to the root.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the purpose of rotations in a Binary Search Tree?\nChoices:\na) To maintain balance and ensure logarithmic height in self-balancing trees.\nb) To optimize search operations.\nc) To sort elements in the tree.\nd) To update node values.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In a Binary Search Tree, what is the term for the node that has no children?\nChoices:\na) Root\nb) Leaf\nc) Parent\nd) Internal node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary characteristic of a node in a Binary Search Tree (BST)?\nChoices:\na) It has a value greater than all values in its left subtree and less than all values in its right subtree.\nb) It is the root of the tree.\nc) It has at least one child.\nd) It is the only node in the tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In a BST, how do you find the minimum value node?\nChoices:\na) Traverse to the leftmost node from the root.\nb) Traverse to the rightmost node from the root.\nc) Find the node with the maximum value.\nd) Find the node with the second highest value.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the result of a successful search operation in a BST when the searched element is not present?\nChoices:\na) The search will return the node containing the element.\nb) The search will return the parent node of the searched element.\nc) The search will return a null pointer.\nd) The search will return the root node.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is NOT a valid operation on a Binary Search Tree?\nChoices:\na) Sorting elements\nb) Searching for an element\nc) Inserting a new element\nd) Deleting an existing element\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How can you balance a Binary Search Tree to ensure O(log n) time complexity for operations?\nChoices:\na) By using self-balancing trees like AVL Trees or Red-Black Trees.\nb) By reordering elements after each operation.\nc) By increasing the size of the tree.\nd) By ensuring all nodes have two children.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the main advantage of using a Binary Search Tree (BST) over an unsorted list?\nChoices:\na) It allows for faster search, insertion, and deletion operations.\nb) It uses less memory.\nc) It is easier to implement.\nd) It maintains elements in sorted order.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In a BST, which traversal method visits nodes in the order of their depth?\nChoices:\na) Level-order\nb) Inorder\nc) Preorder\nd) Postorder\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of inserting a node into a Binary Search Tree (BST) in the worst case?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the primary advantage of using a Binary Search Tree (BST) over an array for searching?\nChoices:\na) Faster search operations due to sorted order.\nb) Simpler implementation.\nc) Requires less memory.\nd) Easier to maintain order.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: How do you handle duplicate values in a Binary Search Tree (BST)?\nChoices:\na) Usually, duplicates are not allowed.\nb) Duplicate values are stored in the right subtree.\nc) Duplicate values are stored in the left subtree.\nd) Duplicates are stored in a separate data structure.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the key difference between a Binary Search Tree (BST) and a Binary Heap?\nChoices:\na) A BST maintains sorted order of elements, while a Binary Heap maintains a heap property.\nb) A Binary Heap maintains sorted order, while a BST does not.\nc) A BST is always balanced, while a Binary Heap is not.\nd) A Binary Heap allows duplicate elements, while a BST does not.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which traversal method of a BST is used for evaluating arithmetic expressions stored in the tree?\nChoices:\na) Postorder\nb) Inorder\nc) Preorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In a Binary Search Tree (BST), what is the term for the node with the highest value?\nChoices:\na) Root\nb) Maximum node\nc) Minimum node\nd) Leaf\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of deleting the root node in a Binary Search Tree (BST) with two children?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How do you find the successor of a node in a Binary Search Tree (BST)?\nChoices:\na) The smallest node in the right subtree.\nb) The largest node in the left subtree.\nc) The largest node in the right subtree.\nd) The smallest node in the left subtree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What property does a Binary Search Tree (BST) ensure for its left and right subtrees?\nChoices:\na) The left subtree contains nodes with values less than the root, and the right subtree contains nodes with values greater than the root.\nb) The left subtree contains nodes with values greater than the root, and the right subtree contains nodes with values less than the root.\nc) Both subtrees have equal values.\nd) The left subtree is always empty.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In which scenario is a Binary Search Tree (BST) not suitable?\nChoices:\na) When the data is not sorted.\nb) When frequent insertions and deletions are needed.\nc) When the tree must be balanced at all times.\nd) When elements need to be stored in a priority order.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the purpose of the \"right rotation\" operation in a Binary Search Tree (BST)?\nChoices:\na) To balance the tree and maintain its properties.\nb) To find the minimum value node.\nc) To delete a node with two children.\nd) To perform a level-order traversal.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a Binary Search Tree (BST), what happens when you perform an inorder traversal?\nChoices:\na) Nodes are visited in ascending order.\nb) Nodes are visited in descending order.\nc) Nodes are visited in a random order.\nd) Nodes are visited in the order they were inserted.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following is a characteristic of a perfectly balanced Binary Search Tree (BST)?\nChoices:\na) The height of the tree is minimized.\nb) All nodes have exactly two children.\nc) All levels are completely filled except possibly the last.\nd) The left and right subtrees have equal number of nodes.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How do you find the predecessor of a node in a Binary Search Tree (BST)?\nChoices:\na) The largest node in the left subtree.\nb) The smallest node in the right subtree.\nc) The smallest node in the left subtree.\nd) The largest node in the right subtree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the typical time complexity of accessing an element in a Binary Search Tree (BST) in the best case?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In a Binary Search Tree (BST), what is the time complexity of searching for an element in the average case?\nChoices:\na) O(1\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the main reason for implementing a Binary Search Tree (BST) as a self-balancing tree?\nChoices:\na) To maintain O(log n) time complexity for insertions, deletions, and searches.\nb) To ensure the tree is always a complete binary tree.\nc) To allow nodes to be stored in any order.\nd) To minimize memory usage.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which traversal method is used to obtain the nodes of a BST in the reverse order of their sorted values?\nChoices:\na) Reverse Inorder\nb) Preorder\nc) Postorder\nd) Level-order\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: When deleting a node from a BST, what should you do if the node to be deleted has two children?\nChoices:\na) Replace it with its inorder successor or predecessor, then remove the successor or predecessor.\nb) Directly remove the node and replace it with its left child.\nc) Directly remove the node and replace it with its right child.\nd) Replace it with its left child.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the purpose of the \"left rotation\" operation in a Binary Search Tree (BST)?\nChoices:\na) To maintain balance and keep the tree balanced.\nb) To move a node to the right subtree.\nc) To convert a BST into a binary heap.\nd) To find the maximum value node.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a Binary Search Tree (BST), which of the following is true for any node's left subtree?\nChoices:\na) All nodes in the left subtree are smaller than the node itself.\nb) All nodes in the left subtree are larger than the node itself.\nc) The left subtree contains nodes with equal values.\nd) The left subtree is always empty.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the minimum number of nodes required to form a Binary Search Tree (BST) of height h?\nChoices:\na) 2h - 1\nb) 2(h+1) - 1\nc) 2(h)\nd) 2h\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In a BST, how do you identify the maximum value node?\nChoices:\na) By traversing to the rightmost node from the root.\nb) By traversing to the leftmost node from the root.\nc) By finding the root node.\nd) By searching the entire tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What happens if a Binary Search Tree (BST) becomes unbalanced due to insertions or deletions?\nChoices:\na) Search, insertion, and deletion operations may degrade to O(n) time complexity.\nb) The tree automatically rebalances itself.\nc) The tree converts into a binary heap.\nd) The tree becomes a complete binary tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which property is true for a Binary Search Tree (BST) that is also a perfect binary tree?\nChoices:\na) All levels are fully filled, and all leaves are at the same level.\nb) The height of the tree is minimal.\nc) The tree contains only leaf nodes.\nd) All nodes have exactly two children.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In a Binary Search Tree (BST), how can you find the depth of a particular node?\nChoices:\na) By counting the number of edges from the root to the node.\nb) By counting the number of nodes in the subtree.\nc) By finding the height of the tree.\nd) By counting the number of children of the node.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the typical use case for a Binary Search Tree (BST) in computing?\nChoices:\na) To implement dynamic sets and lookup tables.\nb) To perform sorting operations.\nc) To manage hierarchical data.\nd) To implement priority queues.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the result of an inorder traversal of a Binary Search Tree (BST)?\nChoices:\na) Nodes are visited in ascending order.\nb) Nodes are visited in descending order.\nc) Nodes are visited in the order of their depth.\nd) Nodes are visited in the order they are inserted.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In a Binary Search Tree (BST), what does the term \"node height\" refer to?\nChoices:\na) The number of edges from the node to its deepest descendant.\nb) The number of nodes in the subtree.\nc) The number of edges from the node to its parent.\nd) The total number of nodes in the tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the space complexity of the in-order traversal in the recursive fashion? (d is the tree depth and n is the number of nodes)\nChoices:\na) O(1)\nb) O(nlogd)\nc) O(logd)\nd) O(d)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Consider a situation of writing a binary tree into a file with memory storage efficiency in mind, is array representation of tree is good?\nChoices:\na) yes because we are overcoming the need of pointers and so space efficiency\nb) yes because array values are indexable\nc) No it is not efficient in case of sparse trees and remaning cases it is fine\nd) No linked list representation of tree is only fine\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is an application of Red-black trees and why?\nChoices:\na) used to store strings efficiently\nb) used to store integers efficiently\nc) can be used in process schedulers, maps, sets\nd) for efficient sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the worst case analysis of an AA-Tree?\nChoices:\na) O(N)\nb) O(log N)\nc) O( N log N)\nd) O(N2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Select the code snippet which performs in-order traversal.\nChoices:\na) public void inorder(Tree root) {\n\tSystem.out.println(root.data);\n\tinorder(root.left);\n\tinorder(root.right);\n}\nb) public void inorder(Tree root) {\n\tinorder(root.left);\n\tSystem.out.println(root.data);\n\tinorder(root.right);\n}\nc) public void inorder(Tree root) {\n\tSystem.out.println(root.data);\n\tinorder(root.right);\n\tinorder(root.left);\n}\nd) public void inorder(Tree root) {\n\tinorder(root.right);\n\tinorder(root.left);\n\tSystem.out.println(root.data);\n}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the priority of a null node?\nChoices:\na) 1\nb) 0\nc) random number\nd) infinity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Why to prefer red-black trees over AVL trees?\nChoices:\na) Because red-black is more rigidly balanced\nb) AVL tree store balance factor in every node which costs space\nc) AVL tree fails at scale\nd) Red black is more efficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: A self - balancing binary search tree can be used to implement . . . . . . . .\nChoices:\na) Priority queue\nb) Hash table\nc) Heap sort\nd) Priority queue and Heap sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is a Cartesian tree?\nChoices:\na) a skip list in the form of tree\nb) a tree which obeys cartesian product\nc) a tree which obeys heap property and whose inorder traversal yields the given sequence\nd) a tree which obeys heap property only\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: To obtain a prefix expression, which of the tree traversals is used?\nChoices:\na) Level-order traversal\nb) Pre-order traversal\nc) Post-order traversal\nd) In-order traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the special property of red-black trees and what root should always be?\nChoices:\na) a color which is either red or black and root should always be black color only\nb) height of the tree\nc) pointer to next node\nd) a color which is either green or black\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Find the postorder traversal of the binary tree shown below.\nChoices:\na) P Q R S T U V W X\nb) W R S Q P V T U X\nc) S W T Q X U V R P\nd) S T W U X V Q R P\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of leaves L are?\nChoices:\na) L = 2*I\nb) L = I + 1\nc) L = I - 1\nd) L = 2*I - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Several other operations like union set difference and intersection can be done in treaps.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Consider a sequence of numbers to have repetitions, how a cartesian tree can be constructed in such situations without violating any rules?\nChoices:\na) use any tie-breaking rule between repeated elements\nb) cartesian tree is impossible when repetitions are present\nc) construct a max heap in such cases\nd) construct a min heap in such cases\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The balance factor of a node in a binary tree is defined as . . . . . . . .\nChoices:\na) addition of heights of left and right subtrees\nb) height of right subtree minus height of left subtree\nc) height of left subtree minus height of right subtree\nd) height of right subtree minus one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which operation is used to combine two auxiliary trees?\nChoices:\na) Join\nb) Combinatorial\nc) Add\nd) Concatenation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Using what formula can a parent node be located in an array?\nChoices:\na) (i+1)/2\nb) (i-1)/2\nc) i/2\nd) 2i/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is also known as Rope data structure?\nChoices:\na) Cord\nb) String\nc) Array\nd) Linked List\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Why to prefer splay trees?\nChoices:\na) easier to program\nb) space efficiency\nc) easier to program and faster access to recently accessed items\nd) quick searching\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Is Treap a randomized tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What are double and single threaded trees?\nChoices:\na) when both left, right nodes are having null pointers and only right node is null pointer respectively\nb) having 2 and 1 node\nc) using single and double linked lists\nd) using heaps and priority queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the dynamic operations are used in Top Tree data structure implementation?\nChoices:\na) Link\nb) Cut\nc) Expose\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: The binary tree sort implemented using a self - balancing binary search tree takes . . . . . . . . time is worst case.\nChoices:\na) O(n log n\nb) O(n)\nc) O(n2)\nd) O(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: A treap is a cartesian tree with . . . . . . . .\nChoices:\na) additional value, which is a priority value to the key generated randomly\nb) additional value, which is a priority value to the key generated sequentially\nc) additional heap rule\nd) additional operations like remove a range of elements\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How many different shapes does maintenance of AA-Tree need to consider?\nChoices:\na) 7\nb) 5\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What must be the missing logic in place of missing lines for finding sum of nodes of binary tree in alternate levels?\nChoices:\na) i=i+pow(2,currentlevel);\ncurrentlevel=currentlevel+2;\nj=1;\nb) i=i+pow(2,currentlevel);\ncurrentlevel=currentlevel+2;\nj=0;\nc) i=i-pow(2,currentlevel);\ncurrentlevel=currentlevel+2;\nj=1;\nd) i=i+pow(2,currentlevel);\ncurrentlevel=currentlevel+1;\nj=1;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: A full binary tree can be generated using . . . . . . . .\nChoices:\na) post-order and pre-order traversal\nb) pre-order traversal\nc) post-order traversal\nd) in-order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: For a binary tree the first node visited in in-order and post-order traversal is same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Advantages of linked list representation of binary trees over arrays?\nChoices:\na) dynamic size\nb) ease of insertion/deletion\nc) ease in randomly accessing a node\nd) both dynamic size and ease in insertion/deletion\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Is the below tree representation of 50, 100,400,300,280 correct way to represent cartesian tree?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the space complexity of the post-order traversal in the recursive fashion? (d is the tree depth and n is the number of nodes)\nChoices:\na) O(1)\nb) O(nlogd)\nc) O(logd)\nd) O(d)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: AA-Trees makes more rotations than a red-black tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: If A ꓵ B (A and B are two clusters) is a singleton set then it is a Merge able cluster.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is not a random tree?\nChoices:\na) Treap\nb) Random Binary Tree\nc) Uniform Spanning Tree\nd) AVL Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How many edges are present in path cluster?\nChoices:\na) 2\nb) 3\nc) 6\nd) 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following is a self - balancing binary search tree?\nChoices:\na) 2-3 tree\nb) Threaded binary tree\nc) AA tree\nd) Treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Consider the following data and specify which one is Preorder Traversal Sequence, Inorder and Postorder sequences.   S1: N, M, P, O, Q   S2: N, P, Q, O, M   S3: M, N, O, P, Q\nChoices:\na) S1 is preorder, S2 is inorder and S3 is postorder\nb) S1 is inorder, S2 is preorder and S3 is postorder\nc) S1 is inorder, S2 is postorder and S3 is preorder\nd) S1 is postorder, S2 is inorder and S3 is preorder\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Why Red-black trees are preferred over hash tables though hash tables have constant time complexity?\nChoices:\na) no they are not preferred\nb) because of resizing issues of hash table and better ordering in redblack trees\nc) because they can be implemented using trees\nd) because they are balanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: The number of edges from the node to the deepest leaf is called . . . . . . . . of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which property makes top tree a binary tree?\nChoices:\na) Nodes as Cluster\nb) Leaves as Edges\nc) Root is Tree Itself\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The pre-order and in-order are traversals of a binary tree are T M L N P O Q and L M N T O P Q. Which of following is post-order traversal of the tree?\nChoices:\na) L N M O Q P T\nb) N M O P O L T\nc) L M N O P Q T\nd) O P L M N Q T\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: After the insertion operation, is the resultant tree a splay tee?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What are splay trees?\nChoices:\na) self adjusting binary search trees\nb) self adjusting binary trees\nc) a tree with strings\nd) a tree with probability distributions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the time complexity for finding the node at x position where n is the length of the rope?\nChoices:\na) O (log n)\nb) O (n!)\nc) O (n2)\nd) O (1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What are the children for node 'w' of a complete-binary tree in an array representation?\nChoices:\na) 2w and 2w+1\nb) 2+w and 2-w\nc) w+1/2 and w/2\nd) w-1/2 and w+1/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Consider the following data. The pre order traversal of a binary tree is A, B, E, C, D. The in order traversal of the same binary tree is B, E, A, D, C. The level order sequence for the binary tree is . . . . . . . .\nChoices:\na) A, C, D, B, E\nb) A, B, C, D, E\nc) A, B, C, E, D\nd) D, B, E, A, C\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which type of binary search tree is imitated for construction of tango tree?\nChoices:\na) Complete Binary Search Tree\nb) Perfect Binary Search Tree\nc) Balanced Binary Search Tree\nd) Degenerate Binary Search Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: A binary tree is balanced if the difference between left and right subtree of every node is not more than . . . . . . . .\nChoices:\na) 1\nb) 3\nc) 2\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What are the conditions for an optimal binary search tree and what is its advantage?\nChoices:\na) The tree should not be modified and you should know how often the keys are accessed, it improves the lookup cost\nb) You should know the frequency of access of the keys, improves the lookup time\nc) The tree can be modified and you should know the number of elements in the tree before hand, it improves the deletion time\nd) The tree should be just modified and improves the lookup time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following property of splay tree is correct?\nChoices:\na) it holds probability usage of the respective sub trees\nb) any sequence of j operations starting from an empty tree with h nodes atmost, takes O(jlogh) time complexity\nc) sequence of operations with h nodes can take O(logh) time complexity\nd) splay trees are unstable trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is a splay operation?\nChoices:\na) moving parent node to down of child\nb) moving a node to root\nc) moving root to leaf\nd) removing leaf node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The following given tree is an example for?\nChoices:\na) Binary tree\nb) Binary search tree\nc) Fibonacci tree\nd) AVL tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: The steps for finding post-order traversal are traverse the right subtree, traverse the left subtree or visit the current node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Binary tree sort implemented using a self balancing binary search tree takes O(n log n) time in the worst case but still it is slower than merge sort.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What operation does the following diagram depict?\nChoices:\na) inserting a leaf node\nb) inserting an internal node\nc) deleting a node with 0 or 1 child\nd) deleting a node with 2 children\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order.\nChoices:\na) 15\nb) 3\nc) 5\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The size value of various nodes in a weight balanced tree are leaf - zero internal node - size of it's two children is this true?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Why is heap implemented using array representations than tree(linked list) representations though both tree representations and heaps have same complexities?\nChoices:\na) arrays can store trees which are complete and heaps are not complete\nb) lists representation takes more memory hence memory efficiency is less and go with arrays and arrays have better caching\nc) lists have better caching\nd) In lists insertion and deletion is difficult\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: AVL trees are more balanced than Red-black trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which algorithm is used in the top tree data structure?\nChoices:\na) Divide and Conquer\nb) Greedy\nc) Backtracking\nd) Branch\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the condition for priority of a node in a treap?\nChoices:\na) a node's priority should be greater than its parent\nb) a node's priority should be at least as large as its parent\nc) the priority is randomly assigned and can have any value\nd) a node's priority is always given in decreasing order\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the longest length path for a node x in random binary search tree for the insertion process?\nChoices:\na) log x\nb) x2\nc) x!\nd) 4.311 log x\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following options is an application of splay trees?\nChoices:\na) cache Implementation\nb) networks\nc) send values\nd) receive values\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the condition for a tree to be weight balanced. where a is factor and n is a node?\nChoices:\na) weight[n.left] >= a*weight[n] and weight[n.right] >= a*weight[n].\nb) weight[n.left] >= a*weight[n.right] and weight[n.right] >= a*weight[n].\nc) weight[n.left] >= a*weight[n.left] and weight[n.right] >= a*weight[n].\nd) weight[n] is a non zero\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Given an empty AVL tree, how would you construct AVL tree when a set of numbers are given without performing any rotations?\nChoices:\na) just build the tree with the given input\nb) find the median of the set of elements given, make it as root and construct the tree\nc) use trial and error\nd) use dynamic programming to build the tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: A binary tree is a rooted tree but not an ordered tree.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Select the code snippet which performs post-order traversal.\nChoices:\na) public void postorder(Tree root) { System.out.println(root.data); postorder(root.left); postorder(root.right); }\nb) public void postorder(Tree root) { postorder(root.left); postorder(root.right); System.out.println(root.data); }\nc) public void postorder(Tree root) { System.out.println(root.data); postorder(root.right); postorder(root.left); }\nd) public void postorder(Tree root) { postorder(root.right); System.out.println(root.data); postorder(root.left); }\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many children does a binary tree have?\nChoices:\na) 2\nb) any number of children\nc) 0 or 1 or 2\nd) 0 or 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Cartesian trees solve range minimum query problem in constant time.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following trees is similar to that of an AA-Tree?\nChoices:\na) Splay Tree\nb) B+ Tree\nc) AVL Tree\nd) Red-Black Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What must be the missing logic below so as to print mirror of a tree as below as an example?\nChoices:\na) swapping of left and right nodes is missing\nb) swapping of left with root nodes is missing\nc) swapping of right with root nodes is missing\nd) nothing is missing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the maximum number of children that a binary tree node can have?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Is partitioning method used by Tango Tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: For the tree below, write the pre-order traversal.\nChoices:\na) 2, 7, 2, 6, 5, 11, 5, 9, 4\nb) 2, 7, 5, 2, 6, 9, 5, 11, 4\nc) 2, 5, 11, 6, 7, 4, 9, 5, 2\nd) 2, 7, 5, 6, 11, 2, 5, 4, 9\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity for creating a new node and then performing concatenation in the rope data structure?\nChoices:\na) O (log n)\nb) O (n!)\nc) O (n2)\nd) O (1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of level order traversal?\nChoices:\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(nlogn\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: If the tree is not a complete binary tree then what changes can be made for easy access of children of a node in the array?\nChoices:\na) every node stores data saying which of its children exist in the array\nb) no need of any changes continue with 2w and 2w+1, if node is at i\nc) keep a seperate table telling children of a node\nd) use another array parallel to the array with tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Self - balancing binary search trees have a much better average-case time complexity than hash tables.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What are null nodes filled with in a threaded binary tree?\nChoices:\na) inorder predecessor for left node and inorder successor for right node information\nb) right node with inorder predecessor and left node with inorder successor information\nc) they remain null\nd) some other values randomly\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Why do we impose restrictions like root property is black, every leaf is black, children of red node are black, all leaves have same black?\nChoices:\na) to get logarithm time complexity\nb) to get linear time complexity\nc) to get exponential time complexity\nd) to get constant time complexity\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the maximum height of an AVL tree with p nodes?\nChoices:\na) p\nb) log(p)\nc) log(p)/2\nd) p/2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The maximum number of nodes in a tree for which post-order and pre-order traversals may be equal is . . . . . . . .\nChoices:\na) 3\nb) 1\nc) 2\nd) any number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Figure below is a balanced binary tree. If a node inserted as child of the node R, how many nodes will become unbalanced?\nChoices:\na) 2\nb) 1\nc) 3\nd) 0\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a full binary tree if there are L leaves, then total number of nodes N are?\nChoices:\na) N = 2*L\nb) N = L + 1\nc) N = L - 1\nd) N = 2*L - 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Can a tree stored in an array using either one of inorder or post order or pre order traversals be again reformed?\nChoices:\na) Yes just traverse through the array and form the tree\nb) No we need one more traversal to form a tree\nc) No in case of sparse trees\nd) Yes by using both inorder and array elements\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Is it true that splay trees have O(logn) amortized complexity?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the space complexity of a treap algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Why we need to a binary tree which is height balanced?\nChoices:\na) to avoid formation of skew trees\nb) to save memory\nc) to attain faster memory access\nd) to simplify storing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: For the tree below, write the level-order traversal.\nChoices:\na) 2, 7, 2, 6, 5, 11, 5, 9, 4\nb) 2, 7, 5, 2, 11, 9, 6, 5, 4\nc) 2, 5, 11, 6, 7, 4, 9, 5, 2\nd) 2, 7, 5, 6, 11, 2, 5, 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: When it would be optimal to prefer Red-black trees over AVL trees?\nChoices:\na) when there are more insertions or deletions\nb) when more search is needed\nc) when tree must be balanced\nd) when log(nodes) time complexity is needed\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the disadvantage of using splay trees?\nChoices:\na) height of a splay tree can be linear when accessing elements in non decreasing order.\nb) splay operations are difficult\nc) no significant disadvantage\nd) splay tree performs unnecessary splay when a node is only being read\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: After which city is tango tree named?\nChoices:\na) Vatican City\nb) Buenos Aires\nc) New York\nd) California\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Is it possible to perform a split operation on a string in the rope if the split point is in the middle of the string.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the average running time of a treap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity for maintaining a dynamic set of weighted trees?\nChoices:\na) O (n)\nb) O (n2)\nc) O (log n)\nd) O (n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Consider below sequences. How to achieve the above operation efficiently?\nChoices:\na) use linked lists\nb) use avl trees\nc) use red-black trees\nd) use treaps (cartesian trees)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In the given figure, find '?'.\nChoices:\na) left rotation\nb) right rotation\nc) insertion\nd) deletion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What may be the psuedo code for finding the size of a tree?\nChoices:\na) find_size(root_node–>left_node) + 1 + find_size(root_node–>right_node)\nb) find_size(root_node–>left_node) + find_size(root_node–>right_node)\nc) find_size(root_node–>right_node) – 1\nd) find_size(root_node–>left_node + 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the below diagram is following AVL tree property?\nChoices:\na) only i\nb) both i and ii\nc) only ii\nd) i is not a binary search tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Is mathematical randomized tree can be generated using beta distribution.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The minimum height of self balancing binary search tree with n nodes is . . . . . . . .\nChoices:\na) log2(n)\nb) n\nc) 2n + 1\nd) 2n - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a threaded binary tree traversal?\nChoices:\na) a binary tree traversal using stacks\nb) a binary tree traversal using queues\nc) a binary tree traversal using stacks and queues\nd) a binary tree traversal without using stacks and queues\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In a full binary tree if number of internal nodes is I, then number of nodes N are?\nChoices:\na) N = 2*I\nb) N = I + 1\nc) N = I - 1\nd) N = 2*I + 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What should be the condition for the level of a left node?\nChoices:\na) It should be less than or equal to that of its parent\nb) It should be greater than that of its parent\nc) It should be strictly less than that of its parent\nd) The level should be equal to one\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Is tango tree represented as a tree of trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Who invented treaps?\nChoices:\na) Cecilia and Raimund\nb) Arne Andersson\nc) Donald Shell\nd) Harris and Ross\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following data structures can be efficiently implemented using height balanced binary search tree?\nChoices:\na) sets\nb) priority queue\nc) heap\nd) both sets and priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is a weight balanced tree?\nChoices:\na) A binary tree that stores the sizes of subtrees in nodes\nb) A binary tree with an additional attribute of weight\nc) A height balanced binary tree\nd) A normal binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is an AVL tree?\nChoices:\na) a tree which is balanced and is a height balanced tree\nb) a tree which is unbalanced and is a height balanced tree\nc) a tree with three children\nd) a tree with atmost 3 children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following traversing algorithm is not used to traverse in a tree?\nChoices:\na) Post order\nb) Pre order\nc) Post order\nd) Randomized\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which is the simplest of all binary search trees?\nChoices:\na) AVL tree\nb) Treap\nc) Splay tree\nd) Binary heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What are the applications of weight balanced tree?\nChoices:\na) dynamic sets, dictionaries, sequences, maps\nb) heaps\nc) sorting\nd) storing strings\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Identify the reason which doesn't play a key role to use threaded binary trees?\nChoices:\na) The storage required by stack and queue is more\nb) The pointers in most of nodes of a binary tree are NULL\nc) It is Difficult to find a successor node\nd) They occupy less size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How many bits would a succinct binary tree occupy?\nChoices:\na) n+O(n)\nb) 2n+O(n)\nc) n/2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Who developed the concept of tango tree?\nChoices:\na) Erik Demaine\nb) Mihai Patrascu\nc) John Lacono\nd) All of the mentioned\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following is the self-adjusting binary search tree?\nChoices:\na) AVL Tree\nb) Splay Tree\nc) Top Tree\nd) Ternary Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Comparing the speed of execution of Red-Black trees and AA-trees, which one has the faster search time?\nChoices:\na) AA-tree\nb) Red-Black tree\nc) Both have an equal search time\nd) It depends\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Is insertion and deletion operation faster in rope than an array?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which type of tree is tango tree?\nChoices:\na) Ternary Tree\nb) AVL Tree\nc) Binary Search Tree\nd) K-ary Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the expected number of leaves in a randomized binary search tree?\nChoices:\na) n + 1\nb) (n + 1)/3\nc) (n + 1)/2\nd) n + 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How will you find the maximum element in a binary search tree?\nChoices:\na) public void max(Tree root) { while(root.left() != null) { root = root.left(); } System.out.println(root.data()); }\nb) public void max(Tree root) { while(root != null) { root = root.left(); } System.out.println(root.data()); }\nc) public void max(Tree root) { while(root.right() != null) { root = root.right(); } System.out.println(root.data()); }\nd) public void max(Tree root) { while(root != null) { root = root.right(); } System.out.println(root.data()); }\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Cartesian trees are most suitable for?\nChoices:\na) searching\nb) finding nth element\nc) minimum range query and lowest common ancestors\nd) self balancing a tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: How many types of insertion are performed in a binary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the probability of selecting a tree uniformly at random?\nChoices:\na) Equal to Catalan Number\nb) Less Than Catalan Number\nc) Greater than Catalan Number\nd) Reciprocal of Catalan Number\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following tree traversals work if the null left pointer pointing to the predecessor and null right pointer pointing to the successor in a binary tree?\nChoices:\na) inorder, postorder, preorder traversals\nb) inorder\nc) postorder\nd) preorder\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: AA Trees are implemented using?\nChoices:\na) Colors\nb) Levels\nc) Node size\nd) Heaps\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What maximum difference in heights between the leafs of a AVL tree is possible?\nChoices:\na) log(n) where n is the number of nodes\nb) n where n is the number of nodes\nc) 0 or 1\nd) atmost 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Select the code snippet which performs pre-order traversal.\nChoices:\na) public void preorder(Tree root) {\n\tSystem.out.println(root.data);\n\tpreorder(root.left);\n\tpreorder(root.right);\n}\nb) public void preorder(Tree root) {\n\tpreorder(root.left);\n\tSystem.out.println(root.data);\n\tpreorder(root.right);\n}\nc) public void preorder(Tree root) {\n\tSystem.out.println(root.data);\n\tpreorder(root.right);\n\tpreorder(root.left);\n}\nd) public void preorder(Tree root) {\n\tpreorder(root.right);\n\tpreorder(root.left);\n\tSystem.out.println(root.data);\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: A node of the weight balanced tree has\nChoices:\na) key, left and right pointers, size\nb) key, value\nc) key, size\nd) key\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is not the self balancing binary search tree?\nChoices:\na) AVL Tree\nb) 2-3-4 Tree\nc) Red - Black Tree\nd) Splay Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: When to choose Red-Black tree, AVL tree and B-trees?\nChoices:\na) many inserts, many searches and when managing more items respectively\nb) many searches, when managing more items respectively and many inserts respectively\nc) sorting, sorting and retrieval respectively\nd) retrieval, sorting and retrieval respectively\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which type of binary search tree or algorithm does tango tree use?\nChoices:\na) Online\nb) Offline\nc) Static\nd) Dynamic\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: For how many vertices in a set, is top tree defined for underlying tree?\nChoices:\na) 3\nb) 4\nc) 5\nd) 2\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is a complete binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) A binary tree, which is completely filled, with the possible exception of the bottom level, which is filled from right to left\nc) A binary tree, which is completely filled, with the possible exception of the bottom level, which is filled from left to right\nd) A tree In which all nodes have degree 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How many randomized binary search trees can be formed by the numbers (1, 3, 2)?\nChoices:\na) 2\nb) 3\nc) 6\nd) 5\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Balanced binary tree with n items allows the lookup of an item in . . . . . . . . worst-case time.\nChoices:\na) O(log n)\nb) O(nlog 2)\nc) O(n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What are the operations that could be performed in O(logn) time complexity by red-black tree?\nChoices:\na) insertion, deletion, finding predecessor, successor\nb) only insertion\nc) only finding predecessor, successor\nd) for sorting\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In general, the node content in a threaded binary tree is . . . . . . . .\nChoices:\na) leftchild_pointer, left_tag, data, right_tag, rightchild_pointer\nb) leftchild_pointer, left_tag\nc) leftchild_pointer, left_tag, right_tag, rightchild_pointer\nd) leftchild_pointer, left_tag, data\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: To restore the AVL property after inserting a element, we start at the insertion point and move towards root of that tree. is this statement true?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What will be the height of a balanced full binary tree with 8 leaves?\nChoices:\na) 8\nb) 5\nc) 6\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What are the worst case and average case complexities of a binary search tree?\nChoices:\na) O(n), O(n)\nb) O(logn), O(logn)\nc) O(logn), O(n)\nd) O(n), O(logn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the traversal strategy used in the binary tree?\nChoices:\na) depth-first traversal\nb) breadth-first traversal\nc) random traversal\nd) Priority traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In postorder traversal of binary tree right subtree is traversed before visiting root.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Of the following rules that are followed by an AA-tree, which of the following is incorrect?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which process forms the randomized binary search tree?\nChoices:\na) Stochastic Process\nb) Branching Process\nc) Diffusion Process\nd) Aggregation Process\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Who is the inventor of AA-Tree?\nChoices:\na) Arne Andersson\nb) Daniel Sleator\nc) Rudolf Bayer\nd) Jon Louis Bentley\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which data structure is used to maintain a dynamic forest using a link or cut operation?\nChoices:\na) Top Tree\nb) Array\nc) Linked List\nd) Stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many common operations are performed in a binary tree?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What are the disadvantages of normal binary tree traversals?\nChoices:\na) there are many pointers which are null and thus useless\nb) there is no traversal which is efficient\nc) complexity in implementing\nd) improper traversals\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the reason behind the simplicity of a treap?\nChoices:\na) Each node has data and a pointer\nb) Each node is colored accordingly\nc) It is a binary search tree following heap principles\nd) Each node has a fixed priority field\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Is Top tree used for maintaining Dynamic set of trees called forest.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: When we have red-black trees and AVL trees that can perform most of operations in logarithmic times, then what is the need for splay trees?\nChoices:\na) no there is no special usage\nb) In real time it is estimated that 80% access is only to 20% data, hence most used ones must be easily available\nc) redblack and avl are not upto mark\nd) they are just another type of self balancing binary search trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the parent for a node 'w' of a complete binary tree in an array representation when w is not 0?\nChoices:\na) floor(w-1/2)\nb) ceil(w-1/2)\nc) w-1/2\nd) w/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: The average depth of a binary tree is given as?\nChoices:\na) O(N)\nb) O(√N)\nc) O(N2)\nd) O(log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity for deleting the string to form a new string in the rope data structure?\nChoices:\na) O (n2)\nb) O (n!)\nc) O (log n)\nd) O (1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Associative arrays can be implemented using . . . . . . . .\nChoices:\na) B-tree\nb) A doubly linked list\nc) A single linked list\nd) A self balancing binary search tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What are the operations that can be performed on weight balanced tree?\nChoices:\na) all basic operations and set intersection, set union and subset test\nb) all basic operations\nc) set intersection, set union and subset test\nd) only insertion and deletion\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the range of β in finding the length of the longest path in a randomized binary search tree?\nChoices:\na) (-1, 0)\nb) (1, 0)\nc) (0, 5)\nd) (0, 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Consider a weight balanced tree such that, the number of nodes in the left sub tree is at least half and at most twice the number of nodes in the right sub tree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on k nodes can be described as\nChoices:\na) log2 n\nb) log4/3 n\nc) log3 n\nd) log3/2 n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity for the initialization of top tree?\nChoices:\na) O (n)\nb) O (n2)\nc) O (log n)\nd) O (n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How many edges does a leaf cluster contain?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: If binary trees are represented in arrays, what formula can be used to locate a left child, if the node has an index i?\nChoices:\na) 2i+1\nb) 2i+2\nc) 2i\nd) 4i\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: The post-order traversal of a binary tree is O P Q R S T. Then possible pre-order traversal will be . . . . . . . .\nChoices:\na) T Q R S O P\nb) T O Q R P S\nc) T Q O P S R\nd) T Q O S P R\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How many top trees are there in a tree with single vertex?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the speciality of cartesian sorting?\nChoices:\na) it sorts partially sorted set of data quickly\nb) it considers cartesian product of elements\nc) it sorts elements in less than O(logn)\nd) it is a self balancing tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In which of the following self - balancing binary search tree the recently accessed element can be accessed quickly?\nChoices:\na) AVL tree\nb) AA tree\nc) Splay tree\nd) Red - Black tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which operation is used to break a preferred path into two sets of parts at a particular node?\nChoices:\na) Differentiate\nb) Cut\nc) Integrate\nd) Join\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What does the below definitions convey? i. A binary tree is balanced if for every node it is gonna hold that the number of inner nodes in the left subtree and the number of inner nodes in the right subtree differ by at most 1. ii. A binary tree is balanced if for any two leaves the difference of the depth is at most 1.\nChoices:\na) weight balanced and height balanced tree definitions\nb) height balanced and weight balanced tree definitions\nc) definitions of weight balanced tree\nd) definitions of height balanced tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is not an advantage of trees?\nChoices:\na) Hierarchical structure\nb) Faster search\nc) Router algorithms\nd) Undo/Redo operations in a notepad\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is a full binary tree?\nChoices:\na) Each node has exactly zero or two children\nb) Each node has exactly two children\nc) All the leaves are at the same level\nd) Each node has exactly one or two children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following graph traversals closely imitates level order traversal of a binary tree?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Depth & Breadth First Search\nd) Binary Search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which special balanced binary search tree is used to store the nodes of auxiliary tree?\nChoices:\na) Red - Black Tree\nb) Red - Brown Tree\nc) Red - Yellow Tree\nd) Red - Tango Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: General ordered tree can be encoded into binary trees.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the time complexity of for achieving competitive ratio by tango tree?\nChoices:\na) O (log n)\nb) O (n2)\nc) O (n!)\nd) O (log (log n))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is/are the disadvantages of implementing tree using normal arrays?\nChoices:\na) difficulty in knowing children nodes of a node\nb) difficult in finding the parent of a node\nc) have to know the maximum number of nodes possible before creation of trees\nd) difficult to implement\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the speciality about the inorder traversal of a binary search tree?\nChoices:\na) It traverses in a non increasing order\nb) It traverses in an increasing order\nc) It traverses in a random fashion\nd) It traverses based on priority of the node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The number of edges from the root to the node is called . . . . . . . . of the tree.\nChoices:\na) Height\nb) Depth\nc) Length\nd) Width\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: A binary search tree contains values 7, 8, 13, 26, 35, 40, 70, 75. Which one of the following is a valid post-order sequence of the tree provided the pre-order sequence as 35, 13, 7, 8, 26, 70, 40 and 75?\nChoices:\na) 7, 8, 26, 13, 75, 40, 70, 35\nb) 26, 13, 7, 8, 70, 75, 40, 35\nc) 7, 8, 13, 26, 35, 40, 70, 75\nd) 8, 7, 26, 13, 40, 75, 70, 35\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In a binary search tree, which of the following traversals would print the numbers in the ascending order?\nChoices:\na) Level-order traversal\nb) Pre-order traversal\nc) Post-order traversal\nd) In-order traversal\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What must be the ideal size of array if the height of tree is 'l'?\nChoices:\na) 2l-1\nb) l-1\nc) l\nd) 2l\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: For the tree below, write the post-order traversal.\nChoices:\na) 6, 2, 7, 2, 5, 11, 9, 5, 4\nb) 6, 5, 11, 2, 7, 5, 9, 4, 2\nc) 6, 5, 2, 11, 7, 4, 9, 5, 2\nd) 6, 2, 7, 2, 11, 5, 5, 9, 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: How many orders of traversal are applicable to a binary tree (In General)?\nChoices:\na) 1\nb) 4\nc) 2\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following properties are obeyed by all three tree - traversals?\nChoices:\na) Left subtrees are visited before right subtrees\nb) Right subtrees are visited before left subtrees\nc) Root node is visited before left subtree\nd) Root node is visited before right subtree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Level order traversal of a tree is formed with the help of\nChoices:\na) breadth first search\nb) depth first search\nc) dijkstra's algorithm\nd) prims algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which type of data structure does rope represent?\nChoices:\na) Array\nb) Linked List\nc) Queue\nd) Binary Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is inefficient with the below threaded binary tree picture?\nChoices:\na) it has dangling pointers\nb) nothing inefficient\nc) incorrect threaded tree\nd) space is being used more\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Two balanced binary trees are given with m and n elements respectively. They can be merged into a balanced binary search tree in . . . . . . . . time.\nChoices:\na) O(m+n)\nb) O(mn)\nc) O(m)\nd) O(mlog n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is missing in this logic of finding a path in the tree for a given sum (i.e checking whether there will be a path from roots to leaf nodes with given sum)?\nChoices:\na) code for having recursive calls to either only left tree or right trees or to both subtrees depending on their existence\nb) code for having recursive calls to either only left tree or right trees\nc) code for having recursive calls to either only left tree\nd) code for having recursive calls to either only right trees\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the below statements are true?   i. Cartesian tree is not a height balanced tree   ii. Cartesian tree of a sequence of unique numbers can be unique generated\nChoices:\na) both statements are true\nb) only i. is true\nc) only ii. is true\nd) both are false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following pair's traversals on a binary tree can build the tree uniquely?\nChoices:\na) post-order and pre-order\nb) post-order and in-order\nc) post-order and level order\nd) level order and preorder\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity for the update cost on auxiliary trees?\nChoices:\na) O (log (log n))\nb) k-1 O (log n)\nc) K2 O (log n)\nd) k+1 O (log (log n))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is an advantage of balanced binary search tree, like AVL tree, compared to binary heap?\nChoices:\na) insertion takes less time\nb) deletion takes less time\nc) searching takes less time\nd) construction of the tree takes less time than binary heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the prime condition of AA-tree which makes it simpler than a red-black tree?\nChoices:\na) Only right children can be red\nb) Only left children can be red\nc) Right children should strictly be black\nd) There should be no left children\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How can you save memory when storing color information in Red-Black tree?\nChoices:\na) using least significant bit of one of the pointers in the node for color information\nb) using another array with colors of each node\nc) storing color information in the node structure\nd) using negative and positive numbering\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is incorrect with respect to binary trees?\nChoices:\na) Let T be a binary tree. For every k ≥ 0, there are no more than 2k nodes in level k\nb) Let T be a binary tree with λ levels. Then T has no more than 2λ – 1 nodes\nc) Let T be a binary tree with N nodes. Then the number of levels is at least ceil(log (N + 1))\nd) Let T be a binary tree with N nodes. Then the number of levels is at least floor(log (N + 1))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which node has the lowest priority in a treap?\nChoices:\na) root node\nb) leaf node\nc) null node\nd) centre node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity for searching k+1 auxiliary trees?\nChoices:\na) k+2 O (log (log n))\nb) k+1 O (log n)\nc) K+2 O (log n)\nd) k+1 O (log (log n))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: A treap is a combination of a tree and a heap.\nChoices:\na) false\nb) true\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: An AVL tree is a self - balancing binary search tree, in which the heights of the two child sub trees of any node differ by . . . . . . . .\nChoices:\na) At least one\nb) At most one\nc) Two\nd) At most two\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which type of binary tree does rope require to perform basic operations?\nChoices:\na) Unbalanced\nb) Balanced\nc) Complete\nd) Full\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: For the tree below, write the in-order traversal.\nChoices:\na) 6, 2, 5, 7, 11, 2, 5, 9, 4\nb) 6, 5, 2, 11, 7, 4, 9, 5, 2\nc) 2, 7, 2, 6, 5, 11, 5, 9, 4\nd) 2, 7, 6, 5, 11, 2, 9, 5, 4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the average case time complexity for finding the height of the binary tree?\nChoices:\na) h = O(loglogn)\nb) h = O(nlogn)\nc) h = O(n)\nd) h = O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What are the two different operations done in an AA-Tree?\nChoices:\na) shift and color\nb) skew and split\nc) zig and zag\nd) enqueue and dequeue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is the correct definition for a horizontal link?\nChoices:\na) connection between node and a child of equal levels\nb) connection between two nodes\nc) connection between two child nodes\nd) connection between root node and leaf node\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the expected depth of a node in a randomized binary search tree?\nChoices:\na) log n\nb) n!\nc) n2\nd) 2 log n + O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following are used as an internal operation in Top tree?\nChoices:\na) Merge\nb) Cut\nc) Expose\nd) Link\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How will you find the minimum element in a binary search tree?\nChoices:\na) public void min(Tree root) {\n\twhile(root.left() != null) {\n\t\troot = root.left();\n\t}\n\tSystem.out.println(root.data());\n}\nb) public void min(Tree root) {\n\twhile(root != null) {\n\t\troot = root.left();\n\t}\n\tSystem.out.println(root.data());\n}\nc) public void min(Tree root) {\n\twhile(root.right() != null) {\n\t\troot = root.right();\n\t}\n\tSystem.out.println(root.data());\n}\nd) public void min(Tree root) {\n\twhile(root != null) {\n\t\troot = root.right();\n\t}\n\tSystem.out.println(root.data());\n}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Elements in a tree can be indexed by its position under the ordering of the keys and the ordinal position of an element can be determined, both with good efficiency.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the time complexity for inserting the string and forming a new string in the rope data structure?\nChoices:\na) O (log n)\nb) O (n!)\nc) O (n2)\nd) O (1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In an AA-tree, we process split first, followed by a skew.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How many edges are present in Edge cluster?\nChoices:\na) 0\nb) 1\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the time complexity for splitting the string into two new string in the rope data structure?\nChoices:\na) O (n2)\nb) O (n!)\nc) O (log n)\nd) O (1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following tree data structures is not a balanced binary tree?\nChoices:\na) AVL tree\nb) Red-black tree\nc) Splay tree\nd) B-tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the upper bound for a tango tree if k is a number of interleaves?\nChoices:\na) k+2 O (log (log n))\nb) k O (log n)\nc) K2 O (log n)\nd) k+1 O (log (log n))\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity of pre-order traversal in the iterative fashion?\nChoices:\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(nlogn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How will you remove a left horizontal link in an AA-tree?\nChoices:\na) by performing right rotation\nb) by performing left rotation\nc) by deleting both the elements\nd) by inserting a new element\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of inserting an element into a binary heap?\nChoices:\na) O(1\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is true for a min-heap?\nChoices:\na) The root node is the smallest element, and every parent node is smaller than its children.\nb) The root node is the largest element, and every parent node is larger than its children.\nc) All nodes are arranged in a complete binary tree.\nd) The tree is always balanced.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In a max-heap, which node property is true?\nChoices:\na) Every parent node is greater than or equal to its children.\nb) Every parent node is less than or equal to its children.\nc) All nodes have the same value.\nd) The root node is always the smallest element.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How do you maintain the heap property after deleting the root node?\nChoices:\na) By performing a heapify operation.\nb) By reordering the entire heap.\nc) By inserting a new element at the root.\nd) By performing an inorder traversal.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which data structure is commonly used to implement priority queues?\nChoices:\na) Heap\nb) Binary Search Tree\nc) AVL Tree\nd) Red-Black Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the height of a complete binary heap with n nodes?\nChoices:\na) ⌈log2(n + 1)⌉\nb) ⌈log2(n)⌉\nc) ⌈n / 2⌉\nd) log2(n) + 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the primary operation performed when adjusting a heap after insertion or deletion?\nChoices:\na) Heapify\nb) Sorting\nc) Searching\nd) Balancing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a binary heap, how is the parent node index calculated from a child node index i?\nChoices:\na) (i - 1) / 2\nb) (i + 1) / 2\nc) 2 * i + 1\nd) 2 * i - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity of building a heap from an unsorted array?\nChoices:\na) O(log n)\nb) O(n log n)\nc) O(n)\nd) O(n2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How do you find the maximum element in a max-heap?\nChoices:\na) The root node contains the maximum element.\nb) The maximum element is always the leftmost leaf.\nc) By performing an inorder traversal.\nd) By searching the entire heap.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the main advantage of using a binary heap for implementing a priority queue?\nChoices:\na) It provides efficient insertions and deletions.\nb) It maintains elements in sorted order.\nc) It allows quick search operations.\nd) It uses less memory.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In a min-heap, what happens when you decrease the value of a node?\nChoices:\na) The heap property is maintained by moving the node up the tree.\nb) The node is removed and the heap is restructured.\nc) The node is placed at the end of the heap.\nd) The heap property is maintained by moving the node down the tree.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which operation is used to extract the minimum element from a min-heap?\nChoices:\na) Extract-Min\nb) Extract-Max\nc) Remove-Root\nd) Delete-Min\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of extracting the maximum element from a max-heap?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How are heaps commonly used in algorithms?\nChoices:\na) For implementing priority queues and heapsort.\nb) For managing hierarchical data.\nc) For balancing binary search trees.\nd) For efficient searching.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a binary heap, which of the following operations is O(log n) in time complexity?\nChoices:\na) Insert\nb) Find minimum\nc) Delete minimum\nd) Both Insert and Delete minimum\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the main difference between a binary heap and a binary search tree?\nChoices:\na) A binary heap does not maintain a sorted order while a binary search tree does.\nb) A binary heap maintains a sorted order while a binary search tree does not.\nc) Binary heaps are always balanced while binary search trees are not.\nd) Binary heaps have only one child per node, binary search trees have two.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How do you restore the heap property after extracting the maximum element from a max-heap?\nChoices:\na) By performing a heapify operation.\nb) By reordering the entire heap.\nc) By inserting a new maximum element.\nd) By balancing the tree manually.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which property does not apply to a min-heap?\nChoices:\na) The root is the smallest element.\nb) Each parent node is less than or equal to its children.\nc) All levels of the heap are completely filled except possibly the last.\nd) The root is the largest element.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of decreasing a key value in a min-heap?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a binary heap, what is the typical time complexity of deleting an arbitrary element?\nChoices:\na) O(1\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the primary use of heaps in graph algorithms?\nChoices:\na) For implementing priority queues.\nb) For managing hierarchical data.\nc) For sorting elements.\nd) For balancing search trees.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How is the parent node index computed in a zero-based indexed binary heap array?\nChoices:\na) (i - 1) / 2\nb) (i + 1) / 2\nc) (i - 1) / 2 if i is even, else (i - 1) / 2\nd) (i - 1) / 2 for i > 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What happens if you increase the value of a node in a max-heap?\nChoices:\na) The heap property is restored by moving the node down.\nb) The node is removed, and a new node is added.\nc) The heap property is restored by moving the node up.\nd) The heap becomes unbalanced.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following operations is not directly supported by a binary heap?\nChoices:\na) Searching for an arbitrary element\nb) Inserting an element\nc) Extracting the maximum/minimum\nd) Building a heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a binary heap represented as an array, what is the index of the left child of the node at index i?\nChoices:\na) 2 * i + 1\nb) 2 * i\nc) 2 * i + 2\nd) 2 * i - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the space complexity of a binary heap when stored in an array?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which operation involves moving a node to maintain the heap property after insertion in a binary heap?\nChoices:\na) Bubble-up or Percolate-up\nb) Bubble-down or Percolate-down\nc) Heapify\nd) Restructure\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In a max-heap, what is the time complexity to find the second largest element?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What kind of binary heap is used to efficiently support priority queues with the smallest element at the root?\nChoices:\na) Min-heap\nb) Max-heap\nc) Fibonacci heap\nd) Binomial heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the result of an inorder traversal of a binary heap?\nChoices:\na) The elements are not in any specific order.\nb) The elements are sorted in ascending order.\nc) The elements are sorted in descending order.\nd) The elements follow the heap property.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is not a type of heap?\nChoices:\na) Binary heap\nb) Fibonacci heap\nc) Binomial heap\nd) AVL heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the time complexity of building a binary heap using a sequence of insertions?\nChoices:\na) O(log n)\nb) O(n log n)\nc) O(n)\nd) O(n2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the typical use case for a min-heap in algorithms?\nChoices:\na) To find the minimum element efficiently.\nb) To find the maximum element efficiently.\nc) To sort elements in descending order.\nd) To balance binary search trees.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a binary heap, how do you locate the right child of a node at index i?\nChoices:\na) 2 * i + 2\nb) 2 * i + 1\nc) (i - 1) / 2\nd) 2 * i\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which property is common to both max-heaps and min-heaps?\nChoices:\na) They both maintain a complete binary tree.\nb) They both ensure a sorted order of elements.\nc) They both allow easy insertion and deletion.\nd) They both balance themselves automatically.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the typical time complexity of decreasing a key in a min-heap?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How is the structure of a binary heap affected when you increase the size of the heap?\nChoices:\na) The heap grows by adding nodes to the end.\nb) The heap automatically rebalances itself.\nc) The heap elements are sorted.\nd) The heap size must be manually adjusted.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In a binary heap stored as an array, what is the index of the parent node for the node at index i?\nChoices:\na) (i - 1) / 2\nb) (i + 1) / 2\nc) (i + 2) / 2\nd) (i - 2) / 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of extracting the minimum element from a min-heap?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What operation is performed to convert a binary heap into a sorted array?\nChoices:\na) Heapsort\nb) Merge sort\nc) Quick sort\nd) Insertion sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In which situation would you prefer using a Fibonacci heap over a binary heap?\nChoices:\na) When frequent decrease-key operations are required.\nb) When constructing a priority queue with constant time insertions.\nc) When needing to maintain a sorted order.\nd) When requiring simple implementation.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which algorithm uses a binary heap to improve its performance?\nChoices:\na) Dijkstra's algorithm for shortest paths.\nb) Kruskal's algorithm for minimum spanning tree.\nc) Prim's algorithm for minimum spanning tree.\nd) Merge sort algorithm.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the maximum number of children a node can have in a binary heap?\nChoices:\na) 2\nb) 3\nc) 4\nd) No fixed limit\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How do you ensure that a binary heap remains a valid heap after multiple insertions?\nChoices:\na) By performing a heapify operation after each insertion.\nb) By performing a sort operation.\nc) By rebalancing the tree manually.\nd) By ensuring nodes are inserted in sorted order.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Multiplication and division to find children and parents cannot be implemented in a d-heap.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: A leftist heap is also said to be a binary heap.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Who invented d-ary heap?\nChoices:\na) Carl Rick\nb) Alan Turing\nc) Donald Johnson\nd) Euclid\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the child of smallest element of the given minimum ternary heap?\nChoices:\na) 1\nb) 10\nc) 22\nd) 24\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Heap can be used as . . . . . . . .\nChoices:\na) Priority queue\nb) Stack\nc) A decreasing order array\nd) Normal Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The procedure given below is used to maintain min-order in the min heap. Find out the missing statements, represented as X.\nChoices:\na) if A[m] > A[parent(m)] then swap A[m] and A[parent(m)]\nb) if A[m] > A[parent(m)] then swap A[i] and A[parent(m)]\nc) if A[m] < A[parent(m)] then swap A[m] and A[parent(m)]\nd) if A[m] > A[parent(m)] then swap A[i] and A[parent(m)]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Why is this heap named leftist heap?\nChoices:\na) only left subtrees exist\nb) the tree is biased to get deep down the left\nc) it is balanced\nd) right trees are unbalanced\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the space complexity of searching in a heap?\nChoices:\na) O(logn)\nb) O(n)\nc) O(1)\nd) O(nlogn\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following operations does not destroy the leftist heap property?\nChoices:\na) insert\nb) merge\nc) delete\nd) swap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The main distinguishable characterstic of a binomial heap from a binary heap is that\nChoices:\na) it allows union operations very efficiently\nb) it does not allow union operations that could easily be implemented in binary heap\nc) the heap structure is not similar to complete binary tree\nd) the location of child node is not fixed i.e child nodes could be at level (h-2) or (h-3), where h is height of heap and h>4\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: How many basic operations can be performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time complexity for deleting root key in a ternary heap of n elements?\nChoices:\na) O (log n/ log 3)\nb) O (3log n/ log 3)\nc) O (n)\nd) O (1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the reason for the efficiency of a pairing heap?\nChoices:\na) simplicity\nb) time-efficient\nc) space-efficient\nd) advanced\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: If there are c children of the root, how many calls to the merge procedure is required to reassemble the heap?\nChoices:\na) c\nb) c+1\nc) c-1\nd) 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is order of resultant heap after merging two tree of order k?\nChoices:\na) 2*k\nb) k+1\nc) k*k\nd) k+logk\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Min heap can be used to implement selection sort.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What would be the result if the left subtree of the root has a null path length of 1 and the right subtree has a null path length of 2?\nChoices:\na) merge occurs without violation\nb) violation at left subtree\nc) violation at right subtree\nd) violation at the root\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the complexity of adding an element to the heap.\nChoices:\na) O(log n)\nb) O(h)\nc) O(log n) & O(h)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Is decrease priority operation performed more quickly in a ternary heap with respect to the binary heap.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Do ternary heap have better memory cache behavior than binary heap.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: d-heap is similar to that of a?\nChoices:\na) binary heap\nb) fibonacci heap\nc) leftist heap\nd) treap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the fundamental operation on leftist heap?\nChoices:\na) insertion\nb) merging\nc) deletion\nd) swapping\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the smallest element of the given minimum ternary heap?  ![Heaps mcq question image](https://www.examveda.com/images/question-image/data-structure/heaps/1725259996-90-1.png)\nChoices:\na) 1\nb) 10\nc) 18\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the process of building a ternary heap called?\nChoices:\na) Heapify\nb) Hashing\nc) Linking\nd) Merging\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which operation is not efficiently performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) merge\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a binary min heap containing n elements, the largest element can be found in . . . . . . . . time.\nChoices:\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the worst case time in searching minimum value in weak -heap?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n logn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Pairing heaps time complexity was inspired by that of?\nChoices:\na) splay tree\nb) treap\nc) red-black tree\nd) avl tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity for inserting a new item in a ternary heap of n elements?\nChoices:\na) O (log n/ log 3)\nb) O (n!)\nc) O (n)\nd) O (1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What will be the position of 5, when a max heap is constructed on the input elements 5, 70, 45, 7, 12, 15, 13, 65, 30, 25?\nChoices:\na) 5 will be at root\nb) 5 will be at last level\nc) 5 will be at second level\nd) 5 can be anywhere in heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What are the siblings of smallest element of the given maximum ternary heap?\nChoices:\na) 31\nb) 12\nc) 18\nd) 22\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) O (log n/ log 3)\nb) O (n!)\nc) O (n)\nd) O (1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Choose the correct properties of weak-heap.\nChoices:\na) Every node has value greater than the value of child node\nb) Every right child of node has greater value than parent node\nc) Every left child of node has greater value than parent node\nd) Every left and right child of node has same value as parent node\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The relationship of skew heaps to leftist heaps is analogous to that of?\nChoices:\na) Splay tree and AVL tree\nb) Red black tree and AVL tree\nc) Binary tree and Splay tree\nd) Binary tree and Red black tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the run time efficiency of an insertion algorithm?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N2)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a leftist heap, all the operations should be performed on?\nChoices:\na) left path\nb) centre path\nc) right path\nd) root\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Should leaves in ternary heap be distributed from left to right.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: If we implement heap as min-heap, deleting root node (value 1)from the heap. What would be the value of root node after second iteration if leaf node (value 100) is chosen to replace the root at start.\nChoices:\na) 2\nb) 100\nc) 17\nd) 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Heap exhibits the property of a binary tree?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Pointer manipulation is generally more time-consuming than multiplication and division.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which one of the following array elements represents a binary min heap?\nChoices:\na) 12 10 8 25 14 17\nb) 8 10 12 25 14 17\nc) 25 17 14 12 10 8\nd) 14 17 25 10 12 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Time taken in decreasing the node value in a binomial heap is\nChoices:\na) O(n)\nb) O(1)\nc) O(logn)\nd) O(nlogn\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Out of the following given options, which is the fastest algorithm?\nChoices:\na) fibonacci heap\nb) pairing heap\nc) d-ary heap\nd) binary heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In a max-heap, element with the greatest key is always in the which node?\nChoices:\na) Leaf node\nb) First node of left sub tree\nc) root node\nd) First node of right sub tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Descending priority queue can be implemented using . . . . . . . .\nChoices:\na) max heap\nb) min heap\nc) min-max heap\nd) trie\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How many nodes does a leftist tree with r nodes must have?\nChoices:\na) 2r\nb) 2r-1\nc) 2r\nd) 2r-1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In skew heaps, certain constraints are to be met in order to perform swapping.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Given an array of element 5, 7, 9, 1, 3, 10, 8, 4. Which of the following are the correct sequences of elements after inserting all the elements in a min-heap?\nChoices:\na) 1,3,4,5,7,8,9,10\nb) 1,4,3,9,8,5,7,10\nc) 1,3,4,5,8,7,9,10\nd) 1,3,7,4,8,5,9,10\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Left child of parent node has value lesser than the parent node.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is difficult to determine the right path length?\nChoices:\na) Skew heaps\nb) Binomial tree\nc) Leftist heap\nd) d-heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: If we implement heap as maximum heap , adding a new node of value 15 to the left most node of right subtree. What value will be at leaf nodes of the right subtree?\nChoices:\na) 15 and 1\nb) 25 and 1\nc) 3 and 1\nd) 2 and 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: An array consists of n elements. We want to create a heap using the elements. The time complexity of building a heap will be in order of\nChoices:\na) O(n*n*logn)\nb) O(n*logn)\nc) O(n*n)\nd) O(n *logn *logn)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How is a pairing heap represented?\nChoices:\na) binary tree\nb) fibonacci tree\nc) heap ordered tree\nd) treap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the fundamental operation performed in skew heaps?\nChoices:\na) intersection\nb) difference\nc) merging\nd) sorting\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: The leaf node for a heap of height h will be at which position.\nChoices:\na) h\nb) h-1\nc) h or h-1\nd) h-2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the efficiency of merge used in leftist heaps?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(M log N)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Does there exist a heap with seven distinct elements so that the Inorder traversal gives the element in sorted order.\nChoices:\na) Yes\nb) No\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: . . . . . . . . is a self-adjusting version of a leftist heap.\nChoices:\na) Rightist heap\nb) Skew heap\nc) d-heap\nd) Binary heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the location of a parent node for any arbitary node i?\nChoices:\na) (i/2) position\nb) (i+1)/ position\nc) floor(i/2) position\nd) ceil(i/2) position\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the height of a given minimum ternary heap?\nChoices:\na) 1\nb) 10\nc) 2\nd) 24\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a leftist heap, the null path length of a null node is defined as?\nChoices:\na) 0\nb) 1\nc) null\nd) -1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: The roots of the elements of the subtrees are smaller than the root of the heap.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a binomial heap the root value is greater than left child and less than right child.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The worst case complexity of deleting any arbitrary node value element from heap is . . . . . . . .\nChoices:\na) O(logn)\nb) O(n)\nc) O(nlogn)\nd) O(n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: The worst case running time of all operations in a skew heap is given as?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N2)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In what time can a leftist heap be built?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which operation cannot be directly performed in a d-heap?\nChoices:\na) insert\nb) delete\nc) find\nd) create\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is the application of minimum ternary heap?\nChoices:\na) Prim's Algorithm\nb) Euclid's Algorithm\nc) Eight Queen Puzzle\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The amortized time efficiency for performing deletion of a minimum element is?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N2)\nd) O(M log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How many comparisons will occur while performing a delete-min operation?\nChoices:\na) d\nb) d-1\nc) d+1\nd) 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which type of data structure is a ternary heap?\nChoices:\na) Array\nb) Hash\nc) Priority Queue\nd) Priority Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Naive merge cannot be done in a skew merge.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the heaps is implemented by the following figure?\nChoices:\na) fibonacci heaps\nb) pairing heap\nc) skew heap\nd) leftist heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What happens if the null path length is not updated?\nChoices:\na) error occurs\nb) all null path lengths will be 0\nc) all null path lengths will be -1\nd) all null path lengths will be 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the ancestor of the leaf node in a given minimum ternary heap?\nChoices:\na) 1\nb) 10\nc) 18\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Given a heap of n nodes.The maximum number of tree for building the heap is.\nChoices:\na) n\nb) n-1\nc) n/2\nd) logn\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many types of the merge are available in skew heaps?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: The ascending heap property is . . . . . . . .\nChoices:\na) A[Parent(i)]=A[i]\nb) A[Parent(i)]<=A[i]\nc) A[Parent(i)]>=A[i]\nd) A[Parent(i)]>2*A[i]\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in min heap take . . . . . . . .\nChoices:\na) logarithmic and linear time constant respectively\nb) constant and linear time respectively\nc) constant and quadratic time respectively\nd) constant and logarithmic time respectively\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the amortized efficiency of skew merge?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which node contains a pointer to its parent?\nChoices:\na) root node\nb) right most child\nc) left most child\nd) left sibling\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the other name of weak heap?\nChoices:\na) Min-heap\nb) Max-heap\nc) Relaxed -heap\nd) Leonardo heap\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the time per operation of merging, insertion and deletion operations in a skew heap?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the highest element of the given maximum ternary heap?\nChoices:\na) 31\nb) 10\nc) 18\nd) 20\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the node path length of a node with 0 or 1 child?\nChoices:\na) 1\nb) -1\nc) 0\nd) null\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity for increasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) O (log n/ log 3)\nb) O (n!)\nc) O (n)\nd) O (1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many properties does a leftist heap support?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Min heap is a complete binary tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The Statement \"Fibonacci heap has better amortized running time in compare to a binomial heap\".\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following methods is the best choice for complex applications?\nChoices:\na) binary heap\nb) d-heap\nc) treap\nd) pairing heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Is the priority queue abstract data type.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the amortized cost per operation of a skew heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N2)\nd) O(log N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the best case complexity in building a heap?\nChoices:\na) O(nlogn)\nb) O(n2)\nc) O(n*longn *logn)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The following figure is an example for\nChoices:\na) d-heap\nb) binary heap\nc) leftist heap\nd) skew heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity for decreasing priority of key in a maximum ternary heap of n elements?\nChoices:\na) O (log n/ log 3)\nb) O (3log n/ log 3)\nc) O (n)\nd) O (1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time taken to delete a minimum element in a leftist heap?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(M log N\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Why would a recursive implementation fail in skew heaps?\nChoices:\na) skew heaps are self adjusting\nb) efficiency gets reduced\nc) lack of stack space\nd) time complexity\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which property should ternary heap hold for execution?\nChoices:\na) Associative\nb) Commutative\nc) Tree\nd) Heap\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the basic operation performed in a pairing heap?\nChoices:\na) merge\nb) deletion\nc) insertion\nd) swapping\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: On which data structure is a d-ary heap based?\nChoices:\na) stack\nb) queue\nc) linked list\nd) priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The actual pairing heap implementation uses the right child and left child representation.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time complexity for creating a ternary heap using swapping?\nChoices:\na) O (log n/ log 3)\nb) O (n!)\nc) O (n)\nd) O (1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is a ternary heap?\nChoices:\na) An array with three elements\nb) Linked list with three elements\nc) Tree with three children\nd) Heap with all nodes having three children\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of these operations have same complexities?\nChoices:\na) Insertion, find_min\nb) Find_min, union\nc) Union, Insertion\nd) Deletion, Find _max\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: d-heap is shallower than a binary heap.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How many secondary operations are performed in a d-heap?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: The number of trees in a binomial heap with n nodes is\nChoices:\na) logn\nb) n\nc) nlogn\nd) n/2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: The worst case analysis for a naive merge is given as?\nChoices:\na) O(N)\nb) O( log N)\nc) O( N log N)\nd) O(N2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the run time efficiency of delete-min operation?\nChoices:\na) O(log N)\nb) O(logd N)\nc) O(d logd N)\nd) O(d)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity for increasing priority of key in a minimum ternary heap of n elements?\nChoices:\na) O (log n/ log 3)\nb) O (3log n/ log 3)\nc) O (n)\nd) O (1)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The total comparisons in finding both smallest and largest elements are\nChoices:\na) 2*n +2\nb) n + ((n+1)/2) -2\nc) n+logn\nd) n2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Heaps MCQ Question and Answer - Section 1\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Heaps MCQ Question and Answer - Section 2\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Each Section contains maximum 100 MCQs question on Heaps.\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the primary purpose of hashing in data structures?\nChoices:\na) To provide constant time complexity for searches.\nb) To sort elements in ascending order.\nc) To balance binary search trees.\nd) To implement priority queues.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In hashing, what is a 'collision'?\nChoices:\na) When two elements are stored in the same slot.\nb) When a hash table exceeds its capacity.\nc) When a hash function fails to produce a unique index.\nd) When two keys hash to the same index.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is a common method to handle collisions in hashing?\nChoices:\na) Inorder traversal\nb) Depth-first search\nc) Linear probing\nd) Binary search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which collision resolution technique involves using a secondary hash function?\nChoices:\na) Rehashing\nb) Chaining\nc) Double hashing\nd) Linear probing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of searching for an element in a well-distributed hash table using chaining?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What does 'load factor' represent in hashing?\nChoices:\na) The ratio of the number of elements to the number of slots.\nb) The time complexity of hash functions.\nc) The number of collisions in the hash table.\nd) The capacity of the hash table.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is NOT a typical property of a good hash function?\nChoices:\na) Easy to compute.\nb) Distributes keys uniformly across the hash table.\nc) Minimizes collisions.\nd) Produces random and unpredictable results.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the primary advantage of open addressing over chaining in hash tables?\nChoices:\na) Better handling of collisions.\nb) Faster search times in all cases.\nc) Reduced memory usage.\nd) Simpler implementation.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a hash table with linear probing, what happens if the desired slot is occupied?\nChoices:\na) A new hash table is created.\nb) The next slot is checked sequentially.\nc) The element is placed in a new hash table.\nd) A new hash table is created.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is \"rehashing\" in the context of hash tables?\nChoices:\na) The process of chaining elements together.\nb) The process of hashing elements for the first time.\nc) The process of resizing and rehashing all elements when the table is full.\nd) The process of finding an element in the hash table.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What type of hash table collision resolution involves storing a list of all elements that hash to the same index?\nChoices:\na) Open addressing\nb) Linear probing\nc) Double hashing\nd) Chaining\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following hash functions provides the best performance for a hash table?\nChoices:\na) Universal hashing\nb) Division method\nc) Multiplicative method\nd) Randomized hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How can you improve the performance of a hash table?\nChoices:\na) By avoiding the use of chaining.\nb) By using a less complex hash function.\nc) By decreasing the size of the hash table.\nd) By increasing the size of the hash table and using a good hash function.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the main drawback of using linear probing in hash tables?\nChoices:\na) Increased memory usage.\nb) Decreased speed of hash functions.\nc) Clustering of elements can occur.\nd) Difficulty in implementing the hash function.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is a disadvantage of using chaining for collision resolution in hash tables?\nChoices:\na) Better performance with low load factors.\nb) Increased memory usage due to the storage of pointers.\nc) Simplified implementation.\nd) Better performance with low load factors.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the main goal of a good hash function?\nChoices:\na) To minimize memory usage.\nb) To sort keys in ascending order.\nc) To uniformly distribute keys across the hash table.\nd) To generate the maximum number of collisions.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: How is a hash table implemented in the case of open addressing?\nChoices:\na) Using a linked list at each slot.\nb) Using multiple hash functions.\nc) Using a secondary hash table.\nd) Using probing techniques to find an open slot.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the main advantage of using double hashing over linear probing?\nChoices:\na) Simplifies the hash function.\nb) Increases the load factor of the hash table.\nc) Reduces clustering of elements.\nd) Reduces the memory usage.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In which scenario would you prefer chaining over open addressing for collision resolution?\nChoices:\na) When insertions and deletions are infrequent.\nb) When memory usage is a primary concern.\nc) When the hash table is highly dynamic and frequently grows.\nd) When the hash table is mostly static and does not grow.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the effect of a high load factor on the performance of a hash table?\nChoices:\na) Decreased time complexity for lookups.\nb) Improved distribution of keys.\nc) Decreased time complexity for insertions.\nd) Increased number of collisions.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following hash functions is used to reduce the possibility of clustering?\nChoices:\na) Universal hashing\nb) Simple modulo operation\nc) Multiplicative hashing\nd) Division method\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What technique is used to convert a hash table from an array-based to a linked-list-based implementation?\nChoices:\na) Quadratic probing\nb) Linear probing\nc) Open addressing\nd) Chaining\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How does rehashing affect a hash table?\nChoices:\na) It sorts elements in the hash table.\nb) It increases the size of the hash table and re-calculates indices for all elements.\nc) It adds new elements to the hash table.\nd) It sorts elements in the hash table.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which hash table technique requires additional space for linked lists at each index?\nChoices:\na) Linear probing\nb) Quadratic probing\nc) Double hashing\nd) Chaining\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following techniques involves storing an array of lists in a hash table?\nChoices:\na) Quadratic probing\nb) Chaining\nc) Double hashing\nd) Quadratic probing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How does double hashing work to resolve collisions in a hash table?\nChoices:\na) By linking colliding elements in a list.\nb) By using a quadratic function to find a new slot.\nc) By probing linearly for the next open slot.\nd) By using a second hash function to compute a new index.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a common strategy to ensure that a hash table performs optimally under varying loads?\nChoices:\na) Static resizing without rehashing.\nb) Using a fixed hash function for all tables.\nc) Dynamic resizing and rehashing.\nd) Reducing the hash table size periodically.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In simple chaining, what data structure is appropriate?\nChoices:\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Binary trees\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following operations are done in a hash table?\nChoices:\na) Insert only\nb) Search only\nc) Insert and search\nd) Replace\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following problems occur due to linear probing?\nChoices:\na) Primary collision\nb) Secondary collision\nc) Separate chaining\nd) Extendible hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Collision is caused due to the presence of two keys having the same value.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which indicator is used for similarity between two sets?\nChoices:\na) Rope Tree\nb) Jaccard Coefficient\nc) Tango Tree\nd) MinHash Coefficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many probes are required on average for insertion and successful search?\nChoices:\na) 4 and 10\nb) 2 and 6\nc) 2.5 and 1.5\nd) 3.5 and 1.5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Hashing can be used in online spelling checkers.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In open addressing the hash table can never become full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is identical to that of a separate chaining hash node?\nChoices:\na) Linked list\nb) Array\nc) Stack\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a hash function?\nChoices:\na) A function has allocated memory to keys\nb) A function that computes the location of the key in the array\nc) A function that creates an array\nd) A function that computes the location of the values in the array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: On what value does the probe sequence depend on?\nChoices:\na) c1\nb) k\nc) c2\nd) m\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Double hashing is one of the best methods available for open addressing.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which technique was firstly used clustering documents using the similarity of two words or strings?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the value of the Jaccard index when the two sets are disjoint?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: A good hash approach is to derive the hash value that is expected to be dependent of any patterns that might exist in the data.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many hashes will be needed for calculating Jaccard index with an expected error less than or equal to 0.05?\nChoices:\na) 100\nb) 200\nc) 300\nd) 400\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is simple uniform hashing?\nChoices:\na) Every element has equal probability of hashing into any of the slots\nb) A weighted probabilistic method is used to hash elements into the slots\nc) Elements has Random probability of hashing into array slots\nd) Elements are hashed based on priority\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the search complexity in direct addressing?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is direct addressing?\nChoices:\na) Distinct array position for every possible key\nb) Fewer array positions than keys\nc) Fewer keys than array positions\nd) Same array position for all keys\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following variant of a hash table has the best cache performance?\nChoices:\na) hash table using a linked list for separate chaining\nb) hash table using binary search tree for separate chaining\nc) hash table using open addressing\nd) hash table using a doubly linked list for separate chaining\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Sequential access in a Hash tree is faster than in B-trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: The value of h2(k) can be composite relatively to the hash table size m.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following technique stores data separately in case of a collision?\nChoices:\na) Open addressing\nb) Double hashing\nc) Quadratic probing\nd) Chaining using a binary tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which technique has the greatest number of probe sequences?\nChoices:\na) Linear probing\nb) Quadratic probing\nc) Double hashing\nd) Closed hashing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The case in which a key other than the desired one is kept at the identified location is called?\nChoices:\na) Hashing\nb) Collision\nc) Chaining\nd) Open addressing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is used in hash tables to determine the index of any input record?\nChoices:\na) hash function\nb) hash linked list\nc) hash tree\nd) hash chaining\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How is a bit vector better compared to a normal array for implementing the hash table?\nChoices:\na) It saves time\nb) It saves space\nc) It saves both time and space\nd) It reduces code complexity\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How many bits are needed to specify the single permutation by min-wise independent family?\nChoices:\na) O (log n!)\nb) O (n!)\nc) Ω (n2)\nd) Ω (n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is a hash table?\nChoices:\na) A structure that maps values to keys\nb) A structure that maps keys to values\nc) A structure used for storage\nd) A structure used to implement stack and queue\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the expected error by the estimator Chernoff bound on the samples performed without replacement?\nChoices:\na) O (log k!)\nb) O (k!)\nc) O (k2)\nd) O (1/k1/2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the value of h(k) for the key 123456? Given: p=14, s=2654435769, w=32\nChoices:\na) 123\nb) 456\nc) 70\nd) 67\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following schemes does quadratic probing come under?\nChoices:\na) rehashing\nb) extended hashing\nc) separate chaining\nd) open addressing\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: When are the members of two sets more common relatively?\nChoices:\na) Jaccard Index is Closer to 1\nb) Jaccard Index is Closer to 0\nc) Jaccard Index is Closer to -1\nd) Jaccard Index is Farther to 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Did Google conduct a large evaluation for comparing the performance by two technique MinHash and SimHash?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What are the values of h1(k) and h2(k) in the hash function?\nChoices:\na) h1(k) = m mod k\n    h2(k) =  1+ (m’ mod k)\nb) h1(k) = 1 + (m mod k)\n    h2(k) =  m’ mod k\nc) h1(k) = 1+ (k mod m)\n    h2(k) =  k mod m\nd) h1(k) = k mod m\n    h2(k) =  1+ (k mod m’)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Hashing can be used to encrypt and decrypt digital signatures.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is a disadvantage of using separate chaining using linked lists?\nChoices:\na) It requires many pointers\nb) It requires linked lists\nc) It uses array\nd) It does not resolve collision\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following helps keys to be mapped into addresses?\nChoices:\na) hash function\nb) separate chaining\nc) open addressing\nd) chaining using a linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is true for a Hash tree?\nChoices:\na) Hashing is used for sequential access\nb) Indexing is used for direct access\nc) Hash tree allows only sequential access\nd) Hashing is used for direct access\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the value of 'm' if the value of m is 19?\nChoices:\na) 11\nb) 18\nc) 17\nd) 15\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the load factor?\nChoices:\na) Average array size\nb) Average key size\nc) Average chain length\nd) Average hash table length\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the worst case search time of a hashing using separate chaining algorithm?\nChoices:\na) O(N log N)\nb) O(N)\nc) O(N2)\nd) O(N3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which scheme uses a randomization approach?\nChoices:\na) hashing by division\nb) hashing by multiplication\nc) universal hashing\nd) open addressing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following technique stores data in a separate entity in case of a collision?\nChoices:\na) Open addressing\nb) Chaining using doubly linked list\nc) Linear probing\nd) Double hashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which technique was firstly used to remove duplicate web pages from search results in AltaVista search engine?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the advantage of hashing with chaining?\nChoices:\na) cache performance is good\nb) uses less space\nc) less sensitive to hash function\nd) has a time complexity of O(n) in the worst case\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Hash tree is used in data synchronisation. In the worst case the data synchronisation takes . . . . . . . . time.\nChoices:\na) O(logn)\nb) O(n2)\nc) O(nlogn)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity to insert an element into the direct address table?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What will be the height of the hash tree with branching factor 2 and with 8 records?\nChoices:\na) 3\nb) 5\nc) 4\nd) 6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is not a technique to avoid a collision?\nChoices:\na) Make the hash function appear random\nb) Use the chaining method\nc) Use uniform hashing\nd) Increasing hash table size\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the advantage of a hash table as a data structure?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following techniques offer better cache performance?\nChoices:\na) Quadratic probing\nb) Linear probing\nc) Double hashing\nd) Rehashing\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Separate chaining is easier to implement as compared to open addressing.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Is MinHash used as a tool for association rule learning.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the worst case time complexity of the insertion in the hash tree?\nChoices:\na) O(logk(n))\nb) O(n2)\nc) O(nlogk(n))\nd) O(kn)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: The task of generating alternative indices for a node is called?\nChoices:\na) Collision handling\nb) Collision detection\nc) Collision recovery\nd) Closed hashing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What can be the value of m in the division method?\nChoices:\na) Any prime number\nb) Any even number\nc) 2p - 1\nd) 2p\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Using division method, in a given hash table of size 157, the key of value 172 be placed at position . . . . . . . .\nChoices:\na) 19\nb) 72\nc) 15\nd) 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Hash tree is also known as . . . . . . . .\nChoices:\na) Merkle tree\nb) T -tree\nc) Hash table\nd) Bx-tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the running time of double hashing?\nChoices:\na) Theta(m)\nb) Theta(m2)\nc) Theta(m log k)\nd) Theta(m3)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: If several elements are competing for the same bucket in the hash table, what is it called?\nChoices:\na) Diffusion\nb) Replication\nc) Collision\nd) Duplication\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: When is it appropriate to use direct addressing?\nChoices:\na) When the array is comparatively large\nb) When the universe U of keys is reasonably small\nc) When the universe U of keys is reasonably large\nd) When the array is comparatively small\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the advantage of using linked list over the doubly linked list for chaining?\nChoices:\na) it takes less memory\nb) it causes more collisions\nc) it makes the process of insertion and deletion faster\nd) it causes less collisions\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which scheme provides good performance?\nChoices:\na) open addressing\nb) universal hashing\nc) hashing by division\nd) hashing by multiplication\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is an advantage of open addressing over separate chaining?\nChoices:\na) it is simpler to implement\nb) table never gets full\nc) it is less sensitive to hash function\nd) it has better cache performance\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the advantage of a hash table over BST?\nChoices:\na) hash table has a better average time complexity for performing insert, delete and search operations\nb) hash table requires less space\nc) range query is easy with hash table\nd) easier to implement\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How many constraints are to be met to successfully implement quadratic probing?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the formula used in quadratic probing?\nChoices:\na) Hash key = key mod table size\nb) Hash key=(hash(x)+F(i)) mod table size\nc) Hash key=(hash(x)+F(i2)) mod table size\nd) H(x) = x mod 17\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which among the following is the best technique to handle collision?\nChoices:\na) Quadratic probing\nb) Linear probing\nc) Double hashing\nd) Separate chaining\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Hash tree is used in effective data verification in distributed systems.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the advantage of the multiplication method?\nChoices:\na) only 2 steps are involved\nb) using constant\nc) value of m not critical\nd) simple multiplication\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the advantage of the hash table over a linked list?\nChoices:\na) faster access of data\nb) easy to implement\nc) very efficient for less number of entries\nd) exhibit good locality of reference\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the load factor for an open addressing technique?\nChoices:\na) 1\nb) 0.5\nc) 1.5\nd) 0\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: By implementing separate chaining using list head we can reduce the number of collisions drastically.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: A hash table may become full in the case when we use open addressing.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: . . . . . . . . is not a theoretical problem but actually occurs in real implementations of probing.\nChoices:\na) Hashing\nb) Clustering\nc) Rehashing\nd) Collision\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the disadvantage of hashing with chaining?\nChoices:\na) not easy to implement\nb) takes more space\nc) quite sensitive to hash function\nd) table gets filled up easily\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In linear probing, the cost of an unsuccessful search can be used to compute the average cost of a successful search.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What kind of deletion is implemented by hashing using open addressing?\nChoices:\na) active deletion\nb) standard deletion\nc) lazy deletion\nd) no deletion\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a hash table of size 10, where is element 7 placed?\nChoices:\na) 6\nb) 7\nc) 17\nd) 16\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What data organization method is used in hash tables?\nChoices:\na) Stack\nb) Array\nc) Linked list\nd) Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following technique stores data in the hash table itself in case of a collision?\nChoices:\na) Open addressing\nb) Chaining using linked list\nc) Chaining using doubly linked list\nd) Chaining using binary tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the expected error for estimating the Jaccard index using MinHash scheme for k different hash functions?\nChoices:\na) O (log k!)\nb) O (k!)\nc) O (k2)\nd) O (1/k1/2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following technique is used for handling collisions in a hash table?\nChoices:\na) Open addressing\nb) Hashing\nc) Searching\nd) Hash function\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Who invented the MinHash technique?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Andrei Broder\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In simple uniform hashing, what is the search complexity?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the table size when the value of p is 7 in multiplication method of creating hash functions?\nChoices:\na) 14\nb) 128\nc) 49\nd) 127\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity to delete an element from the direct address table?\nChoices:\na) O(n)\nb) O(logn)\nc) O(nlogn)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What should be the load factor for separate chaining hashing?\nChoices:\na) 0.5\nb) 1\nc) 1.5\nd) 2\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In quadratic probing, if the table size is prime, a new element cannot be inserted if the table is half full.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following is a widely used form of the hash tree?\nChoices:\na) B+ - tree\nb) T tree\nc) Tiger tree hash\nd) Htree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is defined as the ratio of total elements of intersection and union of two sets?\nChoices:\na) Rope Tree\nb) Jaccard Coefficient Index\nc) Tango Tree\nd) MinHash Coefficient\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the advantage of using a dynamic set in direct addressing?\nChoices:\na) It saves time\nb) It saves space\nc) It saves both time and space\nd) It reduces code complexity\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the average retrieval time when n keys hash to the same slot?\nChoices:\na) Theta(n)\nb) Theta(n2)\nc) Theta(nlog n)\nd) Big-Oh(n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Quadratic probing overcomes primary collision.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which technique is used for finding similarity between two sets?\nChoices:\na) MinHash\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What type of search algorithm is most appropriate for an ordered array where each element has an index?\nChoices:\na) Jump Search\nb) Linear Search\nc) Interpolation Search\nd) Binary Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of binary search on a sorted array?\nChoices:\na) O(n log n)\nb) O(n)\nc) O(n2)\nd) O(log n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of binary search in a balanced binary search tree (BST)?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which searching algorithm is most efficient for large datasets that are sorted?\nChoices:\na) Jump Search\nb) Interpolation Search\nc) Linear Search\nd) Binary Search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which search algorithm is efficient for searching in a sorted array where values are uniformly distributed?\nChoices:\na) Binary Search\nb) Linear Search\nc) Interpolation Search\nd) Jump Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In which scenario does binary search require the most additional operations?\nChoices:\na) When searching in an unsorted array.\nb) When the array is sorted in descending order.\nc) When the array contains duplicate elements.\nd) When searching in an unsorted array.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the primary disadvantage of binary search?\nChoices:\na) It requires additional memory.\nb) It is not suitable for large arrays.\nc) It requires the array to be sorted.\nd) It is less efficient for small arrays.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the primary advantage of using exponential search over binary search?\nChoices:\na) It works with unsorted arrays.\nb) It can handle non-uniform data distributions.\nc) It is easier to implement.\nd) It is more efficient for very large datasets.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of exponential search for a large dataset?\nChoices:\na) O(log n)\nb) O(√n)\nc) O(n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which searching algorithm is best suited for finding an item in an array with a uniform distribution of values?\nChoices:\na) Jump Search\nb) Binary Search\nc) Linear Search\nd) Interpolation Search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which searching technique is most suitable for hash tables?\nChoices:\na) Linear Search\nb) Binary Search\nc) Hash Search\nd) Interpolation Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the primary advantage of using hashing for searching compared to binary search?\nChoices:\na) Works efficiently with small datasets.\nb) Constant time complexity on average.\nc) Requires less memory.\nd) Works efficiently with small datasets.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of linear search in the worst case?\nChoices:\na) O(n2)\nb) O(n log n)\nc) O(n)\nd) O(log n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the time complexity of a failed search using binary search?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(n2)\nd) O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which search algorithm is most appropriate for searching a single element in a sorted array?\nChoices:\na) Binary Search\nb) Linear Search\nc) Interpolation Search\nd) Hash Search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the average-case time complexity of interpolation search when the data is uniformly distributed?\nChoices:\na) O(n log n)\nb) O(n)\nc) O(log log n)\nd) O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the average time complexity of a successful search using binary search?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(log n)\nd) O(n2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the best-case time complexity of binary search when the target element is at the middle?\nChoices:\na) O(n)\nb) O(1)\nc) O(n log n)\nd) O(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which scenario is jump search preferred over binary search?\nChoices:\na) When using a linked list.\nb) When searching a small array.\nc) When the data is sorted and uniformly distributed.\nd) When the array is unsorted.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which searching algorithm can be used to find an item in a sorted array with an index-based approach?\nChoices:\na) Linear Search\nb) Interpolation Search\nc) Exponential Search\nd) Binary Search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the average-case time complexity of Jump Search?\nChoices:\na) O(√n)\nb) O(log n)\nc) O(n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the key difference between binary search and interpolation search?\nChoices:\na) Interpolation search requires a sorted array.\nb) Binary search can handle unsorted arrays.\nc) Interpolation search is always faster.\nd) Binary search is based on divide-and-conquer, while interpolation search estimates positions.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is a common application of hash-based searching algorithms?\nChoices:\na) Sorting arrays\nb) Graph traversal\nc) Implementing hash tables\nd) Dynamic programming\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the main advantage of using hash tables for searching?\nChoices:\na) Requires less space than arrays.\nb) Fast average-case time complexity.\nc) Works well with linked lists.\nd) Requires less space than arrays.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which algorithm is used for searching in an unordered linked list?\nChoices:\na) Jump Search\nb) Interpolation Search\nc) Linear Search\nd) Binary Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which searching algorithm is least efficient for finding an item in a large, sorted array?\nChoices:\na) Binary Search\nb) Interpolation Search\nc) Jump Search\nd) Linear Search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the key disadvantage of linear search compared to binary search?\nChoices:\na) It requires additional memory.\nb) It is not efficient for small arrays.\nc) It has higher time complexity.\nd) It requires sorted data.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the worst-case time complexity of Jump Search?\nChoices:\na) O(log n)\nb) O(n)\nc) O(n log n)\nd) O(√n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the typical use case for interpolation search?\nChoices:\na) When data is uniformly distributed\nb) When data is highly clustered.\nc) When data is unsorted.\nd) When data is sparse.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity of successful linear search?\nChoices:\na) O(n log n)\nb) O(1)\nc) O(log n)\nd) O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which searching algorithm can handle arrays with very large ranges of values efficiently?\nChoices:\na) Radix Sort\nb) Binary Search\nc) Interpolation Search\nd) Quick Sort\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In which scenario does exponential search perform best?\nChoices:\na) When the array has a small number of elements.\nb) When the array is sorted and has a large range of values.\nc) When the array contains duplicate elements.\nd) When the array has a small number of elements.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which searching algorithm is best for real-time systems where data changes frequently?\nChoices:\na) Jump Search\nb) Linear Search\nc) Hash Search\nd) Binary Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the main advantage of using ternary search over binary search?\nChoices:\na) It works on unsorted arrays.\nb) It uses less memory.\nc) It is easier to implement.\nd) It divides the array into three parts, potentially reducing the search time.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In which scenario does linear search outperform binary search?\nChoices:\na) When the array is unsorted.\nb) When the array is very large.\nc) When the array is sorted.\nd) When duplicates are allowed.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary use of exponential search?\nChoices:\na) Searching in a linked list.\nb) Sorting data elements.\nc) Searching for elements in unsorted data.\nd) Finding the position of an element in a sorted array.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which searching algorithm has a time complexity of O(log n) in the worst case?\nChoices:\na) Linear Search\nb) Jump Search\nc) Binary Search\nd) Interpolation Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of successful search using Jump Search?\nChoices:\na) O(log n)\nb) O(√n)\nc) O(n log n)\nd) O(log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which search algorithm is most efficient for a dataset that is already sorted and does not require a sorted array?\nChoices:\na) Binary Search\nb) Linear Search\nc) Hash Search\nd) Interpolation Search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the primary limitation of binary search in terms of the input data structure?\nChoices:\na) It does not handle duplicate values.\nb) It requires additional memory.\nc) It is not efficient for small datasets.\nd) The input array must be sorted.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which algorithm is best suited for searching in a sorted linked list?\nChoices:\na) Binary Search\nb) Interpolation Search\nc) Linear Search\nd) Jump Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of interpolation search in the best case scenario?\nChoices:\na) O(log n)\nb) O(1)\nc) O(n log n)\nd) O(log n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the best case time complexity of linear search?\nChoices:\na) O(n log n)\nb) O(log n)\nc) O(1)\nd) O(n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What type of data structure is best for implementing binary search?\nChoices:\na) Linked List\nb) Hash Table\nc) Tree\nd) Array\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time complexity of hash search in the worst case?\nChoices:\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is a sub string of \"HELLOINDIA\"?\nChoices:\na) HELL\nb) LOIND\nc) HELD\nd) LOND\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How many jumps will be made in the worst case of jump search(let block jumped =k)?\nChoices:\na) n*k\nb) n/k\nc) k/n\nd) n+k\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following is not an advantage of Fibonacci Search?\nChoices:\na) When the element being searched for has a non uniform access storage\nb) It can be applied efficiently on unsorted arrays\nc) Can be used for large arrays which do not fit in the CPU cache or in the RAM\nd) Can be used in magnetic tapes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How can Jump Search be improved?\nChoices:\na) Step size should be other than sqrt(n)\nb) Cannot be improved\nc) Begin from the kth item, where k is the step size\nd) Start searching from the end\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity of Jump Search?\nChoices:\na) O(logn)\nb) O(n)\nc) O(sqrt(n))\nd) O(nlogn\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the worst case runtime of linear search(recursive) algorithm?\nChoices:\na) O(n)\nb) O(logn)\nc) O(n2)\nd) O(nx)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the length of the step in jump search?\nChoices:\na) n\nb) n/2\nc) sqrt(n)\nd) 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of exponential search when the input array is sorted but the values are not uniformly distributed?\nChoices:\na) O(n1/2)\nb) O(log log n)\nc) O(n)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the value of jump taken for maximum efficiency while implementing jump search?\nChoices:\na) n/2\nb) n2\nc) n1/2\nd) log n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following step is taken after finding an element having value greater than the element being searched?\nChoices:\na) binary search takes place in the forward direction\nb) binary search takes place in a backward direction\nc) linear search takes place in the forward direction\nd) linear search takes place in the backward direction\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Given, arr = {1, 3, 5, 6, 7, 9, 14, 15, 17, 19} key = 17 and delta = {5, 3, 1, 0}   How many key comparisons are made?(exclude the comparison used to decide the left or right sub array)\nChoices:\na) 4\nb) 3\nc) 5\nd) 6\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Binary Search can be categorized into which of the following?\nChoices:\na) Brute Force technique\nb) Divide and conquer\nc) Greedy algorithm\nd) Dynamic programming\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the auxiliary space requirement of interpolation search?\nChoices:\na) O(n)\nb) O(2n)\nc) O(1)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of Fibonacci Search?\nChoices:\na) O(logn)\nb) O(n)\nc) O(n2)\nd) O(nlogn\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Is there any difference in the speed of execution between linear serach(recursive) vs linear search(lterative)?\nChoices:\na) Both execute at same speed\nb) Linear search(recursive) is faster\nc) Linear search(Iterative) is faster\nd) Cant be said\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the average case time complexity of binary search using recursion?\nChoices:\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Choose the correct while loop statement from the following that finds the range where are the element being search is present (x is the element being searched in an array arr of size n)?\nChoices:\na) while (i < n && arr[i] <= x) i = i*2;\nb) while (i < n && arr[i] <= x) i = i/2;\nc) while (arr[i] <= x) i = i/2;\nd) while (i < n) i = i*2;\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Can linear search recursive algorithm and binary search recursive algorithm be performed on an unordered list?\nChoices:\na) Binary search can't be used\nb) Linear search can't be used\nc) Both cannot be used\nd) Both can be used\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the auxiliary space complexity of Z algorithm for pattern searching (m = length of text, n = length of pattern)?\nChoices:\na) O(n + m)\nb) O(m)\nc) O(n)\nd) O(m * n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What are the updated values of high and low in the array if the element being searched is lower than the value at calculated index in interpolation search? (pos = current position)\nChoices:\na) low = pos + 1, high remains unchanged\nb) high = pos - 1, low remains unchanged\nc) low = low +1, high = high - 1\nd) low = pos +1, high = pos - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the worst case for linear search?\nChoices:\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Interpolation search is an in place algorithm.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of Z algorithm for pattern searching (m = length of text, n = length of pattern)?\nChoices:\na) O(n)\nb) O(m)\nc) O(n + m)\nd) O(m * n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the auxiliary space requirement of the jump search?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n1/2)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the best case and worst case complexity of ordered linear search?\nChoices:\na) O(nlogn), O(logn)\nb) O(logn), O(nlogn)\nc) O(n), O(1)\nd) O(1), O(n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the time complexity of binary search with iteration?\nChoices:\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Is the space consumed by the linear search(recursive) and linear search(iterative) same?\nChoices:\na) No, recursive algorithm consumes more space\nb) No, recursive algorithm consumes less space\nc) Yes\nd) Nothing can be said\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What will be the maximum number of comparisons that can be made in jump search algorithm (assuming k to be blocks jumped)?\nChoices:\na) k\nb) n/k\nc) k-1\nd) k-1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following searching algorithm is fastest when the input array is sorted but has non uniformly distributed values?\nChoices:\na) jump search\nb) linear search\nc) binary search\nd) interpolation search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Interpolation search has a better time complexity than exponential search for any given array.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the worst case time complexity of KMP algorithm for pattern searching (m = length of text, n = length of pattern)?\nChoices:\na) O(n)\nb) O(n*m)\nc) O(m)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the auxiliary space requirement of the exponential sort when used with recursive binary search?\nChoices:\na) O(n)\nb) O(2n)\nc) O(1)\nd) O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: The naive pattern searching algorithm is an in place algorithm.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Exponential search performs better than binary search when the element being searched is present near the starting point of the array.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the best case runtime of linear search(recursive) algorithm on an ordered set of elements?\nChoices:\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(nx)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In which of the cases uniform binary search fails compared to binary search?\nChoices:\na) Complexity of code\nb) Many searches will be performed on several arrays of the same length\nc) Many searches will be performed on the same array\nd) A table lookup is generally faster than an addition and a shift\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of uniform binary search?\nChoices:\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the worst case complexity of binary search using recursion?\nChoices:\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following searching algorithm is fastest when the input array is sorted and has uniformly distributed values?\nChoices:\na) jump search\nb) exponential search\nc) binary search\nd) interpolation search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Best case of the exponential search will have time complexity of?\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Exponential search has . . . . . . . .\nChoices:\na) neither an exponential space complexity nor exponential time complexity\nb) exponential time complexity but a linear space complexity\nc) exponential space complexity but a linear time complexity\nd) both exponential time and space complexity\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is a disadvantage of linear search?\nChoices:\na) Requires more space\nb) Greater time complexities compared to other searching algorithms\nc) Not easy to understand\nd) Not easy to implement\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the advantage of recursive approach than an iterative approach?\nChoices:\na) Consumes less memory\nb) Less code and easy to implement\nc) Consumes more memory\nd) More code has to be written\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is the most desirable condition for interpolation search?\nChoices:\na) array should be sorted\nb) array should not be sorted but the values should be uniformly distributed\nc) array should have a less than 64 elements\nd) array should be sorted and the values should be uniformly distributed\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Given delta[4] is a global array and number of elements in the sorted array is 10, what are the values in the delta array?\nChoices:\na) 4, 3, 1, 0\nb) 5, 3, 1, 0\nc) 4, 2, 1, 1\nd) 5, 2, 1, 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following false about Jump Search?\nChoices:\na) Jump Search is better than Linear Search\nb) Useful when jumping back is more costly than jumping forward\nc) Jump Search is worse than Binary Search\nd) Jump search starts from the index 0 even though specified index is k\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is not an application of binary search?\nChoices:\na) To search in unordered list\nb) Debugging\nc) Union of intervals\nd) To find the lower/upper bound in an ordered sequence\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In which of the following case jump search will be preferred over binary search?\nChoices:\na) jumping backwards takes significantly more time than jumping forward\nb) jumping forward takes significantly more time than jumping backwards\nc) when the given array is very large in size\nd) when the given array is very small in size\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The array is as follows: 1, 2, 3, 6, 8, 10. Given that the number 17 is to be searched. At which call it tells that there's no such element? (By using linear search(recursive) algorithm)\nChoices:\na) 7th call\nb) 9th call\nc) 17th call\nd) The function calls itself infinite number of times\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following searching algorithm is fastest?\nChoices:\na) binary search\nb) linear search\nc) jump search\nd) all are equally fast\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Interpolation search performs better than binary search when?\nChoices:\na) array has uniformly distributed values but is not sorted\nb) array is sorted and has uniform distribution of values\nc) array is sorted but the values are not uniformly distributed\nd) array is not sorted\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the formula used for calculating the position in interpolation search? (x = element being searched, A[] = input array, low and high are the leftmost and rightmost index of A[] respectively)\nChoices:\na) ((x - A[low]) * (high - low)) / (A[high] - A[low])\nb) high + ((x - A[low]) * (high - low)) / (A[high] - A[low])\nc) low + ((x - A[low]) * (high - low)) / (A[high] - A[low])\nd) x + ((x - A[low]) * (high - low)) / (A[high] - A[low])\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Jumps are made in the jump search algorithm until . . . . . . . .\nChoices:\na) element having value less than that of the required element is found\nb) element having value equal to the median of values of the array is found\nc) element having value greater than that of the required element is found\nd) middle element is found equal to the element being searched\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the best case for linear search?\nChoices:\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Linear search(recursive) algorithm used in . . . . . . . .\nChoices:\na) When the size of the dataset is low\nb) When the size of the dataset is large\nc) When the dataset is unordered\nd) Never used\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In which of the following case jump search performs better than interpolation search?\nChoices:\na) When array has uniformly distributed values but is not sorted\nb) when array is sorted and has uniform distribution of values\nc) when array is sorted but the values increases exponentially\nd) when array is not sorted\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Best case of jump search will have time complexity of . . . . . . . .\nChoices:\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What are the updated values of high and low in the array if the element being searched is greater than the value at calculated index in interpolation search? (pos = current position)\nChoices:\na) low = pos + 1, high remains unchanged\nb) high = pos - 1, low remains unchanged\nc) low = low +1, high = high - 1\nd) low = pos +1, high = pos - 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the time complexity of interpolation search when the input array has uniformly distributed values and is sorted?\nChoices:\na) O(n)\nb) O(log log n)\nc) O(n log n)\nd) O(log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time complexity of exponential sort?\nChoices:\na) O(n)\nb) O(2n)\nc) O(n log n)\nd) O(log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the recurrence relation for the linear search recursive algorithm?\nChoices:\na) T(n-2)+c\nb) 2T(n-1)+c\nc) T(n-1)+c\nd) T(n+1)+c\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which algorithmic technique does Fibonacci search use?\nChoices:\na) Brute force\nb) Divide and Conquer\nc) Greedy Technique\nd) Backtracking\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Interpolation search is a variation of?\nChoices:\na) Exponential search\nb) Linear search\nc) Binary search\nd) Jump search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Jump search algorithm requires which of the following condition to be true?\nChoices:\na) array should be sorted\nb) array should have not be sorted\nc) array should have a less than 64 elements\nd) array should be partially sorted\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Jump search has a worst case time complexity of O(n).\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Choose the incorrect statement about exponential search from the following.\nChoices:\na) Exponential search is an in place algorithm\nb) Exponential search has a greater time complexity than binary search\nc) Exponential search performs better than binary search when the element being searched is present near the starting point of the array\nd) Jump search has a greater time complexity than an exponential search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Where is linear searching used?\nChoices:\na) Used all the time\nb) When the list has only a few elements\nc) When performing a single search in an unordered list\nd) When the list has only a few elements and When performing a single search in an unordered list\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Exponential search algorithm requires which of the following condition to be true?\nChoices:\na) array should be sorted\nb) array should have not be sorted\nc) array should have a less than 128 elements\nd) array should be partially sorted\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the auxiliary space requirement of an exponential sort when used with iterative binary search?\nChoices:\na) O(n)\nb) O(2n)\nc) O(1)\nd) O(log n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Jump search has a better time complexity than the exponential search.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In which of the following case jump search will be preferred over exponential search?\nChoices:\na) when the given array is very small in size\nb) when the given array is very large in size\nc) jumping backwards takes significantly more time than jumping forward\nd) jumping forward takes significantly more time than jumping backwards\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Rabin Karp algorithm and naive pattern searching algorithm have the same worst case time complexity.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following searching algorithm is used with exponential sort after finding the appropriate range?\nChoices:\na) Jump search\nb) Fibonacci Search\nc) Linear search\nd) Binary search\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is not an alternate name of exponential search?\nChoices:\na) Logarithmic search\nb) Doubling search\nc) Galloping search\nd) Struzik search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: The array is as follows: 1, 2, 3, 6, 8, 10. At what time the element 6 is found? (By using linear search(recursive) algorithm)\nChoices:\na) 4th call\nb) 3rd call\nc) 6th call\nd) 5th call\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Choose the recursive formula for the Fibonacci series.(n>=1)\nChoices:\na) F(n) = F(n+1) + F(n+2)\nb) F(n) = F(n) + F(n+1)\nc) F(n) = F(n-1) + F(n-2)\nd) F(n) = F(n-1) - F(n-2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following searching algorithm is fastest when the input array is not sorted but has uniformly distributed values?\nChoices:\na) linear search\nb) jump search\nc) interpolation search\nd) binary search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Jump search is worse than linear search in terms of time complexity.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following searching algorithms is not efficient for large datasets?\nChoices:\na) Binary Search\nb) Linear Search\nc) Jump Search\nd) Exponential Search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In which data structure is binary search most commonly used?\nChoices:\na) Linked List\nb) Sorted Array\nc) Hash Table\nd) Binary Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is not a searching algorithm?\nChoices:\na) Binary Search\nb) Linear Search\nc) Jump Search\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In which data structure is binary search most efficient?\nChoices:\na) Linked List\nb) Sorted Array\nc) Unsorted Array\nd) Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following is a searching algorithm?\nChoices:\na) Bubble Sort\nb) Linear Search\nc) Merge Sort\nd) Quick Sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which data structure can binary search be performed?\nChoices:\na) Linked List\nb) Sorted Array\nc) Stack\nd) Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the worst-case time complexity of linear search?\nChoices:\na) O(1)\nb) O(log n)\nc) O(n)\nd) O(n^2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Each Section contains maximum 100 MCQs question on Searching Algorithms.\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which string matching algorithm is known for its preprocessing phase to create a partial match table?\nChoices:\na) Naive Search\nb) Rabin-Karp\nc) Boyer-Moore\nd) Knuth-Morris-Pratt (KMP)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of the Boyer-Moore string matching algorithm in the best case?\nChoices:\na) O(m + n)\nb) O(n)\nc) O(m/n)\nd) O(m log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which string matching algorithm uses hashing to achieve its results?\nChoices:\na) Boyer-Moore\nb) Rabin-Karp\nc) Naive Search\nd) Boyer-Moore\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In which scenario does the Naive string matching algorithm perform well?\nChoices:\na) When using a large alphabet.\nb) When there are many potential matches.\nc) When both the pattern and text are very short.\nd) When the pattern is long and the text is large.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the worst-case time complexity of the Rabin-Karp algorithm?\nChoices:\na) O(m + n)\nb) O(m*n)\nc) O(m + n*log n)\nd) O(m*n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the main advantage of the Boyer-Moore algorithm over others?\nChoices:\na) It skips sections of the text that cannot match.\nb) It requires less preprocessing time.\nc) It uses less memory.\nd) It can handle multiple patterns efficiently.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which string matching algorithm is typically used in text editors for search functionality?\nChoices:\na) Naive Search\nb) Rabin-Karp\nc) Knuth-Morris-Pratt (KMP)\nd) Boyer-Moore\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the space complexity of the Knuth-Morris-Pratt (KMP) algorithm?\nChoices:\na) O(n)\nb) O(m + n)\nc) O(m)\nd) O(m*n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following algorithms is based on the principle of hashing for pattern matching?\nChoices:\na) Boyer-Moore\nb) Rabin-Karp\nc) Naive Search\nd) Boyer-Moore\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the average-case time complexity of the Boyer-Moore algorithm?\nChoices:\na) O(m*n)\nb) O(m)\nc) O(m + n)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the key data structure used in the Knuth-Morris-Pratt (KMP) algorithm for pattern matching?\nChoices:\na) Hash Table\nb) Suffix Tree\nc) Failure Function\nd) Partial Match Table\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What does the Rabin-Karp algorithm use to avoid unnecessary comparisons?\nChoices:\na) Rolling Hash\nb) Partial Match Table\nc) Failure Function\nd) Boyer-Moore Heuristic\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In which situation does the Knuth-Morris-Pratt (KMP) algorithm perform particularly well?\nChoices:\na) When the pattern is very short.\nb) When the text is randomly structured.\nc) When the text contains many repetitions.\nd) When the pattern is long and the text is large.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which string matching algorithm uses a heuristic to improve efficiency by skipping sections of the text?\nChoices:\na) Rabin-Karp\nb) Knuth-Morris-Pratt (KMP)\nc) Boyer-Moore\nd) Naive Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary benefit of using the Rabin-Karp algorithm?\nChoices:\na) Lower space complexity compared to others.\nb) Efficient for multiple pattern matching using hashing.\nc) Better for single pattern matching.\nd) Lower space complexity compared to others.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the preprocessing phase in the Knuth-Morris-Pratt (KMP) algorithm used for?\nChoices:\na) To find all possible matches.\nb) To sort the text.\nc) To create a partial match table.\nd) To compute hash values for patterns.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which algorithm is considered to be the fastest for string matching in practice, especially for large texts?\nChoices:\na) Rabin-Karp\nb) Knuth-Morris-Pratt (KMP)\nc) Naive Search\nd) Boyer-Moore\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How does the Rabin-Karp algorithm handle collisions in hashing?\nChoices:\na) By using a rolling hash.\nb) By using a secondary hash function.\nc) By rehashing the entire pattern.\nd) By using a separate data structure.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In the Boyer-Moore algorithm, what is the purpose of the bad character rule?\nChoices:\na) To preprocess the text.\nb) To sort characters of the pattern.\nc) To check for hash collisions.\nd) To skip portions of the text that cannot match.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the time complexity of the Knuth-Morris-Pratt (KMP) algorithm for pattern matching?\nChoices:\na) O(m*n)\nb) O(m log n)\nc) O(m + n)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which string matching algorithm is known for its use of multiple pattern matching in a single pass?\nChoices:\na) Boyer-Moore\nb) Rabin-Karp\nc) Naive Search\nd) Boyer-Moore\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the best-case time complexity of the Rabin-Karp algorithm?\nChoices:\na) O(n)\nb) O(m)\nc) O(m*n)\nd) O(m + n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which algorithm is particularly well-suited for string matching when the pattern is very short?\nChoices:\na) Knuth-Morris-Pratt (KMP)\nb) Rabin-Karp\nc) Naive Search\nd) Boyer-Moore\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which string matching algorithm performs well with patterns that have repeating substrings?\nChoices:\na) Boyer-Moore\nb) Rabin-Karp\nc) Naive Search\nd) Knuth-Morris-Pratt (KMP)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In which scenario is the Naive string matching algorithm the least efficient?\nChoices:\na) When the pattern and text are very long.\nb) When the pattern is very short.\nc) When the text is sorted.\nd) When there are many matches in the text.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which string matching algorithm is based on the concept of skipping over parts of the text that cannot possibly match?\nChoices:\na) Naive Search\nb) Rabin-Karp\nc) Knuth-Morris-Pratt (KMP)\nd) Boyer-Moore\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the role of the \"good suffix\" rule in the Boyer-Moore algorithm?\nChoices:\na) To calculate hash values.\nb) To match patterns with multiple lengths.\nc) To optimize the search by skipping unnecessary comparisons.\nd) To preprocess the pattern.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which string matching algorithm is the most suitable for real-time systems where speed is crucial?\nChoices:\na) Rabin-Karp\nb) Boyer-Moore\nc) Naive Search\nd) Rabin-Karp\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the primary advantage of the Boyer-Moore algorithm compared to the Naive Search algorithm?\nChoices:\na) It always performs well regardless of pattern length.\nb) It works well for very short patterns.\nc) It skips large portions of the text, making it faster for large datasets.\nd) It uses less memory.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the worst-case time complexity of the Boyer-Moore algorithm?\nChoices:\na) O(m + n)\nb) O(m log n)\nc) O(n)\nd) O(m*n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In the Rabin-Karp algorithm, which operation is used to compute hash values?\nChoices:\na) Rolling Hash\nb) Modulo Operation\nc) Multiplication\nd) Addition\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the main disadvantage of the Naive string matching algorithm?\nChoices:\na) It is complex to implement.\nb) It requires the text to be sorted.\nc) It cannot handle patterns with special characters.\nd) It can be slow for large texts.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following string matching algorithms uses a \"shift\" table to skip unnecessary comparisons?\nChoices:\na) Knuth-Morris-Pratt (KMP)\nb) Rabin-Karp\nc) Boyer-Moore\nd) Naive Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: How does the Knuth-Morris-Pratt (KMP) algorithm handle mismatches efficiently?\nChoices:\na) By sorting the text.\nb) By using the failure function.\nc) By using a sliding window.\nd) By sorting the text.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary purpose of the \"bad character rule\" in the Boyer-Moore algorithm?\nChoices:\na) To skip segments of the text based on mismatched characters.\nb) To preprocess the pattern.\nc) To hash the pattern.\nd) To sort the pattern.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which string matching algorithm is particularly useful for finding multiple patterns in a single pass?\nChoices:\na) Naive Search\nb) Boyer-Moore\nc) Knuth-Morris-Pratt (KMP)\nd) Rabin-Karp\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the worst-case time complexity of the Rabin-Karp algorithm when dealing with multiple patterns?\nChoices:\na) O(m + n)\nb) O(m*n)\nc) O(mnk)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In the context of string matching, what does the term \"partial match table\" refer to?\nChoices:\na) The array used for storing results.\nb) The data structure used in KMP algorithm.\nc) The table used to track character shifts.\nd) The array used for storing results.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is a significant advantage of the Rabin-Karp algorithm over other string matching algorithms?\nChoices:\na) It is the fastest for short texts.\nb) It does not require preprocessing.\nc) It allows for efficient multiple pattern matching.\nd) It always performs in linear time.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the time complexity of string matching using a suffix tree?\nChoices:\na) O(m*n)\nb) O(m log n)\nc) O(n)\nd) O(m + n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which algorithm is well-suited for string matching when dealing with long and complex patterns?\nChoices:\na) Boyer-Moore\nb) Knuth-Morris-Pratt (KMP)\nc) Rabin-Karp\nd) Naive Search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In the Boyer-Moore algorithm, how is the 'good suffix rule' utilized?\nChoices:\na) It preprocesses the text.\nb) It creates hash values for substrings.\nc) It processes the text in reverse.\nd) It shifts the pattern to align with previously matched suffixes.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which string matching algorithm is known for being efficient with very large alphabets?\nChoices:\na) Boyer-Moore\nb) Knuth-Morris-Pratt (KMP)\nc) Rabin-Karp\nd) Naive Search\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is a key characteristic of the Naive string matching algorithm?\nChoices:\na) It uses advanced hashing techniques.\nb) It requires sorting the pattern.\nc) It is simple to implement.\nd) It has a high worst-case time complexity.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the pre-processing time of Rabin and Karp Algorithm?\nChoices:\na) Theta(m2)\nb) Theta(mlogn)\nc) Theta(m)\nd) Big-Oh(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Given a pattern of length-5 window, find the suitable modulo value. 4 3 2 5 0\nChoices:\na) 13\nb) 14\nc) 12\nd) 11\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the basic principle in Rabin Karp algorithm?\nChoices:\na) Hashing\nb) Sorting\nc) Augmenting\nd) Dynamic Programming\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the space complexity of quick search algorithm?\nChoices:\na) O(n)\nb) O(log n)\nc) O(m+n)\nd) O(mn)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: If n is the length of text(T) and m is the length of the pattern(P) identify the correct matching algorithm.\nChoices:\na) for s=0 to n do if p=t0 then if P[1..m]=T[s+1..s+m] then print “Pattern occurs with shift” s\nb) for s=0 to n-m do if p=ts then if P[1..m]=T[s+1..s+m] then print “Pattern occurs with shift” s\nc) for s=0 to m do if p=ts then if P[1..m]=T[s+1..s+m] then print “Pattern occurs with shift” s\nd) for s=0 to n-m do if p!=ts then if P[1..m]=T[s+1..s+m] then print “Pattern occurs with shift” s\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Rabin Karp Algorithm makes use of elementary number theoretic notions.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: If n is the length of text(T) and m is the length of the pattern(P) identify the correct pre-processing algorithm. (where q is a suitable modulus to reduce the complexity)   p=0; t0=0;\nChoices:\na) for i=1 to n\ndo t0=(dt0 + P[i])mod q\np=(dp+T[i])mod q\nb) for i=1 to n\ndo p=(dp + P[i])mod q\nt0=(dt0+T[i])mod q\nc) for i=1 to m\ndo t0=(dp + P[i])mod q\np=(dt0+T[i])mod q\nd) for i=1 to m\ndo p=(dp + P[i])mod q\nt0=(dt0+T[i])mod q\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the worst case running time in searching phase of Boyer-Moore's algorithm?\nChoices:\na) O(n)\nb) O(log n)\nc) O(m+n)\nd) O(mn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is the fastest algorithm in string matching field?\nChoices:\na) Boyer-Moore's algorithm\nb) String matching algorithm\nc) Quick search algorithm\nd) Linear search algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the worst case running time of Rabin Karp Algorithm?\nChoices:\na) Theta(n)\nb) Theta(n-m)\nc) Theta((n-m+1)m)\nd) Theta(nlogm)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What happens when the modulo value(q) is taken large?\nChoices:\na) Complexity increases\nb) Spurious hits occur frequently\nc) Cost of extra checking is low\nd) Matching time increases\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Rabin- Karp algorithm can be used for discovering plagiarism in a sentence.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: If the expected number of valid shifts is small and modulus is larger than the length of pattern what is the matching time of Rabin Karp Algorithm?\nChoices:\na) Theta(m)\nb) Big-Oh(n+m)\nc) Theta(n-m)\nd) Big-Oh(n)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following algorithms formed the basis for the Quick search algorithm?\nChoices:\na) Boyer-Moore's algorithm\nb) Parallel string matching algorithm\nc) Binary Search algorithm\nd) Linear Search algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Given a pattern of length- 5 window, find the valid match in the given text.\nChoices:\na) 11-16\nb) 3-8\nc) 13-18\nd) 15-20\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Who created the Rabin Karp Algorithm?\nChoices:\na) Joseph Rabin and Michael Karp\nb) Michael Rabin and Joseph Karp\nc) Richard Karp and Michael Rabin\nd) Michael Karp and Richard Rabin\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Given a pattern of length- 5 window, find the spurious hit in the given text string.\nChoices:\na) 6-10\nb) 12-16\nc) 3-7\nd) 13-17\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the basic formula applied in Rabin Karp Algorithm to get the computation time as Theta(m)?\nChoices:\na) Halving rule\nb) Horner's rule\nc) Summation lemma\nd) Cancellation lemma\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Quick search algorithm starts searching from the right most character to the left.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What character shift tables does Boyer-Moore's search algorithm use?\nChoices:\na) good-character shift tables\nb) bad-character shift tables\nc) next-character shift tables\nd) both good and bad character shift tables\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is a Rabin and Karp Algorithm?\nChoices:\na) String Matching Algorithm\nb) Shortest Path Algorithm\nc) Minimum spanning tree Algorithm\nd) Approximation Algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Given input string = \"ABCDABCATRYCARCABCSRT\" and pattern string = \"CAT\". Find the first index of the pattern match using quick search algorithm.\nChoices:\na) 2\nb) 6\nc) 11\nd) 14\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of the Quick search algorithm?\nChoices:\na) O(n)\nb) O(log n)\nc) O(m+n)\nd) O(mn)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What character shift tables does quick search algorithm use?\nChoices:\na) good-character shift tables\nb) bad-character shift tables\nc) next-character shift tables\nd) both good and bad character shift tables\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: The searching phase in quick search algorithm has good practical behaviour.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is a string matching algorithm?\nChoices:\na) KMP Algorithm\nb) Bubble Sort\nc) Quick Sort\nd) Merge Sort\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of the Naive string matching algorithm?\nChoices:\na) O(n)\nb) O(m)\nc) O(n*m)\nd) O(log n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is not a string operation?\nChoices:\na) Concatenation\nb) Substring\nc) Sorting\nd) Length\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is a characteristic of a string?\nChoices:\na) Strings are mutable\nb) Strings are immutable in many programming languages\nc) Strings can only contain letters\nd) Strings cannot be empty\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the primary use of string matching algorithms?\nChoices:\na) To sort strings\nb) To find occurrences of a pattern in a text\nc) To concatenate strings\nd) To split strings\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the length of the string 'Exam'?\nChoices:\na) 3\nb) 4\nc) 5\nd) 6\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is a valid string in Python?\nChoices:\na) Hello\nb) \"Hello\"\nc) \"Hello'\nd) 'Hello'\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which data structure is used for implementing recursion?\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Linked List\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is not a linear data structure?\nChoices:\na) Array\nb) Linked List\nc) Tree\nd) Stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the primary purpose of a hash table?\nChoices:\na) To store data\nb) To provide fast data retrieval\nc) To sort data\nd) To search data\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the main advantage of using a linked list over an array?\nChoices:\na) Ease of access\nb) Dynamic size\nc) Memory efficiency\nd) None of the above\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the purpose of string matching algorithms?\nChoices:\na) To sort strings\nb) To find occurrences of a pattern within a text\nc) To concatenate strings\nd) To split strings\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is not a string matching algorithm?\nChoices:\na) Rabin-Karp\nb) KMP\nc) Binary Search\nd) Boyer-Moore\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What does the term 'pattern' refer to in string matching?\nChoices:\na) The substring we are searching for\nb) The entire string\nc) The index of the string\nd) None of the above\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What does the 'm' represent in the context of string matching?\nChoices:\na) Length of the text string\nb) Length of the pattern string\nc) Number of matches\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What does the term 'substring' mean?\nChoices:\na) A contiguous sequence of characters within a string\nb) A non-contiguous sequence of characters\nc) A character in a string\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In which scenario is the Rabin-Karp algorithm most efficient?\nChoices:\na) When searching for a single pattern\nb) When searching for multiple patterns\nc) When patterns are of different lengths\nd) When patterns are very long\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the main advantage of the Knuth-Morris-Pratt algorithm?\nChoices:\na) It is easier to implement\nb) It avoids unnecessary comparisons\nc) It uses less memory\nd) It is faster for small texts\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which case does the Boyer-Moore algorithm perform best?\nChoices:\na) When the alphabet is small\nb) When the pattern is long\nc) When the text is long\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the main advantage of the KMP algorithm?\nChoices:\na) It avoids unnecessary comparisons\nb) It is easier to implement\nc) It uses less memory\nd) None of the above\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the primary property of an AVL tree?\nChoices:\na) It allows duplicate keys.\nb) It is a self-balancing binary search tree.\nc) It maintains a fixed height.\nd) It allows duplicate keys.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following operations is used to restore balance in an AVL tree after insertion?\nChoices:\na) Merging\nb) Splaying\nc) Rotations\nd) Hashing\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a Red-Black tree, which property ensures that no two consecutive red nodes exist on any path?\nChoices:\na) Black property\nb) Balance property\nc) Height property\nd) Red property\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the maximum height of an AVL tree with n nodes?\nChoices:\na) log2(n + 1)\nb) log2(n)\nc) 2*log2(n)\nd) log10(n)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which tree property is used to ensure that in a B-Tree all leaves are at the same level?\nChoices:\na) B-Tree order\nb) Equal key distribution\nc) Balanced height\nd) Uniform height\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a Red-Black tree, what is the color of the root node?\nChoices:\na) Red\nb) Can be either\nc) Black\nd) It varies based on height\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the order of a B-Tree if it has a maximum of m children per node?\nChoices:\na) 2m\nb) m\nc) log2(m)\nd) 2m\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of insertion in an AVL tree?\nChoices:\na) O(1)\nb) O(log2 n)\nc) O(log n)\nd) O(n\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a Red-Black tree, which property helps in maintaining a balanced tree?\nChoices:\na) The AVL property\nb) The B-Tree property\nc) The splay property\nd) The red-black property\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the primary difference between a Red-Black tree and an AVL tree?\nChoices:\na) AVL trees are more rigidly balanced.\nb) Red-Black trees have stricter balancing.\nc) AVL trees use color-coding.\nd) Red-Black trees do not require rotations.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the maximum number of children a node in a B-Tree of order m can have?\nChoices:\na) m - 1\nb) m + 1\nc) m/2\nd) m\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which operation in a B-Tree involves redistributing keys between nodes to maintain balance?\nChoices:\na) Splitting\nb) Rotating\nc) Merging\nd) Splaying\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In an AVL tree, what type of rotation is performed when a node has a balance factor of +2 and its right child has a balance factor of -1?\nChoices:\na) Left Rotation\nb) Left-Right Rotation\nc) Right Rotation\nd) Left Rotation\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a Red-Black tree, what does the black-height of a node represent?\nChoices:\na) The height of the node's subtree.\nb) The total number of nodes in the subtree.\nc) The number of black nodes on the path from that node to a leaf.\nd) The number of red nodes on the path.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time complexity of searching for an element in a B-Tree of order m?\nChoices:\na) O(log n)\nb) O(n)\nc) O(1)\nd) O(log_m n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which type of rotation is performed to fix a right-right case imbalance in an AVL tree?\nChoices:\na) Left Rotation\nb) Right Rotation\nc) Left-Right Rotation\nd) Right-Left Rotation\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In a Red-Black tree, which property is used to ensure that the path from the root to the farthest leaf is no more than twice as long as the path to the nearest leaf?\nChoices:\na) Height property\nb) Balance property\nc) Red property\nd) Black-height property\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the maximum number of children a non-root node can have in a B-Tree of order m?\nChoices:\na) m - 1\nb) m + 1\nc) m\nd) m / 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In an AVL tree, what happens when a node's balance factor becomes +2 due to an insertion in the right subtree of the right child?\nChoices:\na) A left-right rotation is performed.\nb) A single left rotation is performed.\nc) A right-left rotation is performed.\nd) A left-right rotation is performed.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How are keys stored in a B-Tree node?\nChoices:\na) Based on their insertion order\nb) Based on their frequency of access\nc) In a sorted order\nd) In a random order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the primary advantage of using a Red-Black tree over an AVL tree?\nChoices:\na) AVL trees are faster for insertion.\nb) Red-Black trees have a simpler implementation.\nc) AVL trees use less memory.\nd) Red-Black trees require fewer rotations.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of deleting a node from a Red-Black tree?\nChoices:\na) O(1)\nb) O(log2 n)\nc) O(log n)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a B-Tree of order m, what is the minimum number of keys a non-root node must contain?\nChoices:\na) ⌊m / 2⌋\nb) m - 1\nc) ⌈m / 2⌉ - 1\nd) ⌈m / 2⌉\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which operation is not required to maintain balance in a B-Tree after insertion or deletion?\nChoices:\na) Rotations\nb) Redistribution\nc) Splitting\nd) Merging\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What does the term \"splaying\" refer to in the context of splay trees?\nChoices:\na) A method to sort elements in a tree.\nb) A technique for hashing elements.\nc) A method of balancing AVL trees.\nd) A technique to move recently accessed nodes to the root.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a Red-Black tree, which property is used to ensure that the number of black nodes on any path from the root to a leaf is the same?\nChoices:\na) Red property\nb) Balance property\nc) Black-height property\nd) Node-coloring property\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How does a B-Tree differ from a Binary Search Tree (BST)?\nChoices:\na) B-Trees have no constraints on height.\nb) B-Trees allow multiple children per node.\nc) BSTs can store more keys per node.\nd) B-Trees have no constraints on height.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In a Red-Black tree, what is the color of the newly inserted node?\nChoices:\na) Black\nb) Can be either red or black\nc) It varies based on the position\nd) Red\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the primary use of a B-Tree in databases and file systems?\nChoices:\na) To maintain sorted data with efficient insertion and deletion operations.\nb) To perform quick sorting operations.\nc) To minimize data retrieval time.\nd) To provide efficient key hashing.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In an AVL tree, what condition triggers a double rotation?\nChoices:\na) When a node's height is greater than its parent.\nb) When a node's balance factor is -3 or +3.\nc) When a node's balance factor is -1 or +1.\nd) When a node's balance factor is -2 or +2.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the height of a Red-Black tree with n nodes in the worst case?\nChoices:\na) O(n)\nb) O(log2 n)\nc) O(log n)\nd) O(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In a B-Tree of order m, what is the maximum number of keys a node can contain?\nChoices:\na) m + 1\nb) m\nc) m / 2\nd) m + 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is true about the root node in a B-Tree?\nChoices:\na) It can have fewer than the minimum number of children.\nb) It must have exactly m children.\nc) It must be a leaf.\nd) It cannot have more than m children.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a B-Tree of order 5, what is the minimum number of children a non-root node can have?\nChoices:\na) 1\nb) 4\nc) 2\nd) 3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: How does the height of a B-Tree compare to a binary search tree with the same number of nodes?\nChoices:\na) The height is larger.\nb) The height is the same.\nc) The height is smaller.\nd) The height is unpredictable.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which operation in a Red-Black tree might require re-coloring of nodes?\nChoices:\na) Deletion\nb) Both insertion and deletion\nc) Tree rotation\nd) Deletion\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity for deleting a node in an AVL tree?\nChoices:\na) O(1)\nb) O(log2 n)\nc) O(log n)\nd) O(n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In an AVL tree, what happens when a node is deleted and it causes imbalance?\nChoices:\na) The node is immediately reinserted.\nb) The tree is rebuilt from scratch.\nc) The imbalance is ignored.\nd) Rebalancing with rotations is performed.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a Red-Black tree, what does the term \"splaying\" refer to?\nChoices:\na) Moving a node to the root to improve access times.\nb) Rotating nodes to maintain balance.\nc) Re-coloring nodes to restore properties.\nd) Inserting nodes while maintaining balance.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In a B-Tree, which operation can cause a node to split?\nChoices:\na) Rebalancing when the height changes.\nb) Search when a key is found.\nc) Deletion when a node is empty.\nd) Insertion when a node is full.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is a key advantage of using a Red-Black tree over a standard Binary Search Tree?\nChoices:\na) Easier to implement.\nb) Faster insertion and deletion.\nc) Better worst-case time complexity for balancing.\nd) Smaller memory footprint.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In an AVL tree, what happens when a node has a balance factor of 0?\nChoices:\na) It is an internal node.\nb) It needs to be rotated.\nc) It is balanced and requires no changes.\nd) It is a leaf node.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How is a B-Tree node typically structured?\nChoices:\na) Keys are stored in random order.\nb) Keys are stored in reverse order.\nc) Keys are stored based on access frequency.\nd) Keys are stored in sorted order.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is true for Red-Black trees?\nChoices:\na) They guarantee balanced height but not exact height.\nb) They guarantee exact height balancing.\nc) They do not support deletion.\nd) They are balanced using a different method.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the maximum number of keys that a B+ -tree of order 3 and of height 3 have?\nChoices:\na) 3\nb) 80\nc) 27\nd) 26\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Can suffix tree be used in bioinformatics problems and solutions.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which one of the following data structures are preferred in database-system implementation?\nChoices:\na) AVL tree\nb) B-tree\nc) B+ -tree\nd) Splay tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is a time complexity for x pattern occurrence of length n?\nChoices:\na) O (log n!)\nb) Ɵ (n!)\nc) O (n2)\nd) Ɵ (n + x)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How much time does construction of suffix tree take?\nChoices:\na) O (log M)\nb) O (M!)\nc) Exponential to Length of Tree\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which statement is correct of suffix tree with a string of length n?\nChoices:\na) The tree has n leaves.\nb) The tree has n roots\nc) Height of Tree is n\nd) Depth of tree is n\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Who among the following provided the first suffix tree contribution for all alphabet?\nChoices:\na) Weiner\nb) Farach\nc) Ukkonen\nd) Alexander Morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which tree allows fast implementation of string operation?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Trie is also known as . . . . . . . .\nChoices:\na) Digital Tree\nb) Treap\nc) Binomial Tree\nd) 2-3 Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a time complexity for finding the longest prefix that is common between suffix in a string?\nChoices:\na) Ɵ (n)\nb) Ɵ (n!)\nc) Ɵ (1)\nd) O (log n!)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following is true about the trie?\nChoices:\na) root is letter a\nb) path from root to the leat yields the string\nc) children of nodes are randomly ordered\nd) each node stores the associated keys\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is the efficient data structure for searching words in dictionaries?\nChoices:\na) BST\nb) Linked List\nc) Balancded BST\nd) Trie\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: A B-tree of order 4 and of height 3 will have a maximum of . . . . . . . . keys.\nChoices:\na) 255\nb) 63\nc) 127\nd) 188\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following data structure can provide efficient searching of the elements?\nChoices:\na) unordered lists\nb) binary search tree\nc) treap\nd) 2-3 tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: A program to search a contact from phone directory can be implemented efficiently using . . . . . . . .\nChoices:\na) a BST\nb) a trie\nc) a balanced BST\nd) a binary tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What traversal over trie gives the lexicographical sorting of the set of the strings?\nChoices:\na) postorder\nb) preorders\nc) inorder\nd) level order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is a time complexity for inserting an alphabet in the tree using hash maps?\nChoices:\na) O (log n!)\nb) O (n!)\nc) O (n2)\nd) O (1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of Uttkonen's algorithm?\nChoices:\na) O (log n!)\nb) O (n!)\nc) O (n2)\nd) O (n log n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which tree allows fast implementation of a set of string operation?\nChoices:\na) Rope Tree\nb) Tango Tree\nc) Generalized Suffix Tree\nd) Top Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a time complexity for finding the total length of all string on all edges of a tree?\nChoices:\na) Ɵ (n)\nb) Ɵ (n!)\nc) Ɵ (1)\nd) O (n2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Who among the following algorithm is used in external memory and compression of the suffix tree?\nChoices:\na) Weiner's algorithm\nb) Farach's algorithm\nc) Ukkonen's algorithm\nd) Alexander Morse\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: A B+ tree can contain a maximum of 7 pointers in a node. What is the minimum number of keys in leaves?\nChoices:\na) 6\nb) 3\nc) 4\nd) 7\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following special type of trie is used for fast searching of the full texts?\nChoices:\na) Ctrie\nb) Hash tree\nc) Suffix tree\nd) T tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: For what size of nodes, the worst case of usage of space in suffix tree seen?\nChoices:\na) n Nodes\nb) 2n Nodes\nc) 2n nodes\nd) n! nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is a time complexity for finding the longest substring that is repeated in a string?\nChoices:\na) O (log n!)\nb) Ɵ (n!)\nc) O (n2+ n1)\nd) Ɵ (n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is a time complexity for finding the longest substring that is common in string S1 and S2 (n1 and n2 are the string lengths of strings s1, s2 respectively)?\nChoices:\na) O (log n!)\nb) Ɵ (n!)\nc) O (n2+ n1)\nd) Ɵ (n1 + n2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is a time complexity for finding the longest palindromic substring in a string by using the generalized suffix tree?\nChoices:\na) Linear Time\nb) Exponential Time\nc) Logarithmic Time\nd) Cubic Time\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the other name for Suffix Tree?\nChoices:\na) Array\nb) Stack\nc) Priority Queue\nd) PAT Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: AVL trees provide better insertion the 2-3 trees.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Who proposed the concept of Suffix Tree?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Friedrich Clemens Gerke\nd) Alexander Morse\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: The height of 2-3 tree with n elements is . . . . . . . .\nChoices:\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log3(n + 1) and log2(n + 1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Who among the following provided the first online contribution of Suffix Tree?\nChoices:\na) Weiner\nb) Samuel F. B. Morse\nc) Ukkonen\nd) Alexander Morse\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Statement 1: When a node is split during insertion, the middle key is promoted to the parent as well as retained in right half-node.   Statement 2: When a key is deleted from the leaf, it is also deleted from the non-leaf nodes of the tree.\nChoices:\na) Statement 1 is true but statement 2 is false\nb) Statement 2 is true but statement 1 is false\nc) Both the statements are true\nd) Both the statements are false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Five node splitting operations occurred when an entry is inserted into a B-tree. Then how many nodes are written?\nChoices:\na) 14\nb) 7\nc) 11\nd) 5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: 2-3-4 trees are B-trees of order 4. They are an isometric of . . . . . . . . trees.\nChoices:\na) AVL\nb) AA\nc) 2-3\nd) Red-Black\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following data clustering algorithm uses suffix tree in search engines?\nChoices:\na) Weiner's algorithm\nb) Farach's algorithm\nc) Lempel - Ziv - Welch's algorithm\nd) Suffix Tree Clustering\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Efficiency of finding the next record in B+ tree is . . . . . . . .\nChoices:\na) O(n)\nb) O(log n)\nc) O(nlog n)\nd) O(1)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Compression techniques can be used on the keys to reduce both space and time requirements in a B-tree.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Auto complete and spell checkers can be implemented efficiently using the trie.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following the BST is isometric with the 2-3 tree?\nChoices:\na) Splay tree\nb) AA tree\nc) Heap\nd) Red - Black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Do all the nodes have at least two children in suffix tree.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is a time complexity for finding all the tandem repeats?\nChoices:\na) Ɵ (n)\nb) Ɵ (n!)\nc) Ɵ (1)\nd) O (n log n + z)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: 2-3 tree is a specific form of . . . . . . . .\nChoices:\na) B - tree\nb) B+ - tree\nc) AVL tree\nd) Heap\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How much space does construction of suffix tree takes?\nChoices:\na) O (log M)\nb) Exponential to Length of Tree\nc) O (M!)\nd) Linear to Length of Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is not true about the 2-3 tree?\nChoices:\na) all leaves are at the same level\nb) it is perfectly balanced\nc) postorder traversal yields elements in sorted order\nd) it is B-tree of order 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: B-tree and AVL tree have the same worst case time complexity for insertion and deletion.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is a time complexity for finding all the maximal palindrome in a string?\nChoices:\na) Ɵ (n)\nb) Ɵ (n!)\nc) Ɵ (1)\nd) O (log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In a B+ tree, both the internal nodes and the leaves have keys.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is true?\nChoices:\na) B + tree allows only the rapid random access\nb) B + tree allows only the rapid sequential access\nc) B + tree allows rapid random access as well as rapid sequential access\nd) B + tree allows rapid random access and slower sequential access\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a time complexity for checking a string of length n is substring or not?\nChoices:\na) O (log n!)\nb) O (n!)\nc) O (n2)\nd) O (n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Can suffix tree be used in string problems occurring in a text editor.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Can the two edges that are coming out of a node have labels of string beginning with the same character?\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the best case height of a B-tree of order n and which has k keys?\nChoices:\na) logn (k+1) - 1\nb) nk\nc) logk (n+1) - 1\nd) klogn\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What can be the maximum depth of the trie with n strings and m as the maximum sting the length?\nChoices:\na) log2n\nb) log2m\nc) n\nd) m\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which tree provides a linear time solution for substring operation?\nChoices:\na) Rope Tree\nb) Suffix Tree\nc) Tango Tree\nd) Top Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is the most widely used external memory data structure?\nChoices:\na) AVL tree\nb) B-tree\nc) Red-black tree\nd) Both AVL tree and Red-black tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is a time complexity for finding frequently occurring of a substring of minimum length in a string?\nChoices:\na) Ɵ (n)\nb) Ɵ (n!)\nc) O (n2+ n1)\nd) O (log n!)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following algorithm of data compression uses a suffix tree?\nChoices:\na) Weiner's algorithm\nb) Farach's algorithm\nc) Lempel - Ziv - Welch's algorithm\nd) Alexander Morse's algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: B-tree of order n is a order-n multiway tree in which each non-root node contains . . . . . . . .\nChoices:\na) at most (n - 1)/2 keys\nb) exact (n - 1)/2 keys\nc) at least 2n keys\nd) at least (n - 1)/2 keys\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: LLRB maintains 1-1 correspondence with 2-3 trees.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the time complexity of searching in an AVL tree?\nChoices:\na) O(n)\nb) O(log n)\nc) O(n log n)\nd) O(1)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is true about Red-Black trees?\nChoices:\na) They are always perfectly balanced\nb) They can have at most two children\nc) They are not balanced\nd) They have a color property\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Advanced Trees (AVL, RedBlack, BTrees) MCQ Question and Answer - Section 1\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Advanced Trees (AVL, RedBlack, BTrees) MCQ Question and Answer - Section 2\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Advanced Trees (AVL, RedBlack, BTrees) - Section 1\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Advanced Trees (AVL, RedBlack, BTrees) - Section 2\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Each Section contains maximum 100 MCQs question on Advanced Trees (AVL, RedBlack, BTrees). To get more questions visit other sections.\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which algorithm is used to find the shortest path from a source node to all other nodes in a graph with non-negative weights?\nChoices:\na) Breadth-First Search (BFS)\nb) Depth-First Search (DFS)\nc) Bellman-Ford Algorithm\nd) Dijkstra's Algorithm\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of Breadth-First Search (BFS) on a graph with V vertices and E edges?\nChoices:\na) O(V + E)\nb) O(V2)\nc) O(E log V)\nd) O(V log V\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In Depth-First Search (DFS), what is the order of visiting nodes?\nChoices:\na) Level order\nb) Inorder\nc) Postorder\nd) Preorder\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which algorithm can be used to detect negative weight cycles in a graph?\nChoices:\na) Dijkstra's Algorithm\nb) Prim's Algorithm\nc) Bellman-Ford Algorithm\nd) Kruskal's Algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary difference between BFS and DFS?\nChoices:\na) BFS is used for weighted graphs; DFS is not.\nb) BFS explores nodes level by level; DFS explores nodes deeply first.\nc) BFS uses recursion, DFS does not.\nd) BFS is used for weighted graphs; DFS is not.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What data structure is commonly used to implement BFS?\nChoices:\na) Linked List\nb) Priority Queue\nc) Queue\nd) Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following is not a property of Dijkstra's algorithm?\nChoices:\na) It finds the shortest path from a single source.\nb) It works efficiently with a priority queue.\nc) It requires a graph to be connected.\nd) It can handle negative weight edges.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What type of graph traversal does Depth-First Search (DFS) utilize?\nChoices:\na) Recursive\nb) Iterative\nc) Level-by-level\nd) Random\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In which of the following scenarios is the Bellman-Ford algorithm preferred over Dijkstra's algorithm?\nChoices:\na) When all edge weights are positive.\nb) When the graph is a complete graph.\nc) When the graph is dense.\nd) When there are negative weight edges in the graph.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the time complexity of Dijkstra's algorithm using a binary heap priority queue?\nChoices:\na) O(V2)\nb) O(V log E)\nc) O((V + E) log V)\nd) O(E log V\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the main purpose of a Minimum Spanning Tree (MST) algorithm like Prim's or Kruskal's?\nChoices:\na) To detect cycles in the graph.\nb) To connect all nodes with minimum total edge weight.\nc) To find the shortest path in a weighted graph.\nd) To detect cycles in the graph.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which traversal algorithm uses a stack as its primary data structure?\nChoices:\na) Bellman-Ford Algorithm\nb) Dijkstra's Algorithm\nc) Depth-First Search (DFS)\nd) Breadth-First Search (BFS)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In BFS, how do you keep track of the nodes to be visited?\nChoices:\na) Using a stack\nb) Using a priority queue\nc) Using a set\nd) Using a queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the role of the 'parent' array in the implementation of Dijkstra's algorithm?\nChoices:\na) To store the previous node for each node.\nb) To store the current distance from the source.\nc) To mark visited nodes.\nd) To track the minimum distance.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In which case is the BFS traversal algorithm particularly useful?\nChoices:\na) Finding the maximum flow in a network.\nb) Checking if a graph is connected.\nc) Finding the shortest path in a weighted graph.\nd) Finding the shortest path in an unweighted graph.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the primary use of the Depth-First Search (DFS) algorithm in graph theory?\nChoices:\na) To explore all reachable vertices from a given source node.\nb) To find the shortest path in a weighted graph.\nc) To detect cycles in a graph.\nd) To perform level-order traversal.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which algorithm is used for finding the shortest path in a graph with all edges having the same weight?\nChoices:\na) Bellman-Ford Algorithm\nb) Breadth-First Search (BFS)\nc) Floyd-Warshall Algorithm\nd) Bellman-Ford Algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the space complexity of storing an adjacency matrix for a graph with V vertices?\nChoices:\na) O(E)\nb) O(V log V)\nc) O(V2)\nd) O(V + E)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following algorithms can be used to find the Minimum Spanning Tree (MST) of a graph?\nChoices:\na) Dijkstra's Algorithm\nb) Depth-First Search (DFS)\nc) Bellman-Ford Algorithm\nd) Prim's Algorithm and Kruskal's Algorithm\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the primary characteristic of a graph traversal algorithm like BFS or DFS?\nChoices:\na) It detects cycles in a graph.\nb) It finds the minimum spanning tree.\nc) It visits all nodes in a specific order.\nd) It calculates the shortest path.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How does the time complexity of Dijkstra's algorithm change when using a Fibonacci heap?\nChoices:\na) It becomes O(V2)\nb) It becomes O(V log V)\nc) It becomes O(E log V)\nd) It becomes O(E + V log V)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In a weighted graph, which algorithm is suitable for finding the shortest path from a single source to a specific target node?\nChoices:\na) Dijkstra's Algorithm\nb) Breadth-First Search (BFS)\nc) Bellman-Ford Algorithm\nd) Depth-First Search (DFS)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is a primary use case for Depth-First Search (DFS)?\nChoices:\na) To find the minimum spanning tree.\nb) To find the shortest path in a weighted graph.\nc) To find a path between two nodes.\nd) To check the connectivity of a graph.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following algorithms is best suited for finding the shortest path in a graph with negative edge weights?\nChoices:\na) Dijkstra's Algorithm\nb) Floyd-Warshall Algorithm\nc) Bellman-Ford Algorithm\nd) A* Algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In the context of graph algorithms, what does a 'cycle' refer to?\nChoices:\na) A path that visits each node exactly once.\nb) A path that revisits the starting node.\nc) A path with exactly two nodes.\nd) A path that visits each node exactly once.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which traversal algorithm is guaranteed to visit all nodes at least once?\nChoices:\na) Neither BFS nor DFS\nb) Depth-First Search (DFS)\nc) Both BFS and DFS\nd) Breadth-First Search (BFS)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the purpose of the 'distance' array in Dijkstra's algorithm?\nChoices:\na) To store the order of node visits.\nb) To track the number of edges.\nc) To store the parent nodes for each node.\nd) To store the shortest distance from the source to each node.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which case is the Floyd-Warshall algorithm preferred?\nChoices:\na) When finding shortest paths between all pairs of nodes.\nb) When finding the shortest path from a single source.\nc) When the graph is sparse.\nd) When edge weights are all positive.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is a common use case of the Bellman-Ford algorithm?\nChoices:\na) To detect cycles in undirected graphs.\nb) To find the minimum spanning tree.\nc) To find the shortest path in graphs with positive weights only.\nd) To find the shortest path in graphs with negative weights.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How does the BFS algorithm ensure that the shortest path is found in an unweighted graph?\nChoices:\na) By exploring nodes as deeply as possible.\nb) By randomly visiting nodes.\nc) By exploring all nodes at the current level before moving to the next level.\nd) By following the shortest edge.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is true about the BFS algorithm in terms of shortest path?\nChoices:\na) BFS does not guarantee the shortest path.\nb) BFS always finds the shortest path in an unweighted graph.\nc) BFS requires a sorted graph.\nd) BFS does not guarantee the shortest path.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What type of graph does the DFS algorithm explore in a systematic manner?\nChoices:\na) Directed and undirected graphs\nb) Only undirected graphs\nc) Only directed graphs\nd) Only weighted graphs\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the time complexity of BFS when implemented using an adjacency list?\nChoices:\na) O(V log V)\nb) O(E log V)\nc) O(V2)\nd) O(V + E)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which algorithm is suitable for finding the shortest path in a graph with varying weights?\nChoices:\na) Prim's Algorithm\nb) Depth-First Search (DFS)\nc) Dijkstra's Algorithm\nd) Kruskal's Algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In which situation is it appropriate to use the Floyd-Warshall algorithm?\nChoices:\na) When the graph is sparse.\nb) When you need the shortest path between all pairs of nodes.\nc) When the graph is directed only.\nd) When the graph is sparse.\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What does the term \"back edge\" refer to in DFS?\nChoices:\na) An edge that causes a cycle in the graph.\nb) An edge that connects two nodes in the same level.\nc) An edge that connects a node to its ancestor in the DFS tree.\nd) An edge that connects a node to a descendant in the DFS tree.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How does the Bellman-Ford algorithm handle negative edge weights?\nChoices:\na) It ignores them.\nb) It transforms negative weights into positive weights.\nc) It cannot handle them.\nd) It can handle them and detect negative weight cycles.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which graph representation is it more efficient to perform BFS, an adjacency matrix or an adjacency list?\nChoices:\na) Adjacency list\nb) Adjacency matrix\nc) Both are equally efficient.\nd) It depends on the graph density.\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which algorithm is used to find the longest path in a Directed Acyclic Graph (DAG)?\nChoices:\na) Depth-First Search (DFS)\nb) BFS\nc) Dijkstra's Algorithm\nd) Dynamic Programming\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the key property of a Red-Black tree that helps in balancing the tree during insertions and deletions?\nChoices:\na) All nodes are red.\nb) The tree is always perfectly balanced.\nc) Every path from the root to a leaf has the same number of black nodes.\nd) Nodes can only have two children.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: How is the time complexity of BFS affected when the graph is represented using an adjacency matrix?\nChoices:\na) It becomes O(V log V).\nb) It becomes O(E log V).\nc) It remains O(V2).\nd) It becomes O(V + E).\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following properties is essential for the efficient implementation of Dijkstra's algorithm?\nChoices:\na) An adjacency matrix for fast access.\nb) A stack to keep track of visited nodes.\nc) A hash table for node storage.\nd) A priority queue or min-heap to extract the minimum distance.\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a graph with weights, which algorithm helps in constructing a Minimum Spanning Tree (MST)?\nChoices:\na) Prim's Algorithm or Kruskal's Algorithm\nb) Dijkstra's Algorithm\nc) Bellman-Ford Algorithm\nd) Floyd-Warshall Algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which traversal algorithm can be used to check if a graph is bipartite?\nChoices:\na) Neither BFS nor DFS\nb) DFS\nc) BFS\nd) Both BFS and DFS\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is a characteristic feature of a Biconnected Graph?\nChoices:\na) It has exactly two connected components.\nb) It has no cycles.\nc) It remains connected even after removing any single vertex.\nd) It contains multiple paths between nodes.\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Prim's algorithm can be efficiently implemented using . . . . . . . . for graphs with greater density.\nChoices:\na) d-ary heap\nb) linear search\nc) fibonacci heap\nd) binary search\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following is the most commonly used data structure for implementing Dijkstra's Algorithm?\nChoices:\na) Max priority queue\nb) Stack\nc) Circular queue\nd) Min priority queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Time Complexity of DFS is? (V - number of vertices, E - number of edges)\nChoices:\na) O(V + E)\nb) O(V)\nc) O(E)\nd) O(V*E)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Who proposed the modern formulation of Floyd-Warshall Algorithm as three nested loops?\nChoices:\na) Robert Floyd\nb) Stephen Warshall\nc) Bernard Roy\nd) Peter Ingerman\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following branch and bound strategy leads to breadth first search?\nChoices:\na) LIFO branch and bound\nb) FIFO branch and bound\nc) Lowest cost branch and bound\nd) Highest cost branch and bound\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which data structure is most suitable for implementing best first branch and bound strategy?\nChoices:\na) stack\nb) queue\nc) priority queue\nd) linked list\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The time taken to compute the transitive closure of a graph is Theta(n2).\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In BFS, how many times a node is visited?\nChoices:\na) Once\nb) Twice\nc) Equivalent to number of indegree of the node\nd) Thrice\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Consider the graph M with 3 vertices. Its adjacency matrix is shown below. Which of the following is true? M=⎡⎣⎢011101110⎤⎦⎥M=[011101110]\nChoices:\na) Graph M has no minimum spanning tree\nb) Graph M has a unique minimum spanning trees of cost 2\nc) Graph M has 3 distinct minimum spanning trees, each of cost 2\nd) Graph M has 3 spanning trees of different costs\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is not a branch and bound strategy to generate branches?\nChoices:\na) LIFO branch and bound\nb) FIFO branch and bound\nc) Lowest cost branch and bound\nd) Highest cost branch and bound\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What approach is being followed in Floyd Warshall Algorithm?\nChoices:\na) Linear Programming\nb) Backtracking\nc) Greedy technique\nd) Dynamic Programming\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the basic principle behind Bellmann Ford Algorithm?\nChoices:\na) Interpolation\nb) Extrapolation\nc) Regression\nd) Relaxation\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is not the algorithm to find the minimum spanning tree of the given graph?\nChoices:\na) Boruvka's algorithm\nb) Prim's algorithm\nc) Kruskal's algorithm\nd) Bellman-Ford algorithm\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the running time of Bellmann Ford Algorithm?\nChoices:\na) O(V)\nb) O(V2)\nc) O(ElogV)\nd) O(VE)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Dijkstra's Algorithm cannot be applied on . . . . . . . .\nChoices:\na) Directed and weighted graphs\nb) Graphs having negative weight function\nc) Unweighted graphs\nd) Undirected and unweighted graphs\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Dijikstra's Algorithm is more efficient than Bellmann Ford Algorithm.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The maximum number of times the decrease key operation performed in Dijkstra's algorithm will be equal to . . . . . . . .\nChoices:\na) Total number of vertices\nb) Total number of edges\nc) Number of vertices - 1\nd) Number of edges - 1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the formula to compute the transitive closure of a graph?\nChoices:\na) tij(k) = tij(k-1) AND (tik(k-1) OR tkj(k-1))\nb) tij(k) = tij(k-1) OR (tik(k-1) AND tkj(k-1))\nc) tij(k) = tij(k-1) AND (tik(k-1) AND tkj(k-1))\nd) tij(k) = tij(k-1) OR (tik(k-1) OR tkj(k-1))\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: A graph is said to have a negative weight cycle when?\nChoices:\na) The graph has 1 negative weighted edge\nb) The graph has a cycle\nc) The total weight of the graph is negative\nd) The graph has 1 or more negative weighted edges\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: When the Depth First Search of a graph is unique?\nChoices:\na) When the graph is a Binary Tree\nb) When the graph is a Linked List\nc) When the graph is a n-ary Tree\nd) When the graph is a ternary Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How many times the for loop in the Bellmann Ford Algorithm gets executed?\nChoices:\na) V times\nb) V-1\nc) E\nd) E-1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many priority queue operations are involved in Dijkstra's Algorithm?\nChoices:\na) 1\nb) 3\nc) 2\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The travelling salesman problem can be solved using . . . . . . . .\nChoices:\na) A spanning tree\nb) A minimum spanning tree\nc) Bellman - Ford algorithm\nd) DFS traversal\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Bellmann Ford algorithm is used to indicate whether the graph has negative weight cycles or not.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is not an application of Breadth First Search?\nChoices:\na) Finding shortest path between two nodes\nb) Finding bipartiteness of a graph\nc) GPS navigation system\nd) Path Finding\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Choose the correct statement from the following.\nChoices:\na) branch and bound is more efficient than backtracking\nb) branch and bound is not suitable where a greedy algorithm is not applicable\nc) branch and bound divides a problem into at least 2 new restricted sub problems\nd) backtracking divides a problem into at least 2 new restricted sub problems\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which is the correct technique for finding a maximum matching in a graph?\nChoices:\na) BFS traversal\nb) DFS traversal\nc) Shortest path traversal\nd) Heap order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which type of best first search algorithm was used to predict the closeness of the end of path and its solution?\nChoices:\na) Greedy BFS\nb) Divide and Conquer\nc) Heuristic BFS\nd) Combinatorial\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In the given graph, identify the shortest path having minimum cost to reach vertex E if A is the source vertex.\nChoices:\na) a-b-e\nb) a-c-e\nc) a-c-d-e\nd) a-c-d-b-e\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is not an application of Depth First Search?\nChoices:\na) For generating topological sort of a graph\nb) For generating Strongly Connected Components of a directed graph\nc) Detecting cycles in the graph\nd) Peer to Peer Networks\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The Data structure used in standard implementation of Breadth First Search is?\nChoices:\na) Stack\nb) Queue\nc) Linked List\nd) Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Floyd Warshall Algorithm can be used for finding . . . . . . . .\nChoices:\na) Transitive closure\nb) Minimum spanning tree\nc) Topological sort\nd) Single source shortest path\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Consider the following graph. Using Kruskal's algorithm, which edge will be selected first?\nChoices:\na) GF\nb) DE\nc) BE\nd) BG\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Dijkstra's Algorithm is used to solve . . . . . . . . problems.\nChoices:\na) Single source shortest path\nb) All pair shortest path\nc) Sorting\nd) Network flow\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What will be the result of depth first traversal in the following tree?\nChoices:\na) 4 2 5 1 3\nb) 1 2 4 5 3\nc) 4 5 2 3 1\nd) 1 2 3 4 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which data structure is used for implementing a LIFO branch and bound strategy?\nChoices:\na) stack\nb) queue\nc) array\nd) linked list\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: In the given graph, what is the minimum cost to travel from vertex 1 to vertex 3?\nChoices:\na) 3\nb) 2\nc) 10\nd) -3\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the space complexity of standard DFS(V: no. of vertices E: no. of edges)?\nChoices:\na) O(V+E)\nb) O(V)\nc) O(E)\nd) O(V*E)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: A person wants to visit some places. He starts from a vertex and then wants to visit every place connected to this vertex and so on. What algorithm he should use?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Trim's algorithm\nd) Kruskal's algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: How many solution/solutions are available for a graph having negative weight cycle?\nChoices:\na) One solution\nb) Two solutions\nc) No solution\nd) Infinite solutions\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Kruskal's algorithm is used to . . . . . . . .\nChoices:\na) find minimum spanning tree\nb) find single source shortest path\nc) find all pair shortest path algorithm\nd) traverse the graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Both LIFO branch and bound strategy and backtracking leads to depth first search.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Consider the following graph. If b is the source vertex, what is the minimum cost to reach f vertex?\nChoices:\na) 8\nb) 9\nc) 4\nd) 6\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following scientists didn't publish A* algorithm?\nChoices:\na) Peter Hart\nb) Nils Nilsson\nc) Bertram Raphael\nd) Hans Berliner\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is the greedy best first search?\nChoices:\na) Pure Heuristic Search\nb) A*\nc) B*\nd) Both A* and B*\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The Bellmann Ford algorithm returns . . . . . . . . value.\nChoices:\na) Boolean\nb) Integer\nc) String\nd) Double\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How many times the insert and extract min operations are invoked per vertex?\nChoices:\na) 1\nb) 2\nc) 3\nd) 0\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What procedure is being followed in Floyd Warshall Algorithm?\nChoices:\na) Top down\nb) Bottom up\nc) Big bang\nd) Sandwich\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Who published the B* search algorithm?\nChoices:\na) Peter Hart\nb) Nils Nilsson\nc) Bertram Raphael\nd) Hans Berliner\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Consider the following graph. What is the minimum cost to travel from node A to node C?\nChoices:\na) 5\nb) 2\nc) 1\nd) 3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Kruskal's algorithm is best suited for the dense graphs than the prim's algorithm.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What will be the time complexity of the iterative depth first traversal code(V=no. of vertices E=no.of edges)?\nChoices:\na) O(V+E)\nb) O(V)\nc) O(E)\nd) O(V*E)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Bellmann ford algorithm provides solution for . . . . . . . . problems.\nChoices:\na) Network flow\nb) Single source shortest path\nc) All pair shortest path\nd) Sorting\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity of Dijikstra's algorithm?\nChoices:\na) O(N)\nb) O(N3)\nc) O(N2)\nd) O(logN)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Prim's algorithm is a . . . . . . . .\nChoices:\na) Divide and conquer algorithm\nb) Greedy algorithm\nc) Dynamic Programming\nd) Approximation algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: If all the weights of the graph are positive, then the minimum spanning tree of the graph is a minimum cost subgraph.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Who described this Best First Search algorithm using heuristic evaluation rule?\nChoices:\na) Judea Pearl\nb) Max Bezzel\nc) Franz Nauck\nd) Alan Turing\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Dijkstra's Algorithm is the prime example for . . . . . . . .\nChoices:\na) Greedy algorithm\nb) Branch and bound\nc) Back tracking\nd) Dynamic programming\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Is Best First Search a searching algorithm used in graphs.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Prim's algorithm resembles Dijkstra's algorithm.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the running time of an unweighted shortest path algorithm whose augmenting path is the path with the least number of edges?\nChoices:\na) O(|E||V|)\nb) O(|E|)\nc) O(|E| log |V|)\nd) O(|E|2|V|)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Worst case is the worst case time complexity of Prim's algorithm if adjacency matrix is used?\nChoices:\na) O(log V)\nb) O(V2)\nc) O(E2)\nd) O(V log E)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which algorithm is used in graph traversal and path finding?\nChoices:\na) A*\nb) C*\nc) D*\nd) E*\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Breadth First Search is equivalent to which of the traversal in the Binary Trees?\nChoices:\na) Pre-order Traversal\nb) Post-order Traversal\nc) Level-order Traversal\nd) In-order Traversal\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Regarding implementation of Depth First Search using stacks, what is the maximum distance between two nodes present in the stack? (considering each edge length 1)\nChoices:\na) Can be anything\nb) 0\nc) At most 1\nd) Insufficient Information\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Floyd Warshall algorithm was proposed by . . . . . . . .\nChoices:\na) Robert Floyd and Stephen Warshall\nb) Stephen Floyd and Robert Warshall\nc) Bernad Floyd and Robert Warshall\nd) Robert Floyd and Bernad Warshall\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The Depth First Search traversal of a graph will result into?\nChoices:\na) Linked List\nb) Tree\nc) Graph with back edges\nd) Array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the time complexity of Kruskal's algorithm?\nChoices:\na) O(log V)\nb) O(E log V)\nc) O(E2)\nd) O(V log E)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following is false in the case of a spanning tree of a graph G?\nChoices:\na) It is tree that spans G\nb) It is a subgraph of the G\nc) It includes every vertex of the G\nd) It can be either cyclic or acyclic\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Every graph has only one minimum spanning tree.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In Depth First Search, how many times a node is visited?\nChoices:\na) Once\nb) Twice\nc) Equivalent to number of indegree of the node\nd) Thrice\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What happens when the value of k is 0 in the Floyd Warshall Algorithm?\nChoices:\na) 1 intermediate vertex\nb) 0 intermediate vertex\nc) N intermediate vertices\nd) N-1 intermediate vertices\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following branch and bound strategy leads to depth first search?\nChoices:\na) LIFO branch and bound\nb) FIFO branch and bound\nc) Lowest cost branch and bound\nd) Highest cost branch and bound\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is running time of Dijkstra's algorithm using Binary min- heap method?\nChoices:\na) O(V)\nb) O(VlogV)\nc) O(E)\nd) O(ElogV)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following data structure is used to implement BFS?\nChoices:\na) linked list\nb) tree\nc) stack\nd) queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Dijkstra's Algorithm run on a weighted, directed graph G={V,E} with non-negative weight function w and source s, terminates with d[u]=delta(s,u) for all vertices u in V.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Kruskal's algorithm is best suited for the sparse graphs than the prim's algorithm.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In the given graph, identify the path that has minimum cost to travel from node a to node f.\nChoices:\na) a-b-c-f\nb) a-d-e-f\nc) a-d-b-c-f\nd) a-d-b-c-e-f\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Identify the correct Bellmann Ford Algorithm.\nChoices:\na) for i=1 to V[g]-1\n\t\tdo for each edge (u,v) in E[g]\n\t\tdo Relax(u,v,w)\n   for each edge (u,v) in E[g]\n\tdo if d[v]>d[u]+w(u,v)\n\t\tthen return False\n   return True\nb) for i=1 to V[g]-1\n       for each edge (u,v) in E[g]\n\tdo if d[v]>d[u]+w(u,v)\n\t\tthen return False\n    return True\nc) for i=1 to V[g]-1\n\t\tdo for each edge (u,v) in E[g]\n\t\tdo Relax(u,v,w)\n   for each edge (u,v) in E[g]\n\tdo if d[v]<d[u]+w(u,v)\n\t\tthen return true\n   return True\nd) for i=1 to V[g]-1\n\t\tdo for each edge (u,v) in E[g]\n\t\tdo Relax(u,v,w)\n   return True\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is an example of Best First Search algorithm?\nChoices:\na) A*\nb) B*\nc) C*\nd) Both A* and B*\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Prim's algorithm is also known as . . . . . . . .\nChoices:\na) Dijkstra-Scholten algorithm\nb) Boruvka's algorithm\nc) Floyd-Warshall algorithm\nd) DJP Algorithm\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Consider the graph shown below. Which of the following edges form the MST of the given graph using Prim'a algorithm, starting from vertex 4.\nChoices:\na) (4-3)(5-3)(2-3)(1-2)\nb) (4-3)(3-5)(5-1)(1-2)\nc) (4-3)(3-5)(5-2)(1-5)\nd) (4-3)(3-2)(2-1)(1-5)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Consider the following statements. S1. Kruskal's algorithm might produce a non-minimal spanning tree. S2. Kruskal's algorithm can efficiently implemented using the disjoint-set data structure.\nChoices:\na) S1 is true but S2 is false\nb) Both S1 and S2 are false\nc) Both S1 and S2 are true\nd) S2 is true but S1 is false\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Bellmann Ford Algorithm is an example for . . . . . . . .\nChoices:\na) Dynamic Programming\nb) Greedy Algorithms\nc) Linear Programming\nd) Branch and Bound\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the other name of the greedy best first search?\nChoices:\na) Heuristic Search\nb) Pure Heuristic Search\nc) Combinatorial Search\nd) Divide and Conquer Search\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Time Complexity of Breadth First Search is? (V - number of vertices, E - number of edges)\nChoices:\na) O(V + E)\nb) O(V)\nc) O(E)\nd) O(V*E)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following traversal in a binary tree is similar to depth first traversal?\nChoices:\na) level order\nb) post order\nc) pre order\nd) in order\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Kruskal's algorithm is a . . . . . . . .\nChoices:\na) divide and conquer algorithm\nb) dynamic programming algorithm\nc) greedy algorithm\nd) approximation algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following is a possible result of depth first traversal of the given graph(consider 1 to be source element)?\nChoices:\na) 1 2 3 4 5\nb) 1 2 3 1 4 5\nc) 1 4 5 3 2\nd) 1 4 5 1 2 3\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the running time of the Floyd Warshall Algorithm?\nChoices:\na) Big-oh(V)\nb) Theta(V2)\nc) Big-Oh(VE)\nd) Theta(V3)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Bellmann Ford Algorithm can be applied for . . . . . . . .\nChoices:\na) Undirected and weighted graphs\nb) Undirected and unweighted graphs\nc) Directed and weighted graphs\nd) All directed graphs\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: The Breadth First Search traversal of a graph will result into?\nChoices:\na) Linked List\nb) Tree\nc) Graph with back edges\nd) Arrays\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following data structure is used to implement DFS?\nChoices:\na) linked list\nb) tree\nc) stack\nd) queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: A person wants to visit some places. He starts from a vertex and then wants to visit every vertex till it finishes from one vertex, backtracks and then explore other vertex from same vertex. What algorithm he should use?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Trim's algorithm\nd) Kruskal's Algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Consider the given graph. What is the weight of the minimum spanning tree using the Prim's algorithm,starting from vertex a?\nChoices:\na) 23\nb) 28\nc) 27\nd) 11\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Consider a complete graph G with 4 vertices. The graph G has . . . . . . . . spanning trees.\nChoices:\na) 15\nb) 8\nc) 16\nd) 13\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Branch and bound is a . . . . . . . .\nChoices:\na) problem solving technique\nb) data structure\nc) sorting algorithm\nd) type of tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Floyd Warshall's Algorithm can be applied on . . . . . . . .\nChoices:\na) Undirected and unweighted graphs\nb) Undirected graphs\nc) Directed graphs\nd) Acyclic graphs\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Both FIFO branch and bound strategy and backtracking leads to depth first search.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Consider the given graph. What is the weight of the minimum spanning tree using the Kruskal's algorithm?\nChoices:\na) 24\nb) 23\nc) 15\nd) 19\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In the given graph, how many intermediate vertices are required to travel from node a to node e at a minimum cost?\nChoices:\na) 2\nb) 0\nc) 1\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: The running time of Bellmann Ford algorithm is lower than that of Dijkstra's Algorithm.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Regarding implementation of Breadth First Search using queues, what is the maximum distance between two nodes present in the queue? (considering each edge length 1)\nChoices:\na) Can be anything\nb) 0\nc) At most 1\nd) Insufficient Information\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Consider a undirected graph G with vertices { A, B, C, D, E}. In graph G, every edge has distinct weight. Edge CD is edge with minimum weight and edge AB is edge with maximum weight. Then, which of the following is false?\nChoices:\na) Every minimum spanning tree of G must contain CD\nb) If AB is in a minimum spanning tree, then its removal must disconnect G\nc) No minimum spanning tree contains AB\nd) G has a unique minimum spanning tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Using logical operator's instead arithmetic operators saves time and space.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Graph Algorithms (DFS, BFS, Dijkstras, etc)\nChoices:\n\nAnswer: "
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which data structure is used to implement a binary heap efficiently?\nChoices:\na) Array\nb) Linked List\nc) Stack\nd) Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In which scenario would you use a Bloom Filter?\nChoices:\na) For implementing a stack-based algorithm\nb) To maintain a balanced binary tree\nc) For efficient sorting of elements\nd) To test membership in a large dataset\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What data structure is used for implementing an efficient priority queue with multiple priority levels?\nChoices:\na) Queue\nb) Stack\nc) Heap\nd) Array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which data structure is best for implementing a sparse matrix?\nChoices:\na) Array\nb) Hash Map\nc) Trie\nd) Array\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What data structure is typically used for implementing a set with fast lookup and insertion operations?\nChoices:\na) Binary Search Tree\nb) Queue\nc) Hash Set\nd) Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In which data structure would you use a Cartesian Tree?\nChoices:\na) Heap\nb) Linked List\nc) Graph\nd) Binary Search Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which data structure is used to efficiently implement a circular buffer?\nChoices:\na) Deque\nb) Array\nc) Queue\nd) Stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the primary use of a Disjoint Set Union (DSU) data structure?\nChoices:\na) To manage key-value pairs\nb) To implement a balanced tree\nc) For efficient sorting of large datasets\nd) To manage and merge disjoint sets\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In which scenario would a K-d Tree be most useful?\nChoices:\na) For implementing a priority queue\nb) For managing a stack of elements\nc) For multi-dimensional search queries\nd) For maintaining a hash table\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which data structure is used to represent a decision table in computer algorithms?\nChoices:\na) Linked List\nb) Binary Tree\nc) Heap\nd) Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What data structure is used for implementing a dynamic programming table to store intermediate results?\nChoices:\na) Queue\nb) Stack\nc) 2D Array\nd) Hash Map\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In which data structure is the concept of a \"skip list\" commonly used?\nChoices:\na) Binary Search Tree\nb) Graph\nc) Linked List\nd) Skip List\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What data structure is commonly used to implement a round-robin scheduler?\nChoices:\na) Queue\nb) Stack\nc) Heap\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which data structure would you use to implement a fast in-memory cache with an expiration policy?\nChoices:\na) Stack\nb) Queue\nc) Trie\nd) Hash Map\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the primary use of a Segment Tree?\nChoices:\na) To maintain a sorted list of elements\nb) For implementing a priority queue\nc) To perform range queries and updates\nd) For representing a graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What data structure is commonly used for efficient implementation of a dynamic connectivity problem?\nChoices:\na) Hash Table\nb) Union-Find\nc) Queue\nd) Hash Table\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which data structure would you use to implement a memory-efficient list of boolean values?\nChoices:\na) Array\nb) Linked List\nc) Bit Array\nd) Hash Map\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What data structure is used for efficiently managing a collection of ordered elements where insertions and deletions are frequent?\nChoices:\na) Hash Table\nb) Array\nc) Queue\nd) Balanced Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In which data structure would you implement a Suffix Array?\nChoices:\na) Array\nb) Heap\nc) Trie\nd) Linked List\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What data structure is best suited for implementing a frequency counter for a large dataset?\nChoices:\na) Stack\nb) Trie\nc) Array\nd) Hash Map\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which data structure is used to implement a multi-dimensional data grid efficiently?\nChoices:\na) Graph\nb) Heap\nc) 2D Array\nd) Linked List\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the primary use of a B+ Tree in databases?\nChoices:\na) For managing disjoint sets\nb) For indexing and quick range queries\nc) For efficient sorting\nd) For managing disjoint sets\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which data structure is commonly used for efficient processing of event-driven simulations?\nChoices:\na) Array\nb) Stack\nc) Priority Queue\nd) Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What data structure is used to manage and efficiently query a dynamic set of intervals?\nChoices:\na) Hash Map\nb) Linked List\nc) Stack\nd) Segment Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What data structure is used for implementing a forward and backward traversal system?\nChoices:\na) Doubly Linked List\nb) Queue\nc) Array\nd) Stack\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which data structure is used to efficiently store and query large sets of unique strings?\nChoices:\na) Stack\nb) Linked List\nc) Hash Table\nd) Trie\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the primary use of a LRU (Least Recently Used) cache?\nChoices:\na) To maintain an ordered list of elements\nb) To store large amounts of data\nc) To manage a fixed-size cache with eviction\nd) To implement a priority queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In which data structure is a Skip List used, and what is its advantage?\nChoices:\na) Heap\nb) Skip List\nc) Array\nd) Heap\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which data structure is used for maintaining a time-stamped log of events for rollback operations?\nChoices:\na) Array\nb) Queue\nc) Log\nd) Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What data structure is most suitable for implementing a system that needs to support rolling window operations?\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Deque\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which data structure is used for implementing a self-balancing tree with O(log n) operations?\nChoices:\na) Queue\nb) Stack\nc) Red-Black Tree\nd) Hash Table\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What data structure would you use for efficiently managing a set of time-ordered events?\nChoices:\na) Queue\nb) Stack\nc) Array\nd) Priority Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which data structure is optimal for implementing a system where the order of processing is critical, but elements are frequently updated?\nChoices:\na) Queue\nb) Heap\nc) Linked List\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary advantage of using a Cuckoo Hashing technique?\nChoices:\na) To allow constant-time access\nb) To support dynamic resizing of the hash table\nc) To maintain a sorted order of elements\nd) To reduce collision rates and improve lookup time\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which data structure is used for implementing an efficient dynamic array with automatic resizing?\nChoices:\na) Array\nb) Linked List\nc) Vector\nd) Deque\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What data structure is used for maintaining a collection of elements where the access pattern is sequential?\nChoices:\na) Hash Table\nb) Linked List\nc) Heap\nd) Hash Table\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which data structure is the concept of 'weighted union' used?\nChoices:\na) Stack\nb) Heap\nc) Union-Find\nd) Binary Search Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which data structure would you use to implement a system where elements need to be both added and removed in FIFO order but with a fixed size?\nChoices:\na) Deque\nb) Priority Queue\nc) Stack\nd) Circular Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the primary use of a B Tree in file systems?\nChoices:\na) To manage large blocks of data on disk\nb) For quick in-memory sorting\nc) To implement a simple key-value store\nd) For managing dynamic sets\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What data structure is used to implement a system where operations must be performed on the middle element frequently?\nChoices:\na) Stack\nb) Linked List\nc) Queue\nd) Deque\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which data structure is used for efficiently managing a list of elements with frequent insertions and deletions at both ends?\nChoices:\na) Array\nb) Hash Table\nc) Deque\nd) Priority Queue\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What data structure is used to perform efficient range queries and updates?\nChoices:\na) Stack\nb) Segment Tree\nc) Trie\nd) Stack\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which data structure is best suited for implementing an undo feature in software applications?\nChoices:\na) Stack\nb) Queue\nc) Linked List\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary use of a Fenwick Tree (Binary Indexed Tree)?\nChoices:\na) To handle dynamic sets with fast insertions\nb) For implementing priority queues\nc) To manage a collection of key-value pairs\nd) To perform efficient prefix sum queries and updates\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which data structure is used to handle a set of elements where order matters and elements are added and removed frequently?\nChoices:\na) Array\nb) Queue\nc) Linked List\nd) Hash Map\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which data structure is used to manage a collection of intervals and perform efficient range queries?\nChoices:\na) Trie\nb) Segment Tree\nc) Array\nd) Trie\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the primary advantage of a Treap data structure?\nChoices:\na) To ensure ordered data insertion\nb) To support dynamic resizing efficiently\nc) To combine properties of binary search trees and heaps\nd) To manage large datasets with quick access\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which data structure would you use for efficiently implementing an auto-complete feature?\nChoices:\na) Hash Map\nb) Stack\nc) Queue\nd) Trie\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What data structure is typically used in an operating system to handle process scheduling?\nChoices:\na) Priority Queue\nb) Queue\nc) Stack\nd) Deque\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which data structure is best suited for implementing a system with frequent range updates and point queries?\nChoices:\na) Hash Table\nb) Binary Search Tree\nc) Linked List\nd) Fenwick Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the primary use of a Bloom Filter?\nChoices:\na) To sort large datasets efficiently\nb) To maintain ordered data\nc) To test membership of an element in a set with a trade-off between accuracy and space\nd) To manage a fixed-size cache\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which data structure is used to manage dynamic subsets with efficient merging and querying?\nChoices:\na) Array\nb) Heap\nc) Disjoint Set Union (DSU)\nd) Binary Search Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What data structure would you use to implement a large database index efficiently?\nChoices:\na) Binary Search Tree\nb) Stack\nc) Queue\nd) B+ Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In which data structure is the concept of \"path compression\" used?\nChoices:\na) Disjoint Set Union (DSU)\nb) Trie\nc) Heap\nd) Linked List\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What data structure is used to maintain a collection of elements that allows fast insertions and deletions but also needs to be sorted frequently?\nChoices:\na) Array\nb) Hash Map\nc) Heap\nd) Sorted List\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the primary advantage of using a Skip List over a Binary Search Tree?\nChoices:\na) To maintain strict ordering of elements\nb) To support efficient priority queue operations\nc) To provide probabilistic balancing and efficient insertions\nd) To handle large datasets with constant time access\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which data structure is used for implementing a hash map with chaining?\nChoices:\na) Trie\nb) Linked List\nc) Stack\nd) Trie\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What data structure is best for managing a list of tasks to be executed in the order they were added?\nChoices:\na) Deque\nb) Priority Queue\nc) Queue\nd) Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What data structure is used for efficient search and update operations on a dynamic set of keys?\nChoices:\na) Hash Map\nb) Trie\nc) Queue\nd) Binary Search Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which data structure is used for representing a grid where elements can be accessed by both row and column indices?\nChoices:\na) Linked List\nb) 2D Array\nc) Hash Map\nd) Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What data structure is most suitable for implementing a multi-level cache?\nChoices:\na) Deque\nb) Stack\nc) Priority Queue\nd) Array\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which data structure is best suited for a system that needs to efficiently manage and query non-overlapping intervals?\nChoices:\na) Heap\nb) Trie\nc) Segment Tree\nd) Interval Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In a B+ Tree, which nodes are used to store actual data records?\nChoices:\na) Internal Nodes\nb) Root Node\nc) Leaf Nodes\nd) Intermediate Nodes\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the primary advantage of using a Fibonacci Heap?\nChoices:\na) To maintain a fixed-size cache\nb) To support efficient priority queue operations\nc) To handle ordered data efficiently\nd) To maintain a fixed-size cache\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which data structure allows for the efficient implementation of a circular buffer?\nChoices:\na) Deque\nb) Heap\nc) Circular Queue\nd) Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which data structure is commonly used to handle a sequence of operations with a last-in, first-out approach?\nChoices:\na) Stack\nb) Queue\nc) Deque\nd) Priority Queue\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What data structure is typically used to implement a system for efficiently managing and updating a large set of numerical data?\nChoices:\na) Binary Search Tree\nb) Hash Map\nc) Trie\nd) Segment Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In which data structure is a \"red-black tree\" used, and what is its primary benefit?\nChoices:\na) Hash Table\nb) Heap\nc) Red-Black Tree\nd) Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What data structure is best for implementing a system that supports frequent insertions and deletions while maintaining a sorted order?\nChoices:\na) Linked List\nb) Sorted List\nc) Hash Map\nd) Linked List\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which data structure is used for efficiently finding the k-th smallest or largest element in an unsorted array?\nChoices:\na) Heap\nb) Quickselect\nc) Trie\nd) Segment Tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the primary use of a Disjoint Set Union (DSU) in algorithms?\nChoices:\na) To maintain ordered sequences\nb) To handle large-scale sorting operations\nc) To implement priority queues efficiently\nd) To manage dynamic sets and perform union-find operations\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which data structure is most suitable for implementing a system with a fixed-size, circular buffer?\nChoices:\na) Deque\nb) Stack\nc) Array\nd) Circular Queue\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What data structure is used to manage and query a large dataset with minimal memory overhead and no duplicates?\nChoices:\na) Bloom Filter\nb) Hash Map\nc) Heap\nd) Trie\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is a common application of a Deque data structure?\nChoices:\na) To manage a fixed-size cache\nb) To support efficient prefix searches\nc) To handle priority-based scheduling\nd) To implement a double-ended queue with fast insertions and deletions\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which data structure would you use for an application that needs to handle elements with a frequent change in priority?\nChoices:\na) Queue\nb) Stack\nc) Priority Queue\nd) Linked List\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the key feature of a Van Emde Boas Tree?\nChoices:\na) To implement a dynamic array efficiently\nb) To support fast operations on a universe of integers\nc) To provide constant-time access to elements\nd) To implement a dynamic array efficiently\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In which scenario is a Sparse Matrix particularly useful?\nChoices:\na) For maintaining sorted data\nb) For managing dynamic key-value pairs\nc) For storing matrices with a majority of zero elements\nd) For handling fully populated matrices\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What data structure is ideal for implementing a system that requires quick lookups and frequent updates with a small range of possible keys?\nChoices:\na) Linked List\nb) Trie\nc) Heap\nd) Hash Table\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which data structure is most appropriate for a system requiring efficient access to the maximum element?\nChoices:\na) Min-Heap\nb) Priority Queue\nc) Max-Heap\nd) Binary Search Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is a typical use case for a Skip List?\nChoices:\na) To handle dynamic sets with fast access\nb) To provide probabilistic balancing and efficient insertion\nc) To maintain large, static datasets\nd) To handle dynamic sets with fast access\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which data structure is used to manage a dynamically changing set of intervals with fast queries?\nChoices:\na) Hash Map\nb) Binary Search Tree\nc) Interval Tree\nd) Segment Tree\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the main advantage of using a Ternary Search Tree?\nChoices:\na) To handle large datasets with quick access\nb) To maintain a balanced binary search tree\nc) To support fast dynamic insertions\nd) To efficiently manage and search for key prefixes\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which data structure is used for implementing efficient algorithms for finding the shortest path in graphs?\nChoices:\na) Deque\nb) Heap\nc) Priority Queue\nd) Stack\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What data structure is used for fast updates and queries on a fixed-size, sequential dataset?\nChoices:\na) Stack\nb) Queue\nc) Hash Table\nd) Fenwick Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In which scenario would a Bloom Filter be most beneficial?\nChoices:\na) When checking for membership with a trade-off between accuracy and space\nb) When managing dynamic key-value pairs\nc) For storing sorted data\nd) For implementing priority queues\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What data structure is most suitable for handling a fixed-size list where elements are frequently added and removed?\nChoices:\na) Trie\nb) Heap\nc) Queue\nd) Circular Buffer\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which data structure is optimal for managing a large set of numerical ranges with efficient updates?\nChoices:\na) Heap\nb) Linked List\nc) Hash Table\nd) Segment Tree\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the primary benefit of using a Splay Tree?\nChoices:\na) To maintain strict balancing of the tree\nb) To support efficient priority queue operations\nc) To provide amortized time bounds for tree operations\nd) To handle fixed-size data efficiently\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What data structure is best suited for implementing a cache with a fixed size and frequent access?\nChoices:\na) Stack\nb) LRU Cache\nc) Trie\nd) Stack\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Dinic's algorithm runs faster than the Ford-Fulkerson algorithm.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the usual size of polybius square used for encrypting English alphabets?\nChoices:\na) 5 X 5\nb) 6 X 6\nc) 26 X 26\nd) 25 X 25\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What will be the chromatic number of the following graph?\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In how many ways can a Gomory-Hu tree be implemented?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is true about the time complexity of the recursive solution of the subset sum problem?\nChoices:\na) It has an exponential time complexity\nb) It has a linear time complexity\nc) It has a logarithmic time complexity\nd) it has a time complexity of O(n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Gronsfeld cipher is harder to crack than caesar cipher.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In what time can the Hamiltonian path problem can be solved using dynamic programming?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N2)\nd) O(N2 2N)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: In a optimal page replacement algorithm, when a page is to be replaced, which of the following pages is chosen?\nChoices:\na) Oldest page\nb) Newest page\nc) Frequently occurred page in the future\nd) Not frequently occurred page in the future\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Beaufort cipher is a variant of . . . . . . . .\nChoices:\na) autokey cipher\nb) vigenere cipher\nc) hill cipher\nd) route cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which graph cannot contain K3, 3 as a minor of graph?\nChoices:\na) Planar Graph\nb) Outer Planar Graph\nc) Non Planar Graph\nd) Inner Planar Graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Under what case of Master's theorem will the recurrence relation of merge sort fall?\nChoices:\na) 1\nb) 2\nc) 3\nd) It cannot be solved using master's theorem\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Hamming codes can be used for both single-bit error and burst error detection and correction.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Atbash cipher is less secure than affine cipher.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: If the complement of a graph is an independent set, then the set of vertices itself is a vertex cover.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is a type of substitution cipher?\nChoices:\na) Mono alphabetic cipher\nb) transposition cipher\nc) transportation cipher\nd) transforming cipher\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How many bits are needed for standard encoding if the size of the character set is X?\nChoices:\na) log X\nb) X+1\nc) 2X\nd) X2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Autokey cipher is also known as?\nChoices:\na) vigenere cipher\nb) autoclave cipher\nc) auto key cipher\nd) auto cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How many printable characters does the ASCII character set consists of?\nChoices:\na) 120\nb) 128\nc) 100\nd) 98\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which algorithm is the most efficient numerical algorithm to obtain lcm?\nChoices:\na) Euler's Algorithm\nb) Euclid's Algorithm\nc) Chebyshev Function\nd) Partial Division Algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: From the given graph, how many vertices can be matched using maximum matching in bipartite graph algorithm?\nChoices:\na) 5\nb) 4\nc) 3\nd) 2\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which among the following is the eulerian tour for the graph given below?\nChoices:\na) ABCDEC\nb) ABCECBA\nc) ACEDCA\nd) ABCEDCA\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Under what case of Master's theorem will the recurrence relation of stooge sort fall?\nChoices:\na) 1\nb) 2\nc) 3\nd) It cannot be solved using master's theorem\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is not an application of topological sorting?\nChoices:\na) Finding prerequisite of a task\nb) Finding Deadlock in an Operating System\nc) Finding Cycle in a graph\nd) Ordered Statistics\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which graph has a size of minimum vertex cover equal to maximum matching?\nChoices:\na) Cartesian\nb) Tree\nc) Heap\nd) Bipartite\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Consider the given page reference string 6, 1, 0, 3, 1, 2, 1, 5, 3, 2, 0, 1, 3. How many page faults will occur if the program has 4-page frames available to it and it uses the least recently used algorithm?\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the rule for encryption in playfair cipher if the letters in a pair appear in same row?\nChoices:\na) they are replaced by the letter appearing immediately below them respectively\nb) they are replaced by the letter appearing immediately right to them respectively\nc) they are replaced by the letter at the corner of the row\nd) that pair is neglected\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following algorithm can be used to detect a cycle in a singly linked list?\nChoices:\na) Simplex algorithm\nb) DSW algorithm\nc) Floyd's algorithm\nd) Aging algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following sorting algorithm has best case time complexity of O(n2)?\nChoices:\na) bubble sort\nb) selection sort\nc) insertion sort\nd) stupid sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What will be the best case time complexity of recursive selection sort?\nChoices:\na) O(n)\nb) O(n2)\nc) O(log n)\nd) O(n log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the running time of Chan's algorithm?\nChoices:\na) O(log n)\nb) O(n log n)\nc) O(n log h)\nd) O(log h)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is an application of Euler's totient function?\nChoices:\na) Pre-order traversal\nb) To find the number of generators in a cyclic group\nc) Number of possible BST in a tree\nd) Detecting cycle in a graph\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following statement is not related to quickhull algorithm?\nChoices:\na) finding points with minimum and maximum coordinates\nb) dividing the subset of points by a line\nc) eliminating points within a formed triangle\nd) finding the shortest distance between two points\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following cipher makes use of linear algebra for encrypting data?\nChoices:\na) polybius square cipher\nb) affine cipher\nc) caesar cipher\nd) rail fence cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Bipartite graph belongs to class 1 graphs.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the running time of Hershberger algorithm?\nChoices:\na) O(log n)\nb) O(n log n)\nc) O(n log h)\nd) O(log h)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following refers to the circuit that uses every edge exactly once, also starts and ends at the same vertex?\nChoices:\na) Hamiltonian circuit\nb) Eulerian path\nc) Eulerian tour\nd) Hamiltonian path\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many unique colors will be required for proper vertex coloring of a line graph having n vertices?\nChoices:\na) 0\nb) 1\nc) 2\nd) n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: A dominating set of graph G, is the subset D of vertices, if each vertex not in D is adjacent to how many vertices?\nChoices:\na) At least 1\nb) At most 1\nc) 0\nd) 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following lines should be inserted to complete the following recursive implementation used to find the length of a linked list?\nChoices:\na) recursive_get_len(current_node)\nb) 1 + recursive_get_len(current_node)\nc) recursive_get_len(current_node->next)\nd) 1 + recursive_get_len(current_node->next)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What will be the plain text corresponding to ciphered text \"134325\" if standard polybius square cipher is used for encryption?\nChoices:\na) SRH\nb) CSK\nc) RCB\nd) KKR\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the running time of Strassen's algorithm for matrix multiplication?\nChoices:\na) O(n2.81)\nb) O(n3)\nc) O(n1.8)\nd) O(n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What will be output for the given code taking input string as \"example\"?\nChoices:\na) Encrypted message: TBQDHST\nb) Encrypted message: TSHDQBT\nc) Encrypted message: tbqdhst\nd) Encrypted message: tshdqbt\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the GCD of 48, 18, 0?\nChoices:\na) 24\nb) 2\nc) 3\nd) 6\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: To which of the following class does a CNF-satisfiability problem belong?\nChoices:\na) NP class\nb) P class\nc) NP complete\nd) NP hard\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What will be the ciphered text if the string \"EXAMPLE\" is given as input to the code of vigenere cipher with keyword as \"HELLO\"?\nChoices:\na) XTPBBEA\nb) DHLZZWA\nc) LBLXDSI\nd) LBLXDPB\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What will be the chromatic number for an empty graph having n vertices?\nChoices:\na) 0\nb) 1\nc) 2\nd) n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Heap's algorithm requires an auxiliary array to create permutations.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following algorithm can be used to solve the Hamiltonian path problem efficiently?\nChoices:\na) branch and bound\nb) iterative improvement\nc) divide and conquer\nd) greedy algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Is lcm an associative function.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Square root decomposition technique is only applicable when the number of indices in an array is a perfect square.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the minimum dominating set of the binary tree given below?\nChoices:\na) {B, E, F, G}\nb) {B, C, D, F}\nc) {A, E, F, G}\nd) {C, D, F, I}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following should be the base case for the recursive solution of subset sum problem?\nChoices:\na) if(sum==0)\nreturn true;\nb) if(sum==0)\n   return true;\nif (n ==0 && sum!= 0)\n   return false;\nc) if (n ==0 && sum!= 0)\nreturn false;\nd) if(sum<0)\n   return true;\nif (n ==0 && sum!= 0)\n   return false;\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: According to Gabriel lame, how many steps does Euclid's algorithm require to solve a problem?\nChoices:\na) Less than five times the number of digits\nb) More than five times the number of digits\nc) Less than two times the number of digits\nd) More than two times the number of digits\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which two English letters are usually combined in polybius table?\nChoices:\na) A and B\nb) Y and Z\nc) I and J\nd) J and K\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which case of master's theorem can be extended further?\nChoices:\na) 1\nb) 2\nc) 3\nd) No case can be extended\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following algorithms does Stable marriage problem uses?\nChoices:\na) Gale-Shapley algorithm\nb) Dijkstra's algorithm\nc) Ford-Fulkerson algorithm\nd) Prim's algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the condition for proper edge coloring of a graph?\nChoices:\na) Two vertices having a common edge should not have same color\nb) Two vertices having a common edge should always have same color\nc) No two incident edges should have the same color\nd) No two incident edges should have different color\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: How many unique colors will be required for vertex coloring of the following graph?\nChoices:\na) 2\nb) 3\nc) 4\nd) 5\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: The six queen puzzle has a fewer solution than the five queen puzzle.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is a modified version of Caesar cipher?\nChoices:\na) vigenere cipher\nb) autokey cipher\nc) running key cipher\nd) trithemius cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is the time complexity of implementing Catalan numbers using dynamic programming?\nChoices:\na) O(n)\nb) O(n2)\nc) O(1)\nd) O(log n\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which algorithm is used to solve a maximum flow problem?\nChoices:\na) Prim's algorithm\nb) Kruskal's algorithm\nc) Dijkstra's algorithm\nd) Ford-Fulkerson algorithm\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Solve the following recurrence using Master's theorem.   T(n) = 16T (n/4) + n\nChoices:\na) T(n) = O(n)\nb) T(n) = O(log n)\nc) T(n) = O(n2log n)\nd) T(n) = O(n2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which theorem gives the relation between the minimum vertex cover and maximum matching?\nChoices:\na) Konig's Theorem\nb) Kirchhoff's Theorem\nc) Kuratowski's Theorem\nd) Kelmans Theorem\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Matrix A is of order 3*4 and Matrix B is of order 4*5. How many elements will be there in a matrix A*B multiplied recursively.\nChoices:\na) 12\nb) 15\nc) 16\nd) 20\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is not a type of mono alphabetic cipher?\nChoices:\na) additive cipher\nb) multiplicative cipher\nc) afffine cipher\nd) hill cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the efficiency of algorithm designed by Hopcroft and Karp?\nChoices:\na) O(n+m)\nb) O(n(n+m)\nc) O(√n(n+m))\nd) O(n+2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Not recently used page replacement algorithm uses a counter.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What will be the plain text corresponding to cipher text \"SCEFJV\" if gronsfeld cipher is used with key \"1234\"?\nChoices:\na) RABBIT\nb) RUSSIA\nc) RANGER\nd) FRIEND\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following cipher uses polybius square cipher in its first step of encrypting data?\nChoices:\na) Autokey cipher\nb) One time pad cipher\nc) ADFGVX cipher\nd) Rail fence cipher\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which type of graph has no odd cycle in it?\nChoices:\na) Bipartite\nb) Histogram\nc) Cartesian\nd) Pie\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How many possible solutions exist for an 8-queen problem?\nChoices:\na) 100\nb) 98\nc) 92\nd) 88\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The code length does not depend on the frequency of occurrence of characters.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following cipher does not require a key for encrypting plain text?\nChoices:\na) atbash cipher\nb) affine cipher\nc) playfair cipher\nd) vigenere cipher\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: The random page replacement algorithm may suffer from Belady's anomaly.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is a chromatic number?\nChoices:\na) The maximum number of colors required for proper edge coloring of graph\nb) The maximum number of colors required for proper vertex coloring of graph\nc) The minimum number of colors required for proper vertex coloring of graph\nd) The minimum number of colors required for proper edge coloring of graph\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the result of the recurrences which fall under second case of Master's theorem (let the recurrence be given by T(n)=aT(n/b)+f(n) and f(n)=nc?\nChoices:\na) T(n) = O(nlogba)\nb) T(n) = O(nc log n)\nc) T(n) = O(f(n))\nd) T(n) = O(n2)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Encryption in beaufort cipher is done using . . . . . . . .\nChoices:\na) trithemius table\nb) vigenere cycle\nc) tabula recta\nd) four square table\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: The weight of the cut is not equal to the maximum flow in a network.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the size of the smallest maximal independent set of a chain of 7 nodes?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In which layer of the computer networks is the flooding algorithm implemented?\nChoices:\na) Transport layer\nb) Network layer\nc) Application layer\nd) Presentation layer\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the running time of Karger's algorithm to find the minimum cut in a graph?\nChoices:\na) O(E)\nb) O(|V|2)\nc) O(V)\nd) O(|E|)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: The time is taken to find the 'n' points that lie in a convex quadrilateral is?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N2)\nd) O(log N)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Vertex coloring and chromatic number are one and the same.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which algorithm can be used to find an eulerian cycle in a graph?\nChoices:\na) Fleury's algorithm\nb) Tarjan's algorithm\nc) Hirschberg's algorithm\nd) Hungarian algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity of Heap's algorithm?\nChoices:\na) O(n log n)\nb) O(n2)\nc) O(n*n!)\nd) O(n!)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What will be the plain text corresponding to cipher text \"RSEADC\" if with the number of columns are given to be 3 and route of reading is down the columns?\nChoices:\na) SACRED\nb) DERSAC\nc) REDSAC\nd) SEDRAC\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What will be the encrypted text corresponding to plain text \"EXAMPLE\" using columnar transposition cipher with the keyword as \"INDIA\"?\nChoices:\na) MEAXPLE\nb) EAPEXML\nc) ELPMAXE\nd) PAELMXE\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What will be the slope of the line given by 10x + 5y + 8=0?\nChoices:\na) -5\nb) -2\nc) -1.25\nd) 5\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How many partitions will be formed for the integer 3?\nChoices:\na) 2\nb) 3\nc) 4\nd) 8\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which cipher is represented by the following function?\nChoices:\na) vigenere cipher\nb) hill cipher\nc) keyword cipher\nd) rotor cipher\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the period in bifid cipher?\nChoices:\na) length of blocks in which the plain text is divided before encryption\nb) number of letters after which the key is repeated\nc) number of blocks into which the plain text is divided before encryption\nd) number of keys used for encryption\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: An optimal solution satisfying men's preferences is said to be?\nChoices:\na) Man optimal\nb) Woman optimal\nc) Pair optimal\nd) Best optimal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which is the correct term of the given relation, lcm (a, b) * gcd (a, b) =?\nChoices:\na) |a*b|\nb) a + b\nc) a - b\nd) a / b\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: The cost required to execute a FIFO algorithm is expensive.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The problem of placing n queens in a chessboard such that no two queens attack each other is called as?\nChoices:\na) n-queen problem\nb) eight queens puzzle\nc) four queens puzzle\nd) 1-queen problem\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of the following recursive implementation used to find the largest and the smallest element in an array?\nChoices:\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the formula used for decoding the ciphered text using affine cipher(a,b are constants and x is the numerical equivalent of a letter to be encrypted)?\nChoices:\na) a-1(x-b)%26\nb) (ax+b)%26\nc) b-1(x-a)%26\nd) b-1(x-a)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the time complexity of the following recursive implementation to find the nth fibonacci number?\nChoices:\na) O(1)\nb) O(2*n)\nc) O(n2)\nd) O(2n)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Vigenere table consists of . . . . . . . .\nChoices:\na) 26 rows and 26 columns\nb) 26 rows and 1 column\nc) 1 row and 26 columns\nd) 27 rows and 27 columns\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What will be the lexicographical order of permutations formed from the array arr={1,2,3}?\nChoices:\na) {{2,1,3},{3,2,1},{3,1,2},{2,3,1},{1,2,3},{1,3,2}}\nb) {{1,2,3},{1,3,2},{2,3,1},{2,1,3},{3,2,1},{3,1,2}}\nc) {{1,2,3},{1,3,2},{2,1,3},{2,3,1},{3,1,2},{3,2,1}}\nd) {{2,1,3},{3,1,2},{3,2,1},{2,3,1},{1,2,3},{1,3,2}}\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the computational complexity of Binary GCD algorithm where a and b are integers?\nChoices:\na) O (log a + log b)2)\nb) O (log (a + b))\nc) O (log ab)\nd) O (log a-b)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Chan's algorithm is used for computing . . . . . . . .\nChoices:\na) Closest distance between two points\nb) Convex hull\nc) Area of a polygon\nd) Shortest path between two points\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following was the first diagram substitution cipher?\nChoices:\na) autokey cipher\nb) hill cipher\nc) one time pad cipher\nd) playfair cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: In a graph, perfect matching exists only if the number of vertices is even.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is used as signal duration in Morse Code?\nChoices:\na) Dash\nb) Forward Slash\nc) Apostrophe\nd) Ampersand\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many combinations of 2 elements will be formed from the array arr={1, 2, 3}?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Minimum number of moves required to solve a tower of hanoi problem with n disks is . . . . . . . .\nChoices:\na) 2n\nb) 2n-1\nc) n2\nd) n2-1\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Recursive solution of Set partition problem is faster than dynamic problem solution in terms of time complexity.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the basic operation of closest pair algorithm using brute force technique?\nChoices:\na) Euclidean distance\nb) Radius\nc) Area\nd) Manhattan distance\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which of the following is not a type of transposition cipher?\nChoices:\na) Rail fence cipher\nb) Columnar transposition cipher\nc) One time pad cipher\nd) Route cipher\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The running time of implementing naive solution to min-cut problem is?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(log N)\nd) O(N2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is not a poly alphabetic substitution cipher?\nChoices:\na) vigenere cipher\nb) one time pad cipher\nc) play fair cipher\nd) pigpen cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the result of the recurrences which fall under first case of Master's theorem (let the recurrence be given by T(n)=aT(n/b)+f(n) and f(n)=nc)?\nChoices:\na) T(n) = O(n^logba)\nb) T(n) = O(nc log n)\nc) T(n) = O(f(n))\nd) T(n) = O(n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What will be the encrypted text corresponding to plain text \"CLASSIFIED\" using columnar transposition cipher with a keyword as \"GAMES\"?\nChoices:\na) LFDSIASECI\nb) SECIAISDFL\nc) CILFAISESD\nd) LFSECIAISD\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Auto key cipher is more secure than polybius square cipher?\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following cipher replaces letters with symbols?\nChoices:\na) polybius square ciper\nb) affine cipher\nc) caesar cipher\nd) pigpen cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which complete graph is not present in minor of Outer Planar Graph?\nChoices:\na) K3, 3\nb) K3, 1\nc) K3, 2\nd) K1, 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: The letters of a word are separated by a space of how many durations?\nChoices:\na) 1 Dot Duration\nb) 2 Dot Duration\nc) 3 Dot Duration\nd) 4 Dot Duration\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Which of the following is not a fibonnaci number?\nChoices:\na) 8\nb) 21\nc) 55\nd) 14\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the lcm (a, b)?\nChoices:\na) a + b\nb) gcd (a-b, b) if a>b\nc) lcm (b, a)\nd) a - b\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What will be the ciphered text for the input string \"example\" with key string as \"hello\" to the program of keyword cipher?\nChoices:\na) axhkpja\nb) ajpkhxa\nc) khpj\nd) ajpk\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Router cipher becomes less secure when we have to encrypt longer messages.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Random page replacement algorithm may behave like any other page replacement algorithms.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What will be the ciphered text corresponding to \"EXAMPLE\" if running key cipher is used for encryption with keyword as \"DATASTRUCTURE\"?\nChoices:\na) IYUNIFW\nb) IXVMGJW\nc) HWUNHGW\nd) IZVPIFX\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The solution of the activity selection problem can have two overlapping activities in a particular time interval.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the range of rand()?\nChoices:\na) 0 to RAND_MAX\nb) 0 to infinity\nc) 0 to 2147483647\nd) 0 to 32767\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is a type of traditional cipher?\nChoices:\na) transportation cipher\nb) transposition cipher\nc) transforming cipher\nd) vigenere cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: With reference to the given Venn diagram, what is the formula for computing |AUBUC| (where |x, y| represents intersection of sets x and y)?\nChoices:\na) |A U B U C|=|A|+|B|+|C|-|A,B|-|A,C|-|B,C|+|A, B,C|\nb) |A, B,C|=|A|+|B|+|C|-|A U B|-|A U C|-|B U C|+|A U B U C|\nc) |A, B,C|=|A|+|B|+|C|+|A,B|-|A,C|+|B,C|+|A U B U C|\nd) |A U B U C|=|A|+|B|+|C| + |A,B| + |A,C| + |B,C|+|A, B,C|\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Strassen's Matrix Algorithm was proposed by . . . . . . . .\nChoices:\na) Volker Strassen\nb) Andrew Strassen\nc) Victor Jan\nd) Virginia Williams\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Time complexity of fractional knapsack problem is . . . . . . . .\nChoices:\na) O(n log n)\nb) O(n)\nc) O(n2)\nd) O(nW)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Who discussed techniques for reducing the memory requirements for Strassen's algorithm?\nChoices:\na) Strassen\nb) Lederman\nc) Bailey\nd) Higham\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following ciphers are created by shuffling the letters of a word?\nChoices:\na) substitution cipher\nb) transposition cipher\nc) vigenere cipher\nd) hill cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Flooding algorithm shouldn't be used if only a single destination needs the packet.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Running key cipher is an example of . . . . . . . .\nChoices:\na) mono-alphabetic cipher\nb) poly-alphabetic cipher\nc) transposition cipher\nd) additive cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: All the graphs have a dominating set of vertices.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What will be the ciphered text corresponding to \"EXAMPLE\" if gronsfeld cipher is used for encryption with key as \"1234\"?\nChoices:\na) FZDQQNH\nb) HNQQDZF\nc) QNHFZDQ\nd) QQNHDZF\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: The result of the fractional knapsack is greater than or equal to 0/1 knapsack.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is the time complexity of finding nth Catalan numbers using binomial coefficient?\nChoices:\na) O(n)\nb) O(n2)\nc) O(1)\nd) O(log n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What will be the plain text corresponding to ciphered text \"|_ __| >\" if pigpen cipher is used for encryption?\nChoices:\na) cat\nb) hat\nc) dog\nd) rat\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the time complexity of the following iterative method used to find the sum of the first n natural numbers?\nChoices:\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: How many colours are used in a bipartite graph?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which among the following best represents the time complexity to find articulate points in a graph?\nChoices:\na) O(V)\nb) O(E)\nc) O(V + E)\nd) O(V * E)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: LCM is also called as . . . . . . . .\nChoices:\na) GCD\nb) SCM\nc) GCF\nd) HCF\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following statement is incorrect with respect to generalizing the solution using the inclusion-exclusion principle?\nChoices:\na) including cardinalities of sets\nb) excluding cardinalities of pairwise intersections\nc) excluding cardinalities of triple-wise intersections\nd) excluding cardinalities of quadraple-wise intersections\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following cipher is easiest to crack?\nChoices:\na) vigenere cipher\nb) running key cipher\nc) trithemius cipher\nd) all are equally secure\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Under what condition any set A will be a subset of B?\nChoices:\na) if all elements of set B are also present in set A\nb) if all elements of set A are also present in set B\nc) if A contains more elements than B\nd) if B contains more elements than A\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Suppose the first fibonnaci number is 0 and the second is 1. What is the sixth fibonnaci number?\nChoices:\na) 5\nb) 6\nc) 7\nd) 8\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: When was the first solution to Eight Queen Puzzle published?\nChoices:\na) 1850\nb) 1847\nc) 1848\nd) 1849\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What will be the chromatic index of the following graph?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Which is the smallest number of 3 digits that is divisible by 2, 4, 8?\nChoices:\na) 100\nb) 102\nc) 116\nd) 104\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: The shortest distance between a line and a point is achieved when?\nChoices:\na) a line is drawn at 90 degrees to the given line from the given point\nb) a line is drawn at 180 degrees to the given line from the given point\nc) a line is drawn at 60 degrees to the given line from the given point\nd) a line is drawn at 270 degrees to the given line from the given point\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is not a transposition cipher?\nChoices:\na) rail fence cipher\nb) gronsfeld cipher\nc) hill cipher\nd) route cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What is the running time of Dinic's blocking flow algorithm?\nChoices:\na) O(V2E)\nb) O(VE2)\nc) O(V3)\nd) O(E max |f|)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which type of graph has all the vertex of the first set connected to all the vertex of the second set?\nChoices:\na) Bipartite\nb) Complete Bipartite\nc) Cartesian\nd) Pie\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The greedy algorithm can find a minimal vertex cover in polynomial time for which among the following?\nChoices:\na) Tree graphs\nb) Bipartite graphs\nc) Hypercube\nd) Clique graphs\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Under what case of Master's theorem will the recurrence relation of binary search fall?\nChoices:\na) 1\nb) 2\nc) 3\nd) It cannot be solved using master's theorem\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is meant by integer partition?\nChoices:\na) representing an integer as sum of positive and negative real numbers\nb) representing an integer as sum of positive and negative integers\nc) representing an integer as sum of positive integers\nd) representing an integer as sum of positive real numbers\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Consider the following algorithm for finding the nth Catalan number using dynamic approach. which of the following steps best fills the blank?\nChoices:\na) Traverse the array from 2 to n one by one and update the value as c[j] * c[i-j-1]\nb) Traverse the array from 2 to n one by one and update the value as c[i] * c[i-j-1]\nc) Traverse the array from 2 to n one by one and update the value as c[j] * c[i-1]\nd) Traverse the array from 2 to n one by one and update the value as c[i] * c[j-1]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: In Morse Code, each dot or dash within a character is followed by a period of signal absence. What is the name of that signal?\nChoices:\na) Slash\nb) Space\nc) Ampersand\nd) Asterisk\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: We can solve any recurrence by using Master's theorem.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: For a hamming code of parity bit m=8, what is the total bits and data bits?\nChoices:\na) (255, 247)\nb) (127, 119)\nc) (31, 26)\nd) (0, 8)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: A non-deterministic algorithm is said to be non-deterministic polynomial if the time-efficiency of its verification stage is polynomial.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In a graph, every maximum matching is a maximal matching.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: The optimal time obtained through divide and conquer approach using merge sort is the best case efficiency.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Backtracking algorithm is faster than the brute force technique\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What does Maximum flow problem involve?\nChoices:\na) finding a flow between source and sink that is maximum\nb) finding a flow between source and sink that is minimum\nc) finding the shortest path between source and sink\nd) computing a minimum spanning tree\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the least time in which we can raise a number x to power y?\nChoices:\na) O(x)\nb) O(y)\nc) O(log x)\nd) O(log y)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In a graph G, the total number of edges in maximum matching is called?\nChoices:\na) Matching number\nb) Chromatic number\nc) Domination number\nd) Independence number\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Topological sort is equivalent to which of the traversals in trees?\nChoices:\na) Pre-order traversal\nb) Post-order traversal\nc) In-order traversal\nd) Level-order traversal\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In the coalesced hashing, the collided element is placed in the first empty place of the hash table.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Which of the following is not an application of Euclid's algorithm?\nChoices:\na) Simplification of fractions\nb) Performing divisions in modular arithmetic\nc) Solving quadratic equations\nd) Solving diophantine equations\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In a perfect matching of graph G, every vertex is connected to how many edges?\nChoices:\na) At most one\nb) At least one\nc) Exactly one\nd) Zero\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What will be the plain text corresponding to cipher text \"IWRWHS\" if running key cipher is used with keyword as \"DATASTRUCTURE\"?\nChoices:\na) EVYVOY\nb) ETXSOX\nc) EXWZOY\nd) EYYVOY\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the following is an example of asymmetric encryption technique?\nChoices:\na) one-time pad\nb) one-time password\nc) DSA\nd) blowfish\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the time complexity of the following iterative code used to find the smallest and largest element in a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: separates a particular pair of vertices in a graph.\nChoices:\na) line\nb) arc\nc) cut\nd) flow\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What type of graph has chromatic number less than or equal to 2?\nChoices:\na) Histogram\nb) Bipartite\nc) Cartesian\nd) Tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which among the following algorithms can be used to decide which page should be replaced when the new page comes in?\nChoices:\na) Karatsuba algorithm\nb) DSW algorithm\nc) Page replacement algorithm\nd) Aging algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the running time of the Huffman encoding algorithm?\nChoices:\na) O(C)\nb) O(log C)\nc) O(C log C)\nd) O( N log C)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The main time taking step in fractional knapsack problem is . . . . . . . .\nChoices:\na) Breaking items into fraction\nb) Adding items into knapsack\nc) Sorting\nd) Looping through sorted items\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Solve the following recurrence using Master's theorem.   T(n) = T (n/2) + 2n\nChoices:\na) T(n) = O(n2)\nb) T(n) = O(n2 log n)\nc) T(n) = O(2n)\nd) cannot be solved\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: A connected graph has a maximum of (n - 2) cut vertices.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following will generate random numbers in the range 1-100 (both inclusive)?\nChoices:\na) rand() % 100\nb) rand() % 101\nc) (rand() % (101)) + 1\nd) (rand() % (100)) + 1\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What will be the ciphered text corresponding to \"EXAMPLE\" if trithemius cipher is used for encryption?\nChoices:\na) EYCPTQK\nb) KQTPCYE\nc) YPQECTK\nd) ECTKYPQ\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Euclidean algorithm does not require the calculation of prime factors.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: A graph with chromatic number less than or equal to k is called?\nChoices:\na) K chromatic\nb) K colorable\nc) K chromatic colorable\nd) K colorable chromatic\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which page replacement strategy uses referenced bits and modified bits to replace the page?\nChoices:\na) First in first out\nb) Least recently used algorithm\nc) Not recently used algorithm\nd) Optimal page replacement algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: In terms of Venn Diagram, which of the following expression gives GCD (Given A ꓵ B ≠ Ø)?\nChoices:\na) Multiplication of A U B terms\nb) Multiplication of A ꓵ B terms\nc) Multiplication of A*B terms\nd) Multiplication of A-B terms\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: The dash duration is how many times the dot duration?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The chromatic number of star graph with 3 vertices is greater than that of a tree with same number of vertices.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of fleury's algorithm?\nChoices:\na) O(V)\nb) O(E)\nc) O(V * E)\nd) O((V + E)2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following cipher uses two keys to encrypt data?\nChoices:\na) substitution cipher\nb) transposition cipher\nc) symmetric cipher\nd) asymmetric cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What will be the ciphered text corresponding to plain text \"ACT\" if pigpen cipher is used for encryption?\nChoices:\na) _| |_ >\nb) |_ > |_\nc) _| |_ <\nd) |_< _|\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Solve the following recurrence using Master's theorem.   T(n) = 4 T (n/2) + n!\nChoices:\na) T(n) = O(n!)\nb) T(n) = O(n! log n)\nc) T(n) = O(n2log n)\nd) cannot be solved using master's theorem\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: The random page replacement algorithm fares better than which of the following algorithm?\nChoices:\na) Optimal page replacement algorithm\nb) LIFO\nc) FIFO\nd) Not frequently used algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Set partition problem is an example of NP complete problem.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Given the program of naive method. Fill in the blanks with appropriate formula\nChoices:\na) Z[i][j] = Z[i][j] + X[i][k]*Y[k][j]\nb) Z[i][j] = Z[i][j] + X[i][k] + Y[k][j]\nc) Z[i][j] = Z[i][j] * X[i][k]*Y[k][j]\nd) Z[i][j] = Z[i][j] * X[i][k] + Y[k][j]\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What will be the slope of the line given by ax + by + c = 0?\nChoices:\na) -a/b\nb) -b/a\nc) -c/a\nd) a/c\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: The first step in the naive greedy algorithm is?\nChoices:\na) analysing the zero flow\nb) calculating the maximum flow using trial and error\nc) adding flows with higher values\nd) reversing flow if required\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: In divide and conquer, the time is taken for merging the subproblems is?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N2)\nd) O(log N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Is 9 and 28 coprime number?\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the optimal time required for solving the closest pair problem using divide and conquer approach?\nChoices:\na) O(N)\nb) O(log N)\nc) O(N log N)\nd) O(N2)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Running key cipher is a transposition cipher.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which among the following is an application of the least recently used algorithm?\nChoices:\na) Paging for memory management\nb) Dynamic memory allocation\nc) Priority scheduling\nd) Disk scheduling\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What should be the return type of rand() function?\nChoices:\na) int\nb) float\nc) long\nd) double\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the correct formula for generating random numbers in the range (lower,upper) using rand()?\nChoices:\na) rand() % (upper - lower)\nb) rand() + lower\nc) (rand()%(upper-lower)) + lower\nd) (rand()%(upper-lower+1)) + lower\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What will be the plain text corresponding to cipher text \"XKS\" if the bifid cipher is used with key as \"KEY\" and period as 5?\nChoices:\na) IND\nb) USA\nc) RSA\nd) AUS\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the LCM according to the given Venn Diagram?\nChoices:\na) 2\nb) 3\nc) 180\nd) 6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Can there exist a graph which is both eulerian and is bipartite?\nChoices:\na) Yes\nb) No\nc) Yes if it has even number of edges\nd) Nothing can be said\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Using the inclusion-exclusion principle, find the number of integers from a set of 1-100 that are not divisible by 2, 3 and 5.\nChoices:\na) 22\nb) 25\nc) 26\nd) 33\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Autokey cipher is closely related to . . . . . . . .\nChoices:\na) Vigenere cipher\nb) Hill cipher\nc) Play fair cipher\nd) Rotor cipher\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following algorithm can be used to find the minimum cut of a connected graph?\nChoices:\na) Fleury's algorithm\nb) Hirschberg's algorithm\nc) Karger's algorithm\nd) Hierholzer's algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: For an euler tour of a tree, how many vertices are required to store euler tour?\nChoices:\na) 2 * V - 1\nb) 2 * V + 1\nc) 2 * V - E + 1\nd) 2 * V\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which type of flooding doesn't send every incoming packet on every outgoing line?\nChoices:\na) Sequence number-controlled flooding\nb) Selective flooding\nc) Reverse path forwarding\nd) Normal flooding\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: In how many directions do queens attack each other?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: How many permutations will be formed from the array arr={1, 2, 3}?\nChoices:\na) 2\nb) 4\nc) 6\nd) 8\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What is the time complexity of the following implementation of linear search on a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Encryption in Route cipher is done . . . . . . . .\nChoices:\na) by arranging the letters in a zig zag fashion in a table\nb) by randomly arranging letters\nc) by following an imaginary pattern drawn on a grid\nd) by swapping adjacent letters\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Is gcd an associative function.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Does Ford- Fulkerson algorithm use the idea of?\nChoices:\na) Naive greedy algorithm approach\nb) Residual graphs\nc) Minimum cut\nd) Minimum spanning tree\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the significance of indicator block in running key cipher?\nChoices:\na) it helps in encryption\nb) it strengthens the cipher\nc) it gives information regarding the book/text from where the key is taken\nd) it makes encryption easy\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following is used to find the absolute value of the argument in C++?\nChoices:\na) abs()\nb) fabs()\nc) mod()\nd) ab()\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Which of the following approach should be used to find the solution of the activity selection problem?\nChoices:\na) Greedy approach\nb) Divide and conquer\nc) Brute-force approach\nd) Dynamic programming\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What will be the ciphered text corresponding to \"ALGORITHM\" if beaufort cipher is used for encryption with key as \"KEY\"?\nChoices:\na) BNJSWOAPV\nb) KTSWNQRXM\nc) AMIRVNZOU\nd) MBPHJSNIU\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is required to determine the number of page faults in FIFO?\nChoices:\na) Page number\nb) Page frame number\nc) Memory capacity\nd) Segment number\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What will be the plain text corresponding to cipher text \"PROTO\" if vigenere cipher is used with keyword as \"HELLO\"?\nChoices:\na) OTORP\nb) WORLD\nc) INDIA\nd) AMERICA\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is a disadvantage of quickselect?\nChoices:\na) Poor space complexity\nb) Poor best case time complexity\nc) Poor average case time complexity\nd) Poor worst case time complexity\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many approaches can be applied to solve quick hull problem?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: A man wants to go different places in the world. He has listed them down all. But there are some places where he wants to visit before some other places. What application of graph can he use to determine that?\nChoices:\na) Depth First Search\nb) Breadth First Search\nc) Topological Sorting\nd) Dijkstra's Shortest path algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Dynamic programming approach can be used to implement Catalan numbers.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: enumerates a list of promising nodes that could be computed to give the possible solutions of a given problem.\nChoices:\na) Exhaustive search\nb) Brute force\nc) Backtracking\nd) Divide and conquer\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following forms a sequence of natural numbers that occur in different counting problems?\nChoices:\na) Chromatic number\nb) Pascal triangle\nc) Catalan numbers\nd) Factorial of a number\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In the least recently used algorithm, if the current page doesn't exist in the set then it is replaced with the recently used page.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which of the problems cannot be solved by backtracking method?\nChoices:\na) n-queen problem\nb) subset sum problem\nc) hamiltonian circuit problem\nd) travelling salesman problem\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the magnitude of resultant of cross product of two parallel vectors a and b?\nChoices:\na) |a|.|b|\nb) |a|.|b| cos(180)\nc) |a|.|b| sin(180)\nd) 1\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What will be the ciphered text corresponding to \"EXAMPLE\" if beaufort cipher is used for encryption with key as \"PASS\"?\nChoices:\na) LSAODGP\nb) OPAGSDL\nc) LDSGAPO\nd) PGDOASL\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: . . . . . . . . states that, on a page fault, the frame that has been in memory the longest is replaced.\nChoices:\na) Belady's anomaly\nb) Second chance algorithm\nc) Partial second chance algorithm\nd) LRU replacement algorithm\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following recursive formula can be used to find the factorial of a number?\nChoices:\na) fact(n) = n * fact(n)\nb) fact(n) = n * fact(n+1)\nc) fact(n) = n * fact(n-1)\nd) fact(n) = n * fact(1)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: How many stages of procedure does a non-deterministic algorithm consist of?\nChoices:\na) 1\nb) 2\nc) 3\nd) 4\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Consider the given page reference string 3, 1, 0, 2, 1, 5, 6, 2, 8, 6, 9, 1. How many page faults will occur if the program has 4-page frames available to it and it uses the not recently used algorithm?\nChoices:\na) 6\nb) 7\nc) 8\nd) 9\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Poly alphabetic cipher harder to decipher than mono alphabetic cipher.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Solve the following recurrence using Master's theorem.   T(n) = 0.7 T (n/2) + 1/n\nChoices:\na) T(n) = O(n)\nb) T(n) = O(log n)\nc) T(n) = O(n2log n)\nd) cannot be solved using master's theorem\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In which of the following applications can we use the concept of articulation points?\nChoices:\na) Designing a microprocessor\nb) Designing a router\nc) Designing a network\nd) Designing a building\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the time complexity of the following iterative implementation used to find the length of a linked list?\nChoices:\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(logn\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: What is the shortest distance between the line given by -2x + 3y + 4 = 0 and the point (5,6)?\nChoices:\na) 4.5 units\nb) 5.4 units\nc) 4.3 units\nd) 3.3 units\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which device was used to generate high speed Morse Code?\nChoices:\na) Iambic Paddle\nb) Note Paddle\nc) Vibrolex\nd) KSM Radio\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Minimum time required to solve tower of hanoi puzzle with 4 disks assuming one move takes 2 seconds, will be . . . . . . . .\nChoices:\na) 15 seconds\nb) 30 seconds\nc) 16 seconds\nd) 32 seconds\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is meant by the term lexicographical order?\nChoices:\na) dictionary ordering of elements\nb) reverse dictionary ordering of elements\nc) to sort according to value of first element\nd) to sort according to value of last element\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Fractional knapsack problem is also known as . . . . . . . .\nChoices:\na) 0/1 knapsack problem\nb) Continuous knapsack problem\nc) Divisible knapsack problem\nd) Non continuous knapsack problem\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What will be the worst case time complexity of finding the sum of elements in a given range of (l,r) in an array of size n?\nChoices:\na) O(n)\nb) O(l+r)\nc) O(l-r)\nd) O(r-l)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Counting intersections can be done using the inclusion-exclusion principle only if it is combined with De Morgan's laws of complementing.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Is every complete bipartite graph a Moore Graph.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: What will be the maximum number of rounds required to reach all nodes in the flooding algorithm?\nChoices:\na) Radius to the graph\nb) Diameter of graph\nc) 1\nd) Distance between two nodes\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Which structure can be modelled by using Bipartite graph?\nChoices:\na) Hypergraph\nb) Perfect Graph\nc) Hetero Graph\nd) Directed Graph\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is called the \"ultimate planar convex hull algorithm\"?\nChoices:\na) Chan's algorithm\nb) Kirkpatrick-Seidel algorithm\nc) Gift wrapping algorithm\nd) Jarvis algorithm\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the definition of graph according to graph theory?\nChoices:\na) visual representation of data\nb) collection of dots and lines\nc) collection of edges\nd) collection of vertices\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Gronsfeld cipher is an example of . . . . . . . .\nChoices:\na) mono-alphabetic cipher\nb) poly-alphabetic cipher\nc) transposition cipher\nd) additive cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Who publish the bitwise operation method to solve the eight queen puzzle?\nChoices:\na) Zongyan Qiu\nb) Martin Richard\nc) Max Bezzel\nd) Frank Nauck\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Topological sort can be applied to which of the following graphs?\nChoices:\na) Undirected Cyclic Graphs\nb) Directed Cyclic Graphs\nc) Undirected Acyclic Graphs\nd) Directed Acyclic Graphs\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Route cipher falls under the category of?\nChoices:\na) mono-alphabetic cipher\nb) poly-alphabetic cipher\nc) transposition cipher\nd) additive cipher\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of floyd's cycle finding algorithm?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(1)\nd) O(n2)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: In general, which of the following methods isn't used to find the factorial of a number?\nChoices:\na) Recursion\nb) Iteration\nc) Dynamic programming\nd) Non iterative / recursive\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: The choice of polynomial class has led to the development of an extensive theory called . . . . . . . .\nChoices:\na) computational complexity\nb) time complexity\nc) problem complexity\nd) decision complexity\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the average case time complexity of recursive selection sort?\nChoices:\na) O(n)\nb) O(n log n)\nc) O(n2)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Fractional knapsack problem is solved most efficiently by which of the following algorithm?\nChoices:\na) Backtracking\nb) Greedy algorithm\nc) Dynamic programming\nd) Divide and conquer\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: As the number of frames available increases, the number of page faults decreases.\nChoices:\na) True\nb) False\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: If 4 is the GCD of 16 and 12, What is the GCD of 12 and 4?\nChoices:\na) 12\nb) 6\nc) 4\nd) 2\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: How many edges does a n vertex triangle free graph contains?\nChoices:\na) n2\nb) n2 + 2\nc) n2 / 4\nd) n3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: The worst-case efficiency of solving a problem in polynomial time is?\nChoices:\na) O(p(n))\nb) O(p( n log n))\nc) O(p(n2))\nd) O(p(m log n))\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What will be the chromatic index for a complete graph having n vertices (consider n to be an odd number)?\nChoices:\na) n\nb) n + 1\nc) n - 1\nd) 2n + 1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Who invented Euclid's algorithm?\nChoices:\na) Sieve\nb) Euclid\nc) Euclid-Sieve\nd) Gabriel lame\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Gronsfeld cipher is a variation of . . . . . . . .\nChoices:\na) autokey cipher\nb) vigenere cipher\nc) hill cipher\nd) route cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: The no. of partitions of which of the following integer will be divisible by 5?\nChoices:\na) 3\nb) 5\nc) 9\nd) 6\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: The pendant vertex of the graph can also be an articulation point of the graph.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: For how many queens was the extended version of Eight Queen Puzzle applicable for n*n squares?\nChoices:\na) 5\nb) 6\nc) 8\nd) n\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: In which of the following cipher the plain text and the ciphered text does not have the same set of letters?\nChoices:\na) route cipher\nb) columnar transposition cipher\nc) myszkowski cipher\nd) additive cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What will be the ciphered text if rail fence cipher is used for encrypting the plain text \"EXAMPLE\" with the key value given to be 2?\nChoices:\na) EAPEXML\nb) EEXLAPM\nc) EXAEMLP\nd) EXAMPLE\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Polybius square cipher is most closely related to?\nChoices:\na) mono-alphabetic cipher\nb) poly-alphabetic cipher\nc) transposition cipher\nd) additive cipher\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the minimum vertex cover for the following graph given below?\nChoices:\na) {A, B}\nb) {A, E}\nc) {B, C}\nd) {D, B}\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: The quick hull algorithm runs faster if the input uses non- extreme points.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Playfair cipher is an example of . . . . . . . .\nChoices:\na) mono-alphabetic cipher\nb) poly-alphabetic cipher\nc) transposition cipher\nd) additive cipher\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is meant by number theory?\nChoices:\na) study of integers\nb) study of complex numbers\nc) numerology\nd) theory of origination of mathematics\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Cross product is also known as?\nChoices:\na) scalar product\nb) vector product\nc) dot product\nd) multiplication\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: The number of columns in the table used for encryption in rail fence cipher depends upon the given key value.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: How many possible solutions occur for a 10-queen problem?\nChoices:\na) 850\nb) 742\nc) 842\nd) 724\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Hill cipher is harder to crack than playfair cipher.\nChoices:\na) True\nb) False\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is not a type of poly alphabetic cipher?\nChoices:\na) Auto key cipher\nb) Hill cipher\nc) Playfair cipher\nd) Additive cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Which of the following is a difference between trithemius cipher and vigenere cipher?\nChoices:\na) they use different tables for encryption\nb) vigenere cipher is poly alphabetic whereas running key cipher is mono alphabetic\nc) vigenere cipher uses a key whereas no key is required for using trithemius cipher\nd) vigenere cipher is substitution cipher whereas trithemius cipher is transposition cipher\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the number of swaps required to sort the array arr={5, 3, 2, 4, 1} using recursive selection sort?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Consider the following number of activities with their start and finish time given below. Which of following activity will be left out?\nChoices:\na) A1\nb) A2\nc) A3\nd) A4\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the maximal independent set for the graph given below?\nChoices:\na) {C, D, E, G}\nb) {A, C, D, F}\nc) {A, E, B, C}\nd) {A, B, C, D}\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Affine cipher is not susceptible to frequency analysis.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: . . . . . . . . has the lowest fault rate of all the page replacement algorithms.\nChoices:\na) Optimal page replacement algorithm\nb) LRU replacement algorithm\nc) FIFO\nd) Counting based\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the chromatic number of compliment of line graph of bipartite graph?\nChoices:\na) 0\nb) 1\nc) 2\nd) 3\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which of the following is an NP complete problem?\nChoices:\na) Hamiltonian cycle\nb) Travelling salesman problem\nc) Calculating chromatic number of graph\nd) Finding maximum element in an array\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: Which of the following is the correct mathematical application of Euclid's algorithm?\nChoices:\na) Determination of prime numbers\nb) Lagrange's four square theorem\nc) Cauchy-Euler theorem\nd) Residue theorem\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: What will be the time complexity of the brute force approach used to find the articulation points in a given graph?\nChoices:\na) O(V*(V + E))\nb) O(V log V)\nc) O(V + log V)\nd) O(E log V)\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: What is the running time of the Huffman algorithm, if its implementation of the priority queue is done using linked lists?\nChoices:\na) O(C)\nb) O(log C)\nc) O(C log C)\nd) O(C2)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: Running key cipher is harder to decipher than keyword cipher.\nChoices:\na) true\nb) false\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: Including a parity bit along with the data surely detects the errors.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: What is the time complexity of the recursive implementation used to convert a decimal number to its binary equivalent?\nChoices:\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(logn)\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: What is the time complexity for finding a Hamiltonian path for a graph having N vertices (using permutation)?\nChoices:\na) O(N!)\nb) O(N! * N)\nc) O(log N)\nd) O(N)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: Pseudo random number generators can be used for data encryption.\nChoices:\na) true\nb) false\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: Suppose two activities A and B, having start and finish time as SA, FA and SB, FB respectively. Both the activities are said to be compatible, under which of the following condition?\nChoices:\na) SA = FB\nb) SA > FB\nc) SA >= FB or SB >= FA\nd) SA >= FB and SB = FA\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which algorithm is used to solve a minimum cut algorithm?\nChoices:\na) Gale-Shapley algorithm\nb) Ford-Fulkerson algorithm\nc) Stoer-Wagner algorithm\nd) Prim's algorithm\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the time complexity of the fastest known matrix multiplication algorithm?\nChoices:\na) O(nlog7)\nb) O(n2.37)\nc) O(n3)\nd) O(n!)\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: Which of the following is a mono alphabetic substitution cipher?\nChoices:\na) vigenere cipher\nb) one time pad cipher\nc) play fair cipher\nd) atbash cipher\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; ring buffer head/tail if queues are referenced.",
        "target_text": "Question: Encryption in Vigenere cipher is done using . . . . . . . .\nChoices:\na) vigenere formula\nb) vigenere cycle\nc) vigenere square\nd) vigenere addition\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; balanced BST buckets are not used here.",
        "target_text": "Question: What is the general formula for finding the magnitude of the cross product of two vectors a and b with angle θ between them?\nChoices:\na) |a|.|b|\nb) |a|.|b| cos(θ)\nc) |a|.|b| sin(θ)\nd) |a|.|b| tan(θ)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; amortized analysis allowed where noted.",
        "target_text": "Question: What is the best case time complexity of quickselect?\nChoices:\na) O(n log n)\nb) O(n2)\nc) O(n)\nd) O(log n)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; load factor α remains below 0.75.",
        "target_text": "Question: Quickselect's algorithm is similar to which of the following algorithm?\nChoices:\na) Merge sort\nb) Quicksort\nc) Selection sort\nd) Counting sort\nAnswer: b"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume RAM model and unit-cost arithmetic.",
        "target_text": "Question: Which of the following algorithms is similar to a quickhull algorithm?\nChoices:\na) merge sort\nb) shell sort\nc) selection sort\nd) quick sort\nAnswer: d"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; treat indices as 0-based and element size fixed.",
        "target_text": "Question: In what manner is a state-space tree for a backtracking algorithm constructed?\nChoices:\na) Depth-first search\nb) Breadth-first search\nc) Twice around the tree\nd) Nearest neighbour first\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; no resize in this operation and invariants maintained.",
        "target_text": "Question: What is the worst case complexity of quick hull?\nChoices:\na) O(N)\nb) O(N log N)\nc) O(N2)\nd) O(log N)\nAnswer: c"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; use Θ-notation for tight bounds.",
        "target_text": "Question: Which among the following problem uses the vertex cover approach?\nChoices:\na) Traveling salesperson problem\nb) Assignment problem\nc) Activity selection problem\nd) Knapsack problem\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; assume uniform hashing where applicable.",
        "target_text": "Question: What is the total running time of Euclid's algorithm?\nChoices:\na) O(N)\nb) O(N log M)\nc) O(N log N)\nd) O(log N +1\nAnswer: a"
    },
    {
        "input_text": "Generate a data structure MCQ | Context: Assume standard RAM model and 0-based indexing; use tight bounds where applicable; operations leverage structure-specific invariants; sift-down/sift-up semantics when heaps are referenced.",
        "target_text": "Question: . . . . . . . . is the class of decision problems that can be solved by non-deterministic polynomial algorithms.\nChoices:\na) NP\nb) P\nc) Hard\nd) Complete\nAnswer: a"
    }
]