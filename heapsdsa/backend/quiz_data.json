[
    {
        "question_number": "Question 1",
        "question_title": "Which of the following algorithms can be used to most efficiently determine the presence of a cycle in a given graph ?",
        "code": "",
        "choices": [
            "A\nDepth First Search",
            "B\nBreadth First Search",
            "C\nPrim\\'s Minimum Spanning Tree Algorithm",
            "D\nKruskal\\' Minimum Spanning Tree Algorithm"
        ],
        "answer": "A\nDepth First Search"
    },
    {
        "question_number": "Question 2",
        "question_title": "Traversal of a graph is different from tree because",
        "code": "",
        "choices": [
            "A\nThere can be a loop in graph so we must maintain a visited flag for every vertex",
            "B\nDFS of a graph uses stack, but inorder traversal of a tree is recursive",
            "C\nBFS of a graph uses queue, but a time efficient BFS of a tree is recursive.",
            "D\nAll of the above"
        ],
        "answer": "A\nThere can be a loop in graph so we must maintain a visited flag for every vertex"
    },
    {
        "question_number": "Question 3",
        "question_title": "What are the appropriate data structures for following algorithms?",
        "code": "",
        "choices": [
            "A\n Stack\n Queue\nPriority Queue\nUnion Find",
            " Stack",
            " Queue",
            "Priority Queue",
            "Union Find",
            "B\nQueue\nStack\nPriority Queue\nUnion Find",
            "Queue",
            "Stack",
            "Priority Queue",
            "Union Find",
            "C\nStack\nQueue\nUnion Find\nPriority Queue ",
            "Stack",
            "Queue",
            "Union Find",
            "Priority Queue ",
            "D\nPriority Queue\nQueue\nStack\nUnion Find",
            "Priority Queue",
            "Queue",
            "Stack",
            "Union Find"
        ],
        "answer": "B\nQueue\nStack\nPriority Queue\nUnion Find"
    },
    {
        "question_number": "Question 5",
        "question_title": "Let G be an undirected graph. Consider a depth-first traversal of G, and let T be the resulting depth-first search tree. Let u be a vertex in G and let v be the first new (unvisited) vertex visited after visiting u in the traversal. Which of the following statements is always true? (GATE CS 2000)",
        "code": "",
        "choices": [
            "A\n{u,v} must be an edge in G, and u is a descendant of v in T",
            "B\n{u,v} must be an edge in G, and v is a descendant of u in T",
            "C\nIf {u,v} is not an edge in G then u is a leaf in T",
            "D\nIf {u,v} is not an edge in G then u and v must have the same parent in T"
        ],
        "answer": "C\nIf {u,v} is not an edge in G then u is a leaf in T"
    },
    {
        "question_number": "Question 7",
        "question_title": "Which of the following condition is sufficient to detect cycle in a directed graph?",
        "code": "",
        "choices": [
            "A\nThere is an edge from currently being visited node to an already visited node.",
            "B\nThere is an edge from currently being visited node to an ancestor of currently visited node in DFS forest.",
            "C\nEvery node is seen twice in DFS.",
            "D\nNone of the above"
        ],
        "answer": "B\nThere is an edge from currently being visited node to an ancestor of currently visited node in DFS forest."
    },
    {
        "question_number": "Question 8",
        "question_title": "Is following statement true/false If a DFS of a directed graph contains a back edge, any other DFS of the same graph will also contain at least one back edge.",
        "code": "",
        "choices": [
            "A\nTrue",
            "B\nFalse"
        ],
        "answer": "A\nTrue"
    },
    {
        "question_number": "Question 9",
        "question_title": "Make is a utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program. Which of the following standard graph algorithms is used by Make.",
        "code": "",
        "choices": [
            "A\nStrongly Connected Components",
            "B\nTopological Sorting",
            "C\nBreadth First Search",
            "D\nDijkstra\\'s Shortest Path"
        ],
        "answer": "B\nTopological Sorting"
    },
    {
        "question_number": "Question 10",
        "question_title": "Given two vertices in a graph s and t, which of the two traversals (BFS and DFS) can be used to find if there is path from s to t?",
        "code": "",
        "choices": [
            "A\nOnly BFS",
            "B\nOnly DFS",
            "C\nBoth BFS and DFS",
            "D\nNeither BFS nor DFS"
        ],
        "answer": "C\nBoth BFS and DFS"
    },
    {
        "question_number": "Question 11",
        "question_title": "Is the following statement true/false? A DFS of a directed graph always produces the same number of tree edges, i.e., independent of the order in which vertices are considered for DFS. ",
        "code": "",
        "choices": [
            "A\nTrue",
            "B\nFalse"
        ],
        "answer": "B\nFalse"
    },
    {
        "question_number": "Question 12",
        "question_title": "If the DFS finishing time f[u] > f[v] for two vertices u and v in a directed graph G, and u and v are in the same DFS tree in the DFS forest, then u is an ancestor of v in the depth-first tree.",
        "code": "",
        "choices": [
            "A\nTrue",
            "B\nFalse"
        ],
        "answer": "B\nFalse"
    },
    {
        "question_number": "Question 14",
        "question_title": "Let G be a graph with n vertices and m edges. What is the tightest upper bound on the running time on Depth First Search of G? Assume that the graph is represented using adjacency matrix.",
        "code": "",
        "choices": [
            "A\nO(n)",
            "B\nO(m+n)",
            "C\nO(n2)",
            "D\nO(mn)"
        ],
        "answer": "C\nO(n2)"
    },
    {
        "question_number": "Question 15",
        "question_title": "Consider the tree arcs of a BFS traversal from a source node W in an unweighted, connected, undirected graph. The tree T formed by the tree arcs is a data structure for computing.",
        "code": "",
        "choices": [
            "A\nthe shortest path between every pair of vertices.",
            "B\nthe shortest path from W to every vertex in the graph.",
            "C\nthe shortest paths from W to only those nodes that are leaves of T.",
            "D\nthe longest path in the graph"
        ],
        "answer": "B\nthe shortest path from W to every vertex in the graph."
    },
    {
        "question_number": "Question 17",
        "question_title": "",
        "code": "",
        "choices": [
            "A\nThere must exist a vertex w adjacent to both u and n in G",
            "B\nThere must exist a vertex w whose removal disconnects u and n in G",
            "C\nThere must exist a cycle in G containing u and n",
            "D\nThere must exist a cycle in G containing u and all its neighbours in G."
        ],
        "answer": "D\nThere must exist a cycle in G containing u and all its neighbours in G."
    },
    {
        "question_number": "Question 18",
        "question_title": "",
        "code": "",
        "choices": [
            "A\n{u,v} must be an edge in G, and u is a descendant of v in T",
            "B\n{u,v} must be an edge in G, and v is a descendant of u in T",
            "C\nIf {u,v} is not an edge in G then u is a leaf in T",
            "D\nIf {u,v} is not an edge in G then u and v must have the same parent in T"
        ],
        "answer": "C\nIf {u,v} is not an edge in G then u is a leaf in T"
    },
    {
        "question_number": "Question 19",
        "question_title": "",
        "code": "",
        "choices": [
            "A\nk",
            "B\nk + 1",
            "C\nn - k - 1",
            "D\nn - k"
        ],
        "answer": "D\nn - k"
    },
    {
        "question_number": "Question 21",
        "question_title": "In an adjacency list representation of an undirected simple graph G = (V, E), each edge (u, v) has two adjacency list entries: [v] in the adjacency list of u, and [u] in the adjacency list of v. These are called twins of each other. A twin pointer is a pointer from an adjacency list entry to its twin. If |E| = m and |V | = n, and the memory size is not a constraint, what is the time complexity of the most efficient algorithm to set the twin pointer in each entry in each adjacency list?",
        "code": "",
        "choices": [
            "A\nΘ(n2)",
            "B\nΘ(m+n)",
            "C\nΘ(m2)",
            "D\nΘ(n4)"
        ],
        "answer": "B\nΘ(m+n)"
    },
    {
        "question_number": "Question 22",
        "question_title": "Let G = (V, G) be a weighted undirected graph and let T be a Minimum Spanning Tree (MST) of G maintained using adjacency lists. Suppose a new weighed edge (u, v) ∈ V×V is added to G. The worst case time complexity of determining if T is still an MST of the resultant graph is",
        "code": "",
        "choices": [
            "A\nΘ(∣E∣ + ∣V∣)",
            "B\nΘ(∣E∣.∣V∣)",
            "C\nΘ(E∣ log ∣V∣)",
            "D\nΘ(∣V∣)"
        ],
        "answer": "D\nΘ(∣V∣)"
    },
    {
        "question_number": "Question 23",
        "question_title": "An articulation point in a connected graph is a vertex such that removing the vertex and its incident edges disconnects the graph into two or more connected components. ",
        "code": "",
        "choices": [
            "A\nRoot of T can never be an articulation point in G.",
            "B\nRoot of T is an articulation point in G if and only if it has 2 or more children.",
            "C\nA leaf of T can be an articulation point in G.",
            "D\nIf u is an articulation point in G such that x is an ancestor of u in T and y is a descendent of u in T, then all paths from x to y in G must pass through u."
        ],
        "answer": "B\nRoot of T is an articulation point in G if and only if it has 2 or more children."
    },
    {
        "question_number": "Question 26",
        "question_title": "Consider a complete binary tree with 7 nodes. Let A denote the set of first 3 elements obtained by performing Breadth-First Search (BFS) starting from the root. Let B denote the set of first 3 elements obtained by performing Depth-First Search (DFS) starting from the root. The value of ∣A−B∣ is _____________ .",
        "code": "",
        "choices": [
            "A\n1",
            "B\n2",
            "C\n3",
            "D\n4"
        ],
        "answer": "A\n1"
    },
    {
        "question_number": "Question 27",
        "question_title": "For a given graph G having v vertices and e edges which is connected and has no cycles, which of the following statements is true?",
        "code": "",
        "choices": [
            "A\nv= e-1",
            "B\ne= v-2",
            "C\nv=e+1",
            "D\nNone"
        ],
        "answer": "C\nv=e+1"
    },
    {
        "question_number": "Question 28",
        "question_title": "Which data structure is commonly used to implement the navigation system in a mapping application, helping users find the shortest route between locations?",
        "code": "",
        "choices": [
            "A\nHeap",
            "B\nStack",
            "C\nGraph",
            "D\nQueue"
        ],
        "answer": "C\nGraph"
    },
    {
        "question_number": "Question 30",
        "question_title": "Which of the following statement is correct?",
        "code": "",
        "choices": [
            "A\nP1 and P2",
            "B\nP1",
            "C\nP2",
            "D\nP1 and P3"
        ],
        "answer": "D\nP1 and P3"
    },
    {
        "question_number": "Question 1",
        "question_title": "Which of the following algorithms can be used to most efficiently determine the presence of a cycle in a given graph ?",
        "code": "",
        "choices": [
            "A\nDepth First Search",
            "B\nBreadth First Search",
            "C\nPrim\\'s Minimum Spanning Tree Algorithm",
            "D\nKruskal\\' Minimum Spanning Tree Algorithm"
        ],
        "answer": "A\nDepth First Search"
    },
    {
        "question_number": "Question 2",
        "question_title": "Traversal of a graph is different from tree because",
        "code": "",
        "choices": [
            "A\nThere can be a loop in graph so we must maintain a visited flag for every vertex",
            "B\nDFS of a graph uses stack, but inorder traversal of a tree is recursive",
            "C\nBFS of a graph uses queue, but a time efficient BFS of a tree is recursive.",
            "D\nAll of the above"
        ],
        "answer": "A\nThere can be a loop in graph so we must maintain a visited flag for every vertex"
    },
    {
        "question_number": "Question 3",
        "question_title": "What are the appropriate data structures for following algorithms?",
        "code": "",
        "choices": [
            "A\n Stack\n Queue\nPriority Queue\nUnion Find",
            " Stack",
            " Queue",
            "Priority Queue",
            "Union Find",
            "B\nQueue\nStack\nPriority Queue\nUnion Find",
            "Queue",
            "Stack",
            "Priority Queue",
            "Union Find",
            "C\nStack\nQueue\nUnion Find\nPriority Queue ",
            "Stack",
            "Queue",
            "Union Find",
            "Priority Queue ",
            "D\nPriority Queue\nQueue\nStack\nUnion Find",
            "Priority Queue",
            "Queue",
            "Stack",
            "Union Find"
        ],
        "answer": "B\nQueue\nStack\nPriority Queue\nUnion Find"
    },
    {
        "question_number": "Question 5",
        "question_title": "Let G be an undirected graph. Consider a depth-first traversal of G, and let T be the resulting depth-first search tree. Let u be a vertex in G and let v be the first new (unvisited) vertex visited after visiting u in the traversal. Which of the following statements is always true? (GATE CS 2000)",
        "code": "",
        "choices": [
            "A\n{u,v} must be an edge in G, and u is a descendant of v in T",
            "B\n{u,v} must be an edge in G, and v is a descendant of u in T",
            "C\nIf {u,v} is not an edge in G then u is a leaf in T",
            "D\nIf {u,v} is not an edge in G then u and v must have the same parent in T"
        ],
        "answer": "C\nIf {u,v} is not an edge in G then u is a leaf in T"
    },
    {
        "question_number": "Question 7",
        "question_title": "Which of the following condition is sufficient to detect cycle in a directed graph?",
        "code": "",
        "choices": [
            "A\nThere is an edge from currently being visited node to an already visited node.",
            "B\nThere is an edge from currently being visited node to an ancestor of currently visited node in DFS forest.",
            "C\nEvery node is seen twice in DFS.",
            "D\nNone of the above"
        ],
        "answer": "B\nThere is an edge from currently being visited node to an ancestor of currently visited node in DFS forest."
    },
    {
        "question_number": "Question 8",
        "question_title": "Is following statement true/false If a DFS of a directed graph contains a back edge, any other DFS of the same graph will also contain at least one back edge.",
        "code": "",
        "choices": [
            "A\nTrue",
            "B\nFalse"
        ],
        "answer": "A\nTrue"
    },
    {
        "question_number": "Question 9",
        "question_title": "Make is a utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program. Which of the following standard graph algorithms is used by Make.",
        "code": "",
        "choices": [
            "A\nStrongly Connected Components",
            "B\nTopological Sorting",
            "C\nBreadth First Search",
            "D\nDijkstra\\'s Shortest Path"
        ],
        "answer": "B\nTopological Sorting"
    },
    {
        "question_number": "Question 10",
        "question_title": "Given two vertices in a graph s and t, which of the two traversals (BFS and DFS) can be used to find if there is path from s to t?",
        "code": "",
        "choices": [
            "A\nOnly BFS",
            "B\nOnly DFS",
            "C\nBoth BFS and DFS",
            "D\nNeither BFS nor DFS"
        ],
        "answer": "C\nBoth BFS and DFS"
    },
    {
        "question_number": "Question 11",
        "question_title": "Is the following statement true/false? A DFS of a directed graph always produces the same number of tree edges, i.e., independent of the order in which vertices are considered for DFS. ",
        "code": "",
        "choices": [
            "A\nTrue",
            "B\nFalse"
        ],
        "answer": "B\nFalse"
    },
    {
        "question_number": "Question 12",
        "question_title": "If the DFS finishing time f[u] > f[v] for two vertices u and v in a directed graph G, and u and v are in the same DFS tree in the DFS forest, then u is an ancestor of v in the depth-first tree.",
        "code": "",
        "choices": [
            "A\nTrue",
            "B\nFalse"
        ],
        "answer": "B\nFalse"
    },
    {
        "question_number": "Question 14",
        "question_title": "Let G be a graph with n vertices and m edges. What is the tightest upper bound on the running time on Depth First Search of G? Assume that the graph is represented using adjacency matrix.",
        "code": "",
        "choices": [
            "A\nO(n)",
            "B\nO(m+n)",
            "C\nO(n2)",
            "D\nO(mn)"
        ],
        "answer": "C\nO(n2)"
    },
    {
        "question_number": "Question 15",
        "question_title": "Consider the tree arcs of a BFS traversal from a source node W in an unweighted, connected, undirected graph. The tree T formed by the tree arcs is a data structure for computing.",
        "code": "",
        "choices": [
            "A\nthe shortest path between every pair of vertices.",
            "B\nthe shortest path from W to every vertex in the graph.",
            "C\nthe shortest paths from W to only those nodes that are leaves of T.",
            "D\nthe longest path in the graph"
        ],
        "answer": "B\nthe shortest path from W to every vertex in the graph."
    },
    {
        "question_number": "Question 21",
        "question_title": "In an adjacency list representation of an undirected simple graph G = (V, E), each edge (u, v) has two adjacency list entries: [v] in the adjacency list of u, and [u] in the adjacency list of v. These are called twins of each other. A twin pointer is a pointer from an adjacency list entry to its twin. If |E| = m and |V | = n, and the memory size is not a constraint, what is the time complexity of the most efficient algorithm to set the twin pointer in each entry in each adjacency list?",
        "code": "",
        "choices": [
            "A\nΘ(n2)",
            "B\nΘ(m+n)",
            "C\nΘ(m2)",
            "D\nΘ(n4)"
        ],
        "answer": "B\nΘ(m+n)"
    },
    {
        "question_number": "Question 22",
        "question_title": "Let G = (V, G) be a weighted undirected graph and let T be a Minimum Spanning Tree (MST) of G maintained using adjacency lists. Suppose a new weighed edge (u, v) ∈ V×V is added to G. The worst case time complexity of determining if T is still an MST of the resultant graph is",
        "code": "",
        "choices": [
            "A\nΘ(∣E∣ + ∣V∣)",
            "B\nΘ(∣E∣.∣V∣)",
            "C\nΘ(E∣ log ∣V∣)",
            "D\nΘ(∣V∣)"
        ],
        "answer": "D\nΘ(∣V∣)"
    },
    {
        "question_number": "Question 23",
        "question_title": "An articulation point in a connected graph is a vertex such that removing the vertex and its incident edges disconnects the graph into two or more connected components. ",
        "code": "",
        "choices": [
            "A\nRoot of T can never be an articulation point in G.",
            "B\nRoot of T is an articulation point in G if and only if it has 2 or more children.",
            "C\nA leaf of T can be an articulation point in G.",
            "D\nIf u is an articulation point in G such that x is an ancestor of u in T and y is a descendent of u in T, then all paths from x to y in G must pass through u."
        ],
        "answer": "B\nRoot of T is an articulation point in G if and only if it has 2 or more children."
    },
    {
        "question_number": "Question 26",
        "question_title": "Consider a complete binary tree with 7 nodes. Let A denote the set of first 3 elements obtained by performing Breadth-First Search (BFS) starting from the root. Let B denote the set of first 3 elements obtained by performing Depth-First Search (DFS) starting from the root. The value of ∣A−B∣ is _____________ .",
        "code": "",
        "choices": [
            "A\n1",
            "B\n2",
            "C\n3",
            "D\n4"
        ],
        "answer": "A\n1"
    },
    {
        "question_number": "Question 27",
        "question_title": "For a given graph G having v vertices and e edges which is connected and has no cycles, which of the following statements is true?",
        "code": "",
        "choices": [
            "A\nv= e-1",
            "B\ne= v-2",
            "C\nv=e+1",
            "D\nNone"
        ],
        "answer": "C\nv=e+1"
    },
    {
        "question_number": "Question 28",
        "question_title": "Which data structure is commonly used to implement the navigation system in a mapping application, helping users find the shortest route between locations?",
        "code": "",
        "choices": [
            "A\nHeap",
            "B\nStack",
            "C\nGraph",
            "D\nQueue"
        ],
        "answer": "C\nGraph"
    },
    {
        "question_number": "Question 30",
        "question_title": "Which of the following statement is correct?",
        "code": "",
        "choices": [
            "A\nP1 and P2",
            "B\nP1",
            "C\nP2",
            "D\nP1 and P3"
        ],
        "answer": "D\nP1 and P3"
    }
]