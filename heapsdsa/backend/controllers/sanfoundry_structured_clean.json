[
  {
    "question_number": 1,
    "input_text": "Which of these best describes an array?\na) A data structure that shows a hierarchical behavior\nb) Container of objects of similar types\nc) Arrays are immutable once initialised\nd) Array is not a data structure\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "How do you initialize an array in C?\na) int arr[3] = (1,2,3);\nb) int arr(3) = {1,2,3};\nc) int arr[3] = {1,2,3};\nd) int arr(3) = (1,2,3);\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "How do you instantiate an array in Java?\na) int arr[] = new int(3);\nb) int arr[];\nc) int arr[] = new int[3];\nd) int arr() = new int(3);\n\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following is the correct way to declare a multidimensional array in Java?\na) int[] arr;\nb) int arr[[]];\nc) int[][]arr;\nd) int[[]] arr;\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What is the output of the following Java code?\n\npublic class array\n{\n public static void main(String args[])\n {\n  int []arr = {1,2,3,4,5};\n  System.out.println(arr[2]);\n  System.out.println(arr[4]);\n }\n}\n\na) 3 and 5\nb) 5 and 3\nc) 2 and 4\nd) 4 and 2\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "What is the output of the following Java code?\n\npublic class array\n{\n public static void main(String args[])\n {\n  int []arr = {1,2,3,4,5};\n  System.out.println(arr[5]);\n }\n}\n\na) 4\nb) 5\nc) ArrayIndexOutOfBoundsException\nd) InavlidInputException\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "When does the ArrayIndexOutOfBoundsException occur?\na) Compile-time\nb) Run-time\nc) Not an error\nd) Not an exception at all\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following concepts make extensive use of arrays?\na) Binary trees\nb) Scheduling of processes\nc) Caching\nd) Spatial locality\n\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "What are the advantages of arrays?\na) Objects of mixed data types can be stored\nb) Elements in an array cannot be sorted\nc) Index of first element of an array is 1\nd) Easier to store elements of same data type\n\n\nAnswer: d"
  },
  {
    "question_number": 10,
    "input_text": "What are the disadvantages of arrays?\na) Data structure like queue or stack cannot be implemented\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Index value of an array can be negative\nd) Elements are sequentially accessed\n\n\nAnswer: b"
  },
  {
    "question_number": 11,
    "input_text": "Assuming int is of 4bytes, what is the size of int arr[15];?\na) 15\nb) 19\nc) 11\nd) 60\n\n\nAnswer: d"
  },
  {
    "question_number": 12,
    "input_text": "In general, the index of the first element in an array is __________\na) 0\nb) -1\nc) 2\nd) 1\n\n\nAnswer: a"
  },
  {
    "question_number": 13,
    "input_text": "Elements in an array are accessed _____________\na) randomly\nb) sequentially\nc) exponentially\nd) logarithmically\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "The postfix form of the expression (A+ B)*(C*D- E)*F / G is?\na) AB+ CD*E – FG /**\nb) AB + CD* E – F **G /\nc) AB + CD* E – *F *G /\nd) AB + CDE * – * F *G /\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "The data structure required to check whether an expression contains a balanced parenthesis is?\na) Stack\nb) Queue\nc) Array\nd) Tree\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "What data structure would you most likely see in non recursive implementation of a recursive algorithm?\na) Linked List\nb) Stack\nc) Queue\nd) Tree\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "The process of accessing data stored in a serial access memory is similar to manipulating data on a ________\na) Heap\nb) Binary Tree\nc) Array\nd) Stack\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "The postfix form of A*B+C/D is?\na) *AB/CD+\nb) AB*CD/+\nc) A*BC+/D\nd) ABCD+/*\n\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "Which data structure is needed to convert infix notation to postfix notation?\na) Branch\nb) Tree\nc) Queue\nd) Stack\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "The prefix form of A-B/ (C * D ^ E) is?\na) -/*^ACBDE\nb) -ABCD*^DE\nc) -A/B*C^DE\nd) -A/BC*^DE\n\n\nAnswer: c"
  },
  {
    "question_number": 8,
    "input_text": "What is the result of the following operation?\nTop (Push (S, X))\na) X\nb) X+S\nc) S\nd) XS\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "The prefix form of an infix expression (p + q) – (r * t) is?\na) + pq – *rt\nb) – +pqr * t\nc) – +pq * rt\nd) – + * pqrt\n\n\nAnswer: c"
  },
  {
    "question_number": 10,
    "input_text": "Which data structure is used for implementing recursion?\na) Queue\nb) Stack\nc) Array\nd) List\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "The result of evaluating the postfix expression 5, 4, 6, +, *, 4, 9, 3, /, +, * is?\na) 600\nb) 350\nc) 650\nd) 588\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "Convert the following infix expressions into its equivalent postfix expressions.\n(A + B ⋀D)/(E – F)+G\na) (A B D ⋀ + E F – / G +)\nb) (A B D +⋀ E F – / G +)\nc) (A B D ⋀ + E F/- G +)\nd) (A B D E F + ⋀ / – G +)\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Convert the following Infix expression to Postfix form using a stack.\nx + y * z + (p * q + r) * s, Follow usual precedence rule and assume that the expression is legal.\na) xyz*+pq*r+s*+\nb) xyz*+pq*r+s+*\nc) xyz+*pq*r+s*+\nd) xyzp+**qr+s*+\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following statement(s) about stack data structure is/are NOT correct?\na) Linked List are used for implementing Stacks\nb) Top of the Stack always contain the new node\nc) Stack is the FIFO data structure\nd) Null link is present in the last node at the bottom of the stack\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "Consider the following operation performed on a stack of size 5.\n\nPush(1);\nPop();\nPush(2);\nPush(3);\nPop();\nPush(4);\nPop();\nPop();\nPush(5);\n\nAfter the completion of all operation, the number of elements present in stack is?\na) 1\nb) 2\nc) 3\nd) 4\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following is not an inherent application of stack?\na) Reversing a string\nb) Evaluation of postfix expression\nc) Implementation of recursion\nd) Job scheduling\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "The type of expression in which operator succeeds its operands is?\na) Infix Expression\nb) Prefix Expression\nc) Postfix Expression\nd) Both Prefix and Postfix Expressions\n\n\nAnswer: c"
  },
  {
    "question_number": 8,
    "input_text": "Assume that the operators +,-, x are left associative and ^ is right associative. The order of precedence (from highest to lowest) is ^, x, +, -. The postfix expression for the infix expression a + b x c – d ^ e ^ f is?\na) a b c x + d e f ^ ^ –\nb) a b c x + d e ^ f ^ –\nc) a b + c x d – e ^ f ^\nd) – + a x b c ^ ^ d e f\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "If the elements “A”, “B”, “C” and “D” are placed in a stack and are deleted one at a time, what is the order of removal?\na) ABCD\nb) DCBA\nc) DCAB\nd) ABDC\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as _____________\na) Queue\nb) Stack\nc) Tree\nd) Linked list\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "The data structure required for Breadth First Traversal on a graph is?\na) Stack\nb) Array\nc) Queue\nd) Tree\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "A queue follows __________\na) FIFO (First In First Out) principle\nb) LIFO (Last In First Out) principle\nc) Ordered array\nd) Linear tree\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Circular Queue is also known as ________\na) Ring Buffer\nb) Square Buffer\nc) Rectangle Buffer\nd) Curve Buffer\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "If the elements “A”, “B”, “C” and “D” are placed in a queue and are deleted one at a time, in what order will they be removed?\na) ABCD\nb) DCBA\nc) DCAB\nd) ABDC\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?\na) Queue\nb) Circular queue\nc) Dequeue\nd) Priority queue\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "A normal queue, if implemented using an array of size MAX_SIZE, gets full when?\na) Rear = MAX_SIZE – 1\nb) Front = (rear + 1)mod MAX_SIZE\nc) Front = rear + 1\nd) Rear = front\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Queues serve major role in ______________\na) Simulation of recursion\nb) Simulation of arbitrary linked list\nc) Simulation of limited resource allocation\nd) Simulation of heap sort\n\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following is not the type of queue?\na) Ordinary queue\nb) Single ended queue\nc) Circular queue\nd) Priority queue\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "A linear collection of data elements where the linear node is given by means of pointer is called?\na) Linked list\nb) Node list\nc) Primitive list\nd) Unordered list\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "Consider an implementation of unsorted singly linked list. Suppose it has its representation with a head pointer only. Given the representation, which of the following operation can be implemented in O(1) time?\n\na) I and II\nb) I and III\nc) I, II and III\nd) I, II and IV\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "In linked list each node contains a minimum of two fields. One field is data field to store the data second field is?\na) Pointer to character\nb) Pointer to integer\nc) Pointer to node\nd) Node\n\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\na) O(1)\nb) O(n)\nc) θ(n)\nd) Both O(n) and θ(n)\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "What would be the asymptotic time complexity to insert an element at the front of the linked list (head is known)?\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3)\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "What would be the asymptotic time complexity to find an element in the linked list?\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n4)\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "What would be the asymptotic time complexity to insert an element at the second position in the linked list?\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3)\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "The concatenation of two lists can be performed in O(1) time. Which of the following variation of the linked list can be used?\na) Singly linked list\nb) Doubly linked list\nc) Circular doubly linked list\nd) Array implementation of list\n\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "Consider the following definition in c programming language.\n\nstruct node\n{\n    int data;\n    struct node * next;\n}\ntypedef struct node NODE;\nNODE *ptr;\n\nWhich of the following c code is used to create new node?\na) ptr = (NODE*)malloc(sizeof(NODE));\nb) ptr = (NODE*)malloc(NODE);\nc) ptr = (NODE*)malloc(sizeof(NODE*));\nd) ptr = (NODE)malloc(sizeof(NODE));\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "What kind of linked list is best to answer questions like “What is the item at position n?”\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Array implementation of linked list\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "Linked lists are not suitable for the implementation of ___________\na) Insertion sort\nb) Radix sort\nc) Polynomial manipulation\nd) Binary search\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "Linked list is considered as an example of ___________ type of memory allocation.\na) Dynamic\nb) Static\nc) Compile time\nd) Heap\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "In Linked List implementation, a node carries information regarding ___________\na) Data\nb) Link\nc) Data and Link\nd) Node\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "Linked list data structure offers considerable saving in _____________\na) Computational Time\nb) Space Utilization\nc) Space Utilization and Computational Time\nd) Speed Utilization\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following points is/are not true about Linked List data structure when it is compared with an array?\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) Access of elements in linked list takes less time than compared to arrays\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "What does the following function do for a given Linked List with first node as head?\n\nvoid fun1(struct node* head)\n{\n    if(head == NULL)\n    return;\n    fun1(head->next);\n    printf(\"%d  \", head->data);\n}\n\na) Prints all nodes of linked lists\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following sorting algorithms can be used to sort a random linked list with minimum time complexity?\na) Insertion Sort\nb) Quick Sort\nc) Heap Sort\nd) Merge Sort\n\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "What kind of linked list is best to answer questions like “What is the item at position n?”\na) Singly linked list\nb) Doubly linked list\nc) Circular linked list\nd) Array implementation of linked list\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "Linked lists are not suitable for the implementation of ___________\na) Insertion sort\nb) Radix sort\nc) Polynomial manipulation\nd) Binary search\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "Linked list is considered as an example of ___________ type of memory allocation.\na) Dynamic\nb) Static\nc) Compile time\nd) Heap\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "In Linked List implementation, a node carries information regarding ___________\na) Data\nb) Link\nc) Data and Link\nd) Node\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "Linked list data structure offers considerable saving in _____________\na) Computational Time\nb) Space Utilization\nc) Space Utilization and Computational Time\nd) Speed Utilization\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following points is/are not true about Linked List data structure when it is compared with an array?\na) Arrays have better cache locality that can make them better in terms of performance\nb) It is easy to insert and delete elements in Linked List\nc) Random access is not allowed in a typical implementation of Linked Lists\nd) Access of elements in linked list takes less time than compared to arrays\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "What does the following function do for a given Linked List with first node as head?\n\nvoid fun1(struct node* head)\n{\n    if(head == NULL)\n    return;\n    fun1(head->next);\n    printf(\"%d  \", head->data);\n}\n\na) Prints all nodes of linked lists\nb) Prints all nodes of linked list in reverse order\nc) Prints alternate nodes of Linked List\nd) Prints alternate nodes in reverse order\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following sorting algorithms can be used to sort a random linked list with minimum time complexity?\na) Insertion Sort\nb) Quick Sort\nc) Heap Sort\nd) Merge Sort\n\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "Express -15 as a 6-bit signed binary number.\na) 001111\nb) 101111\nc) 101110\nd) 001110\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following code snippet is used to convert decimal to binary numbers?\na)\n\npublic void convertBinary(int num)\n{\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n       bin[index++] = num%2;\n       num = num/2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n       System.out.print(bin[i]);\n     }\n}\npublic void convertBinary(int num)\n{\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n       bin[++index] = num%2;\n       num = num/2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n       System.out.print(bin[i]);\n     }\n}\npublic void convertBinary(int num)\n{\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n         bin[index++] = num/2;\n         num = num%2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n         System.out.print(bin[i]);\n     }\n}\npublic void convertBinary(int num)\n {\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n         bin[++index] = num/2;\n         num = num%2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n         System.out.print(bin[i]);\n     }\n  }\n\nd)\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "Using stacks, how to obtain the binary representation of the number?\na)\n\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num / 2;\n        stack.push(digit);\n        num = num % 2;\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num % 2;\n        stack.push(digit);\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num % 2;\n        stack.push(digit);\n        num = num / 2;\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num % 2;\n        stack.push(digit%2);\n        num = num / 2;\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\n\nd)\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "Write a piece of code which returns true if the string contains balanced parenthesis, false otherwise.\na)\n\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() == null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n}\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n            {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() != null)\n                        {\n    return true;\n   }\n   stk.pop();\n  }\n }\n return false;\n  }\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n        char ch = exp.charAt(i);\n               if (ch == ')')\n               stk.push(i);\n               else if (ch == '(')\n               {\n   if(stk.peek() == null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n}\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() != null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n  }\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() == null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n}\n\na) O(logn)\nb) O(n)\nc) O(1)\nd) O(nlogn)\n\nAnswer: b"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following program prints the index of every matching parenthesis?\na)\n\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == '(')\n        stk.push(i);\n        else if (ch == ')')\n        {\n          try\n          {\n            int p = stk.pop() + 1;\n            System.out.println(\"')' at index \"+(i+1)+\" matched with ')' at index \"+p);\n          }\n          catch(Exception e)\n          {\n             System.out.println(\"')' at index \"+(i+1)+\" is unmatched\");\n          }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == '(')\n        stk.push(i);\n        else if (ch == ')')\n        {\n           try\n           {\n             int p = stk.pop() + 1;\n             System.out.println(\"')' at index \"+(i)+\" matched with ')' at index \"+p);\n           }\n           catch(Exception e)\n           {\n              System.out.println(\"')' at index \"+(i)+\" is unmatched\");\n           }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == ')')\n        stk.push(i);\n        else if (ch == '(')\n        {\n          try\n          {\n            int p = stk.pop() +1;\n            System.out.println(\"')' at index \"+(i+1)+\" matched with ')' at index \"+p);\n          }\n          catch(Exception e)\n          {\n             System.out.println(\"')' at index \"+(i+1)+\" is unmatched\");\n          }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == ')')\n        stk.push(i);\n        else if (ch == '(')\n        {\n          try\n          {\n            int p = stk.pop();\n            System.out.println(\"')' at index \"+(i+1)+\" matched with ')' at index \"+p);\n          }\n          catch(Exception e)\n          {\n            System.out.println(\"')' at index \"+(i+1)+\" is unmatched\");\n          }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following is not a disadvantage to the usage of array?\na) Fixed size\nb) There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size\nc) Insertion based on position\nd) Accessing elements at specified positions\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "What is the time complexity of inserting at the end in dynamic arrays?\na) O(1)\nb) O(n)\nc) O(logn)\nd) Either O(1) or O(n)\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "What is the time complexity to count the number of elements in the linked list?\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(n2)\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following performs deletion of the last element in the list? Given below is the Node class.\n\nclass Node\n{\n protected Node next;\n protected Object ele;\n Node(Object e,Node n)\n {\n  ele = e;\n  next = n;\n }\n public void setNext(Node n)\n {\n  next = n;\n }\n public void setEle(Object e)\n {\n  ele = e;\n }\n public Node getNext()\n {\n  return next;\n }\n public Object getEle()\n {\n  return ele;\n }\n}\nclass SLL \n{\n Node head;\n int size;\n SLL()\n {\n  size = 0;\n }\n}\npublic Node removeLast()\n{\n if(size == 0)\n return null;\n Node cur;\n Node temp;\n cur = head;\n while(cur.getNext() != null)\n {\n   temp = cur;\n   cur = cur.getNext();\n        }\n temp.setNext(null);\n size--;\n return cur;\n}\npublic void removeLast()\n{\n if(size == 0)\n return null;\n Node cur;\n Node temp;\n cur = head;\n while(cur != null)\n {\n  temp = cur;\n  cur = cur.getNext();\n        }\n temp.setNext(null);\n return cur;\n}\npublic void removeLast()\n{\n if(size == 0)\n     return null;\n Node cur;\n Node temp;\n cur = head;\n while(cur != null)\n {\n  cur = cur.getNext();\n  temp = cur;\n  }\n temp.setNext(null);\n return cur;\n}\npublic void removeLast()\n{\n if(size == 0)\n  return null;\n Node cur;\n Node temp;\n cur = head;\n while(cur.getNext() != null)\n {\n  cur = cur.getNext();\n  temp = cur;\n }\n temp.setNext(null);\n return cur;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "What is the functionality of the following code?\n\npublic void function(Node node)\n{\n if(size == 0)\n  head = node;\n else\n {\n  Node temp,cur;\n  for(cur = head; (temp = cur.getNext())!=null; cur = temp);\n  cur.setNext(node);\n }\n size++;\n}\n\na) Inserting a node at the beginning of the list\nb) Deleting a node at the beginning of the list\nc) Inserting a node at the end of the list\nd) Deleting a node at the end of the list\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "What is the space complexity for deleting a linked list?\na) O(1)\nb) O(n)\nc) Either O(1) or O(n)\nd) O(logn)\n\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "How would you delete a node in the singly linked list? The position to be deleted is given.\na)\n\npublic void delete(int pos)\n{\n if(pos < 0)\n pos = 0;\n if(pos > size)\n pos = size;\n if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=1; i<pos; i++)\n            {\n  temp = temp.getNext();\n            }\n     temp.setNext(temp.getNext().getNext());\n }\n     size--;\n}\npublic void delete(int pos)\n{\n if(pos < 0)\n pos = 0;\n if(pos > size)\n pos = size;\n if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=1; i<pos; i++)\n     {\n  temp = temp.getNext();\n     }\n     temp.setNext(temp.getNext());\n }\n     size--;\n}\npublic void delete(int pos)\n{\n        if(pos < 0)\n pos = 0;\n if(pos > size)\n pos = size;\n if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=1; i<pos; i++)\n     {\n  temp = temp.getNext().getNext();\n            }\n     temp.setNext(temp.getNext().getNext());\n }\n     size--;\n}\npublic void delete(int pos)\n{\n        if(pos < 0)\n        pos = 0;\n        if(pos > size)\n        pos = size;\n        if( size == 0)\n return;\n if(pos == 0)\n head = head.getNext();\n else\n {\n     Node temp = head;\n     for(int i=0; i<pos; i++)\n     {\n  temp = temp.getNext();\n     }\n     temp.setNext(temp.getNext().getNext());\n }\n size--;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Which of these is not an application of a linked list?\na) To implement file systems\nb) For separate chaining in hash-tables\nc) To implement non-binary trees\nd) Random Access of elements\n\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following piece of code has the functionality of counting the number of elements in the list?\na)\n\npublic int length(Node head)\n{\n int size = 0;\n Node cur = head;\n while(cur!=null)\n {\n     size++;\n     cur = cur.getNext();\n }\n return size;\n}\npublic int length(Node head)\n{\n        int size = 0;\n Node cur = head;\n while(cur!=null)\n {\n     cur = cur.getNext();\n     size++;\n }\n return size;\n}\npublic int length(Node head)\n{\n int size = 0;\n Node cur = head;\n while(cur!=null)\n {\n     size++;\n     cur = cur.getNext();\n }\n}\npublic int length(Node head)\n{\n int size = 0;\n Node cur = head;\n while(cur!=null)\n {\n     size++;\n     cur = cur.getNext().getNext();\n }\n return size;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "How do you insert an element at the beginning of the list?\na)\n\npublic void insertBegin(Node node)\n{\n node.setNext(head);\n head = node;\n size++;\n}\npublic void insertBegin(Node node)\n{\n head = node;\n node.setNext(head);\n size++;\n}\npublic void insertBegin(Node node)\n{\n Node temp = head.getNext()\n node.setNext(temp);\n head = node;\n size++;\n}\npublic void insertBegin(Node node)\n{\n Node temp = head.getNext()\n node.setNext(temp);\n node = head;\n size++;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "What is the functionality of the following piece of code?\n\npublic int function(int data)\n{\n Node temp = head;\n int var = 0;\n while(temp != null)\n {\n  if(temp.getData() == data)\n  {\n   return var;\n  }\n  var = var+1;\n  temp = temp.getNext();\n }\n return Integer.MIN_VALUE;\n}\n\na) Find and delete a given element in the list\nb) Find and return the given element in the list\nc) Find and return the position of the given element in the list\nd) Find and insert a new element in the list\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following is false about a doubly linked list?\na) We can navigate in both the directions\nb) It requires more space than a singly linked list\nc) The insertion and deletion of a node take a bit longer\nd) Implementing a doubly linked list is easier than singly linked list\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "Given the Node class implementation, select one of the following that correctly inserts a node at the tail of the list.\n\npublic class Node\n{\n protected int data;\n protected Node prev;\n protected Node next;\n public Node(int data)\n {\n  this.data = data;\n  prev = null;\n  next = null;\n }\n public Node(int data, Node prev, Node next)\n {\n  this.data = data;\n  this.prev = prev;\n  this.next = next;\n }\n public int getData()\n {\n  return data;\n }\n public void setData(int data)\n {\n  this.data = data;\n }\n public Node getPrev()\n {\n  return prev;\n }\n public void setPrev(Node prev)\n {\n  this.prev = prev;\n }\n public Node getNext\n {\n  return next;\n }\n public void setNext(Node next)\n {\n  this.next = next;\n }\n}\npublic class DLL\n{\n protected Node head;\n protected Node tail;\n int length;\n public DLL()\n {\n  head = new Node(Integer.MIN_VALUE,null,null);\n  tail = new Node(Integer.MIN_VALUE,null,null);\n  head.setNext(tail);\n  length = 0;\n }\n}\npublic void insertRear(int data)\n{\n Node node = new Node(data,tail.getPrev(),tail);\n node.getPrev().setNext(node);\n tail.setPrev(node);\n length++;\n}\npublic void insertRear(int data)\n{\n Node node = new Node(data,tail.getPrev(),tail);\n node.getPrev().getPrev().setNext(node);\n tail.setPrev(node);\n length++;\n}\npublic void insertRear(int data)\n{\n Node node = new Node(data,tail.getPrev(),tail);\n node.getPrev().setNext(tail);\n tail.setPrev(node);\n length++;\n}\npublic void insertRear(int data)\n{\n Node node = new Node(data,head,tail);\n node.getPrev().setNext(node);\n tail.setPrev(node);\n length++;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "What is a memory efficient double linked list?\na) Each node has only one pointer to traverse the list back and forth\nb) The list has breakpoints for faster traversal\nc) An auxiliary singly linked list acts as a helper list to traverse through the doubly linked list\nd) A doubly linked list that uses bitwise AND operator for storing addresses\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following piece of code removes the node from a given position?\na)\n\npublic void remove(int pos)\n{\n if(pos<0 || pos>=size)\n {\n  System.out.println(\"Invalid position\");\n  return;\n }\n else\n {\n  if(head == null)\n   return;\n  if(pos == 0)\n  {\n   head = head.getNext();\n   if(head == null)\n   tail = null;\n  }\n         else\n         {\n   Node temp = head;\n   for(int i=1; i<position; i++)\n   temp = temp.getNext();\n  }\n  temp.getNext().setPrev(temp.getPrev());\n  temp.getPrev().setNext(temp.getNext());\n }\n size--;\n}\npublic void remove(int pos)\n{\n if(pos<0 || pos>=size)\n {\n  System.out.println(\"Invalid position\");\n  return;\n }\n else\n {\n  if(head == null)\n  return;\n  if(pos == 0)\n  {\n   head = head.getNext();\n   if(head == null)\n   tail = null;\n  }\n  else\n  {\n   Node temp = head;\n   for(int i=1; i<position; i++)\n   temp = temp.getNext();\n  }\n  temp.getNext().setPrev(temp.getNext());\n  temp.getPrev().setNext(temp.getPrev());\n }\n size--;\n}\npublic void remove(int pos)\n{\n if(pos<0 || pos>=size)\n {\n  System.out.println(\"Invalid position\");\n  return;\n }\n else\n {\n  if(head == null)\n   return;\n  if(pos == 0)\n  {\n   head = head.getNext();\n   if(head == null)\n   tail = null;\n  }\n  else\n  {\n   Node temp = head;\n   for(int i=1; i<position; i++)\n   temp = temp.getNext().getNext();\n  }\n  temp.getNext().setPrev(temp.getPrev());\n  temp.getPrev().setNext(temp.getNext());\n }\n size--;\n}\npublic void remove(int pos)\n{\n if(pos<0 || pos>=size)\n {\n  System.out.println(\"Invalid position\");\n  return;\n }\n else\n {\n  if(head == null)\n   return;\n  if(pos == 0)\n  {\n   head = head.getNext();\n   if(head == null)\n   tail = null;\n  }\n  else\n  {\n   Node temp = head;\n   for(int i=1; i<position; i++)\n   temp = temp.getNext().getNext();\n  }\n  temp.getNext().setPrev(temp.getNext());\n  temp.getPrev().setNext(temp.getPrev());\n }\n size--;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "How do you calculate the pointer difference in a memory efficient double linked list?\na) head xor tail\nb) pointer to previous node xor pointer to next node\nc) pointer to previous node – pointer to next node\nd) pointer to next node – pointer to previous node\n\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "What is the worst case time complexity of inserting a node in a doubly linked list?\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(1)\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "How do you insert a node at the beginning of the list?\na)\n\npublic class insertFront(int data)\n{\n Node node = new Node(data, head, head.getNext());\n node.getNext().setPrev(node);\n head.setNext(node);\n size++;\n}\npublic class insertFront(int data)\n{\n Node node = new Node(data, head, head);\n node.getNext().setPrev(node);\n head.setNext(node);\n size++;\n}\npublic class insertFront(int data)\n{\n Node node = new Node(data, head, head.getNext());\n node.getNext().setPrev(head);\n head.setNext(node);\n size++;\n}\npublic class insertFront(int data)\n{\n Node node = new Node(data, head, head.getNext());\n node.getNext().setPrev(node);\n head.setNext(node.getNext());\n size++;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Consider the following doubly linked list: head-1-2-3-4-5-tail. What will be the list after performing the given sequence of operations?\n\na) head-0-1-2-3-4-5-6-tail\nb) head-1-2-3-4-5-6-tail\nc) head-6-1-2-3-4-5-0-tail\nd) head-0-1-2-3-4-5-tail\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "What is the functionality of the following piece of code?\n\npublic int function()\n{\n Node temp = tail.getPrev();\n tail.setPrev(temp.getPrev());\n temp.getPrev().setNext(tail);\n size--;\n return temp.getItem();\n}\n\na) Return the element at the tail of the list but do not remove it\nb) Return the element at the tail of the list and remove it from the list\nc) Return the last but one element from the list but do not remove it\nd) Return the last but one element at the tail of the list and remove it from the list\n\nAnswer: d"
  },
  {
    "question_number": 10,
    "input_text": "Consider the following doubly linked list: head-1-2-3-4-5-tail. What will be the list after performing the given sequence of operations?\n\na) head-6-1-2-3-4-5-tail\nb) head-6-1-2-3-4-tail\nc) head-1-2-3-4-5-6-tail\nd) head-1-2-3-4-5-tail\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "What differentiates a circular linked list from a normal linked list?\na) You cannot have the ‘next’ pointer point to null in a circular linked list\nb) It is faster to traverse the circular linked list\nc) In a circular linked list, each node points to the previous node instead of the next node\nd) Head node is known in circular linked list\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "How do you count the number of elements in the circular linked list?\na)\n\npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != null)\n {\n  temp = temp.getNext();\n  length++;\n }\n return length;\n}\npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp != null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\npublic int length(Node head)\n{\n int length = 0;\n if( head == null)\n  return 0;\n Node temp = head.getNext();\n while(temp != head && temp == null)\n {\n  temp = head.getNext();\n  length++;\n }\n return length;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "What is the functionality of the following piece of code? Select the most appropriate.\n\npublic void function(int data)\n{\n int flag = 0;\n if( head != null)\n {\n  Node temp = head.getNext();\n  while((temp != head) && (!(temp.getItem() == data)))\n  {\n   temp = temp.getNext();\n   flag = 1;\n   break;\n  }\n }\n if(flag)\n  System.out.println(\"success\");\n else\n  System.out.println(\"fail\");\n}\n\na) Print success if a particular element is not found\nb) Print fail if a particular element is not found\nc) Print success if a particular element is equal to 1\nd) Print fail if the list is empty\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "What is the time complexity of searching for an element in a circular linked list?\na) O(n)\nb) O(nlogn)\nc) O(1)\nd) O(n2)\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following application makes use of a circular linked list?\na) Undo operation in a text editor\nb) Recursive function calls\nc) Allocating CPU to resources\nd) Implement Hash Tables\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "Choose the code snippet which inserts a node to the head of the list?\na)\n\npublic void insertHead(int data)\n{\n Node temp = new Node(data);\n Node cur = head;\n while(cur.getNext() != head)\n  cur = cur.getNext()\n if(head == null)\n {\n  head = temp;\n  head.setNext(head);\n }\n else\n {\n  temp.setNext(head);\n  head = temp;\n  cur.setNext(temp);\n }\n size++;\n}\npublic void insertHead(int data)\n{\n Node temp = new Node(data);\n while(cur != head)\n  cur = cur.getNext()\n if(head == null)\n {\n  head = temp;\n  head.setNext(head);\n }\n else\n {\n  temp.setNext(head.getNext());\n  cur.setNext(temp);\n }\n size++;\n}\npublic void insertHead(int data)\n{\n Node temp = new Node(data);\n if(head == null)\n {\n  head = temp;\n  head.setNext(head);\n }\n else\n {\n  temp.setNext(head.getNext());\n  head = temp;\n }\n size++;\n}\npublic void insertHead(int data)\n{\n Node temp = new Node(data);\n if(head == null)\n {\n  head = temp;\n  head.setNext(head.getNext());\n }\n else\n {\n  temp.setNext(head.getNext());\n  head = temp;\n }\n size++;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "What is the functionality of the following code? Choose the most appropriate answer.\n\npublic int function()\n{\n if(head == null)\n  return Integer.MIN_VALUE;\n int var;\n Node temp = head;\n while(temp.getNext() != head)\n  temp = temp.getNext();\n if(temp == head)\n {\n  var = head.getItem();\n  head = null;\n  return var;\n }\n temp.setNext(head.getNext());\n var = head.getItem();\n head = head.getNext();\n return var;\n}\n\na) Return data from the end of the list\nb) Returns the data and deletes the node at the end of the list\nc) Returns the data from the beginning of the list\nd) Returns the data and deletes the node from the beginning of the list\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "What is the functionality of the following code? Choose the most appropriate answer.\n\npublic int function()\n{\n if(head == null)\n  return Integer.MIN_VALUE;\n int var;\n Node temp = head;\n Node cur;\n while(temp.getNext() != head)\n {\n  cur = temp;\n  temp = temp.getNext();\n }\n if(temp == head)\n {\n  var = head.getItem();\n  head = null;\n  return var;\n }\n var = temp.getItem();\n cur.setNext(head);\n return var;\n}\n\na) Return data from the end of the list\nb) Returns the data and deletes the node at the end of the list\nc) Returns the data from the beginning of the list\nd) Returns the data and deletes the node from the beginning of the list\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following is false about a circular linked list?\na) Every node has a successor\nb) Time complexity of inserting a new node at the head of the list is O(1)\nc) Time complexity for deleting the last node is O(n)\nd) We can traverse the whole circular linked list by starting from any point\n\n\nAnswer: b"
  },
  {
    "question_number": 10,
    "input_text": "Consider a small circular linked list. How to detect the presence of cycles in this list effectively?\na) Keep one node as head and traverse another temp node till the end to check if its ‘next points to head\nb) Have fast and slow pointers with the fast pointer advancing two nodes at a time and slow pointer advancing by one node at a time\nc) Cannot determine, you have to pre-define if the list contains cycles\nd) Circular linked list itself represents a cycle. So no new cycles cannot be generated\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following real world scenarios would you associate with a stack data structure?\na) piling up of chairs one above the other\nb) people standing in a line to be serviced at a counter\nc) offer services based on the priority of the customer\nd) tatkal Ticket Booking in IRCTC\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "What does the following function check for? (all necessary headers to be included and function is called from main)\n\n#define MAX 10\n \ntypedef struct stack\n{\n    int top;\n    int item[MAX];\n}stack;\n \nint function(stack *s)\n{\n    if(s->top == -1)\n        return 1;\n    else return 0;\n}\n\na) full stack\nb) invalid index\nc) empty stack\nd) infinite stack\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "What does ‘stack underflow’ refer to?\na) accessing item from an undefined stack\nb) adding items to a full stack\nc) removing items from an empty stack\nd) index out of bounds exception\n\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "What is the output of the following program?\n\npublic class Stack\n{\n protected static final int CAPACITY = 100;\n protected int size,top = -1;\n protected Object stk[];\n \n public Stack()\n {\n  stk = new Object[CAPACITY];\n }\n \n public void push(Object item)\n {\n  if(size_of_stack==size)\n  {\n   System.out.println(\"Stack overflow\");\n    return;\n  }\n  else\n  {\n   top++;\n   stk[top]=item;\n  }\n }\n public Object pop()\n {\n  if(top<0)\n  {\n   return -999;\n  }\n  else\n  {\n   Object ele=stk[top];\n   top--;\n   size_of_stack--;\n   return ele;\n  }\n }\n}\n \npublic class StackDemo\n{\n public static void main(String args[])\n {\n  Stack myStack = new Stack();\n  myStack.push(10);\n  Object element1 = myStack.pop();\n  Object element2 = myStack.pop();\n  System.out.println(element2);\n }\n}\n\na) stack is full\nb) 20\nc) 0\nd) -999\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "What is the time complexity of pop() operation when the stack is implemented using an array?\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(nlogn)\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following array position will be occupied by a new element being pushed for a stack of size N elements(capacity of stack > N)?\na) S[N-1]\nb) S[N]\nc) S[1]\nd) S[0]\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "What happens when you pop from an empty stack while implementing using the Stack ADT in Java?\na) Undefined error\nb) Compiler displays a warning\nc) EmptyStackException is thrown\nd) NoStackException is thrown\n\n\nAnswer: c"
  },
  {
    "question_number": 8,
    "input_text": "What is the functionality of the following piece of Java code?\nAssume: ‘a’ is a non empty array of integers, the Stack class creates an array of specified size and provides a top pointer indicating TOS(top of stack), push and pop have normal meaning.\n\npublic void some_function(int[] a)\n{\n Stack S=new Stack(a.length);\n int[] b=new int[a.length];\n for(int i=0;i<a.length;i++)\n {\n  S.push(a[i]);\n }\n for(int i=0;i<a.length;i++)\n {\n  b[i]=(int)(S.pop());\n }\n System.out.println(\"output :\");\n for(int i=0;i<b.length;i++)\n {\n  System.out.println(b[i]);\n }\n}\n\na) print alternate elements of array\nb) duplicate the given array\nc) parentheses matching\nd) reverse the array\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "Array implementation of Stack is not dynamic, which of the following statements supports this argument?\na) space allocation for array is fixed and cannot be changed during run-time\nb) user unable to give the input for stack operations\nc) a runtime exception halts execution\nd) improper program compilation\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "Which of the following array element will return the top-of-the-stack-element for a stack of size N elements(capacity of stack > N)?\na) S[N-1]\nb) S[N]\nc) S[N-2]\nd) S[N+1]\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "What is the best case time complexity of deleting a node in a Singly Linked list?\na) O (n)\nb) O (n2)\nc) O (nlogn)\nd) O (1)\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following statements are not correct with respect to Singly Linked List(SLL) and Doubly Linked List(DLL)?\na) Complexity of Insertion and Deletion at known position is O(n) in SLL and O(1) in DLL\nb) SLL uses lesser memory per node than DLL\nc) DLL has more searching power than SLL\nd) Number of node fields in SLL is more than DLL\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "Given below is the Node class to perform basic list operations and a Stack class with a no arg constructor.\nSelect from the options the appropriate pop() operation that can be included in the Stack class. Also ‘first’ is the top-of-the-stack.\n\nclass Node\n{\n protected Node next;\n protected Object ele;\n Node()\n {\n  this(null,null);\n }\n Node(Object e,Node n)\n {\n  ele=e;\n  next=n;\n }\n public void setNext(Node n)\n {\n  next=n;\n }\n public void setEle(Object e)\n {\n  ele=e;\n }\n public Node getNext()\n {\n  return next;\n }\n public Object getEle()\n {\n  return ele;\n }\n}\n \nclass Stack\n{\n Node first;\n int size=0;\n Stack()\n {\n  first=null;\n }\n}\npublic Object pop() \n{\n if(size == 0)\n System.out.println(\"underflow\");\n else\n {\n  Object o = first.getEle();\n  first = first.getNext();\n  size--;\n  return o;\n }\n}\npublic Object pop() \n{\n if(size == 0)\n System.out.println(\"underflow\");\n else\n {\n  Object o = first.getEle();\n  first = first.getNext().getNext();\n  size--;\n  return o;\n }\n}\npublic Object pop() \n{\n if(size == 0)\n System.out.println(\"underflow\");\n else\n {\n  first = first.getNext();\n  Object o = first.getEle();\n  size--;\n  return o;\n }\n}\npublic Object pop() \n{\n if(size == 0)\n System.out.println(\"underflow\");\n else\n {\n  first = first.getNext().getNext();\n  Object o = first.getEle();\n  size--;\n  return o;\n }\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "What does the following function do?\n\npublic Object some_func()throws emptyStackException\n{\n if(isEmpty())\n  throw new emptyStackException(\"underflow\");\n return first.getEle();\n}\n\na) pop\nb) delete the top-of-the-stack element\nc) retrieve the top-of-the-stack element\nd) push operation\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What is the functionality of the following piece of code?\n\npublic void display() \n{\n if(size == 0)\n  System.out.println(\"underflow\");\n else\n {\n  Node current = first;\n  while(current != null)\n  {\n   System.out.println(current.getEle());\n   current = current.getNext();\n  }\n }\n}\n\na) reverse the list\nb) display the list\nc) display the list excluding top-of-the-stack-element\nd) reverse the list excluding top-of-the-stack-element\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "What does ‘stack overflow’ refer to?\na) accessing item from an undefined stack\nb) adding items to a full stack\nc) removing items from an empty stack\nd) index out of bounds exception\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "Given below is the Node class to perform basic list operations and a Stack class with a no arg constructor. Select from the options the appropriate push() operation that can be included in the Stack class. Also ‘first’ is the top-of-the-stack.\n\nclass Node\n{\n protected Node next;\n protected Object ele;\n Node()\n {\n  this(null,null);\n }\n Node(Object e,Node n)\n {\n  ele=e;\n  next=n;\n }\n public void setNext(Node n)\n {\n  next=n;\n }\n public void setEle(Object e)\n {\n  ele=e;\n }\n public Node getNext()\n {\n  return next;\n }\n public Object getEle()\n {\n  return ele;\n }\n}\n \nclass Stack\n{\n Node first;\n int size=0;\n Stack()\n {\n  first=null;\n }\n}\npublic void push(Object item)\n{\n Node temp = new Node(item,first);\n first = temp;\n size++;\n}\npublic void push(Object item)\n{\n Node temp = new Node(item,first);\n first = temp.getNext();\n size++;\n}\npublic void push(Object item)\n{\n Node temp = new Node();\n first = temp.getNext();\n first.setItem(item);\n size++;\n}\npublic void push(Object item)\n{\n Node temp = new Node();\n first = temp.getNext.getNext();\n first.setItem(item);\n size++;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Consider these functions:\npush() : push an element into the stack\npop() : pop the top-of-the-stack element\ntop() : returns the item stored in top-of-the-stack-node\nWhat will be the output after performing these sequence of operations\n\na) 20\nb) 4\nc) stack underflow\nd) 5\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following data structures can be used for parentheses matching?\na) n-ary tree\nb) queue\nc) priority queue\nd) stack\n\n\nAnswer: d"
  },
  {
    "question_number": 10,
    "input_text": "Minimum number of queues to implement stack is ___________\na) 3\nb) 4\nc) 1\nd) 2\n\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following properties is associated with a queue?\na) First In Last Out\nb) First In First Out and Last in Last Out\nc) Last In First Out\nd) Last In Last Out Only\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "In a circular queue, how do you increment the rear end of the queue?\na) rear++\nb) (rear+1) % CAPACITY\nc) (rear % CAPACITY)+1\nd) rear–\n\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "What is the term for inserting into a full queue known as?\na) overflow\nb) underflow\nc) null pointer exception\nd) program won’t be compiled\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "What is the time complexity of enqueue operation?\na) O(logn)\nb) O(nlogn)\nc) O(n)\nd) O(1)\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "What does the following Java code do?\n\npublic Object function()\n{\n if(isEmpty())\n return -999;\n else\n {\n  Object high;\n  high = q[front];\n  return high;\n }\n}\n\na) Dequeue\nb) Enqueue\nc) Return the front element\nd) Return the last element\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "What is the need for a circular queue?\na) effective usage of memory\nb) easier computations\nc) to delete elements based on priority\nd) implement LIFO principle in queues\n\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following represents a dequeue operation? (count is the number of elements in the queue)\na)\n\npublic Object dequeue()\n{\n if(count == 0)\n {\n  System.out.println(\"Queue underflow\");\n  return 0;\n }\n else\n {\n  Object ele = q[front];\n  q[front] = null;\n  front = (front+1)%CAPACITY;\n  count--;\n  return ele;\n }\n}\npublic Object dequeue()\n{\n if(count == 0)\n {\n  System.out.println(\"Queue underflow\");\n  return 0;\n }\n else\n {\n  Object ele = q[front];\n  front = (front+1)%CAPACITY;\n  q[front] = null;\n  count--;\n  return ele;\n }\n}\npublic Object dequeue()\n{\n if(count == 0)\n {\n  System.out.println(\"Queue underflow\");\n  return 0;\n }\n else\n {\n  front = (front+1)%CAPACITY;\n  Object ele = q[front];\n  q[front] = null;\n  count--;\n  return ele;\n }\n}\npublic Object dequeue()\n{\n if(count == 0)\n {\n  System.out.println(\"Queue underflow\");\n  return 0;\n }\n else\n {\n  Object ele = q[front];\n  q[front] = null;\n  front = (front+1)%CAPACITY;\n  return ele;\n  count--;\n }\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following best describes the growth of a linear queue at runtime? (Q is the original queue, size() returns the number of elements in the queue)\na)\n\nprivate void expand()\n{\n int length = size();\n int[] newQ = new int[length<<1];\n for(int i=front; i<=rear; i++)\n {\n  newQ[i-front] = Q[i%CAPACITY];\n }\n Q = newQ;\n front = 0;\n rear = size()-1;\n}\nprivate void expand()\n{\n int length = size();\n int[] newQ = new int[length<<1];\n for(int i=front; i<=rear; i++)\n {\n  newQ[i-front] = Q[i%CAPACITY];\n }\n Q = newQ;\n}\nprivate void expand()\n{\n int length = size();\n int[] newQ = new int[length<<1];\n for(int i=front; i<=rear; i++)\n {\n  newQ[i-front] = Q[i];\n }\n Q = newQ;\n front = 0;\n rear = size()-1;\n}\nprivate void expand()\n{\n int length = size();\n int[] newQ = new int[length*2];\n for(int i=front; i<=rear; i++)\n {\n  newQ[i-front] = Q[i%CAPACITY];\n }\n Q = newQ;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "What is the space complexity of a linear queue having n elements?\na) O(n)\nb) O(nlogn)\nc) O(logn)\nd) O(1)\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "What is the output of the following Java code?\n\npublic class CircularQueue\n{\n protected static final int CAPACITY = 100;\n protected int size,front,rear;\n protected Object q[];\n int count = 0;\n \n public CircularQueue()\n {\n  this(CAPACITY);\n }\n public CircularQueue (int n)\n {\n  size = n;\n  front = 0;\n  rear = 0;\n  q = new Object[size];\n }\n \n \n public void enqueue(Object item)\n {\n  if(count == size)\n  {\n   System.out.println(\"Queue overflow\");\n    return;\n  }\n  else\n  {\n   q[rear] = item;\n   rear = (rear+1)%size;\n   count++;\n  }\n }\n public Object dequeue()\n {\n  if(count == 0)\n  {\n   System.out.println(\"Queue underflow\");\n   return 0;\n  }\n  else\n  {\n   Object ele = q[front];\n   q[front] = null;\n   front = (front+1)%size;\n   count--;\n   return ele;\n  }\n }\n public Object frontElement()\n {\n  if(count == 0)\n  return -999;\n  else\n  {\n   Object high;\n   high = q[front];\n   return high;\n  }\n }\n public Object rearElement()\n {\n  if(count == 0)\n  return -999;\n  else\n  {\n   Object low;\n   rear = (rear-1)%size;\n   low = q[rear];\n   rear = (rear+1)%size;\n   return low;\n  }\n }\n}\npublic class CircularQueueDemo\n{\n public static void main(String args[])\n {\n  Object var;\n  CircularQueue myQ = new CircularQueue();\n  myQ.enqueue(10);\n  myQ.enqueue(3);\n  var = myQ.rearElement();\n  myQ.dequeue();\n  myQ.enqueue(6);\n  var = mQ.frontElement();\n  System.out.println(var+\" \"+var);\n }\n}\n\na) 3 3\nb) 3 6\nc) 6 6\nd) 10 6\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "In linked list implementation of queue, if only front pointer is maintained, which of the following operation take worst case linear time?\na) Insertion\nb) Deletion\nc) To empty a queue\nd) Both Insertion and To empty a queue\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "In linked list implementation of a queue, where does a new element be inserted?\na) At the head of link list\nb) At the centre position in the link list\nc) At the tail of the link list\nd) At any position in the linked list\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into EMPTY queue?\na) Only front pointer\nb) Only rear pointer\nc) Both front and rear pointer\nd) No pointer will be changed\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "In case of insertion into a linked queue, a node borrowed from the __________ list is inserted in the queue.\na) AVAIL\nb) FRONT\nc) REAR\nd) NULL\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "In linked list implementation of a queue, from where is the item deleted?\na) At the head of link list\nb) At the centre position in the link list\nc) At the tail of the link list\nd) Node before the tail\n\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "In linked list implementation of a queue, the important condition for a queue to be empty is?\na) FRONT is null\nb) REAR is null\nc) LINK is empty\nd) FRONT==REAR-1\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "The essential condition which is checked before insertion in a linked queue is?\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\n\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "The essential condition which is checked before deletion in a linked queue is?\na) Underflow\nb) Overflow\nc) Front value\nd) Rear value\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "Which of the following is true about linked list implementation of queue?\na) In push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end\nb) In push operation, if new nodes are inserted at the beginning, then in pop operation, nodes must be removed from the beginning\nc) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from end\nd) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from beginning\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "With what data structure can a priority queue be implemented?\na) Array\nb) List\nc) Heap\nd) Tree\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following is not an application of priority queue?\na) Huffman codes\nb) Interrupt handling in operating system\nc) Undo operation in text editors\nd) Bayesian spam filter\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "Select the appropriate code that inserts elements into the list based on the given key value.\n(head and trail are dummy nodes to mark the end and beginning of the list, they do not contain any priority or element)\na)\n\npublic void insert_key(int key,Object item) \n{\n if(key<0)\n {\n  Systerm.our.println(\"invalid\");\n  System.exit(0);\n }\n else\n {\n  Node temp = new Node(key,item,null);\n  if(count == 0)\n  {\n   head.setNext(temp);\n   temp.setNext(trail);\n  }\n  else\n  {\n   Node dup = head.getNext();\n   Node cur = head;\n   while((key>dup.getKey()) && (dup!=trail))\n   {\n    dup = dup.getNext();\n    cur = cur.getNext();\n   }\n   cur.setNext(temp);\n   temp.setNext(dup);\n  }\n  count++;\n }\n}\npublic void insert_key(int key,Object item) \n{\n if(key<0)\n {\n  Systerm.our.println(\"invalid\");\n  System.exit(0);\n }\n else\n {\n  Node temp = new Node(key,item,null);\n  if(count == 0)\n  {\n   head.setNext(temp);\n   temp.setNext(trail);\n  }\n  else\n  {\n   Node dup = head.getNext();\n   Node cur = dup;\n   while((key>dup.getKey()) && (dup!=trail))\n   {\n    dup = dup.getNext();\n    cur = cur.getNext();\n   }\n   cur.setNext(temp);\n   temp.setNext(dup);\n  }\n  count++;\n }\n}\npublic void insert_key(int key,Object item) \n{\n if(key<0)\n {\n  Systerm.our.println(\"invalid\");\n  System.exit(0);\n }\n else\n {\n  Node temp = new Node(key,item,null);\n  if(count == 0)\n  {\n   head.setNext(temp);\n   temp.setNext(trail);\n  }\n  else\n  {\n   Node dup = head.getNext();\n   Node cur = head;\n   while((key>dup.getKey()) && (dup!=trail))\n   {\n    dup = dup.getNext();\n    cur = cur.getNext();\n   }\n   cur.setNext(dup);\n   temp.setNext(cur);\n  }\n  count++;\n }\n}\npublic void insert_key(int key,Object item) \n{\n if(key<0)\n {\n  Systerm.our.println(\"invalid\");\n  System.exit(0);\n }\n else\n {\n  Node temp = new Node(key,item,null);\n  if(count == 0)\n  {\n   head.setNext(temp);\n   temp.setNext(trail);\n  }\n  else\n  {\n   Node dup = head.getNext();\n   Node cur = head;\n   while((key>dup.getKey()) && (dup!=trail))\n   {\n    dup = cur\n    cur = cur.getNext();\n   }\n   cur.setNext(dup);\n   temp.setNext(cur);\n  }\n  count++;\n }\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "What is the time complexity to insert a node based on key in a priority queue?\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What is the functionality of the following piece of code?\n\npublic Object delete_key() \n{\n if(count == 0)\n {\n  System.out.println(\"Q is empty\");\n  System.exit(0);\n }\n else\n {\n  Node cur = head.getNext();\n  Node dup = cur.getNext();\n  Object e = cur.getEle();\n  head.setNext(dup);\n  count--;\n  return e;\n }\n}\n\na) Delete the second element in the list\nb) Return but not delete the second element in the list\nc) Delete the first element in the list\nd) Return but not delete the first element in the list\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "What is not a disadvantage of priority scheduling in operating systems?\na) A low priority process might have to wait indefinitely for the CPU\nb) If the system crashes, the low priority systems may be lost permanently\nc) Interrupt handling\nd) Indefinite blocking\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following is not an advantage of a priority queue?\na) Easy to implement\nb) Processes with different priority can be efficiently handled\nc) Applications with differing requirements\nd) Easy to delete elements in any case\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "What is the time complexity to insert a node based on position in a priority queue?\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\n\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "What is a dequeue?\na) A queue with insert/delete defined for both front and rear ends of the queue\nb) A queue implemented with a doubly linked list\nc) A queue implemented with both singly and doubly linked lists\nd) A queue with insert/delete defined for front side of the queue\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "Select the function which performs insertion at the front end of the dequeue?\na)\n\npublic void function(Object item)\n{\n Node temp = new Node(item,null);\n if(isEmpty())\n {\n  temp.setNext(trail);\n  head.setNext(temp);\n }\n else\n {\n  Node cur = head.getNext();\n  temp.setNext(cur);\n  head.setNext(temp);\n }\n size++;\n}\npublic void function(Object item)\n{\n Node temp = new Node(item,null);\n if(isEmpty())\n {\n  temp.setNext(trail);\n  head.setNext(trail);\n }\n else\n {\n  Node cur = head.getNext();\n  temp.setNext(cur);\n  head.setNext(temp);\n }\n size++;\n}\npublic void function(Object item)\n{\n Node temp = new Node(item,null);\n if(isEmpty())\n {\n  Node cur = head.getNext();\n  temp.setNext(cur);\n  head.setNext(temp);\n }\n else\n {\n  temp.setNext(trail);\n  head.setNext(temp);\n }\n size++;\n}\npublic void function(Object item)\n{\n Node temp = new Node(item,null);\n if(isEmpty())\n {\n  Node cur = head.getNext();\n  temp.setNext(cur);\n  cur.setNext(temp);\n }\n else\n {\n  head.setNext(trail);\n  trail.setNext(temp);\n }\n size++;\n}\npublic void function(Object item)\n{\n Node temp=new Node(item,trail);\n if(isEmpty())\n {\n  head.setNext(temp);\n  temp.setNext(trail);\n }\n else\n {\n  Node cur=head.getNext();\n  while(cur.getNext()!=trail)\n  {\n   cur=cur.getNext();\n  }\n  cur.setNext(temp);\n }\n size++;\n}\n\na) Insert at the front end of the dequeue\nb) Insert at the rear end of the dequeue\nc) Fetch the element at the rear end of the dequeue\nd) Fetch the element at the front end of the dequeue\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "What are the applications of dequeue?\na) A-Steal job scheduling algorithm\nb) Can be used as both stack and queue\nc) To find the maximum of all sub arrays of size k\nd) All of the mentioned\n\n\nAnswer: d"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following can be used to delete an element from the front end of the queue?\na)\n\npublic Object deleteFront() throws emptyDEQException\n{\n if(isEmpty())\n  throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = temp;\n  Object e = temp.getEle();\n  head.setNext(cur);\n  size--;\n  return e;\n }\n}\npublic Object deleteFront() throws emptyDEQException\n{\n if(isEmpty())\n  throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = temp.getNext();\n  Object e = temp.getEle();\n  head.setNext(cur);\n  size--;\n  return e;\n }\n}\npublic Object deleteFront() throws emptyDEQException\n{\n if(isEmpty())\n  throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = temp.getNext();\n  Object e = temp.getEle();\n  head.setNext(temp);\n  size--;\n  return e;\n }\n}\npublic Object deleteFront() throws emptyDEQException\n{\n if(isEmpty())\n  throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = temp.getNext();\n  Object e = temp.getEle();\n  temp.setNext(cur);\n  size--;\n  return e;\n }\n}\npublic Object deleteRear() throws emptyDEQException\n{\n if(isEmpty())\n  throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = temp;\n  while(temp.getNext() != trail)\n  {\n   temp = temp.getNext();\n   cur = cur.getNext();\n  }\n  Object e = temp.getEle();\n  cur.setNext(trail);\n  size--;\n  return e;\n }\n}\npublic Object deleteRear() throws emptyDEQException\n{\n if(isEmpty())\n  throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = head;\n  while(temp != trail)\n  {\n   temp = temp.getNext();\n   cur = cur.getNext();\n  }\n  Object e = temp.getEle();\n  cur.setNext(trail);\n  size--;\n  return e;\n }\n}\npublic Object deleteRear() throws emptyDEQException\n{\n if(isEmpty())\n throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = head;\n  while(temp.getNext()!=trail)\n  {\n   temp = temp.getNext();\n   cur = cur.getNext();\n  }\n  Object e = temp.getEle();\n  cur.setNext(trail);\n  size--;\n  return e;\n }\n}\npublic Object deleteRear() throws emptyDEQException\n{\n if(isEmpty())\n throw new emptyDEQException(\"Empty\");\n else\n {\n  Node temp = head.getNext();\n  Node cur = head;\n  while(temp.getNext()!=trail)\n  {\n   temp = temp.getNext();\n   cur = cur.getNext();\n  }\n  Object e = temp.getEle();\n  temp.setNext(trail);\n  size--;\n  return e;\n }\n}\n\nd)\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "After performing these set of operations, what does the final list look contain?\n\na) 10 30 10 15\nb) 20 30 40 15\nc) 20 30 40 10\nd) 10 30 40 15\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "A Double-ended queue supports operations such as adding and removing items from both the sides of the queue. They support four operations like addFront(adding item to top of the queue), addRear(adding item to the bottom of the queue), removeFront(removing item from the top of the queue) and removeRear(removing item from the bottom of the queue). You are given only stacks to implement this data structure. You can implement only push and pop operations. What are the total number of stacks required for this operation?(you can reuse the stack)\na) 1\nb) 2\nc) 3\nd) 4\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "You are asked to perform a queue operation using a stack. Assume the size of the stack is some value ‘n’ and there are ‘m’ number of variables in this stack. The time complexity of performing deQueue operation is (Using only stack operations like push and pop)(Tightly bound).\na) O(m)\nb) O(n)\nc) O(m*n)\nd) Data is insufficient\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Consider you have an array of some random size. You need to perform dequeue operation. You can perform it using stack operation (push and pop) or using queue operations itself (enQueue and Dequeue). The output is guaranteed to be same. Find some differences?\na) They will have different time complexities\nb) The memory used will not be different\nc) There are chances that output might be different\nd) No differences\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Consider you have a stack whose elements in it are as follows.\n5 4 3 2 << top\nWhere the top element is 2.\nYou need to get the following stack\n6 5 4 3 2 << top\nThe operations that needed to be performed are (You can perform only push and pop):\na) Push(pop()), push(6), push(pop())\nb) Push(pop()), push(6)\nc) Push(pop()), push(pop()), push(6)\nd) Push(6)\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "A double-ended queue supports operations like adding and removing items from both the sides of the queue. They support four operations like addFront(adding item to top of the queue), addRear(adding item to the bottom of the queue), removeFront(removing item from the top of the queue) and removeRear(removing item from the bottom of the queue). You are given only stacks to implement this data structure. You can implement only push and pop operations. What’s the time complexity of performing addFront and addRear? (Assume ‘m’ to be the size of the stack and ‘n’ to be the number of elements)\na) O(m) and O(n)\nb) O(1) and O(n)\nc) O(n) and O(1)\nd) O(n) and O(m)\n\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "Why is implementation of stack operations on queues not feasible for a large dataset (Asssume the number of elements in the stack to be n)?\na) Because of its time complexity O(n)\nb) Because of its time complexity O(log(n))\nc) Extra memory is not required\nd) There are no problems\n\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "Consider yourself to be in a planet where the computational power of chips to be slow. You have an array of size 10.You want to perform enqueue some element into this array. But you can perform only push and pop operations .Push and pop operation both take 1 sec respectively. The total time required to perform enQueue operation is?\na) 20\nb) 40\nc) 42\nd) 43\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "You have two jars, one jar which has 10 rings and the other has none. They are placed one above the other. You want to remove the last ring in the jar. And the second jar is weak and cannot be used to store rings for a long time.\na) Empty the first jar by removing it one by one from the first jar and placing it into the second jar\nb) Empty the first jar by removing it one by one from the first jar and placing it into the second jar and empty the second jar by placing all the rings into the first jar one by one\nc) There exists no possible way to do this\nd) Break the jar and remove the last one\n\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "Given only a single array of size 10 and no other memory is available. Which of the following operation is not feasible to implement (Given only push and pop operation)?\na) Push\nb) Pop\nc) Enqueue\nd) Returntop\n\n\nAnswer: c"
  },
  {
    "question_number": 10,
    "input_text": "Given an array of size n, let’s assume an element is ‘touched’ if and only if some operation is performed on it(for example, for performing a pop operation the top element is ‘touched’). Now you need to perform Dequeue operation. Each element in the array is touched atleast?\na) Once\nb) Twice\nc) Thrice\nd) Four times\n\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "To implement a stack using queue(with only enqueue and dequeue operations), how many queues will you need?\na) 1\nb) 2\nc) 3\nd) 4\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "Making the push operation costly, select the code snippet which implements the same.(let q1 and q2 be two queues)\na)\n\npublic void push(int x)\n{\n        if(empty())\n        {\n            q1.offer(x);\n        }\n        else{\n                if(q1.size()>0)\n                {\n                    q2.offer(x);\n                    int size = q1.size();\n                    while(size>0)\n                    {\n                        q2.offer(q1.poll());\n                        size--;\n                    }\n                }\n            else if(q2.size()>0)\n            {\n                q1.offer(x);\n                int size = q2.size();\n                while(size>0)\n                {\n                    q1.offer(q2.poll());\n                    size--;\n                }\n            }\n        }\n    }\npublic void push(int x)\n{\n        if(empty())\n        {\n            q1.offer(x);\n        }\n        else\n        {\n            if(q1.size()>0)\n            {\n                q1.offer(x);\n                int size = q1.size();\n                while(size>0)\n                {\n                    q2.offer(q1.poll());\n                    size--;\n                }\n            }\n            else if(q2.size()>0)\n            {\n                q2.offer(x);\n                int size = q2.size();\n                while(size>0)\n                {\n                    q1.offer(q2.poll());\n                    size--;\n                }\n            }\n        }\n}\npublic void push(int x)\n{\n        if(empty())\n        {\n            q1.offer(x);\n        }\n        else\n        {\n            if(q1.size()>0)\n            {\n                q2.offer(x);\n                int size = q1.size();\n                while(size>0)\n                {\n                    q1.offer(q2.poll());\n                    size--;\n                }\n            }\n            else if(q2.size()>0)\n            {\n                q1.offer(x);\n                int size = q2.size();\n                while(size>0)\n                {\n                    q2.offer(q1.poll());\n                    size--;\n                }\n            }\n        }\n}\npublic void push(int x)\n{\n        if(empty())\n        {\n            q1.offer(x);\n        }\n        else\n        {\n            if(q1.size()>0)\n            {\n                q2.offer(x);\n                int size = q1.size();\n                while(size>0)\n                {\n                    q2.offer(q2.poll());\n                    size--;\n                }\n            }\n            else if(q2.size()>0)\n            {\n                q1.offer(x);\n                int size = q2.size();\n                while(size>0)\n                {\n                    q2.offer(q1.poll());\n                    size--;\n                }\n            }\n        }\n}\npublic void pop()\n{\n        if(q1.size()>0)\n        {\n            q2.poll();\n        }\n        else if(q2.size()>0)\n        {\n            q1.poll();\n        }\n}\npublic void pop()\n{\n        if(q1.size()>0)\n        {\n            q1.poll();\n        }\n        else if(q2.size()>0)\n        {\n            q2.poll();\n        }\n}\npublic void pop()\n{\n        q1.poll();\n q2.poll();\n}\npublic void pop()\n{\n        if(q2.size()>0)\n        {\n            q1.poll();\n        }\n        else\n        {\n            q2.poll();\n        }\n}\npublic int top()\n{\n       if(q1.size()>0)\n       {\n            return q1.poll();\n       }\n       else if(q2.size()>0)\n       {\n            return q2.poll();\n       }\n       return 0;\n}\npublic int top()\n{\n       if(q1.size()==0)\n       {\n            return q1.peek();\n       }\n       else if(q2.size()==0)\n       {\n            return q2.peek();\n       }\n        return 0;\n    }\npublic int top()\n{\n       if(q1.size()>0)\n       {\n            return q1.peek();\n       }\n       else if(q2.size()>0)\n       {\n            return q2.peek();\n       }\n       return 0;\n}\npublic int top()\n{\n       if(q1.size()>0)\n       {\n            return q2.peek();\n       }\n       else if(q2.size()>0)\n       {\n            return q1.peek();\n       }\n       return 0;\n}\npublic int pop()\n{\n int res=-999,count=0;\n if(q1.size()>0)\n        {\n  count = q1.size();\n  while(count>0)\n   q2.offer(q1.poll());\n  res = q1.poll();\n }\n if(q2.size()>0)\n        {\n  count = q2.size();\n  while(count>0)\n   q1.offer(q2.poll());\n  res = q2.poll();\n }\n return res;\n}\npublic int pop()\n{\n int res=-999,count=0;\n if(q1.size()>0)\n        {\n  count = q1.size();\n  while(count>1)\n   q2.offer(q1.poll());\n  res = q2.poll();\n }\n if(q2.size()>0)\n        {\n  count = q2.size();\n  while(count>1)\n   q1.offer(q2.poll());\n  res = q1.poll();\n }\n return res;\n}\npublic int pop()\n{\n int res=-999,count=0;\n if(q1.size()>0)\n        {\n  count = q1.size();\n  while(count>1)\n   q2.offer(q1.poll());\n  res = q1.poll();\n }\n if(q2.size()>0)\n        {\n  count = q2.size();\n  while(count>1)\n   q1.offer(q2.poll());\n  res = q2.poll();\n }\n return res;\n}\npublic int pop()\n{\n int res=-999,count=0;\n if(q1.size()>0)\n        {\n  count = q2.size();\n  while(count>1)\n   q2.offer(q1.poll());\n  res = q1.poll();\n }\n if(q2.size()>0)\n        {\n  count = q1.size();\n  while(count>1)\n   q1.offer(q2.poll());\n  res = q2.poll();\n }\n return res;\n}\npublic void fun(int x)\n{\n q1.offer(x);\n}\n\na) Perform push() with push as the costlier operation\nb) Perform push() with pop as the costlier operation\nc) Perform pop() with push as the costlier operation\nd) Perform pop() with pop as the costlier operation\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "Express -15 as a 6-bit signed binary number.\na) 001111\nb) 101111\nc) 101110\nd) 001110\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following code snippet is used to convert decimal to binary numbers?\na)\n\npublic void convertBinary(int num)\n{\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n       bin[index++] = num%2;\n       num = num/2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n       System.out.print(bin[i]);\n     }\n}\npublic void convertBinary(int num)\n{\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n       bin[++index] = num%2;\n       num = num/2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n       System.out.print(bin[i]);\n     }\n}\npublic void convertBinary(int num)\n{\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n         bin[index++] = num/2;\n         num = num%2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n         System.out.print(bin[i]);\n     }\n}\npublic void convertBinary(int num)\n {\n     int bin[] = new int[50];\n     int index = 0;\n     while(num > 0)\n     {\n         bin[++index] = num/2;\n         num = num%2;\n     }\n     for(int i = index-1;i >= 0;i--)\n     {\n         System.out.print(bin[i]);\n     }\n  }\n\nd)\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "Using stacks, how to obtain the binary representation of the number?\na)\n\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num / 2;\n        stack.push(digit);\n        num = num % 2;\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num % 2;\n        stack.push(digit);\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num % 2;\n        stack.push(digit);\n        num = num / 2;\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\npublic void convertBinary(int num)\n{\n    Stack<Integer> stack = new Stack<Integer>();\n    while (num != 0)\n    {\n        int digit = num % 2;\n        stack.push(digit%2);\n        num = num / 2;\n    } \n    System.out.print(\"\\nBinary representation is:\");\n    while (!(stack.isEmpty() ))\n    {\n        System.out.print(stack.pop());\n    }\n }\n\nd)\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "Write a piece of code which returns true if the string contains balanced parenthesis, false otherwise.\na)\n\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() == null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n}\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n            {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() != null)\n                        {\n    return true;\n   }\n   stk.pop();\n  }\n }\n return false;\n  }\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n        char ch = exp.charAt(i);\n               if (ch == ')')\n               stk.push(i);\n               else if (ch == '(')\n               {\n   if(stk.peek() == null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n}\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() != null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n  }\npublic boolean isBalanced(String exp)\n{\n int len = exp.length();\n Stack<Integer> stk = new Stack<Integer>();\n for(int i = 0; i < len; i++)\n        {\n  char ch = exp.charAt(i);\n                if (ch == '(')\n                stk.push(i);\n                else if (ch == ')')\n                {\n   if(stk.peek() == null)\n                        {\n    return false;\n   }\n   stk.pop();\n  }\n }\n return true;\n}\n\na) O(logn)\nb) O(n)\nc) O(1)\nd) O(nlogn)\n\nAnswer: b"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following program prints the index of every matching parenthesis?\na)\n\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == '(')\n        stk.push(i);\n        else if (ch == ')')\n        {\n          try\n          {\n            int p = stk.pop() + 1;\n            System.out.println(\"')' at index \"+(i+1)+\" matched with ')' at index \"+p);\n          }\n          catch(Exception e)\n          {\n             System.out.println(\"')' at index \"+(i+1)+\" is unmatched\");\n          }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == '(')\n        stk.push(i);\n        else if (ch == ')')\n        {\n           try\n           {\n             int p = stk.pop() + 1;\n             System.out.println(\"')' at index \"+(i)+\" matched with ')' at index \"+p);\n           }\n           catch(Exception e)\n           {\n              System.out.println(\"')' at index \"+(i)+\" is unmatched\");\n           }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == ')')\n        stk.push(i);\n        else if (ch == '(')\n        {\n          try\n          {\n            int p = stk.pop() +1;\n            System.out.println(\"')' at index \"+(i+1)+\" matched with ')' at index \"+p);\n          }\n          catch(Exception e)\n          {\n             System.out.println(\"')' at index \"+(i+1)+\" is unmatched\");\n          }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\npublic void dispIndex(String exp)\n{\n    Stack<Integer> stk = new Stack<Integer>();\n    for (int i = 0; i < len; i++)\n    {    \n        char ch = exp.charAt(i);\n        if (ch == ')')\n        stk.push(i);\n        else if (ch == '(')\n        {\n          try\n          {\n            int p = stk.pop();\n            System.out.println(\"')' at index \"+(i+1)+\" matched with ')' at index \"+p);\n          }\n          catch(Exception e)\n          {\n            System.out.println(\"')' at index \"+(i+1)+\" is unmatched\");\n          }\n        }            \n    }\n    while (!stk.isEmpty() )\n    System.out.println(\"'(' at index \"+(stk.pop() +1)+\" is unmatched\");\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "How many stacks are required for applying evaluation of infix expression algorithm?\na) one\nb) two\nc) three\nd) four\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "How many passes does the evaluation of infix expression algorithm makes through the input?\na) One\nb) Two\nc) Three\nd) Four\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Identify the infix expression from the list of options given below.\na) a/b+(c-d)\nb) abc*+d+ab+cd+*ce-f-\nc) ab-c-\nd) +ab\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?\na) Operand is pushed on to the stack\nb) If the precedence of operator is higher, pop two operands and evaluate\nc) If the precedence of operator is lower, pop two operands and evaluate\nd) The result is pushed on to the operand stack\n\n\nAnswer: b"
  },
  {
    "question_number": 5,
    "input_text": "Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 1+2*3-2\na) 3\nb) 6\nc) 5\nd) 4\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "Evaluation of infix expression is done based on precedence of operators.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "Of the following choices, which operator has the lowest precedence?\na) ^\nb) +\nc) /\nd) #\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "The system throws an error if parentheses are encountered in an infix expression evaluation algorithm.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "Evaluate the following and choose the correct answer.\na/b+c*d where a=4, b=2, c=2, d=1.\na) 1\nb) 4\nc) 5\nd) 2\n\n\nAnswer: b"
  },
  {
    "question_number": 10,
    "input_text": "Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 4*2+3-5/5\na) 10\nb) 11\nc) 16\nd) 12\n\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "Using the evaluation of infix expression, evaluate a^b+c and choose the correct answer. (a=2, b=2, c=2)\na) 12\nb) 8\nc) 10\nd) 6\n\n\nAnswer: d"
  },
  {
    "question_number": 12,
    "input_text": "Evaluate the following infix expression using algorithm and choose the correct answer. a+b*c-d/e^f where a=1, b=2, c=3, d=4, e=2, f=2.\na) 6\nb) 8\nc) 9\nd) 7\n\n\nAnswer: a"
  },
  {
    "question_number": 13,
    "input_text": "From the given expression tree, identify the infix expression, evaluate it and choose the correct result.\n\na) 5\nb) 10\nc) 12\nd) 16\n\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "How many stacks are required for evaluation of prefix expression?\na) one\nb) two\nc) three\nd) four\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "While evaluating a prefix expression, the string is read from?\na) left to right\nb) right to left\nc) center to right\nd) center to left to right\n\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "The associativity of an exponentiation operator ^ is right side.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "How many types of input characters are accepted by this algorithm?\na) one\nb) two\nc) three\nd) four\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What determines the order of evaluation of a prefix expression?\na) precedence and associativity\nb) precedence only\nc) associativity only\nd) depends on the parser\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Find the output of the following prefix expression.\n\n*+2-2 1/-4 2+-5 3 1\n\na) 2\nb) 12\nc) 10\nd) 4\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "An error is thrown if the character ‘\\n’ is pushed in to the character stack.\na) true\nb) false\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Using the evaluation of prefix algorithm, evaluate +-9 2 7.\na) 10\nb) 4\nc) 17\nd) 14\n\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "If -*+abcd = 11, find a, b, c, d using evaluation of prefix algorithm.\na) a=2, b=3, c=5, d=4\nb) a=1, b=2, c=5, d=4\nc) a=5, b=4, c=7,d=5\nd) a=1, b=2, c=3, d=4\n\n\nAnswer: b"
  },
  {
    "question_number": 10,
    "input_text": "In the given C snippet, find the statement number that has error.\n\n//C code to push an element into a stack\n1. void push( struct stack *s, int x) \n2. {\n3.     if(s->top==MAX-1)\n4.     {\n5.         printf(“stack overflow”);\n6.     }\n7.     else\n8.     {\n9.         s->items[++s->top]=x;\n10.        s++;\n11.    }   \n12. }\n\na) 1\nb) 9\nc) 10\nd) 11\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "What is the other name for a postfix expression?\na) Normal polish Notation\nb) Reverse polish Notation\nc) Warsaw notation\nd) Infix notation\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following is an example for a postfix expression?\na) a*b(c+d)\nb) abc*+de-+\nc) +ab\nd) a+b-c\n\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "Reverse Polish Notation is the reverse of a Polish Notation.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "What is the time complexity of evaluation of postfix expression algorithm?\na) O (N)\nb) O (N log N)\nc) O (N2)\nd) O (M log N)\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "In Postfix expressions, the operators come after the operands.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Which of these operators have the highest order of precedence?\na) ‘(‘ and ‘)’\nb) ‘*’ and ‘/’\nc) ‘~’ and ‘^’\nd) ‘+’ and ‘-‘\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following is not an application of stack?\na) evaluation of postfix expression\nb) conversion of infix to postfix expression\nc) balancing symbols\nd) line at ticket counter\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?\na) push it directly on to the stack\nb) pop 2 operands, evaluate them and push the result on to the stack\nc) pop the entire stack\nd) ignore the operator\n\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following statement is incorrect?\na) Postfix operators use value to their right\nb) Postfix operators use value to their left\nc) Prefix operators use value to their right\nd) In postfix expression, operands are followed by operators\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "What is the result of the given postfix expression? abc*+ where a=1, b=2, c=3.\na) 4\nb) 5\nc) 6\nd) 7\n\n\nAnswer: d"
  },
  {
    "question_number": 11,
    "input_text": "What is the result of the following postfix expression?\nab*cd*+ where a=2,b=2,c=3,d=4.\na) 16\nb) 12\nc) 14\nd) 10\n\n\nAnswer: a"
  },
  {
    "question_number": 12,
    "input_text": "Consider the stack\n| 5 |\n| 4 |\n| 3 |\n| 2 |.\nAt this point, ‘*’ is encountered. What has to be done?\na) 5*4=20 is pushed into the stack\nb) * is pushed into the stack\nc) 2*3=6 is pushed into the stack\nd) * is ignored\n\n\nAnswer: a"
  },
  {
    "question_number": 13,
    "input_text": "Evaluate the postfix expression ab + cd/- where a=5, b=4, c=9, d=3.\na) 23\nb) 15\nc) 6\nd) 10\n\n\nAnswer: c"
  },
  {
    "question_number": 14,
    "input_text": "Evaluate and write the result for the following postfix expression\nabc*+de*f+g*+ where a=1, b=2, c=3, d=4, e=5, f=6, g=2.\na) 61\nb) 59\nc) 60\nd) 55\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "What data structure is used when converting an infix notation to prefix notation?\na) Stack\nb) Queue\nc) B-Trees\nd) Linked-list\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "What would be the Prefix notation for the given equation?\n\na) +A*CB\nb) *B+AC\nc) +A*BC\nd) *A+CB\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "What would be the Prefix notation for the given equation?\n\na) +*AB*CD\nb) *+AB*CD\nc) **AB+CD\nd) +*BA*CD\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "What would be the Prefix notation for the given equation?\n\na) +A*B^CD\nb) +A^B*CD\nc) *A+B^CD\nd) ^A*B+CD\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "Out of the following operators (^, *, +, &, $), the one having highest priority is _________\na) +\nb) $\nc) ^\nd) &\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "Out of the following operators (|, *, +, &, $), the one having lowest priority is ________\na) +\nb) $\nc) |\nd) &\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "What would be the Prefix notation for the given equation?\n\na) ^^^ABCD\nb) ^A^B^CD\nc) ABCD^^^\nd) AB^C^D\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "What would be the Prefix notation for the given equation?\n\na) |&-+ab/cdef\nb) &|-+ab/cdef\nc) |&-ab+/cdef\nd) |&-+/abcdef\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "What would be the Prefix notation for the given equation?\n\na) -+a*/^bcdef\nb) -+a*/bc^def\nc) -+a*b/c^def\nd) -a+*/bc^def\n\nAnswer: b"
  },
  {
    "question_number": 10,
    "input_text": "What would be the Prefix notation and Postfix notation for the given equation?\n\na) ++ABC and AB+C+\nb) AB+C+ and ++ABC\nc) ABC++ and AB+C+\nd) ABC+ and ABC+\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "What would be the Prefix notation for the given equation?\n\na) a|&bc\nb) &|abc\nc) |a&bc\nd) ab&|c\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "When an operand is read, which of the following is done?\na) It is placed on to the output\nb) It is placed in operator stack\nc) It is ignored\nd) Operator stack is emptied\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "What should be done when a left parenthesis ‘(‘ is encountered?\na) It is ignored\nb) It is placed in the output\nc) It is placed in the operator stack\nd) The contents of the operator stack is emptied\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "Which of the following is an infix expression?\na) (a+b)*(c+d)\nb) ab+c*\nc) +ab\nd) abc+*\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "What is the time complexity of an infix to postfix conversion algorithm?\na) O(N log N)\nb) O(N)\nc) O(N2)\nd) O(M log N)\n\n\nAnswer: b"
  },
  {
    "question_number": 5,
    "input_text": "What is the postfix expression for the corresponding infix expression?\n\na) abc*+de*+\nb) abc+*de*+\nc) a+bc*de+*\nd) abc*+(de)*+\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Parentheses are simply ignored in the conversion of infix to postfix expression.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "It is easier for a computer to process a postfix expression than an infix expression.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "What is the postfix expression for the infix expression?\n\na) -ab-c\nb) ab – c –\nc) – -abc\nd) -ab-c\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "What is the postfix expression for the following infix expression?\n\na) abc^/d-\nb) ab/cd^-\nc) ab/^cd-\nd) abcd^/-\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "Which of the following statement is incorrect with respect to infix to postfix conversion algorithm?\na) operand is always placed in the output\nb) operator is placed in the stack when the stack operator has lower precedence\nc) parenthesis are included in the output\nd) higher and equal priority operators follow the same condition\n\n\nAnswer: c"
  },
  {
    "question_number": 11,
    "input_text": "In infix to postfix conversion algorithm, the operators are associated from?\na) right to left\nb) left to right\nc) centre to left\nd) centre to right\n\n\nAnswer: b"
  },
  {
    "question_number": 12,
    "input_text": "What is the corresponding postfix expression for the given infix expression?\n\na) ab*+cd/\nb) ab+*cd/\nc) abc*+/d\nd) abc+*d/\n\nAnswer: d"
  },
  {
    "question_number": 13,
    "input_text": "What is the corresponding postfix expression for the given infix expression?\n\na) ab*cdef/^*g-h+\nb) abcdef^/*g*h*+\nc) abcd*^ed/g*-h*+\nd) abc*de^fg/*-*h+\n\nAnswer: b"
  },
  {
    "question_number": 14,
    "input_text": "What is the correct postfix expression for the following expression?\n\na) abc^de-fg+*^*+i-\nb) abcde^-fg*+*^h*+i-\nc) abcd^e-fgh*+^*+i-\nd) ab^-dc*+ef^gh*+i-\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "What would be the solution to the given prefix notation?\n\na) 2\nb) 5\nc) 10\nd) 7\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "What would be the solution to the given prefix notation?\n\na) 1\nb) 4\nc) 2\nd) 8\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "What would be the solution to the given prefix notation?\n\na) 14\nb) 15\nc) 18\nd) 12\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "What would be the solution to the given prefix notation?\n\na) 6\nb) -6\nc) 3\nd) -3\n\nAnswer: b"
  },
  {
    "question_number": 5,
    "input_text": "What would be the solution to the given prefix notation?\n\na) 1\nb) 0\nc) -1\nd) -2\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "What would be the solution to the given prefix notation?\n\na) 12\nb) 7.5\nc) 9\nd) 13.5\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "Given a prefix and a postfix notation what are the difference between them?\na) The postfix equation is solved starting from the left whereas the prefix notation is solved from the right\nb) The postfix equation is solved starting from the right whereas the prefix notation is solved from the left\nc) Both equations are solved starting from the same side(right)\nd) Both equations are solved starting from the same side(left)\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "When converting the prefix notation into an infix notation, the first step to be followed is ________\na) Reverse the equation\nb) Push the equation to the stack\nc) Push the equation onto the queue\nd) Push the equation to the stack or queue\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "The time complexity of converting a prefix notation to infix notation is _________\na) O(n) where n is the length of the equation\nb) O(n) where n is number of operands\nc) O(1)\nd) O(logn) where n is length of the equation\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "Given two processes (conversion of postfix equation to infix notation and conversion of prefix notation to infix notation), which of the following is easier to implement?\na) Both are easy to implement\nb) Conversion of postfix equation to infix equation is harder than converting a prefix notation to infix notation\nc) Conversion of postfix equation to infix equation is easier than converting a prefix notation to infix notation\nd) Insufficient data\n\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following data structure is used to convert postfix expression to infix expression?\na) Stack\nb) Queue\nc) Linked List\nd) Heap\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "The postfix expression abc+de/*- is equivalent to which of the following infix expression?\na) abc+-de*/\nb) (a+b)-d/e*c\nc) a-(b+c)*(d/e)\nd) abc+*-(d/e)\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "The equivalent infix expression and value for the postfix form 1 2 + 3 * 4 5 * – will be ___________\na) 1 + 2 * 3 – 4 * 5 and -13\nb) (2 + 1) * (3 – 4) * 5 and 13\nc) 1 + 2 * (3 – 4) * 5 and -11\nd) (1 + 2) * 3 – (4 * 5) and -11\n\n\nAnswer: d"
  },
  {
    "question_number": 4,
    "input_text": "What is the value of the postfix expression 2 3 + 4 5 6 – – *\na) 19\nb) 21\nc) -4\nd) 25\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "The prefix expression of the postfix expression AB+CD-* is __________\na) (A+B)*(C-D)\nb) +AB*-CD\nc) A+*BCD-\nd) *+AB-CD\n\n\nAnswer: d"
  },
  {
    "question_number": 6,
    "input_text": "Consider the postfix expression 4 5 6 a b 7 8 a c, where a, b, c are operators. Operator a has higher precedence over operators b and c. Operators b and c are right associative. Then, equivalent infix expression is\na) 4 a 5 6 b 7 8 a c\nb) 4 a 5 c 6 b 7 a 8\nc) 4 b 5 a 6 c 7 a 8\nd) 4 a 5 b 6 c 7 a 8\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "To convert the postfix expression into the infix expression we use stack and scan the postfix expression from left to right.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following is valid reverse polish expression?\na) a op b\nb) op a b\nc) a b op\nd) both op a b and a b op\n\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "The result of the postfix expression 5 3 * 9 + 6 / 8 4 / + is _____________\na) 8\nb) 6\nc) 10\nd) 9\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "The optimal data structure used to solve Tower of Hanoi is _________\na) Tree\nb) Heap\nc) Priority queue\nd) Stack\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "Select the appropriate code for the recursive Tower of Hanoi problem.(n is the number of disks)\na)\n\npublic void solve(int n, String start, String auxiliary, String end)\n{\n       if (n == 1) \n       {\n           System.out.println(start + \" -> \" + end);\n       } \n       else\n       {\n           solve(n - 1, start, end, auxiliary);\n           System.out.println(start + \" -> \" + end);\n           solve(n - 1, auxiliary, start, end);\n       }\n}\npublic void solve(int n, String start, String auxiliary, String end) \n{\n       if (n == 1) \n       {\n           System.out.println(start + \" -> \" + end);\n       } \n       else \n       {\n           solve(n - 1, auxiliary, start, end);\n           System.out.println(start + \" -> \" + end);\n       }\n}\npublic void solve(int n, String start, String auxiliary, String end) \n{\n       if (n == 1) \n       {\n           System.out.println(start + \" -> \" + end);\n       } \n       else \n       {\n           System.out.println(start + \" -> \" + end);\n    solve(n - 1, auxiliary, start, end);\n       }\n}\npublic void solve(int n, String start, String auxiliary, String end)\n{\n       if (n == 1) \n       {\n           System.out.println(start + \" -> \" + end);\n       } \n       else\n       {\n           solve(n - 1, start, end, auxiliary);\n           System.out.println(start + \" -> \" + end);\n       }\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Which among the following is not a palindrome?\na) Madam\nb) Dad\nc) Malayalam\nd) Maadam\n\n\nAnswer: d"
  },
  {
    "question_number": 4,
    "input_text": "Which data structure can be used to test a palindrome?\na) Tree\nb) Heap\nc) Stack\nd) Priority queue\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "Select the appropriate code which tests for a palindrome.\na)\n\npublic static void main(String[] args) \n{\n System.out.print(\"Enter any string:\");\n        Scanner in=new Scanner(System.in);\n        String input = in.nextLine();\n        Stack<Character> stk = new Stack<Character>();\n for (int i = 0; i < input.length(); i++) \n {\n            stk.push(input.charAt(i));\n        }\n String reverse = \"\";\n while (!stk.isEmpty())\n {\n            reverse = reverse + stk.pop();\n        }\n if (input.equals(reverse))\n        System.out.println(\"palindrome\");\n        else\n        System.out.println(\"not a palindrome\");\n}\npublic static void main(String[] args) \n{\n System.out.print(\"Enter any string:\");\n        Scanner in=new Scanner(System.in);\n        String input = in.nextLine();\n        Stack<Character> stk = new Stack<Character>();\n for (int i = 0; i < input.length(); i++) \n {\n            stk.push(input.charAt(i));\n        }\n String reverse = \"\";\n while (!stk.isEmpty())\n {\n            reverse = reverse + stk.peek();\n        }\n if (input.equals(reverse))\n        System.out.println(\"palindrome\");\n        else\n            System.out.println(\"not a palindrome\");\n}\npublic static void main(String[] args) \n{\n System.out.print(\"Enter any string:\");\n        Scanner in=new Scanner(System.in);\n        String input = in.nextLine();\n        Stack<Character> stk = new Stack<Character>();\n for (int i = 0; i < input.length(); i++) \n {\n            stk.push(input.charAt(i));\n        }\n String reverse = \"\";\n while (!stk.isEmpty())\n {\n            reverse = reverse + stk.pop();\n   stk.pop();\n        }\n if (input.equals(reverse))\n        System.out.println(\"palindrome\");\n        else\n            System.out.println(\"not a palindrome\");\n}\npublic static void main(String[] args) \n{\n System.out.print(\"Enter any string:\");\n        Scanner in=new Scanner(System.in);\n        String input = in.nextLine();\n        Stack<Character> stk = new Stack<Character>();\n for (int i = 0; i < input.length(); i++) \n {\n            stk.push(input.charAt(i));\n        }\n String reverse = \"\";\n while (!stk.isEmpty())\n {\n            reverse = reverse + stk.pop();\n   stk.pop();\n        }\n if (!input.equals(reverse))\n        System.out.println(\"palindrome\");\n        else\n            System.out.println(\"not a palindrome\");\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "What is the number of moves required to solve Tower of Hanoi problem for k disks?\na) 2k – 1\nb) 2k + 1\nc) 2k + 1\nd) 2k – 1\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "Select the appropriate code which reverses a word.\na)\n\nd)\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "Reversing a word using stack can be used to find if the given word is a palindrome or not.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "Which is the most appropriate data structure for reversing a word?\na) queue\nb) stack\nc) tree\nd) graph\n\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "Operations required for reversing a word or a string using stack are push() and pop().\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "What is the time complexity of reversing a word using stack algorithm?\na) O (N log N)\nb) O (N2)\nc) O (N)\nd) O (M log N)\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What will be the word obtained if the word “abbcabb” is reversed using a stack?\na) bbabbca\nb) abbcabb\nc) bbacbba\nd) bbacabb\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "How many stacks are required for reversing a word algorithm?\na) one\nb) two\nc) three\nd) four\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "What will be output if the following sequence of operations are executed?\n\nPush(a,s);\nPush(b,s);\nPop(b);\nPush(c,s);\n\na) abc\nb) b\nc) ac\nd) acb\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "What are the set of functions that are to be executed to get the following output?\ncat\na) push(c, s); push(a, s); push(t, s);\npop(s); pop(s); pop(s);\nb) push(c,s); pop(s); push(a,s); pop(s);push(t,s);pop(s);\nc) pop(c ); pop(a); pop(t);\nd) push(c,s); push(a,s); pop(t);\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "Find the error (if any) in the following code snippet for pop operation.\n\nvoid pop() //removing an element from a stack\n{\n     printf(“%s”, stack[top++]);\n}\n\na) run time error\nb) compile time error\nc) pop operation is performed, but top moved in wrong direction\nd) pop operation is performed properly\n\nAnswer: c"
  },
  {
    "question_number": 10,
    "input_text": "What will be the output of the following program?\n\nmain()  \n{  \n   char str[]=\"san foundry\";  \n   int len = strlen(str);  \n   int i;  \n \n   for(i=0;i<len;i++)  \n        push(str[i]);  // pushes an element into stack\n \n   for(i=0;i<len;i++)  \n      pop();  //pops an element from the stack\n}\n\na) sanfoundry\nb) san foundry\nc) yrdnuof nas\nd) foundry nas\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "What is the time complexity of balancing parentheses algorithm?\na) O (N)\nb) O (N log N)\nc) O (M log N)\nd) O (N2)\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "Which application of stack is used to ensure that the pair of parentheses is properly nested?\na) Balancing symbols\nb) Reversing a stack\nc) Conversion of an infix to postfix expression\nd) Conversion of an infix to prefix expression\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "In balancing parentheses algorithm, the string is read from?\na) right to left\nb) left to right\nc) center to right\nd) center to left\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "Which is the most appropriate data structure for applying balancing of symbols algorithm?\na) stack\nb) queue\nc) tree\nd) graph\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following does the balancing symbols algorithm include?\na) balancing double quotes\nb) balancing single quotes\nc) balancing operators and brackets\nd) balancing parentheses, brackets and braces\n\n\nAnswer: d"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following statement is incorrect with respect to balancing symbols algorithm?\na) {[()]}\nb) ([ )]\nc) {( )}\nd) { [ ] }\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "What should be done when an opening parentheses is read in a balancing symbols algorithm?\na) push it on to the stack\nb) throw an error\nc) ignore the parentheses\nd) pop the stack\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "When the corresponding end bracket/braces/parentheses is not found, what happens?\na) The stack is popped\nb) Ignore the parentheses\nc) An error is reported\nd) It is treated as an exception\n\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?\na) push it on to the stack\nb) pop the stack\nc) throw an error\nd) treated as an exception\n\n\nAnswer: b"
  },
  {
    "question_number": 10,
    "input_text": "An error is reported when the stack is not empty at the end.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "Is the given statement ((A+B) + [C-D]] valid with respect to balancing of symbols?\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 12,
    "input_text": "How many passes does the balancing symbols algorithm makes through the input?\na) one\nb) two\nc) three\nd) four\n\n\nAnswer: a"
  },
  {
    "question_number": 13,
    "input_text": "Which of the following statement is invalid with respect to balancing symbols?\na) [(A+B) + (C-D)]\nb) [{A+B}-{C-[D+E]}]\nc) ((A+B) + (C+D)\nd) {(A+B) + [C+D]}\n\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "What is a bit array?\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) Array in which elements are not present in continuous locations\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following bitwise operations will you use to set a particular bit to 1?\na) OR\nb) AND\nc) XOR\nd) NOR\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Which of the following bitwise operations will you use to set a particular bit to 0?\na) OR\nb) AND\nc) XOR\nd) NAND\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following bitwise operations will you use to toggle a particular bit?\na) OR\nb) AND\nc) XOR\nd) NOT\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following is not an advantage of bit array?\na) Exploit bit level parallelism\nb) Maximal use of data cache\nc) Can be stored and manipulated in the register set for long periods of time\nd) Accessing Individual Elements is easy\n\n\nAnswer: d"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following is not a disadvantage of bit array?\na) Without compression, they might become sparse\nb) Accessing individual bits is expensive\nc) Compressing bit array to byte/word array, the machine also has to support byte/word addressing\nd) Storing and Manipulating in the register set for long periods of time\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following is/are not applications of bit arrays?\na) Used by the Linux kernel\nb) For the allocation of memory pages\nc) Bloom filter\nd) Implementation of Vectors and Matrices\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "Which class in Java can be used to represent bit array?\na) BitSet\nb) BitVector\nc) BitArray\nd) BitStream\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following bitwise operator will you use to invert all the bits in a bit array?\na) OR\nb) NOT\nc) XOR\nd) NAND\n\n\nAnswer: b"
  },
  {
    "question_number": 10,
    "input_text": "Run-Length encoding is used to compress data in bit arrays.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "What does Hamming weight/population count mean in Bit arrays?\na) Finding the number of 1 bit in a bit array\nb) Finding the number of 0 bit in a bit array\nc) Finding the sum of bits in a bit array\nd) Finding the average number of 1’s and 0’s in bit arrays\n\n\nAnswer: a"
  },
  {
    "question_number": 12,
    "input_text": "Bit fields and Bit arrays are same.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 13,
    "input_text": "Which one of the following operations returns the first occurrence of bit 1 in bit arrays?\na) Find First Zero\nb) Find First One\nc) Counting lead Zeroes\nd) Counting lead One\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "What is a dynamic array?\na) A variable size data structure\nb) An array which is created at runtime\nc) The memory to the array is allocated at runtime\nd) An array which is reallocated everytime whenever new elements have to be added\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "What is meant by physical size in a dynamic array?\na) The size allocated to elements\nb) The size extended to add new elements\nc) The size of the underlying array at the back-end\nd) The size visible to users\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "The number of items used by the dynamic array contents is its __________\na) Physical size\nb) Capacity\nc) Logical size\nd) Random size\n\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "How will you implement dynamic arrays in Java?\na) Set\nb) Map\nc) HashMap\nd) List\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following is the correct syntax to declare an ArrayList in Java?\na) ArrayList al = new ArrayList();\nb) ArrayList al = new ArrayList[];\nc) ArrayList al() = new ArrayList();\nd) ArrayList al[] = new ArrayList[];\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Array is divided into two parts in ____________\na) Hashed Array Tree\nb) Geometric Array\nc) Bounded-size dynamic array\nd) Sparse Array\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following is a disadvantage of dynamic arrays?\na) Locality of reference\nb) Data cache utilization\nc) Random access\nd) Memory leak\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "What is the time complexity for inserting/deleting at the beginning of the array?\na) O(1)\nb) O(n)\nc) O(logn)\nd) O(nlogn)\n\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "Dynamic arrays overcome the limit of static arrays.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "The size of the dynamic array is deallocated if the array size is less than _________% of the backend physical size.\na) 30\nb) 40\nc) 10\nd) 20\n\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "Both Dynamic array and Dynamically memory allocated array are same.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 12,
    "input_text": "In which of the following cases dynamic arrays are not preferred?\na) If the size of the array is unknown\nb) If the size of the array changes after few iterations\nc) If the memory reallocation takes more time i.e. expensive\nd) If the array holds less number of elements\n\n\nAnswer: d"
  },
  {
    "question_number": 13,
    "input_text": "The growth factor of ArrayList in Java is _______\na) 1\nb) 1.5\nc) 2\nd) 0\n\n\nAnswer: b"
  },
  {
    "question_number": 14,
    "input_text": "In special case, the time complexity of inserting/deleting elements at the end of dynamic array is __________\na) O (n)\nb) O (n1/2)\nc) O (log n)\nd) O (1)\n\n\nAnswer: a"
  },
  {
    "question_number": 15,
    "input_text": "Which of the following arrays are used in the implementation of list data type in python?\na) Bit array\nb) Dynamic arrays\nc) Sparse arrays\nd) Parallel arrays\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following is an advantage of using variable-length arrays?\na) Deciding the length of an array at the time of execution\nb) Memory allocation at compile time\nc) Initializing array at compile time\nd) Faster execution of code\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "Where does the GNU C compiler allocates memory for variable-length arrays?\na) Tree\nb) Stack\nc) Linked List\nd) Queue\n\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "Consider the following piece of code in C++. What does the following code implement?\n\n#include <iostream>   \nusing namespace std;\nint main()\n{\n    int *arr_vla;\n    int size;\n    cout<<\"Enter the size of variable length array: \";\n    cin>>size;\n    arr_vla = new int [size];\n    for (int i = 0; i < size; i++)\n    {\n        cout<<\"Enter the integers to be inserted in the variable length array: \";\n        cin>>arr_vla[i];\n    }\n    for(int i = 0; i < size; i++)\n    {\n        cout<<arr_vla[i]<<\"  \";\n    }\n    cout<<endl;\n    return 0;\n}\n\na) Variable-length array\nb) Fixed-size array\nc) Dynamic memory allocation\nd) Error\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Arbitrary expressions can be used while declaring variable-length arrays.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "Consider the following piece of code in C++, how many elements will be stored in the array ‘arr’ if the user enters the values of a, b, c and d as 10, 20, 30, and 40 respectively?\n\n#include<iostream>                                                  \nusing namespace std;                                                    \nint main() \n{                                                                               \n    int a, b, c, d;                                                        \n    cout<<”Enter the value of a, b, c, d: “;                       \n    cin>>a>>b>>c>>d;                \n    int arr[a - b/c + d];                                                 \n}\n\na) 30\nb) 40\nc) 50\nd) 60\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "Which among the following is the worst-case time complexity for appending an element in a variable-length array?\na) O(n)\nb) O(1)\nc) O(n2)\nd) O(log n)\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "What are parallel arrays?\na) Arrays of the same size\nb) Arrays allocated one after the other\nc) Arrays of the same number of elements\nd) Arrays allocated dynamically\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following can be called a parallel array implementation?\na)\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Which of the following is a disadvantage of parallel array over the traditional arrays?\na) When a language does not support records, parallel arrays can be used\nb) Increased locality of reference\nc) Ideal cache behaviour\nd) Insertion and Deletion becomes tedious\n\n\nAnswer: d"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following is an advantage of parallel arrays?\na) Poor locality of reference for non-sequential access\nb) Very little direct language support\nc) Expensive to shrink or grow\nd) Increased Locality of Reference\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "What is a sorted array?\na) Arrays sorted in numerical order\nb) Arrays sorted in alphabetical order\nc) Elements of the array are placed at equally spaced addresses in the memory\nd) All of the mentioned\n\n\nAnswer: d"
  },
  {
    "question_number": 6,
    "input_text": "To search for an element in a sorted array, which searching technique can be used?\na) Linear Search\nb) Jump Search\nc) Binary Search\nd) Fibonacci Search\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following is not an application of sorted array?\na) Commercial computing\nb) Priority Scheduling\nc) Discrete Mathematics\nd) Hash Tables\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "What is the worst case time complexity of inserting an element into the sorted array?\na) O(nlogn)\nb) O(logn)\nc) O(n)\nd) O(n2)\n\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "What is a sparse array?\na) Data structure for representing arrays of records\nb) Data structure that compactly stores bits\nc) An array in which most of the elements have the same value\nd) An array in which memory is allocated in run time\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "When do you use a sparse array?\na) When there are unique elements in the array\nb) When the array has more occurrence of zero elements\nc) When the data type of elements differ\nd) When elements are sorted\n\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "What is the difference between a normal(naive) array and a sparse array?\na) Sparse array can hold more elements than a normal array\nb) Sparse array is memory efficient\nc) Sparse array is dynamic\nd) A naive array is more efficient\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "Choose the code which performs the store operation in a sparse array.(Linked list implementation)\na)\n\npublic void store(int index, Object val)\n{\n       List cur = this;\n       List prev = null;\n \n       List node = new List(index);\n       node.val = val;\n \n       while (cur != null && cur.index < index)\n       {\n           prev = cur;\n           cur = cur.next;\n       }\n \n       if (cur == null)\n       {\n           prev.next = node;\n       } else\n       {\n           if (cur.index == index)\n           {\n               System.out.println(\"DUPLICATE\");\n               return;\n           }\n           prev.next = node;\n           node.next = cur;\n       }\n       return;\n}\npublic void store(int index, Object val)\n{\n        List cur = this;\n        List prev = null;\n \n        List node = new List(index);\n        node.val = val;\n \n        while (prev != null && prev.index < index)\n        {\n            prev = cur;\n            cur = cur.next;\n        }\n \n        if (cur == null)\n        {\n            prev.next = node;\n        } else\n        {\n            if (cur.index == index)\n            {\n                System.out.println(\"DUPLICATE\");\n                return;\n            }\n            prev.next = node;\n            node.next = cur;\n        }\n        return;\n}\npublic void store(int index, Object val)\n{\n        List cur = this;\n        List prev = null;\n \n        List node = new List(index);\n        node.val = val;\n \n        while (cur != null && cur.index < index)\n        {\n   cur = cur.next;\n            prev = cur;\n        }\n \n        if (cur == null)\n        {\n            prev.next = node;\n        } else\n        {\n            if (cur.index == index)\n            {\n                System.out.println(\"DUPLICATE\");\n                return;\n            }\n            prev.next = node;\n            node.next = cur;\n        }\n        return;\n}\npublic void store(int index, Object val)\n{\n    List cur = this;\n    List prev = null;\n \n    List node = new List(index);\n    node.val = val;\n \n    while (cur != null && prev.index < index)\n    {\n        cur = cur.next;\n        prev = cur;\n    }\n \n    if (cur == null)\n    {\n        prev.next = node;\n    } \n    else\n    {\n        if (cur.index == index)\n    {\n        System.out.println(\"DUPLICATE\");\n        return;\n    }\n    prev.next = cur;\n    node.next = node;\n    }\n    return;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following performs the fetch operation?\na)\n\nd)\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "Choose the appropriate code that counts the number of non-zero(non-null) elements in the sparse array.\na)\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "Suppose the contents of an array A are, A = {1, null, null, null, null, 10};\nWhat would be the size of the array considering it as a normal array and a sparse array?\na) 6 and 6\nb) 6 and 2\nc) 2 and 6\nd) 2 and 2\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "What is sparsity of a matrix?\na) The fraction of zero elements over the total number of elements\nb) The fraction of non-zero elements over the total number of elements\nc) The fraction of total number of elements over the zero elements\nd) The fraction of total number of elements over the non-zero elements\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "How would you store an element in a sparse matrix?\na)\n\npublic void store(int row_index, int col_index, Object val)\n{\n        if (row_index < 0 || row_index > N)\n {\n            System.out.println(\"row index out of bounds\");\n   return;\n }\n        if (col_index < 0 || col+index > N)\n {\n            System.out.println(\"column index out of bounds\");\n   return;\n }\n        sparse_array[row_index].store(col_index, val);\n}\npublic void store(int row_index, int col_index, Object val)\n{\n        if (row_index < 0 || row_index > N)\n {\n            System.out.println(\"column index out of bounds\");\n   return;\n }\n        if (col_index < 0 || col+index > N)\n {\n            System.out.println(\"row index out of bounds\");\n   return;\n }\n        sparse_array[row_index].store(col_index, val);\n}\npublic void store(int row_index, int col_index, Object val)\n{\n        if (row_index < 0 && row_index > N)\n {\n            System.out.println(\"row index out of bounds\");\n   return;\n }\n        if (col_index < 0 && col+index > N)\n {\n            System.out.println(\"column index out of bounds\");\n   return;\n }\n        sparse_array[row_index].store(col_index, val);\n    }\npublic void store(int row_index, int col_index, Object val)\n{\n        if (row_index < 0 && row_index > N)\n {\n            System.out.println(\"column index out of bounds\");\n   return;\n }\n        if (col_index < 0 && col+index > N)\n {\n            System.out.println(\"row index out of bounds\");\n   return;\n }\n        sparse_array[row_index].store(col_index, val);\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "What is the functionality of the following piece of code?\n\npublic Object function(int row_index, int col_index)\n{\n        if (row_index < 0 || col_index > N)\n {\n            System.out.println(\"column index out of bounds\");\n   return;\n }\n        return (sparse_array[row_index].fetch(col_index));\n}\n\na) Store the element in the specified position\nb) Get the element from the specified position\nc) Alter the element in the specified position\nd) Removes the element from the specified position\n\nAnswer: b"
  },
  {
    "question_number": 11,
    "input_text": "Which of the following is the disadvantage of sparse matrices over normal matrices?\na) Size\nb) Speed\nc) Easily compressible\nd) Algorithm complexity\n\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following is false?\na) Suffix array is always sorted\nb) Suffix array is used in string matching problems\nc) Suffix array is always unsorted\nd) Suffix array contains all the suffixes of the given string\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "Suffix array of the string “statistics” is ____________\na) 2 8 7 4 9 0 5 1 6 3\nb) 2 7 4 9 8 0 5 1 6 3\nc) 2 4 9 0 5 7 8 1 6 3\nd) 2 8 7 0 5 1 6 9 4 3\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Suffix array can be created by performing __________ traversal of a suffix tree.\na) breadth-first\nb) level order\nc) depth-first\nd) either breadth-first or level order\n\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "Suffix array is space efficient than the suffix tree.\na) True\nb) Fasle\n\n\nAnswer: b"
  },
  {
    "question_number": 5,
    "input_text": "If comparison based sorting algorithm is used construct the suffix array, then what will be time required to construct the suffix array?\na) O(nlogn)\nb) O(n2)\nc) O(n2logn)\nd) O(n2) + O(logn)\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "What will be the suffix array of the string “engineering”?\na) 2 3 8 4 9 1 7 5 0 6 10\nb) 5 0 6 1 4 9 1 7 0 2 3 8\nc) 5 0 6 10 2 4 9 1 7 3 8\nd) 5 0 6 10 2 3 8 4 9 1 7\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "LCP array and ______ is used to construct suffix tree.\na) Hash tree\nb) Hash trie\nc) Suffix array\nd) Balanced tree\n\n\nAnswer: c"
  },
  {
    "question_number": 8,
    "input_text": "What is the time required to locate the occurrences of a pattern P of length m in a string of length n using suffix array?\na) O(nm)\nb) O(n2)\nc) O(mnlogn)\nd) O(mlogn)\n\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "Suffix array can be created in O(nlogn) time.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "Which of the following is/are advantages suffix array one suffix tree?\nI. Lesser space requirement\nII. Improved cache locality\nIII. Easy construction in linear time\na) Only I\nb) All I, II and III\nc) Only I and III\nd) Only II and III\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "What is the order of a matrix?\na) number of rows X number of columns\nb) number of columns X number of rows\nc) number of rows X number of rows\nd) number of columns X number of columns\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following property does not hold for matrix multiplication?\na) Associative\nb) Distributive\nc) Commutative\nd) Additive Inverse\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "How do you allocate a matrix using a single pointer in C?(r and c are the number of rows and columns respectively)\na) int *arr = malloc(r * c * sizeof(int));\nb) int *arr = (int *)malloc(r * c * sizeof(int));\nc) int *arr = (int *)malloc(r + c * sizeof(int));\nd) int *arr = (int *)malloc(r * c * sizeof(arr));\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "Select the code snippet which performs matrix multiplication.(a and b are the two given matrices, resultant marix is c)\na)\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "What does the following piece of code do?\n\nfor(int i = 0; i < row; i++)\n{  \n    for(int j = 0; j < column; j++)\n    {\n        if(i == j)\n            sum = sum + (array[i][j]);\n    }\n}\nSystem.out.println(sum);\n\na) Normal of a matrix\nb) Trace of a matrix\nc) Square of a matrix\nd) Transpose of a matrix\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "If row-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "If column-major order is used, how is the following matrix stored in memory?\na b c\nd e f\ng h i\na) ihgfedcba\nb) abcdefghi\nc) cfibehadg\nd) adgbehcfi\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following don’t use matrices?\na) In solving linear equations\nb) Image processing\nc) Graph theory\nd) Sorting numbers\n\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following is an advantage of matrices?\na) Internal complexity\nb) Searching through a matrix is complex\nc) Not space efficient\nd) Graph Plotting\n\n\nAnswer: d"
  },
  {
    "question_number": 10,
    "input_text": "Matrix A when multiplied with Matrix C gives the Identity matrix I, what is C?\na) Identity matrix\nb) Inverse of A\nc) Square of A\nd) Transpose of A\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "Which matrix has most of the elements (not all) as Zero?\na) Identity Matrix\nb) Unit Matrix\nc) Sparse Matrix\nd) Zero Matrix\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "What is the relation between Sparsity and Density of a matrix?\na) Sparsity = 1 – Density\nb) Sparsity = 1 + Density\nc) Sparsity = Density*Total number of elements\nd) Sparsity = Density/Total number of elements\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "Who coined the term Sparse Matrix?\na) Harry Markowitz\nb) James Sylvester\nc) Chris Messina\nd) Arthur Cayley\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Is O(n) the Worst case Time Complexity for addition of two Sparse Matrix?\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "The matrix contains m rows and n columns. The matrix is called Sparse Matrix if ________\na) Total number of Zero elements > (m*n)/2\nb) Total number of Zero elements = m + n\nc) Total number of Zero elements = m/n\nd) Total number of Zero elements = m-n\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following is not the method to represent Sparse Matrix?\na) Dictionary of Keys\nb) Linked List\nc) Array\nd) Heap\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "Is Sparse Matrix also known as Dense Matrix?\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Which one of the following is a Special Sparse Matrix?\na) Band Matrix\nb) Skew Matrix\nc) Null matrix\nd) Unit matrix\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "In what way the Symmetry Sparse Matrix can be stored efficiently?\na) Heap\nb) Binary tree\nc) Hash table\nd) Adjacency List\n\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "What does the number of inversions in an array indicate?\na) mean value of the elements of array\nb) measure of how close or far the array is from being sorted\nc) the distribution of values in the array\nd) median value of the elements of array\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "How many inversions does a sorted array have?\na) 0\nb) 1\nc) 2\nd) cannot be determined\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "What is the condition for two elements arr[i] and arr[j] to form an inversion?\na) arr[i]<arr[j]\nb) i < j\nc) arr[i] < arr[j] and i < j\nd) arr[i] > arr[j] and i < j\n\n\nAnswer: d"
  },
  {
    "question_number": 4,
    "input_text": "Under what condition the number of inversions in an array are maximum?\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\n\n\nAnswer: b"
  },
  {
    "question_number": 5,
    "input_text": "Under what condition the number of inversions in an array are minimum?\na) when the array is sorted\nb) when the array is reverse sorted\nc) when the array is half sorted\nd) depends on the given array\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "How many inversions are there in the array arr = {1,5,4,2,3}?\na) 0\nb) 3\nc) 4\nd) 5\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following form inversion in the array arr = {1,5,4,2}?\na) (5,4), (5,2)\nb) (5,4), (5,2), (4,2)\nc) (1,5), (1,4), (1,2)\nd) (1,5)\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Choose the correct function from the following which determines the number of inversions in an array?\na)\n\nd)\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "What is the time complexity of the following code that determines the number of inversions in an array?\n\na) O(n)\nb) O(n log n)\nc) O(n2)\nd) O(log n)\n\nAnswer: c"
  },
  {
    "question_number": 10,
    "input_text": "The time complexity of the code that determines the number of inversions in an array using merge sort is lesser than that of the code that uses loops for the same purpose.\na) true\nb) false\n\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "What is the time complexity of the code that uses merge sort for determining the number of inversions in an array?\na) O(n2)\nb) O(n)\nc) O(log n)\nd) O(n log n)\n\n\nAnswer: d"
  },
  {
    "question_number": 12,
    "input_text": "What is the time complexity of the code that uses self balancing BST for determining the number of inversions in an array?\na) O(n2)\nb) O(n)\nc) O(log n)\nd) O(n log n)\n\n\nAnswer: d"
  },
  {
    "question_number": 13,
    "input_text": "The time complexity of the code that determines the number of inversions in an array using self balancing BST is lesser than that of the code that uses loops for the same purpose.\na) true\nb) false\n\n\nAnswer: a"
  },
  {
    "question_number": 14,
    "input_text": "What is the space complexity of the code that uses merge sort for determining the number of inversions in an array?\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?\na) 2, 1, 3, 4, 5\nb) 3, 4, 5, 1, 2\nc) 4, 5, 1, 2, 3\nd) 1, 2, 3, 5, 4\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "What will be the output of the following code?\n\n#include <iostream>\nusing namespace std;\nint main()\n{   \n    int arr[] = {1,2,3,4,5,6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int d=4;\n    int temp[10];\n \n    for(int i=0;i<d;i++)\n    temp[i]=arr[i];\n \n    int j=0;\n    for(int i=d;i<n;i++,j++)\n    arr[j]=arr[i];\n \n    int k=0;\n    for(int i=n-d;i<n;i++,k++)\n    arr[i]=temp[k];\n \n    for(int i=0;i<n;i++)\n    cout<<arr[i]<<\" \";\n    return 0;\n}\n\na) 5 6 1 2 3 4\nb) 6 5 4 3 1 2\nc) 3 4 5 6 1 2\nd) error\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "What will be the time complexity of the following code?\n\n#include <iostream>\nusing namespace std;\nint main()\n{   \n    int arr[] = {1,2,3,4,5,6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int d=4;\n    int temp[10];\n \n    for(int i=0;i<d;i++)\n    temp[i]=arr[i];\n \n    int j=0;\n    for(int i=d;i<n;i++,j++)\n    arr[j]=arr[i];\n \n    int k=0;\n    for(int i=n-d;i<n;i++,k++)\n    arr[i]=temp[k];\n \n    for(int i=0;i<n;i++)\n    cout<<arr[i]<<\" \";\n    return 0;\n}\n\na) O(d)\nb) O(n)\nc) O(n2)\nd) O(n*d)\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "What will be the auxiliary space complexity of the following code?\n\n#include <iostream>\nusing namespace std;\nint main()\n{   \n    int arr[] = {1,2,3,4,5,6};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    int d=4;\n    int temp[10];\n \n    for(int i=0;i<d;i++)\n    temp[i]=arr[i];\n \n    int j=0;\n    for(int i=d;i<n;i++,j++)\n    arr[j]=arr[i];\n \n    int k=0;\n    for(int i=n-d;i<n;i++,k++)\n    arr[i]=temp[k];\n \n    for(int i=0;i<n;i++)\n    cout<<arr[i]<<\" \";\n    return 0;\n}\n\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What will be the output of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func1(int arr[], int n) \n{ \n int k = arr[0], i; \n for (i = 0; i < n - 1; i++) \n  arr[i] = arr[i + 1]; \n \n arr[i] = k; \n} \n \nvoid func(int arr[], int d, int n) \n{ \n for (int i = 0; i < d; i++) \n  func1(arr, n); \n} \n \nvoid printArray(int arr[], int n) \n{ \n for (int i = 0; i < n; i++) \n  cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = { 1, 2, 3, 4, 5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n \n \n func(arr, 3, n); \n printArray(arr, n); \n \n return 0; \n}\n\na) 4 5 1 2 3\nb) 3 4 5 1 2\nc) 5 4 3 1 2\nd) error\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "What will be the time complexity of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int n) \n{ \n int k = arr[0], i; \n for (i = 0; i < n - 1; i++) \n  arr[i] = arr[i + 1]; \n \n arr[i] = k; \n} \n \nvoid func(int arr[], int d, int n) \n{ \n for (int i = 0; i < d; i++) \n  func1(arr, n); \n} \n \nvoid printArray(int arr[], int n) \n{ \n for (int i = 0; i < n; i++) \n  cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = { 1, 2, 3, 4, 5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n \n    int d = 3;\n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\n\na) O(n*d)\nb) O(n)\nc) O(d)\nd) O(n2)\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "What will be the auxiliary space complexity of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int n) \n{ \n int k = arr[0], i; \n for (i = 0; i < n - 1; i++) \n  arr[i] = arr[i + 1]; \n \n arr[i] = k; \n} \n \nvoid func(int arr[], int d, int n) \n{ \n for (int i = 0; i < d; i++) \n  func1(arr, n); \n} \n \nvoid printArray(int arr[], int n) \n{ \n for (int i = 0; i < n; i++) \n  cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = { 1, 2, 3, 4, 5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n \n    int d = 3;\n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\n\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "To rotate an array by using the algorithm of rotating its elements one by one is an in place algorithm.\na) true\nb) false\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "What will be the output of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func1(int arr[], int left, int right) \n{ \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n} \n \nvoid func(int arr[], int d, int n) \n{ \n func1(arr, 0, d-1); \n func1(arr, d, n-1); \n func1(arr, 0, n-1); \n} \n \nvoid printArray(int arr[], int size) \n{ \n for (int i = 0; i < size; i++) \n cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 2, 3, 4, 5}; \n int n = sizeof(arr)/sizeof(arr[0]); \n int d = 2; \n func(arr, d, n); \n printArray(arr, n); \n \n return 0; \n}\n\na) 3 2 1 4 5\nb) 3 4 5 1 2\nc) 5 4 3 2 1\nd) error\n\nAnswer: b"
  },
  {
    "question_number": 10,
    "input_text": "What will be the auxiliary space complexity of the code to rotate an array by using the reversal algorithm (d = number of rotations)?\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\n\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "Which of the following is the predefined function for array reversal in C++?\na) rotate()\nb) arr_rotate()\nc) array_rotate()\nd) rot()\n\n\nAnswer: a"
  },
  {
    "question_number": 12,
    "input_text": "How many arguments are required by the predefined function rotate() in C++?\na) 1\nb) 2\nc) 3\nd) 4\n\n\nAnswer: c"
  },
  {
    "question_number": 13,
    "input_text": "Predefined function rotate() in C++ is available under which header file?\na) math\nb) stdio\nc) stdlib\nd) algorithm\n\n\nAnswer: d"
  },
  {
    "question_number": 14,
    "input_text": "Which of the following algorithm to rotate an array has the maximum time complexity?\na) rotate elements one by one\nb) juggling algorithm\nc) reversal algorithm\nd) using a temporary array\n\n\nAnswer: a"
  },
  {
    "question_number": 15,
    "input_text": "What is the time complexity of the juggling algorithm to rotate an array?\na) O(1)\nb) O(n)\nc) O(d)\nd) O(n*d)\n\n\nAnswer: b"
  },
  {
    "question_number": 16,
    "input_text": "Reversal algorithm and juggling algorithm for array rotation have the same time complexity.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "What will be the resulting array after reversing arr[]={3,5,4,2}?\na) 2,3,5,4\nb) 4,2,3,5\nc) 5,4,2,3\nd) 2,4,5,3\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "How many swaps are required for reversing an array having n elements where n is an odd number?\na) (n-1) / 2\nb) n/2\nc) (n/2) – 1\nd) (n+1)/2\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "How many swaps are required for reversing an array having n elements where n is an even number?\na) (n-1) / 2\nb) n/2\nc) (n/2) – 1\nd) (n+1)/2\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "What will be the output of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n}  \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\n\na) 5 1 4 3\nb) 3 5 1 4\nc) 5 3 4 1\nd) error\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What will be the time complexity of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{ \n     while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n}  \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\n\na) O(n)\nb) O(log n)\nc) O(1)\nd) O(n log n)\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "What will be the auxiliary space requirement of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n while (left < right) \n { \n  int temp = arr[left]; \n  arr[left] = arr[right]; \n  arr[right] = temp; \n  left++; \n  right--; \n } \n \n} \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,4,3,5}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\n\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "What will be the output of the following code ?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int arr[], int left, int right) \n{ \n    if (left >= right) \n    return; \n \n    int temp = arr[left];  \n    arr[left] = arr[right]; \n    arr[right] = temp; \n \n    func(arr, left + 1, right - 1);  \n}      \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,2,3,4}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\n\na) 1 2 3 4\nb) 4 3 2 1\nc) 1 4 2 3\nd) 4 1 2 3\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "What will be the time complexity of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{ \n    if (left >= right) \n    return; \n \n    int temp = arr[left];  \n    arr[left] = arr[right]; \n    arr[right] = temp; \n \n    func(arr, left + 1, right - 1);  \n}      \n \nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1,2,3,4}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, 0, n-1); \n printArray(arr, n); \n return 0; \n}\n\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n log n)\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "What will be the output of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\n\na) 3 2 1 4 5\nb) 5 4 3 2 1\nc) 1 2 5 4 3\nd) error\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "What will be the time complexity of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int a[], int n, int k) \n{ \n if (k <= n) \n { \n  for (int i = 0; i < k/2; i++) \n  swap(a[i], a[k-i-1]); \n } \n \n} \nint main() \n{ \n int a[] = {1, 2, 3, 4, 5}; \n int n = sizeof(a) / sizeof(int), k = 3; \n func(a, n, k); \n for (int i = 0; i < n; ++i) \n  cout << a[i]<<\" \";\n return 0; \n}\n\na) O(k)\nb) O(n)\nc) O(k log k)\nd) O(n log n)\n\nAnswer: a"
  },
  {
    "question_number": 11,
    "input_text": "When array reversal and rotation is applied to the same array then the output produced will also be the same every time.\na) true\nb) false\n\n\nAnswer: b"
  },
  {
    "question_number": 12,
    "input_text": "Which of the following is the predefined function for array reversal in C++ ?\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\n\n\nAnswer: a"
  },
  {
    "question_number": 13,
    "input_text": "Which of the following is the predefined function for array reversal in javascript?\na) reverse()\nb) arr_reverse()\nc) array_reverse()\nd) rev()\n\n\nAnswer: a"
  },
  {
    "question_number": 14,
    "input_text": "Predefined function reverse() in C++ is available under which header file?\na) math\nb) stdio\nc) stdlib\nd) algorithm\n\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "What will be the minimum number of jumps required to reach the end of the array arr[] = {1,3,6,3,6,8,5}?\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "What will be the output of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nint func(int arr[], int s, int e) \n{\n   if (s == e) \n return 0; \n   if (arr[s] == 0) \n return INT_MAX; \n \nint min = INT_MAX; \nfor (int i = s + 1; i <= e && i <= s + arr[s]; i++) \n{ \n int jumps = func(arr, i, e); \n if(jumps != INT_MAX && jumps + 1 < min) \n  min = jumps + 1; \n} \nreturn min; \n}\n \nint main() \n{ \n int arr[] = {1, 3, 6, 3, 8, 5}; \n int n = sizeof(arr)/sizeof(arr[0]); \n cout << func(arr, 0, n-1); \n return 0; \n}\n\na) 1\nb) 2\nc) 3\nd) error\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "What will be the output of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nint min(int x, int y) \n{ return (x < y)? x: y; } \n \nint func(int arr[], int n) \n{ \n \n int *jump = new int[n]; \n int i, j; \n \n if (n == 0 || arr[0] == 0) \n  return INT_MAX; \n \n jump[0] = 0; \n \n for (i = 1; i < n; i++) \n { \n  jump[i] = INT_MAX; \n  for (j = 0; j < i; j++) \n  { \n   if (i <= j + arr[j] && jump[j] != INT_MAX) \n   { \n    jump[i] = min(jump[i], jump[j] + 1); \n    break; \n   } \n  } \n } \n return jump[n-1]; \n} \n \nint main() \n{ \n int arr[] = {1, 3, 6, 1, 9,7}; \n int size = sizeof(arr)/sizeof(int); \n cout<< func(arr,size); \n return 0; \n}\n\na) 1\nb) 2\nc) 3\nd) error\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "What will be the time complexity of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nint min(int x, int y) \n{ return (x < y)? x: y; } \n \nint func(int arr[], int n) \n{ \n \n int *jump = new int[n]; \n int i, j; \n \n if (n == 0 || arr[0] == 0) \n  return INT_MAX; \n \n jump[0] = 0; \n \n for (i = 1; i < n; i++) \n { \n  jump[i] = INT_MAX; \n  for (j = 0; j < i; j++) \n  { \n   if (i <= j + arr[j] && jumps[j] != INT_MAX) \n   { \n    jump[i] = min(jump[i], jump[j] + 1); \n    break; \n   } \n  } \n } \n return jump[n-1]; \n} \n \nint main() \n{ \n int arr[] = {1, 3, 6, 1, 9,7}; \n int size = sizeof(arr)/sizeof(int); \n cout<< func(arr,size); \n return 0; \n}\n\na) O(n log n)\nb) O(n)\nc) O(n1/2)\nd) O(n2)\n\nAnswer: d"
  },
  {
    "question_number": 6,
    "input_text": "What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?\na) 1\nb) 2\nc) 3\nd) not possible to reach the end\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "It is not possible to find the minimum number of steps to reach the end of an array in linear time.\na) true\nb) false\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "In how many different ways we can reach the end of the array arr[]={1,3,5,8,9}?\na) 1\nb) 2\nc) 3\nd) 4\n\n\nAnswer: d"
  },
  {
    "question_number": 9,
    "input_text": "What will be the output of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int arr[], int n) \n{  \n int count[n]; \n memset(count, 0, sizeof(count)); \n \n for (int i=n-2; i>=0; i--) \n { \n  if (arr[i] >= n - i - 1) \n   count[i]++; \n \n  for (int j=i+1; j < n-1 && j <= arr[i] + i; j++) \n \n   if (count[j] != -1) \n    count[i] += count[j]; \n \n  if (count[i] == 0) \n   count[i] = -1; \n } \n \n for (int i=0; i<n; i++) \n  cout << count[i] << \" \"; \n} \n \nint main() \n{ \n int arr[] = {1, 3, 5, 8, 9}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, n); \n return 0; \n}\n\na) 3\nb) 4\nc) 4 4 2 1 0\nd) 4 2 2 0 1\n\nAnswer: c"
  },
  {
    "question_number": 10,
    "input_text": "What will be the worst case time complexity of the following code?\n\n#include <bits/stdc++.h> \nusing namespace std; \n \nvoid func(int arr[], int n) \n{   \n int count[n]; \n memset(count, 0, sizeof(count)); \n \n for (int i=n-2; i>=0; i--) \n { \n  if (arr[i] >= n - i - 1) \n   count[i]++; \n \n  for (int j=i+1; j < n-1 && j <= arr[i] + i; j++) \n \n   if (count[j] != -1) \n    count[i] += count[j]; \n \n  if (count[i] == 0) \n   count[i] = -1; \n } \n \n for (int i=0; i<n; i++) \n  cout << count[i] << \" \"; \n} \n \n \nint main() \n{ \n int arr[] = {1, 3, 5, 8, 9}; \n int n = sizeof(arr) / sizeof(arr[0]); \n func(arr, n); \n return 0; \n}\n\na) O(n1/2)\nb) O(n)\nc) O(n3/2)\nd) O(n2)\n\nAnswer: d"
  },
  {
    "question_number": 11,
    "input_text": ": It is not possible to reach the end of an array if starting element of the array is 0.\na) true\nb) false\n\n\nAnswer: a"
  },
  {
    "question_number": 12,
    "input_text": "What is the minimum possible time complexity to find the number of steps to reach the end of an array?\na) O(n)\nb) O(n2)\nc) O(n3/2)\nd) O(1)\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "What is a skip list?\na) a linkedlist with size value in nodes\nb) a linkedlist that allows faster search within an ordered sequence\nc) a linkedlist that allows slower search within an ordered sequence\nd) a tree which is in the form of linked list\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "Skip lists are similar to which of the following datastructure?\na) stack\nb) heap\nc) binary search tree\nd) balanced binary search tree\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "What is the time complexity improvement of skip lists from linked lists in insertion and deletion?\na) O(n) to O(logn) where n is number of elements\nb) O(n) to O(1) where n is number of elements\nc) no change\nd) O(n) to O(n2) where n is number of elements\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "To which datastructure are skip lists similar to in terms of time complexities in worst and best cases?\na) balanced binary search trees\nb) binary search trees\nc) binary trees\nd) linked lists\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "The nodes in a skip list may have many forward references. their number is determined\na) probabilistically\nb) randomly\nc) sequentially\nd) orthogonally\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Are the below statements true about skiplists?\nIn a sorted set of elements skip lists can implement the below operations\ni.given a element find closest element to the given value in the sorted set in O(logn)\nii.find the number of elements in the set whose values fall a given range in O(logn)\na) true\nb) false\n\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "How to maintain multi-level skip list properties when insertions and deletions are done?\na) design each level of a multi-level skip list with varied probabilities\nb) that cannot be maintained\nc) rebalancing of lists\nd) reconstruction\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Is a skip list like balanced tree?\na) true\nb) false\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "What is indexed skip list?\na) it stores width of link in place of element\nb) it stores index values\nc) array based linked list\nd) indexed tree\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "The self organizing list improves the efficiency of _______\na) binary search\nb) jump search\nc) sublist search\nd) linear search\n\n\nAnswer: d"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following is true about the Move-To-Front Method for rearranging nodes?\na) node with highest access count is moved to head of the list\nb) requires extra storage\nc) may over-reward infrequently accessed nodes\nd) requires a counter for each node\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "What technique is used in Transpose method?\na) searched node is swapped with its predecessor\nb) node with highest access count is moved to head of the list\nc) searched node is swapped with the head of list\nd) searched nodes are rearranged based on their proximity to the head node\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "The worst case running time of a linear search on the self organizing list is ____\na) O(1)\nb) O(logn)\nc) O(n)\nd) O(n2)\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following data structure is preferred to have lesser search time when the list size is small?\na) search tree\nb) sorted list\nc) self organizing list\nd) linked list\n\n\nAnswer: c"
  },
  {
    "question_number": 6,
    "input_text": "In _____________ method, whenever a node is accessed, it might move to the head of the list if its number of accesses becomes greater than the records preceding it.\na) least recently used\nb) count\nc) traspose\nd) exchange\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "Symbol tables during compilation of program is efficiently implemented using __________\na) a singly linked list\nb) a doubly linked list\nc) a self organizing list\nd) an array\n\n\nAnswer: c"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following method performs poorly when elements are accessed in sequential order?\na) count method\nb) move to front method\nc) transpose meth\nd) ordering method\n\n\nAnswer: b"
  },
  {
    "question_number": 9,
    "input_text": "The self organizing list improves _____\na) average access time\nb) insertion\nc) deletion\nd) binary search\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "Which of the following is not the rearranging method used to implement self-organizing lists?\na) count method\nb) move to front method\nc) ordering method\nd) least frequently used\n\n\nAnswer: d"
  },
  {
    "question_number": 1,
    "input_text": "An unrolled linked list consists of which of the following data structures?\na) Linked-list and array\nb) Linked-list and stack\nc) Stack and array\nd) Array and queue\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "What happens if a node cannot fit an element in an unrolled linked list?\na) The element is discarded\nb) The elements are moved to the next node\nc) The node is discarded\nd) Error message is shown\n\n\nAnswer: b"
  },
  {
    "question_number": 3,
    "input_text": "The algorithm given is for deleting an element in an unrolled linked list. What should be the correct statement for the blank given below?\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Insertion and deletion are much faster in an unrolled linked list than in a singly linked list.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "Which among the following is a typical declaration of an unrolled linked list in C?\na)\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Unrolled linked-list requires more storage space for pointers compared to a singly linked list.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "Which of the following represents the space complexity for an unrolled linked list?\na) O(1)\nb) O(n)\nc) O(n2)\nd) O(n3)\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following is a drawback of an unrolled linked list?\na) Small memory overhead\nb) Cache management\nc) High overhead per node\nd) Slow insertion and deletion\n\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "Which among the following is the time complexity for inserting an element in an unrolled linked list?\na) O(1)\nb) O(n)\nc) O(log n)\nd) O(n2)\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "What is xor linked list?\na) uses of bitwise XOR operation to decrease storage requirements for doubly linked lists\nb) uses of bitwise XOR operation to decrease storage requirements for linked lists\nc) uses of bitwise operations to decrease storage requirements for doubly linked lists\nd) just another form of linked list\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "What does a xor linked list have?\na) every node stores the XOR of addresses of previous and next nodes\nb) actuall memory address of next node\nc) every node stores the XOR of addresses of previous and next two nodes\nd) every node stores xor 0 and the current node address\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "What does first and last nodes of a xor linked lists contain ? (let address of first and last be A and B)\na) NULL xor A and B xor NULL\nb) NULL and NULL\nc) A and B\nd) NULL xor A and B\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following is an advantage of XOR list?\na) Almost of debugging tools cannot follow the XOR chain, making debugging difficult\nb) You need to remember the address of the previously accessed node in order to calculate the next node’s address\nc) In some contexts XOR of pointers is not defined\nd) XOR list decreases the space requirement in doubly linked list\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "Which of the following is not the properties of XOR lists?\na) X⊕X = 0\nb) X⊕0 = X\nc) (X⊕Y)⊕Z = X⊕(Y⊕Z)\nd) X⊕0 = 1\n\n\nAnswer: d"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following statements are true?\ni) practical application of XOR linked lists are in environments with limited space requirements, such as embedded devices.\nii)xor lists are not suitable because most garbage collectors will fail to work properly with classes or structures that don’t contain literal pointers\niii)in order to calculate the address of the next node you need to remember the address of the previous node\niv)xor lists are much efficient than single, doubly linked lists and arrays\na) i, ii, iii, iv\nb) i, ii, iii\nc) i, ii\nd) i\n\n\nAnswer: b"
  },
  {
    "question_number": 7,
    "input_text": "What’s wrong with this code which returns xor of two nodes address ?\n\na) nothing wrong. everything is fine\nb) type casting at return is missing\nc) parameters are wrong\nd) total logic is wrong\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Given 10,8,6,7,9\nswap the above numbers such that finally you got 6,7,8,9,10\nso now reverse 10\n9,7,6,8,10\nnow reverse 9\n8,6,7,9,10\n7,6,8,9,10\n6,7,8,9,10\nat this point 6 is ahead so no more reversing can be done so stop.\nTo implement above algorithm which datastructure is better and why ?\na) linked list. because we can swap elements easily\nb) arrays. because we can swap elements easily\nc) xor linked list. because there is no overhead of pointers and so memory is saved\nd) doubly linked list. because you can traverse back and forth\n\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "Consider the following pseudocode of insertion in XOR list and write the approximate code snippet of it.\n\nvoid xor-linked-list insert(struct node **head_ref, int value)\n{\n    node *new_node  = new (struct node);\n    new_node->value = value;\n    new_node->nodepointerxored = xor (*head_ref, NULL);\n    if (*head_pointer == NULL)\n    {\n        printf(\"invalid\");\n    }\n    else\n    {\n        let b,c,d are nodes and a is to be inserted at beginning,\n        a address field must contain NULL xor b and b \n        address filed must be a xor c.\n    }\n    *head_pointer = new_node;\n}\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "In the above question would using arrays and swaping of elements in place of xor linked list would have been more efficient?\na) no not all\nb) yes arrays would have been better than xor lists\nc) both would be same in efficiency\nd) can’t say\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "Free lists are used in\na) static memory allocation\nb) dynamic memory allocation\nc) contagious allocations\nd) are used for speeding up linked list operations\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "What are implicit and explicit implementations of freelists?\na) garbage collection and new or malloc operators respectively\nb) new or malloc and garbage collection respectively\nc) implicit implementation is not favored\nd) explicit implementation is not favored\n\n\nAnswer: a"
  },
  {
    "question_number": 3,
    "input_text": "What datastructures can be used in implementing a free list?\na) only linked list\nb) linked list or sort trees\nc) arrays\nd) trees\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "What are different ways of implementing free lists and which is simple among them?\na) best fit, first fit, worst fit, simple-first fit\nb) best fit, first fit, worst fit, simple-best fit\nc) best fit, first fit, worst fit, simple-worst fit\nd) best fit simple-best fit\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "What is buddy memory management of free lists ?\na) modified version of first fit\nb) buddy allocation keeps several‭ ‬free lists,‭ ‬each one holds blocks which are of one particular size\nc) modified version of best fit\nd) a tree representation of free lists\n\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "How does implicit free lists(garbage collection) works in adding memory to free list ?\na) whichever comes last will be added to free list\nb) whichever comes first will be added to free list\nc) certain blocks cannot be used if there are no pointers to them and hence they can be freed\nd) makes a probabilistic guess\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "What are the disadvantages in implementing buddy system algorithm for free lists?\na) internal fragmentation\nb) it takes so much space\nc) we no more have the hole lists in order of memory address, so it is difficult to detect if 2 holes remain adjacent in memory and shall be merged into one hole\nd) both a and c are correct\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "Assume there is a free list which contains nodes and is filled with a value if it is already assigned and the value will be the size of requested block else will be 0.\n\nThe above code represents what?\na) code for first fit\nb) code for best fit\nc) code for worst fit\nd) none of the mentioned\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "How are free blocks linked together mostly and in what addressing order?\na) circular linked list and increasing addressing order\nb) linked list and decreasing addressing order\nc) linked list and in no addressing order\nd) none of the mentioned\n\n\nAnswer: a"
  },
  {
    "question_number": 10,
    "input_text": "Accessing free list very frequently for wide range of addresses can lead to\na) paging\nb) segmentation fault\nc) memory errors\nd) cache problems\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "Where does a triply linked list contains an extra pointer in comparison to a doubly linked list?\na) Top of the node\nb) Bottom of the node\nc) Before the node\nd) After the node\n\n\nAnswer: a"
  },
  {
    "question_number": 2,
    "input_text": "For which of the following purpose a top pointer can be used?\na) Storing the address of the head pointer\nb) Storing the address of the previous node\nc) Storing the address of the next node\nd) Storing equal values on the same level\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "Which of the following is a typical declaration of a triply linked list in C?\na)\n\nd)\n\nAnswer: c"
  },
  {
    "question_number": 4,
    "input_text": "Suppose, in a triply linked list, the elements 2, 3, 3, 5, 5, 5 and 6 are inserted in the given sequence. To which of the following elements will the top pointer point, if the linked list is traversed starting from the head?\na)\n2\n3top→3\n5top→5\n5top→6\n\nb)\n2top→3\n3top→5\n5\n5top→6\n\nc)\n2\n3top→3\n5top→5top→5\n6\n\nd)\n2top→3top→3top→5\n5\n5\n6"
  },
  {
    "question_number": 5,
    "input_text": "A node will be rejected while inserting if the given node is already present in a triply linked list.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following is true about a triply linked list?\na) Dynamic in nature\nb) Allows random access\nc) Less memory wastage\nd) Reverse traversing is difficult\n\n\nAnswer: a"
  },
  {
    "question_number": 7,
    "input_text": "Memory usage in triply linked list is higher than doubly linked list.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Consider the following algorithm to insert an element in a triply linked list.\n\ninitializing previous, next and top pointers to null\n    pointing the head and tail to the node created\npointing previous, next and top pointers to the node created\n    initializing the head and tail to null\ninitializing previous, next and top pointers to null\n    initializing the head and tail to null\npointing previous, next and top pointers to the node\n\nd)\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "Which among the following is the time complexity for inserting at the beginning of a triply linked list?\na) O(n)\nb) O(1)\nc) O(log n)\nd) O(n2)\n\n\nAnswer: b"
  },
  {
    "question_number": 1,
    "input_text": "Which of the following is the most widely used external memory data structure?\na) AVL tree\nb) B-tree\nc) Red-black tree\nd) Both AVL tree and Red-black tree\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "B-tree of order n is a order-n multiway tree in which each non-root node contains __________\na) at most (n – 1)/2 keys\nb) exact (n – 1)/2 keys\nc) at least 2n keys\nd) at least (n – 1)/2 keys\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "A B-tree of order 4 and of height 3 will have a maximum of _______ keys.\na) 255\nb) 63\nc) 127\nd) 188\n\n\nAnswer: a"
  },
  {
    "question_number": 4,
    "input_text": "Five node splitting operations occurred when an entry is inserted into a B-tree. Then how many nodes are written?\na) 14\nb) 7\nc) 11\nd) 5\n\n\nAnswer: c"
  },
  {
    "question_number": 5,
    "input_text": "B-tree and AVL tree have the same worst case time complexity for insertion and deletion.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "2-3-4 trees are B-trees of order 4. They are an isometric of _____ trees.\na) AVL\nb) AA\nc) 2-3\nd) Red-Black\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "What is the best case height of a B-tree of order n and which has k keys?\na) logn (k+1) – 1\nb) nk\nc) logk (n+1) – 1\nd) klogn\n\n\nAnswer: a"
  },
  {
    "question_number": 8,
    "input_text": "Compression techniques can be used on the keys to reduce both space and time requirements in a B-tree.\na) True\nb) False\n\n\nAnswer: a"
  },
  {
    "question_number": 9,
    "input_text": "Which of the following is true?\na) larger the order of B-tree, less frequently the split occurs\nb) larger the order of B-tree, more frequently the split occurs\nc) smaller the order of B-tree, more frequently the split occurs\nd) smaller the order of B-tree, less frequently the split occurs\n\n\nAnswer: a"
  },
  {
    "question_number": 1,
    "input_text": "In a B+ tree, both the internal nodes and the leaves have keys.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 2,
    "input_text": "Which of the following is true?\na) B + tree allows only the rapid random access\nb) B + tree allows only the rapid sequential access\nc) B + tree allows rapid random access as well as rapid sequential access\nd) B + tree allows rapid random access and slower sequential access\n\n\nAnswer: c"
  },
  {
    "question_number": 3,
    "input_text": "A B+ tree can contain a maximum of 7 pointers in a node. What is the minimum number of keys in leaves?\na) 6\nb) 3\nc) 4\nd) 7\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following is false?\na) A B+ -tree grows downwards\nb) A B+ -tree is balanced\nc) In a B+ -tree, the sibling pointers allow sequential searching\nd) B+ -tree is shallower than B-tree\n\n\nAnswer: a"
  },
  {
    "question_number": 5,
    "input_text": "Statement 1: When a node is split during insertion, the middle key is promoted to the parent as well as retained in right half-node.\nStatement 2: When a key is deleted from the leaf, it is also deleted from the non-leaf nodes of the tree.\na) Statement 1 is true but statement 2 is false\nb) Statement 2 is true but statement 1 is false\nc) Both the statements are true\nd) Both the statements are false\n\n\nAnswer: a"
  },
  {
    "question_number": 6,
    "input_text": "Efficiency of finding the next record in B+ tree is ____\na) O(n)\nb) O(log n)\nc) O(nlog n)\nd) O(1)\n\n\nAnswer: d"
  },
  {
    "question_number": 7,
    "input_text": "What is the maximum number of keys that a B+ -tree of order 3 and of height 3 have?\na) 3\nb) 80\nc) 27\nd) 26\n\n\nAnswer: d"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following is false?\na) Compared to B-tree, B+ -tree has larger fanout\nb) Deletion in B-tree is more complicated than in B+ -tree\nc) B+ -tree has greater depth than corresponding B-tree\nd) Both B-tree and B+ -tree have same search and insertion efficiencies\n\n\nAnswer: c"
  },
  {
    "question_number": 9,
    "input_text": "Which one of the following data structures are preferred in database-system implementation?\na) AVL tree\nb) B-tree\nc) B+ -tree\nd) Splay tree\n\n\nAnswer: c"
  },
  {
    "question_number": 1,
    "input_text": "2-3 tree is a specific form of _________\na) B – tree\nb) B+ – tree\nc) AVL tree\nd) Heap\n\n\nAnswer: c"
  },
  {
    "question_number": 2,
    "input_text": "The height of 2-3 tree with n elements is ______\na) between (n/2) and (n/3)\nb) (n/6)\nc) between (n) and log2(n + 1)\nd) between log3(n + 1) and log2(n + 1)\n\n\nAnswer: d"
  },
  {
    "question_number": 3,
    "input_text": "Which of the following the BST is isometric with the 2-3 tree?\na) Splay tree\nb) AA tree\nc) Heap\nd) Red – Black tree\n\n\nAnswer: b"
  },
  {
    "question_number": 4,
    "input_text": "Which of the following data structure can provide efficient searching of the elements?\na) unordered lists\nb) binary search tree\nc) treap\nd) 2-3 tree\n\n\nAnswer: d"
  },
  {
    "question_number": 5,
    "input_text": "LLRB maintains 1-1 correspondence with 2–3 trees.\na) True\nb) False"
  },
  {
    "question_number": 6,
    "input_text": "Which of the following is not true about the 2-3 tree?\na) all leaves are at the same level\nb) it is perfectly balanced\nc) postorder traversal yields elements in sorted order\nd) it is B-tree of order 3\n\n\nAnswer: c"
  },
  {
    "question_number": 7,
    "input_text": "AVL trees provide better insertion the 2-3 trees.\na) True\nb) False\n\n\nAnswer: b"
  },
  {
    "question_number": 8,
    "input_text": "Which of the following is false?\na) 2-3 tree requires less storage than the BST\nb) lookup in 2-3 tree is more efficient than in BST\nc) 2-3 tree is shallower than BST\nd) 2-3 tree is a balanced tree\n\n\nAnswer: a"
  }
]